   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.globl	key
   5              		.section	.rodata
   6              		.align 8
   7              	.LC0:
   8 0000 31313030 		.string	"11001100110011001100110011000001"
   8      31313030 
   8      31313030 
   8      31313030 
   8      31313030 
   9              		.data
  10              		.align 8
  13              	key:
  14 0000 00000000 		.quad	.LC0
  14      00000000 
  15              		.comm	line1,100,32
  16              		.globl	ack1
  17              		.section	.rodata
  18 0021 00000000 		.align 8
  18      000000
  19              	.LC1:
  20 0028 31313131 		.string	"11110000111100001111000011110000"
  20      30303030 
  20      31313131 
  20      30303030 
  20      31313131 
  21              		.data
  22              		.align 8
  25              	ack1:
  26 0008 00000000 		.quad	.LC1
  26      00000000 
  27              		.globl	ack2
  28              		.section	.rodata
  29 0049 00000000 		.align 8
  29      000000
  30              	.LC2:
  31 0050 30303030 		.string	"00001111000011110000111100001111"
  31      31313131 
  31      30303030 
  31      31313131 
  31      30303030 
  32              		.data
  33              		.align 8
  36              	ack2:
  37 0010 00000000 		.quad	.LC2
  37      00000000 
  38              		.local	ptr
  39              		.comm	ptr,8,8
  40              		.local	enableBenchmarking
  41              		.comm	enableBenchmarking,1,1
  42              		.text
  44              	isHexDigit:
  45              	.LFB4:
  46              		.file 1 "main.c"
   1:main.c        **** /* 
   2:main.c        ****  * Copyright (C) 2012-2014 Chris McClelland
   3:main.c        ****  * This program is free software: you can redistribute it and/or modify
   4:main.c        ****  * it under the terms of the GNU General Public License as published by
   5:main.c        ****  * the Free Software Foundation, either version 3 of the License, or
   6:main.c        ****  * (at your option) any later version.
   7:main.c        ****  * This program is distributed in the hope that it will be useful,
   8:main.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:main.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:main.c        ****  * GNU General Public License for more details.
  11:main.c        ****  * You should have received a copy of the GNU General Public License
  12:main.c        ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:main.c        ****  */
  14:main.c        **** #include <stdio.h>
  15:main.c        **** #include <stdlib.h>
  16:main.c        **** #include <string.h>
  17:main.c        **** #include <errno.h>
  18:main.c        **** #include <makestuff.h>
  19:main.c        **** #include <libfpgalink.h>
  20:main.c        **** #include <libbuffer.h>
  21:main.c        **** #include <liberror.h>
  22:main.c        **** #include <libdump.h>
  23:main.c        **** #include <argtable2.h>
  24:main.c        **** #include <readline/readline.h>
  25:main.c        **** #include <readline/history.h>
  26:main.c        **** #ifdef WIN32
  27:main.c        **** #include <Windows.h>
  28:main.c        **** #else
  29:main.c        **** #include <sys/time.h>
  30:main.c        **** #endif
  31:main.c        **** 
  32:main.c        **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  33:main.c        **** // global declarations 
  34:main.c        **** char* key="11001100110011001100110011000001"; // initialise it 
  35:main.c        **** char line1[100];
  36:main.c        **** char* ack1="11110000111100001111000011110000"; 
  37:main.c        **** char* ack2="00001111000011110000111100001111"; 
  38:main.c        **** 
  39:main.c        **** 
  40:main.c        **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  41:main.c        **** 
  42:main.c        **** 
  43:main.c        **** bool sigIsRaised(void);
  44:main.c        **** void sigRegisterHandler(void);
  45:main.c        **** 
  46:main.c        **** static const char *ptr;
  47:main.c        **** static bool enableBenchmarking = false;
  48:main.c        **** 
  49:main.c        **** static bool isHexDigit(char ch) {
  47              		.loc 1 49 0
  48              		.cfi_startproc
  49 0000 55       		pushq	%rbp
  50              		.cfi_def_cfa_offset 16
  51              		.cfi_offset 6, -16
  52 0001 4889E5   		movq	%rsp, %rbp
  53              		.cfi_def_cfa_register 6
  54 0004 89F8     		movl	%edi, %eax
  55 0006 8845FC   		movb	%al, -4(%rbp)
  50:main.c        **** 	return
  51:main.c        **** 		(ch >= '0' && ch <= '9') ||
  52:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  56              		.loc 1 52 0
  57 0009 807DFC2F 		cmpb	$47, -4(%rbp)
  58 000d 7E06     		jle	.L2
  51:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  59              		.loc 1 51 0
  60 000f 807DFC39 		cmpb	$57, -4(%rbp)
  61 0013 7E18     		jle	.L3
  62              	.L2:
  51:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  63              		.loc 1 51 0 is_stmt 0 discriminator 1
  64 0015 807DFC60 		cmpb	$96, -4(%rbp)
  65 0019 7E06     		jle	.L4
  66              		.loc 1 52 0 is_stmt 1
  67 001b 807DFC66 		cmpb	$102, -4(%rbp)
  68 001f 7E0C     		jle	.L3
  69              	.L4:
  70              		.loc 1 52 0 is_stmt 0 discriminator 2
  71 0021 807DFC40 		cmpb	$64, -4(%rbp)
  72 0025 7E0D     		jle	.L5
  53:main.c        **** 		(ch >= 'A' && ch <= 'F');
  73              		.loc 1 53 0 is_stmt 1
  74 0027 807DFC46 		cmpb	$70, -4(%rbp)
  75 002b 7F07     		jg	.L5
  76              	.L3:
  52:main.c        **** 		(ch >= 'A' && ch <= 'F');
  77              		.loc 1 52 0 discriminator 1
  78 002d B8010000 		movl	$1, %eax
  78      00
  79 0032 EB05     		jmp	.L6
  80              	.L5:
  52:main.c        **** 		(ch >= 'A' && ch <= 'F');
  81              		.loc 1 52 0 is_stmt 0 discriminator 3
  82 0034 B8000000 		movl	$0, %eax
  82      00
  83              	.L6:
  51:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  84              		.loc 1 51 0 is_stmt 1
  85 0039 83E001   		andl	$1, %eax
  54:main.c        **** }
  86              		.loc 1 54 0
  87 003c 5D       		popq	%rbp
  88              		.cfi_def_cfa 7, 8
  89 003d C3       		ret
  90              		.cfi_endproc
  91              	.LFE4:
  94              	calcChecksum:
  95              	.LFB5:
  55:main.c        **** 
  56:main.c        **** static uint16 calcChecksum(const uint8 *data, size_t length) {
  96              		.loc 1 56 0
  97              		.cfi_startproc
  98 003e 55       		pushq	%rbp
  99              		.cfi_def_cfa_offset 16
 100              		.cfi_offset 6, -16
 101 003f 4889E5   		movq	%rsp, %rbp
 102              		.cfi_def_cfa_register 6
 103 0042 48897DE8 		movq	%rdi, -24(%rbp)
 104 0046 488975E0 		movq	%rsi, -32(%rbp)
  57:main.c        **** 	uint16 cksum = 0x0000;
 105              		.loc 1 57 0
 106 004a 66C745FE 		movw	$0, -2(%rbp)
 106      0000
  58:main.c        **** 	while ( length-- ) {
 107              		.loc 1 58 0
 108 0050 EB16     		jmp	.L9
 109              	.L10:
  59:main.c        **** 		cksum = (uint16)(cksum + *data++);
 110              		.loc 1 59 0
 111 0052 488B45E8 		movq	-24(%rbp), %rax
 112 0056 488D5001 		leaq	1(%rax), %rdx
 113 005a 488955E8 		movq	%rdx, -24(%rbp)
 114 005e 0FB600   		movzbl	(%rax), %eax
 115 0061 0FB6C0   		movzbl	%al, %eax
 116 0064 660145FE 		addw	%ax, -2(%rbp)
 117              	.L9:
  58:main.c        **** 	while ( length-- ) {
 118              		.loc 1 58 0
 119 0068 488B45E0 		movq	-32(%rbp), %rax
 120 006c 488D50FF 		leaq	-1(%rax), %rdx
 121 0070 488955E0 		movq	%rdx, -32(%rbp)
 122 0074 4885C0   		testq	%rax, %rax
 123 0077 75D9     		jne	.L10
  60:main.c        **** 	}
  61:main.c        **** 	return cksum;
 124              		.loc 1 61 0
 125 0079 0FB745FE 		movzwl	-2(%rbp), %eax
  62:main.c        **** }
 126              		.loc 1 62 0
 127 007d 5D       		popq	%rbp
 128              		.cfi_def_cfa 7, 8
 129 007e C3       		ret
 130              		.cfi_endproc
 131              	.LFE5:
 134              	getHexNibble:
 135              	.LFB6:
  63:main.c        **** 
  64:main.c        **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
 136              		.loc 1 64 0
 137              		.cfi_startproc
 138 007f 55       		pushq	%rbp
 139              		.cfi_def_cfa_offset 16
 140              		.cfi_offset 6, -16
 141 0080 4889E5   		movq	%rsp, %rbp
 142              		.cfi_def_cfa_register 6
 143 0083 89F8     		movl	%edi, %eax
 144 0085 488975F0 		movq	%rsi, -16(%rbp)
 145 0089 8845FC   		movb	%al, -4(%rbp)
  65:main.c        **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
 146              		.loc 1 65 0
 147 008c 807DFC2F 		cmpb	$47, -4(%rbp)
 148 0090 7E1A     		jle	.L13
 149              		.loc 1 65 0 is_stmt 0 discriminator 1
 150 0092 807DFC39 		cmpb	$57, -4(%rbp)
 151 0096 7F14     		jg	.L13
  66:main.c        **** 		*nibble = (uint8)(hexDigit - '0');
 152              		.loc 1 66 0 is_stmt 1
 153 0098 0FB645FC 		movzbl	-4(%rbp), %eax
 154 009c 8D50D0   		leal	-48(%rax), %edx
 155 009f 488B45F0 		movq	-16(%rbp), %rax
 156 00a3 8810     		movb	%dl, (%rax)
  67:main.c        **** 		return false;
 157              		.loc 1 67 0
 158 00a5 B8000000 		movl	$0, %eax
 158      00
 159 00aa EB45     		jmp	.L14
 160              	.L13:
  68:main.c        **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
 161              		.loc 1 68 0
 162 00ac 807DFC60 		cmpb	$96, -4(%rbp)
 163 00b0 7E1A     		jle	.L15
 164              		.loc 1 68 0 is_stmt 0 discriminator 1
 165 00b2 807DFC66 		cmpb	$102, -4(%rbp)
 166 00b6 7F14     		jg	.L15
  69:main.c        **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
 167              		.loc 1 69 0 is_stmt 1
 168 00b8 0FB645FC 		movzbl	-4(%rbp), %eax
 169 00bc 8D50A9   		leal	-87(%rax), %edx
 170 00bf 488B45F0 		movq	-16(%rbp), %rax
 171 00c3 8810     		movb	%dl, (%rax)
  70:main.c        **** 		return false;
 172              		.loc 1 70 0
 173 00c5 B8000000 		movl	$0, %eax
 173      00
 174 00ca EB25     		jmp	.L14
 175              	.L15:
  71:main.c        **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
 176              		.loc 1 71 0
 177 00cc 807DFC40 		cmpb	$64, -4(%rbp)
 178 00d0 7E1A     		jle	.L16
 179              		.loc 1 71 0 is_stmt 0 discriminator 1
 180 00d2 807DFC46 		cmpb	$70, -4(%rbp)
 181 00d6 7F14     		jg	.L16
  72:main.c        **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
 182              		.loc 1 72 0 is_stmt 1
 183 00d8 0FB645FC 		movzbl	-4(%rbp), %eax
 184 00dc 8D50C9   		leal	-55(%rax), %edx
 185 00df 488B45F0 		movq	-16(%rbp), %rax
 186 00e3 8810     		movb	%dl, (%rax)
  73:main.c        **** 		return false;
 187              		.loc 1 73 0
 188 00e5 B8000000 		movl	$0, %eax
 188      00
 189 00ea EB05     		jmp	.L14
 190              	.L16:
  74:main.c        **** 	} else {
  75:main.c        **** 		return true;
 191              		.loc 1 75 0
 192 00ec B8010000 		movl	$1, %eax
 192      00
 193              	.L14:
  76:main.c        **** 	}
  77:main.c        **** }
 194              		.loc 1 77 0
 195 00f1 5D       		popq	%rbp
 196              		.cfi_def_cfa 7, 8
 197 00f2 C3       		ret
 198              		.cfi_endproc
 199              	.LFE6:
 201              		.section	.rodata
 202              	.LC3:
 203 0071 20616674 		.string	" after dump \n "
 203      65722064 
 203      756D7020 
 203      0A2000
 204              		.text
 206              	getHexByte:
 207              	.LFB7:
  78:main.c        **** 
  79:main.c        **** static int getHexByte(uint8 *byte) {
 208              		.loc 1 79 0
 209              		.cfi_startproc
 210 00f3 55       		pushq	%rbp
 211              		.cfi_def_cfa_offset 16
 212              		.cfi_offset 6, -16
 213 00f4 4889E5   		movq	%rsp, %rbp
 214              		.cfi_def_cfa_register 6
 215 00f7 4883EC20 		subq	$32, %rsp
 216 00fb 48897DE8 		movq	%rdi, -24(%rbp)
 217              		.loc 1 79 0
 218 00ff 64488B04 		movq	%fs:40, %rax
 218      25280000 
 218      00
 219 0108 488945F8 		movq	%rax, -8(%rbp)
 220 010c 31C0     		xorl	%eax, %eax
  80:main.c        **** 	uint8 upperNibble;
  81:main.c        **** 	uint8 lowerNibble;
  82:main.c        **** 	if ( !getHexNibble(ptr[0], &upperNibble) && !getHexNibble(ptr[1], &lowerNibble) ) {
 221              		.loc 1 82 0
 222 010e 488B0500 		movq	ptr(%rip), %rax
 222      000000
 223 0115 0FB600   		movzbl	(%rax), %eax
 224 0118 0FBEC0   		movsbl	%al, %eax
 225 011b 488D55F6 		leaq	-10(%rbp), %rdx
 226 011f 4889D6   		movq	%rdx, %rsi
 227 0122 89C7     		movl	%eax, %edi
 228 0124 E856FFFF 		call	getHexNibble
 228      FF
 229 0129 83F001   		xorl	$1, %eax
 230 012c 84C0     		testb	%al, %al
 231 012e 744C     		je	.L18
 232              		.loc 1 82 0 is_stmt 0 discriminator 1
 233 0130 488B0500 		movq	ptr(%rip), %rax
 233      000000
 234 0137 4883C001 		addq	$1, %rax
 235 013b 0FB600   		movzbl	(%rax), %eax
 236 013e 0FBEC0   		movsbl	%al, %eax
 237 0141 488D55F7 		leaq	-9(%rbp), %rdx
 238 0145 4889D6   		movq	%rdx, %rsi
 239 0148 89C7     		movl	%eax, %edi
 240 014a E830FFFF 		call	getHexNibble
 240      FF
 241 014f 83F001   		xorl	$1, %eax
 242 0152 84C0     		testb	%al, %al
 243 0154 7426     		je	.L18
  83:main.c        **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 244              		.loc 1 83 0 is_stmt 1
 245 0156 0FB645F6 		movzbl	-10(%rbp), %eax
 246 015a 0FB6C0   		movzbl	%al, %eax
 247 015d C1E004   		sall	$4, %eax
 248 0160 89C2     		movl	%eax, %edx
 249 0162 0FB645F7 		movzbl	-9(%rbp), %eax
 250 0166 09D0     		orl	%edx, %eax
 251 0168 89C2     		movl	%eax, %edx
 252 016a 488B45E8 		movq	-24(%rbp), %rax
 253 016e 8810     		movb	%dl, (%rax)
  84:main.c        **** 		byte += 2;
 254              		.loc 1 84 0
 255 0170 488345E8 		addq	$2, -24(%rbp)
 255      02
  85:main.c        **** 		return 0;
 256              		.loc 1 85 0
 257 0175 B8000000 		movl	$0, %eax
 257      00
 258 017a EB14     		jmp	.L20
 259              	.L18:
  86:main.c        **** 	} else {
  87:main.c        ****     printf(" after dump \n "); 
 260              		.loc 1 87 0
 261 017c BF000000 		movl	$.LC3, %edi
 261      00
 262 0181 B8000000 		movl	$0, %eax
 262      00
 263 0186 E8000000 		call	printf
 263      00
  88:main.c        **** 		return 1;
 264              		.loc 1 88 0
 265 018b B8010000 		movl	$1, %eax
 265      00
 266              	.L20:
  89:main.c        **** 	}
  90:main.c        **** }
 267              		.loc 1 90 0 discriminator 1
 268 0190 488B4DF8 		movq	-8(%rbp), %rcx
 269 0194 6448330C 		xorq	%fs:40, %rcx
 269      25280000 
 269      00
 270 019d 7405     		je	.L21
 271              		.loc 1 90 0 is_stmt 0
 272 019f E8000000 		call	__stack_chk_fail
 272      00
 273              	.L21:
 274 01a4 C9       		leave
 275              		.cfi_def_cfa 7, 8
 276 01a5 C3       		ret
 277              		.cfi_endproc
 278              	.LFE7:
 280              		.section	.rodata
 281              	.LC4:
 282 0080 556E7061 		.string	"Unparseable hex number"
 282      72736561 
 282      626C6520 
 282      68657820 
 282      6E756D62 
 283              	.LC5:
 284 0097 4368616E 		.string	"Channel out of range"
 284      6E656C20 
 284      6F757420 
 284      6F662072 
 284      616E6765 
 285              	.LC6:
 286 00ac 436F6E64 		.string	"Conduit out of range"
 286      75697420 
 286      6F757420 
 286      6F662072 
 286      616E6765 
 287              	.LC7:
 288 00c1 496C6C65 		.string	"Illegal character"
 288      67616C20 
 288      63686172 
 288      61637465 
 288      7200
 289              	.LC8:
 290 00d3 556E7465 		.string	"Unterminated string"
 290      726D696E 
 290      61746564 
 290      20737472 
 290      696E6700 
 291              	.LC9:
 292 00e7 4E6F206D 		.string	"No memory"
 292      656D6F72 
 292      7900
 293              	.LC10:
 294 00f1 456D7074 		.string	"Empty string"
 294      79207374 
 294      72696E67 
 294      00
 295              	.LC11:
 296 00fe 4F646420 		.string	"Odd number of digits"
 296      6E756D62 
 296      6572206F 
 296      66206469 
 296      67697473 
 297              	.LC12:
 298 0113 43616E6E 		.string	"Cannot load file"
 298      6F74206C 
 298      6F616420 
 298      66696C65 
 298      00
 299              	.LC13:
 300 0124 43616E6E 		.string	"Cannot save file"
 300      6F742073 
 300      61766520 
 300      66696C65 
 300      00
 301              	.LC14:
 302 0135 42616420 		.string	"Bad arguments"
 302      61726775 
 302      6D656E74 
 302      7300
 303 0143 00000000 		.align 32
 303      00000000 
 303      00000000 
 303      00000000 
 303      00000000 
 306              	errMessages:
 307 0160 00000000 		.quad	0
 307      00000000 
 308 0168 00000000 		.quad	0
 308      00000000 
 309 0170 00000000 		.quad	.LC4
 309      00000000 
 310 0178 00000000 		.quad	.LC5
 310      00000000 
 311 0180 00000000 		.quad	.LC6
 311      00000000 
 312 0188 00000000 		.quad	.LC7
 312      00000000 
 313 0190 00000000 		.quad	.LC8
 313      00000000 
 314 0198 00000000 		.quad	.LC9
 314      00000000 
 315 01a0 00000000 		.quad	.LC10
 315      00000000 
 316 01a8 00000000 		.quad	.LC11
 316      00000000 
 317 01b0 00000000 		.quad	.LC12
 317      00000000 
 318 01b8 00000000 		.quad	.LC13
 318      00000000 
 319 01c0 00000000 		.quad	.LC14
 319      00000000 
 320              	.LC15:
 321 01c8 646F5265 		.string	"doRead()"
 321      61642829 
 321      00
 322              		.text
 324              	doRead:
 325              	.LFB8:
  91:main.c        **** 
  92:main.c        **** static const char *const errMessages[] = {
  93:main.c        **** 	NULL,
  94:main.c        **** 	NULL,
  95:main.c        **** 	"Unparseable hex number",
  96:main.c        **** 	"Channel out of range",
  97:main.c        **** 	"Conduit out of range",
  98:main.c        **** 	"Illegal character",
  99:main.c        **** 	"Unterminated string",
 100:main.c        **** 	"No memory",
 101:main.c        **** 	"Empty string",
 102:main.c        **** 	"Odd number of digits",
 103:main.c        **** 	"Cannot load file",
 104:main.c        **** 	"Cannot save file",
 105:main.c        **** 	"Bad arguments"
 106:main.c        **** };
 107:main.c        **** 
 108:main.c        **** typedef enum {
 109:main.c        **** 	FLP_SUCCESS,
 110:main.c        **** 	FLP_LIBERR,
 111:main.c        **** 	FLP_BAD_HEX,
 112:main.c        **** 	FLP_CHAN_RANGE,
 113:main.c        **** 	FLP_CONDUIT_RANGE,
 114:main.c        **** 	FLP_ILL_CHAR,
 115:main.c        **** 	FLP_UNTERM_STRING,
 116:main.c        **** 	FLP_NO_MEMORY,
 117:main.c        **** 	FLP_EMPTY_STRING,
 118:main.c        **** 	FLP_ODD_DIGITS,
 119:main.c        **** 	FLP_CANNOT_LOAD,
 120:main.c        **** 	FLP_CANNOT_SAVE,
 121:main.c        **** 	FLP_ARGS
 122:main.c        **** } ReturnCode;
 123:main.c        **** 
 124:main.c        **** static ReturnCode doRead(
 125:main.c        **** 	struct FLContext *handle, uint8 chan, uint32 length, FILE *destFile, uint16 *checksum,
 126:main.c        **** 	const char **error)
 127:main.c        **** {
 326              		.loc 1 127 0 is_stmt 1
 327              		.cfi_startproc
 328 01a6 55       		pushq	%rbp
 329              		.cfi_def_cfa_offset 16
 330              		.cfi_offset 6, -16
 331 01a7 4889E5   		movq	%rsp, %rbp
 332              		.cfi_def_cfa_register 6
 333 01aa 4883EC60 		subq	$96, %rsp
 334 01ae 48897DC8 		movq	%rdi, -56(%rbp)
 335 01b2 89F0     		movl	%esi, %eax
 336 01b4 8955C0   		movl	%edx, -64(%rbp)
 337 01b7 48894DB8 		movq	%rcx, -72(%rbp)
 338 01bb 4C8945B0 		movq	%r8, -80(%rbp)
 339 01bf 4C894DA8 		movq	%r9, -88(%rbp)
 340 01c3 8845C4   		movb	%al, -60(%rbp)
 341              		.loc 1 127 0
 342 01c6 64488B04 		movq	%fs:40, %rax
 342      25280000 
 342      00
 343 01cf 488945F8 		movq	%rax, -8(%rbp)
 344 01d3 31C0     		xorl	%eax, %eax
 128:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 345              		.loc 1 128 0
 346 01d5 C745D800 		movl	$0, -40(%rbp)
 346      000000
 129:main.c        **** 	uint32 bytesWritten;
 130:main.c        **** 	FLStatus fStatus;
 131:main.c        **** 	uint32 chunkSize;
 132:main.c        **** 	const uint8 *recvData;
 133:main.c        **** 	uint32 actualLength;
 134:main.c        **** 	const uint8 *ptr;
 135:main.c        **** 	uint16 csVal = 0x0000;
 347              		.loc 1 135 0
 348 01dc 66C745D2 		movw	$0, -46(%rbp)
 348      0000
 136:main.c        **** 	#define READ_MAX 65536
 137:main.c        **** 
 138:main.c        **** 	// Read first chunk
 139:main.c        **** 	chunkSize = length >= READ_MAX ? READ_MAX : length;
 349              		.loc 1 139 0
 350 01e2 B8000001 		movl	$65536, %eax
 350      00
 351 01e7 817DC000 		cmpl	$65536, -64(%rbp)
 351      000100
 352 01ee 0F4645C0 		cmovbe	-64(%rbp), %eax
 353 01f2 8945DC   		movl	%eax, -36(%rbp)
 140:main.c        **** 	fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 354              		.loc 1 140 0
 355 01f5 0FB675C4 		movzbl	-60(%rbp), %esi
 356 01f9 488B4DA8 		movq	-88(%rbp), %rcx
 357 01fd 8B55DC   		movl	-36(%rbp), %edx
 358 0200 488B45C8 		movq	-56(%rbp), %rax
 359 0204 4989C8   		movq	%rcx, %r8
 360 0207 B9000000 		movl	$0, %ecx
 360      00
 361 020c 4889C7   		movq	%rax, %rdi
 362 020f E8000000 		call	flReadChannelAsyncSubmit
 362      00
 363 0214 8945E0   		movl	%eax, -32(%rbp)
 141:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 364              		.loc 1 141 0
 365 0217 837DE000 		cmpl	$0, -32(%rbp)
 366 021b 741D     		je	.L23
 367              		.loc 1 141 0 is_stmt 0 discriminator 1
 368 021d 488B45A8 		movq	-88(%rbp), %rax
 369 0221 BE000000 		movl	$.LC15, %esi
 369      00
 370 0226 4889C7   		movq	%rax, %rdi
 371 0229 E8000000 		call	errPrefix
 371      00
 372 022e C745D801 		movl	$1, -40(%rbp)
 372      000000
 373 0235 E9FB0100 		jmp	.L24
 373      00
 374              	.L23:
 142:main.c        **** 	length = length - chunkSize;
 375              		.loc 1 142 0 is_stmt 1
 376 023a 8B45DC   		movl	-36(%rbp), %eax
 377 023d 2945C0   		subl	%eax, -64(%rbp)
 143:main.c        **** 
 144:main.c        **** 	while ( length ) {
 378              		.loc 1 144 0
 379 0240 E91E0100 		jmp	.L25
 379      00
 380              	.L31:
 145:main.c        **** 		// Read chunk N
 146:main.c        **** 		chunkSize = length >= READ_MAX ? READ_MAX : length;
 381              		.loc 1 146 0
 382 0245 B8000001 		movl	$65536, %eax
 382      00
 383 024a 817DC000 		cmpl	$65536, -64(%rbp)
 383      000100
 384 0251 0F4645C0 		cmovbe	-64(%rbp), %eax
 385 0255 8945DC   		movl	%eax, -36(%rbp)
 147:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 386              		.loc 1 147 0
 387 0258 0FB675C4 		movzbl	-60(%rbp), %esi
 388 025c 488B4DA8 		movq	-88(%rbp), %rcx
 389 0260 8B55DC   		movl	-36(%rbp), %edx
 390 0263 488B45C8 		movq	-56(%rbp), %rax
 391 0267 4989C8   		movq	%rcx, %r8
 392 026a B9000000 		movl	$0, %ecx
 392      00
 393 026f 4889C7   		movq	%rax, %rdi
 394 0272 E8000000 		call	flReadChannelAsyncSubmit
 394      00
 395 0277 8945E0   		movl	%eax, -32(%rbp)
 148:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 396              		.loc 1 148 0
 397 027a 837DE000 		cmpl	$0, -32(%rbp)
 398 027e 741D     		je	.L26
 399              		.loc 1 148 0 is_stmt 0 discriminator 1
 400 0280 488B45A8 		movq	-88(%rbp), %rax
 401 0284 BE000000 		movl	$.LC15, %esi
 401      00
 402 0289 4889C7   		movq	%rax, %rdi
 403 028c E8000000 		call	errPrefix
 403      00
 404 0291 C745D801 		movl	$1, -40(%rbp)
 404      000000
 405 0298 E9980100 		jmp	.L24
 405      00
 406              	.L26:
 149:main.c        **** 		length = length - chunkSize;
 407              		.loc 1 149 0 is_stmt 1
 408 029d 8B45DC   		movl	-36(%rbp), %eax
 409 02a0 2945C0   		subl	%eax, -64(%rbp)
 150:main.c        **** 		
 151:main.c        **** 		// Await chunk N-1
 152:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 410              		.loc 1 152 0
 411 02a3 488B7DA8 		movq	-88(%rbp), %rdi
 412 02a7 488D4DD4 		leaq	-44(%rbp), %rcx
 413 02ab 488D55D4 		leaq	-44(%rbp), %rdx
 414 02af 488D75E8 		leaq	-24(%rbp), %rsi
 415 02b3 488B45C8 		movq	-56(%rbp), %rax
 416 02b7 4989F8   		movq	%rdi, %r8
 417 02ba 4889C7   		movq	%rax, %rdi
 418 02bd E8000000 		call	flReadChannelAsyncAwait
 418      00
 419 02c2 8945E0   		movl	%eax, -32(%rbp)
 153:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 420              		.loc 1 153 0
 421 02c5 837DE000 		cmpl	$0, -32(%rbp)
 422 02c9 741D     		je	.L27
 423              		.loc 1 153 0 is_stmt 0 discriminator 1
 424 02cb 488B45A8 		movq	-88(%rbp), %rax
 425 02cf BE000000 		movl	$.LC15, %esi
 425      00
 426 02d4 4889C7   		movq	%rax, %rdi
 427 02d7 E8000000 		call	errPrefix
 427      00
 428 02dc C745D801 		movl	$1, -40(%rbp)
 428      000000
 429 02e3 E94D0100 		jmp	.L24
 429      00
 430              	.L27:
 154:main.c        **** 
 155:main.c        **** 		// Write chunk N-1 to file
 156:main.c        **** 		bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 431              		.loc 1 156 0 is_stmt 1
 432 02e8 8B45D4   		movl	-44(%rbp), %eax
 433 02eb 89C6     		movl	%eax, %esi
 434 02ed 488B45E8 		movq	-24(%rbp), %rax
 435 02f1 488B55B8 		movq	-72(%rbp), %rdx
 436 02f5 4889D1   		movq	%rdx, %rcx
 437 02f8 4889F2   		movq	%rsi, %rdx
 438 02fb BE010000 		movl	$1, %esi
 438      00
 439 0300 4889C7   		movq	%rax, %rdi
 440 0303 E8000000 		call	fwrite
 440      00
 441 0308 8945E4   		movl	%eax, -28(%rbp)
 157:main.c        **** 		CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 442              		.loc 1 157 0
 443 030b 8B45D4   		movl	-44(%rbp), %eax
 444 030e 3945E4   		cmpl	%eax, -28(%rbp)
 445 0311 741D     		je	.L28
 446              		.loc 1 157 0 is_stmt 0 discriminator 1
 447 0313 488B45A8 		movq	-88(%rbp), %rax
 448 0317 BE000000 		movl	$.LC15, %esi
 448      00
 449 031c 4889C7   		movq	%rax, %rdi
 450 031f E8000000 		call	errPrefix
 450      00
 451 0324 C745D80B 		movl	$11, -40(%rbp)
 451      000000
 452 032b E9050100 		jmp	.L24
 452      00
 453              	.L28:
 158:main.c        **** 
 159:main.c        **** 		// Checksum chunk N-1
 160:main.c        **** 		chunkSize = actualLength;
 454              		.loc 1 160 0 is_stmt 1
 455 0330 8B45D4   		movl	-44(%rbp), %eax
 456 0333 8945DC   		movl	%eax, -36(%rbp)
 161:main.c        **** 		ptr = recvData;
 457              		.loc 1 161 0
 458 0336 488B45E8 		movq	-24(%rbp), %rax
 459 033a 488945F0 		movq	%rax, -16(%rbp)
 162:main.c        **** 		while ( chunkSize-- ) {
 460              		.loc 1 162 0
 461 033e EB16     		jmp	.L29
 462              	.L30:
 163:main.c        **** 			csVal = (uint16)(csVal + *ptr++);
 463              		.loc 1 163 0
 464 0340 488B45F0 		movq	-16(%rbp), %rax
 465 0344 488D5001 		leaq	1(%rax), %rdx
 466 0348 488955F0 		movq	%rdx, -16(%rbp)
 467 034c 0FB600   		movzbl	(%rax), %eax
 468 034f 0FB6C0   		movzbl	%al, %eax
 469 0352 660145D2 		addw	%ax, -46(%rbp)
 470              	.L29:
 162:main.c        **** 		while ( chunkSize-- ) {
 471              		.loc 1 162 0
 472 0356 8B45DC   		movl	-36(%rbp), %eax
 473 0359 8D50FF   		leal	-1(%rax), %edx
 474 035c 8955DC   		movl	%edx, -36(%rbp)
 475 035f 85C0     		testl	%eax, %eax
 476 0361 75DD     		jne	.L30
 477              	.L25:
 144:main.c        **** 		// Read chunk N
 478              		.loc 1 144 0
 479 0363 837DC000 		cmpl	$0, -64(%rbp)
 480 0367 0F85D8FE 		jne	.L31
 480      FFFF
 164:main.c        **** 		}
 165:main.c        **** 	}
 166:main.c        **** 
 167:main.c        **** 	// Await last chunk
 168:main.c        **** 	fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 481              		.loc 1 168 0
 482 036d 488B7DA8 		movq	-88(%rbp), %rdi
 483 0371 488D4DD4 		leaq	-44(%rbp), %rcx
 484 0375 488D55D4 		leaq	-44(%rbp), %rdx
 485 0379 488D75E8 		leaq	-24(%rbp), %rsi
 486 037d 488B45C8 		movq	-56(%rbp), %rax
 487 0381 4989F8   		movq	%rdi, %r8
 488 0384 4889C7   		movq	%rax, %rdi
 489 0387 E8000000 		call	flReadChannelAsyncAwait
 489      00
 490 038c 8945E0   		movl	%eax, -32(%rbp)
 169:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 491              		.loc 1 169 0
 492 038f 837DE000 		cmpl	$0, -32(%rbp)
 493 0393 741D     		je	.L32
 494              		.loc 1 169 0 is_stmt 0 discriminator 1
 495 0395 488B45A8 		movq	-88(%rbp), %rax
 496 0399 BE000000 		movl	$.LC15, %esi
 496      00
 497 039e 4889C7   		movq	%rax, %rdi
 498 03a1 E8000000 		call	errPrefix
 498      00
 499 03a6 C745D801 		movl	$1, -40(%rbp)
 499      000000
 500 03ad E9830000 		jmp	.L24
 500      00
 501              	.L32:
 170:main.c        **** 	
 171:main.c        **** 	// Write last chunk to file
 172:main.c        **** 	bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 502              		.loc 1 172 0 is_stmt 1
 503 03b2 8B45D4   		movl	-44(%rbp), %eax
 504 03b5 89C6     		movl	%eax, %esi
 505 03b7 488B45E8 		movq	-24(%rbp), %rax
 506 03bb 488B55B8 		movq	-72(%rbp), %rdx
 507 03bf 4889D1   		movq	%rdx, %rcx
 508 03c2 4889F2   		movq	%rsi, %rdx
 509 03c5 BE010000 		movl	$1, %esi
 509      00
 510 03ca 4889C7   		movq	%rax, %rdi
 511 03cd E8000000 		call	fwrite
 511      00
 512 03d2 8945E4   		movl	%eax, -28(%rbp)
 173:main.c        **** 	CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 513              		.loc 1 173 0
 514 03d5 8B45D4   		movl	-44(%rbp), %eax
 515 03d8 3945E4   		cmpl	%eax, -28(%rbp)
 516 03db 741A     		je	.L33
 517              		.loc 1 173 0 is_stmt 0 discriminator 1
 518 03dd 488B45A8 		movq	-88(%rbp), %rax
 519 03e1 BE000000 		movl	$.LC15, %esi
 519      00
 520 03e6 4889C7   		movq	%rax, %rdi
 521 03e9 E8000000 		call	errPrefix
 521      00
 522 03ee C745D80B 		movl	$11, -40(%rbp)
 522      000000
 523 03f5 EB3E     		jmp	.L24
 524              	.L33:
 174:main.c        **** 
 175:main.c        **** 	// Checksum last chunk
 176:main.c        **** 	chunkSize = actualLength;
 525              		.loc 1 176 0 is_stmt 1
 526 03f7 8B45D4   		movl	-44(%rbp), %eax
 527 03fa 8945DC   		movl	%eax, -36(%rbp)
 177:main.c        **** 	ptr = recvData;
 528              		.loc 1 177 0
 529 03fd 488B45E8 		movq	-24(%rbp), %rax
 530 0401 488945F0 		movq	%rax, -16(%rbp)
 178:main.c        **** 	while ( chunkSize-- ) {
 531              		.loc 1 178 0
 532 0405 EB16     		jmp	.L34
 533              	.L35:
 179:main.c        **** 		csVal = (uint16)(csVal + *ptr++);
 534              		.loc 1 179 0
 535 0407 488B45F0 		movq	-16(%rbp), %rax
 536 040b 488D5001 		leaq	1(%rax), %rdx
 537 040f 488955F0 		movq	%rdx, -16(%rbp)
 538 0413 0FB600   		movzbl	(%rax), %eax
 539 0416 0FB6C0   		movzbl	%al, %eax
 540 0419 660145D2 		addw	%ax, -46(%rbp)
 541              	.L34:
 178:main.c        **** 	while ( chunkSize-- ) {
 542              		.loc 1 178 0
 543 041d 8B45DC   		movl	-36(%rbp), %eax
 544 0420 8D50FF   		leal	-1(%rax), %edx
 545 0423 8955DC   		movl	%edx, -36(%rbp)
 546 0426 85C0     		testl	%eax, %eax
 547 0428 75DD     		jne	.L35
 180:main.c        **** 	}
 181:main.c        **** 	
 182:main.c        **** 	// Return checksum to caller
 183:main.c        **** 	*checksum = csVal;
 548              		.loc 1 183 0
 549 042a 488B45B0 		movq	-80(%rbp), %rax
 550 042e 0FB755D2 		movzwl	-46(%rbp), %edx
 551 0432 668910   		movw	%dx, (%rax)
 552              	.L24:
 184:main.c        **** cleanup:
 185:main.c        **** 	return retVal;
 553              		.loc 1 185 0
 554 0435 8B45D8   		movl	-40(%rbp), %eax
 186:main.c        **** }
 555              		.loc 1 186 0
 556 0438 488B4DF8 		movq	-8(%rbp), %rcx
 557 043c 6448330C 		xorq	%fs:40, %rcx
 557      25280000 
 557      00
 558 0445 7405     		je	.L37
 559 0447 E8000000 		call	__stack_chk_fail
 559      00
 560              	.L37:
 561 044c C9       		leave
 562              		.cfi_def_cfa 7, 8
 563 044d C3       		ret
 564              		.cfi_endproc
 565              	.LFE8:
 567              		.section	.rodata
 568              	.LC16:
 569 01d1 646F5772 		.string	"doWrite()"
 569      69746528 
 569      2900
 570              		.text
 572              	doWrite:
 573              	.LFB9:
 187:main.c        **** 
 188:main.c        **** static ReturnCode doWrite(
 189:main.c        **** 	struct FLContext *handle, uint8 chan, FILE *srcFile, size_t *length, uint16 *checksum,
 190:main.c        **** 	const char **error)
 191:main.c        **** {
 574              		.loc 1 191 0
 575              		.cfi_startproc
 576 044e 55       		pushq	%rbp
 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 6, -16
 579 044f 4889E5   		movq	%rsp, %rbp
 580              		.cfi_def_cfa_register 6
 581 0452 4881EC70 		subq	$65648, %rsp
 581      000100
 582 0459 4889BDB8 		movq	%rdi, -65608(%rbp)
 582      FFFEFF
 583 0460 89F0     		movl	%esi, %eax
 584 0462 488995A8 		movq	%rdx, -65624(%rbp)
 584      FFFEFF
 585 0469 48898DA0 		movq	%rcx, -65632(%rbp)
 585      FFFEFF
 586 0470 4C898598 		movq	%r8, -65640(%rbp)
 586      FFFEFF
 587 0477 4C898D90 		movq	%r9, -65648(%rbp)
 587      FFFEFF
 588 047e 8885B4FF 		movb	%al, -65612(%rbp)
 588      FEFF
 589              		.loc 1 191 0
 590 0484 64488B04 		movq	%fs:40, %rax
 590      25280000 
 590      00
 591 048d 488945F8 		movq	%rax, -8(%rbp)
 592 0491 31C0     		xorl	%eax, %eax
 192:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 593              		.loc 1 192 0
 594 0493 C785C8FF 		movl	$0, -65592(%rbp)
 594      FEFF0000 
 594      0000
 193:main.c        **** 	size_t bytesRead, i;
 194:main.c        **** 	FLStatus fStatus;
 195:main.c        **** 	const uint8 *ptr;
 196:main.c        **** 	uint16 csVal = 0x0000;
 595              		.loc 1 196 0
 596 049d 66C785C6 		movw	$0, -65594(%rbp)
 596      FFFEFF00 
 596      00
 197:main.c        **** 	size_t lenVal = 0;
 597              		.loc 1 197 0
 598 04a6 48C785E0 		movq	$0, -65568(%rbp)
 598      FFFEFF00 
 598      000000
 599              	.L44:
 198:main.c        **** 	#define WRITE_MAX (65536 - 5)
 199:main.c        **** 	uint8 buffer[WRITE_MAX];
 200:main.c        **** 
 201:main.c        **** 	do {
 202:main.c        **** 		// Read Nth chunk
 203:main.c        **** 		bytesRead = fread(buffer, 1, WRITE_MAX, srcFile);
 600              		.loc 1 203 0
 601 04b1 488B95A8 		movq	-65624(%rbp), %rdx
 601      FFFEFF
 602 04b8 488D85F0 		leaq	-65552(%rbp), %rax
 602      FFFEFF
 603 04bf 4889D1   		movq	%rdx, %rcx
 604 04c2 BAFBFF00 		movl	$65531, %edx
 604      00
 605 04c7 BE010000 		movl	$1, %esi
 605      00
 606 04cc 4889C7   		movq	%rax, %rdi
 607 04cf E8000000 		call	fread
 607      00
 608 04d4 488985E8 		movq	%rax, -65560(%rbp)
 608      FFFEFF
 204:main.c        **** 		if ( bytesRead ) {
 609              		.loc 1 204 0
 610 04db 4883BDE8 		cmpq	$0, -65560(%rbp)
 610      FFFEFF00 
 611 04e3 0F84C200 		je	.L39
 611      0000
 205:main.c        **** 			// Update running total
 206:main.c        **** 			lenVal = lenVal + bytesRead;
 612              		.loc 1 206 0
 613 04e9 488B85E8 		movq	-65560(%rbp), %rax
 613      FFFEFF
 614 04f0 480185E0 		addq	%rax, -65568(%rbp)
 614      FFFEFF
 207:main.c        **** 
 208:main.c        **** 			// Submit Nth chunk
 209:main.c        **** 			fStatus = flWriteChannelAsync(handle, chan, bytesRead, buffer, error);
 615              		.loc 1 209 0
 616 04f7 0FB6B5B4 		movzbl	-65612(%rbp), %esi
 616      FFFEFF
 617 04fe 488BBD90 		movq	-65648(%rbp), %rdi
 617      FFFEFF
 618 0505 488D8DF0 		leaq	-65552(%rbp), %rcx
 618      FFFEFF
 619 050c 488B95E8 		movq	-65560(%rbp), %rdx
 619      FFFEFF
 620 0513 488B85B8 		movq	-65608(%rbp), %rax
 620      FFFEFF
 621 051a 4989F8   		movq	%rdi, %r8
 622 051d 4889C7   		movq	%rax, %rdi
 623 0520 E8000000 		call	flWriteChannelAsync
 623      00
 624 0525 8985CCFF 		movl	%eax, -65588(%rbp)
 624      FEFF
 210:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 625              		.loc 1 210 0
 626 052b 83BDCCFF 		cmpl	$0, -65588(%rbp)
 626      FEFF00
 627 0532 7423     		je	.L40
 628              		.loc 1 210 0 is_stmt 0 discriminator 1
 629 0534 488B8590 		movq	-65648(%rbp), %rax
 629      FFFEFF
 630 053b BE000000 		movl	$.LC16, %esi
 630      00
 631 0540 4889C7   		movq	%rax, %rdi
 632 0543 E8000000 		call	errPrefix
 632      00
 633 0548 C785C8FF 		movl	$1, -65592(%rbp)
 633      FEFF0100 
 633      0000
 634 0552 E9CF0000 		jmp	.L41
 634      00
 635              	.L40:
 211:main.c        **** 
 212:main.c        **** 			// Checksum Nth chunk
 213:main.c        **** 			i = bytesRead;
 636              		.loc 1 213 0 is_stmt 1
 637 0557 488B85E8 		movq	-65560(%rbp), %rax
 637      FFFEFF
 638 055e 488985D0 		movq	%rax, -65584(%rbp)
 638      FFFEFF
 214:main.c        **** 			ptr = buffer;
 639              		.loc 1 214 0
 640 0565 488D85F0 		leaq	-65552(%rbp), %rax
 640      FFFEFF
 641 056c 488985D8 		movq	%rax, -65576(%rbp)
 641      FFFEFF
 215:main.c        **** 			while ( i-- ) {
 642              		.loc 1 215 0
 643 0573 EB1F     		jmp	.L42
 644              	.L43:
 216:main.c        **** 				csVal = (uint16)(csVal + *ptr++);
 645              		.loc 1 216 0
 646 0575 488B85D8 		movq	-65576(%rbp), %rax
 646      FFFEFF
 647 057c 488D5001 		leaq	1(%rax), %rdx
 648 0580 488995D8 		movq	%rdx, -65576(%rbp)
 648      FFFEFF
 649 0587 0FB600   		movzbl	(%rax), %eax
 650 058a 0FB6C0   		movzbl	%al, %eax
 651 058d 660185C6 		addw	%ax, -65594(%rbp)
 651      FFFEFF
 652              	.L42:
 215:main.c        **** 			while ( i-- ) {
 653              		.loc 1 215 0
 654 0594 488B85D0 		movq	-65584(%rbp), %rax
 654      FFFEFF
 655 059b 488D50FF 		leaq	-1(%rax), %rdx
 656 059f 488995D0 		movq	%rdx, -65584(%rbp)
 656      FFFEFF
 657 05a6 4885C0   		testq	%rax, %rax
 658 05a9 75CA     		jne	.L43
 659              	.L39:
 217:main.c        **** 			}
 218:main.c        **** 		}
 219:main.c        **** 	} while ( bytesRead == WRITE_MAX );
 660              		.loc 1 219 0
 661 05ab 4881BDE8 		cmpq	$65531, -65560(%rbp)
 661      FFFEFFFB 
 661      FF0000
 662 05b6 0F84F5FE 		je	.L44
 662      FFFF
 220:main.c        **** 
 221:main.c        **** 	// Wait for writes to be eeceived. This is optional, but it's only fair if we're benchmarking to
 222:main.c        **** 	// actually wait for the work to be completed.
 223:main.c        **** 	fStatus = flAwaitAsyncWrites(handle, error);
 663              		.loc 1 223 0
 664 05bc 488B9590 		movq	-65648(%rbp), %rdx
 664      FFFEFF
 665 05c3 488B85B8 		movq	-65608(%rbp), %rax
 665      FFFEFF
 666 05ca 4889D6   		movq	%rdx, %rsi
 667 05cd 4889C7   		movq	%rax, %rdi
 668 05d0 E8000000 		call	flAwaitAsyncWrites
 668      00
 669 05d5 8985CCFF 		movl	%eax, -65588(%rbp)
 669      FEFF
 224:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 670              		.loc 1 224 0
 671 05db 83BDCCFF 		cmpl	$0, -65588(%rbp)
 671      FEFF00
 672 05e2 7420     		je	.L45
 673              		.loc 1 224 0 is_stmt 0 discriminator 1
 674 05e4 488B8590 		movq	-65648(%rbp), %rax
 674      FFFEFF
 675 05eb BE000000 		movl	$.LC16, %esi
 675      00
 676 05f0 4889C7   		movq	%rax, %rdi
 677 05f3 E8000000 		call	errPrefix
 677      00
 678 05f8 C785C8FF 		movl	$1, -65592(%rbp)
 678      FEFF0100 
 678      0000
 679 0602 EB22     		jmp	.L41
 680              	.L45:
 225:main.c        **** 
 226:main.c        **** 	// Return checksum & length to caller
 227:main.c        **** 	*checksum = csVal;
 681              		.loc 1 227 0 is_stmt 1
 682 0604 488B8598 		movq	-65640(%rbp), %rax
 682      FFFEFF
 683 060b 0FB795C6 		movzwl	-65594(%rbp), %edx
 683      FFFEFF
 684 0612 668910   		movw	%dx, (%rax)
 228:main.c        **** 	*length = lenVal;
 685              		.loc 1 228 0
 686 0615 488B85A0 		movq	-65632(%rbp), %rax
 686      FFFEFF
 687 061c 488B95E0 		movq	-65568(%rbp), %rdx
 687      FFFEFF
 688 0623 488910   		movq	%rdx, (%rax)
 689              	.L41:
 229:main.c        **** cleanup:
 230:main.c        **** 	return retVal;
 690              		.loc 1 230 0
 691 0626 8B85C8FF 		movl	-65592(%rbp), %eax
 691      FEFF
 231:main.c        **** }
 692              		.loc 1 231 0
 693 062c 488B4DF8 		movq	-8(%rbp), %rcx
 694 0630 6448330C 		xorq	%fs:40, %rcx
 694      25280000 
 694      00
 695 0639 7405     		je	.L47
 696 063b E8000000 		call	__stack_chk_fail
 696      00
 697              	.L47:
 698 0640 C9       		leave
 699              		.cfi_def_cfa 7, 8
 700 0641 C3       		ret
 701              		.cfi_endproc
 702              	.LFE9:
 704              		.comm	out,1,1
 705              		.section	.rodata
 706              	.LC17:
 707 01db 776200   		.string	"wb"
 708 01de 0000     		.align 8
 709              	.LC20:
 710 01e0 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 710      20256420 
 710      62797465 
 710      73202863 
 710      6865636B 
 711              	.LC21:
 712 021d 726200   		.string	"rb"
 713              		.align 8
 714              	.LC22:
 715 0220 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 715      6520257A 
 715      75206279 
 715      74657320 
 715      28636865 
 716              	.LC23:
 717 025e 25732061 		.string	"%s at column %d\n  %s\n  "
 717      7420636F 
 717      6C756D6E 
 717      2025640A 
 717      20202573 
 718              	.LC24:
 719 0276 5E0A00   		.string	"^\n"
 720              		.text
 722              	parseLine:
 723              	.LFB10:
 232:main.c        **** 
 233:main.c        **** uint8 out;
 234:main.c        **** 
 235:main.c        **** static int parseLine(struct FLContext *handle, const char *line, const char **error) {
 724              		.loc 1 235 0
 725              		.cfi_startproc
 726 0642 55       		pushq	%rbp
 727              		.cfi_def_cfa_offset 16
 728              		.cfi_offset 6, -16
 729 0643 4889E5   		movq	%rsp, %rbp
 730              		.cfi_def_cfa_register 6
 731 0646 4881EC10 		subq	$272, %rsp
 731      010000
 732 064d 4889BD08 		movq	%rdi, -248(%rbp)
 732      FFFFFF
 733 0654 4889B500 		movq	%rsi, -256(%rbp)
 733      FFFFFF
 734 065b 488995F8 		movq	%rdx, -264(%rbp)
 734      FEFFFF
 735              		.loc 1 235 0
 736 0662 64488B04 		movq	%fs:40, %rax
 736      25280000 
 736      00
 737 066b 488945F8 		movq	%rax, -8(%rbp)
 738 066f 31C0     		xorl	%eax, %eax
 236:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, status;
 739              		.loc 1 236 0
 740 0671 C78514FF 		movl	$0, -236(%rbp)
 740      FFFF0000 
 740      0000
 237:main.c        **** 	FLStatus fStatus;
 238:main.c        **** 	struct Buffer dataFromFPGA = {0,};
 741              		.loc 1 238 0
 742 067b 48C745D0 		movq	$0, -48(%rbp)
 742      00000000 
 743 0683 48C745D8 		movq	$0, -40(%rbp)
 743      00000000 
 744 068b 48C745E0 		movq	$0, -32(%rbp)
 744      00000000 
 745 0693 48C745E8 		movq	$0, -24(%rbp)
 745      00000000 
 239:main.c        **** 	BufferStatus bStatus;
 240:main.c        **** 	uint8 *data = NULL;
 746              		.loc 1 240 0
 747 069b 48C78548 		movq	$0, -184(%rbp)
 747      FFFFFF00 
 747      000000
 241:main.c        **** 	char *fileName = NULL;
 748              		.loc 1 241 0
 749 06a6 48C78550 		movq	$0, -176(%rbp)
 749      FFFFFF00 
 749      000000
 242:main.c        **** 	FILE *file = NULL;
 750              		.loc 1 242 0
 751 06b1 48C78558 		movq	$0, -168(%rbp)
 751      FFFFFF00 
 751      000000
 243:main.c        **** 	double totalTime, speed;
 244:main.c        **** 	#ifdef WIN32
 245:main.c        **** 		LARGE_INTEGER tvStart, tvEnd, freq;
 246:main.c        **** 		DWORD_PTR mask = 1;
 247:main.c        **** 		SetThreadAffinityMask(GetCurrentThread(), mask);
 248:main.c        **** 		QueryPerformanceFrequency(&freq);
 249:main.c        **** 	#else
 250:main.c        **** 		struct timeval tvStart, tvEnd;
 251:main.c        **** 		long long startTime, endTime;
 252:main.c        **** 	#endif
 253:main.c        **** 	bStatus = bufInitialise(&dataFromFPGA, 1024, 0x00, error);
 752              		.loc 1 253 0
 753 06bc 488B95F8 		movq	-264(%rbp), %rdx
 753      FEFFFF
 754 06c3 488D45D0 		leaq	-48(%rbp), %rax
 755 06c7 4889D1   		movq	%rdx, %rcx
 756 06ca BA000000 		movl	$0, %edx
 756      00
 757 06cf BE000400 		movl	$1024, %esi
 757      00
 758 06d4 4889C7   		movq	%rax, %rdi
 759 06d7 E8000000 		call	bufInitialise
 759      00
 760 06dc 898520FF 		movl	%eax, -224(%rbp)
 760      FFFF
 254:main.c        **** 	CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 761              		.loc 1 254 0
 762 06e2 83BD20FF 		cmpl	$0, -224(%rbp)
 762      FFFF00
 763 06e9 740F     		je	.L49
 764              		.loc 1 254 0 is_stmt 0 discriminator 1
 765 06eb C78514FF 		movl	$1, -236(%rbp)
 765      FFFF0100 
 765      0000
 766 06f5 E9F10E00 		jmp	.L50
 766      00
 767              	.L49:
 255:main.c        **** 	ptr = line;
 768              		.loc 1 255 0 is_stmt 1
 769 06fa 488B8500 		movq	-256(%rbp), %rax
 769      FFFFFF
 770 0701 48890500 		movq	%rax, ptr(%rip)
 770      000000
 256:main.c        **** 	do {
 257:main.c        **** 		while ( *ptr == ';' ) {
 771              		.loc 1 257 0
 772 0708 EB12     		jmp	.L51
 773              	.L52:
 258:main.c        **** 			ptr++;
 774              		.loc 1 258 0
 775 070a 488B0500 		movq	ptr(%rip), %rax
 775      000000
 776 0711 4883C001 		addq	$1, %rax
 777 0715 48890500 		movq	%rax, ptr(%rip)
 777      000000
 778              	.L51:
 257:main.c        **** 			ptr++;
 779              		.loc 1 257 0
 780 071c 488B0500 		movq	ptr(%rip), %rax
 780      000000
 781 0723 0FB600   		movzbl	(%rax), %eax
 782 0726 3C3B     		cmpb	$59, %al
 783 0728 74E0     		je	.L52
 259:main.c        **** 		}
 260:main.c        **** 		switch ( *ptr ) {
 784              		.loc 1 260 0
 785 072a 488B0500 		movq	ptr(%rip), %rax
 785      000000
 786 0731 0FB600   		movzbl	(%rax), %eax
 787 0734 0FBEC0   		movsbl	%al, %eax
 788 0737 83F872   		cmpl	$114, %eax
 789 073a 7417     		je	.L54
 790 073c 83F877   		cmpl	$119, %eax
 791 073f 0F84D006 		je	.L55
 791      0000
 792 0745 83F82B   		cmpl	$43, %eax
 793 0748 0F84600D 		je	.L56
 793      0000
 794 074e E9470E00 		jmp	.L126
 794      00
 795              	.L54:
 796              	.LBB2:
 261:main.c        **** 		case 'r':{
 262:main.c        **** 			uint32 chan;
 263:main.c        **** 			uint32 length = 1;
 797              		.loc 1 263 0
 798 0753 C78518FF 		movl	$1, -232(%rbp)
 798      FFFF0100 
 798      0000
 264:main.c        **** 			char *end;
 265:main.c        **** 			ptr++;
 799              		.loc 1 265 0
 800 075d 488B0500 		movq	ptr(%rip), %rax
 800      000000
 801 0764 4883C001 		addq	$1, %rax
 802 0768 48890500 		movq	%rax, ptr(%rip)
 802      000000
 266:main.c        **** 			
 267:main.c        **** 			// Get the channel to be read:
 268:main.c        **** 			errno = 0;
 803              		.loc 1 268 0
 804 076f E8000000 		call	__errno_location
 804      00
 805 0774 C7000000 		movl	$0, (%rax)
 805      0000
 269:main.c        **** 			chan = (uint32)strtoul(ptr, &end, 16);
 806              		.loc 1 269 0
 807 077a 488B0500 		movq	ptr(%rip), %rax
 807      000000
 808 0781 488D8D40 		leaq	-192(%rbp), %rcx
 808      FFFFFF
 809 0788 BA100000 		movl	$16, %edx
 809      00
 810 078d 4889CE   		movq	%rcx, %rsi
 811 0790 4889C7   		movq	%rax, %rdi
 812 0793 E8000000 		call	strtoul
 812      00
 813 0798 898530FF 		movl	%eax, -208(%rbp)
 813      FFFF
 270:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 814              		.loc 1 270 0
 815 079e E8000000 		call	__errno_location
 815      00
 816 07a3 8B00     		movl	(%rax), %eax
 817 07a5 85C0     		testl	%eax, %eax
 818 07a7 740F     		je	.L57
 819              		.loc 1 270 0 is_stmt 0 discriminator 1
 820 07a9 C78514FF 		movl	$2, -236(%rbp)
 820      FFFF0200 
 820      0000
 821 07b3 E9330E00 		jmp	.L50
 821      00
 822              	.L57:
 271:main.c        **** 
 272:main.c        **** 			// Ensure that it's 0-127
 273:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 823              		.loc 1 273 0 is_stmt 1
 824 07b8 83BD30FF 		cmpl	$127, -208(%rbp)
 824      FFFF7F
 825 07bf 760F     		jbe	.L59
 826              		.loc 1 273 0 is_stmt 0 discriminator 1
 827 07c1 C78514FF 		movl	$3, -236(%rbp)
 827      FFFF0300 
 827      0000
 828 07cb E91B0E00 		jmp	.L50
 828      00
 829              	.L59:
 274:main.c        **** 			ptr = end;
 830              		.loc 1 274 0 is_stmt 1
 831 07d0 488B8540 		movq	-192(%rbp), %rax
 831      FFFFFF
 832 07d7 48890500 		movq	%rax, ptr(%rip)
 832      000000
 275:main.c        **** 
 276:main.c        **** 			// Only three valid chars at this point:
 277:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 833              		.loc 1 277 0
 834 07de 488B0500 		movq	ptr(%rip), %rax
 834      000000
 835 07e5 0FB600   		movzbl	(%rax), %eax
 836 07e8 84C0     		testb	%al, %al
 837 07ea 742B     		je	.L60
 838              		.loc 1 277 0 is_stmt 0 discriminator 1
 839 07ec 488B0500 		movq	ptr(%rip), %rax
 839      000000
 840 07f3 0FB600   		movzbl	(%rax), %eax
 841 07f6 3C3B     		cmpb	$59, %al
 842 07f8 741D     		je	.L60
 843              		.loc 1 277 0 discriminator 2
 844 07fa 488B0500 		movq	ptr(%rip), %rax
 844      000000
 845 0801 0FB600   		movzbl	(%rax), %eax
 846 0804 3C20     		cmpb	$32, %al
 847 0806 740F     		je	.L60
 848              		.loc 1 277 0 discriminator 3
 849 0808 C78514FF 		movl	$5, -236(%rbp)
 849      FFFF0500 
 849      0000
 850 0812 E9D40D00 		jmp	.L50
 850      00
 851              	.L60:
 278:main.c        **** 
 279:main.c        **** 			if ( *ptr == ' ' ) {
 852              		.loc 1 279 0 is_stmt 1
 853 0817 488B0500 		movq	ptr(%rip), %rax
 853      000000
 854 081e 0FB600   		movzbl	(%rax), %eax
 855 0821 3C20     		cmpb	$32, %al
 856 0823 0F851D02 		jne	.L61
 856      0000
 280:main.c        **** 				ptr++;
 857              		.loc 1 280 0
 858 0829 488B0500 		movq	ptr(%rip), %rax
 858      000000
 859 0830 4883C001 		addq	$1, %rax
 860 0834 48890500 		movq	%rax, ptr(%rip)
 860      000000
 281:main.c        **** 
 282:main.c        **** 				// Get the read count:
 283:main.c        **** 				errno = 0;
 861              		.loc 1 283 0
 862 083b E8000000 		call	__errno_location
 862      00
 863 0840 C7000000 		movl	$0, (%rax)
 863      0000
 284:main.c        **** 				length = (uint32)strtoul(ptr, &end, 16);
 864              		.loc 1 284 0
 865 0846 488B0500 		movq	ptr(%rip), %rax
 865      000000
 866 084d 488D8D40 		leaq	-192(%rbp), %rcx
 866      FFFFFF
 867 0854 BA100000 		movl	$16, %edx
 867      00
 868 0859 4889CE   		movq	%rcx, %rsi
 869 085c 4889C7   		movq	%rax, %rdi
 870 085f E8000000 		call	strtoul
 870      00
 871 0864 898518FF 		movl	%eax, -232(%rbp)
 871      FFFF
 285:main.c        **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 872              		.loc 1 285 0
 873 086a E8000000 		call	__errno_location
 873      00
 874 086f 8B00     		movl	(%rax), %eax
 875 0871 85C0     		testl	%eax, %eax
 876 0873 740F     		je	.L62
 877              		.loc 1 285 0 is_stmt 0 discriminator 1
 878 0875 C78514FF 		movl	$2, -236(%rbp)
 878      FFFF0200 
 878      0000
 879 087f E9670D00 		jmp	.L50
 879      00
 880              	.L62:
 286:main.c        **** 				ptr = end;
 881              		.loc 1 286 0 is_stmt 1
 882 0884 488B8540 		movq	-192(%rbp), %rax
 882      FFFFFF
 883 088b 48890500 		movq	%rax, ptr(%rip)
 883      000000
 287:main.c        **** 				
 288:main.c        **** 				// Only three valid chars at this point:
 289:main.c        **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 884              		.loc 1 289 0
 885 0892 488B0500 		movq	ptr(%rip), %rax
 885      000000
 886 0899 0FB600   		movzbl	(%rax), %eax
 887 089c 84C0     		testb	%al, %al
 888 089e 742B     		je	.L63
 889              		.loc 1 289 0 is_stmt 0 discriminator 1
 890 08a0 488B0500 		movq	ptr(%rip), %rax
 890      000000
 891 08a7 0FB600   		movzbl	(%rax), %eax
 892 08aa 3C3B     		cmpb	$59, %al
 893 08ac 741D     		je	.L63
 894              		.loc 1 289 0 discriminator 2
 895 08ae 488B0500 		movq	ptr(%rip), %rax
 895      000000
 896 08b5 0FB600   		movzbl	(%rax), %eax
 897 08b8 3C20     		cmpb	$32, %al
 898 08ba 740F     		je	.L63
 899              		.loc 1 289 0 discriminator 3
 900 08bc C78514FF 		movl	$5, -236(%rbp)
 900      FFFF0500 
 900      0000
 901 08c6 E9200D00 		jmp	.L50
 901      00
 902              	.L63:
 290:main.c        **** 				if ( *ptr == ' ' ) {
 903              		.loc 1 290 0 is_stmt 1
 904 08cb 488B0500 		movq	ptr(%rip), %rax
 904      000000
 905 08d2 0FB600   		movzbl	(%rax), %eax
 906 08d5 3C20     		cmpb	$32, %al
 907 08d7 0F856901 		jne	.L61
 907      0000
 908              	.LBB3:
 291:main.c        **** 					const char *p;
 292:main.c        **** 					const char quoteChar = *++ptr;
 909              		.loc 1 292 0
 910 08dd 488B0500 		movq	ptr(%rip), %rax
 910      000000
 911 08e4 4883C001 		addq	$1, %rax
 912 08e8 48890500 		movq	%rax, ptr(%rip)
 912      000000
 913 08ef 488B0500 		movq	ptr(%rip), %rax
 913      000000
 914 08f6 0FB600   		movzbl	(%rax), %eax
 915 08f9 888511FF 		movb	%al, -239(%rbp)
 915      FFFF
 293:main.c        **** 					CHECK_STATUS(
 916              		.loc 1 293 0
 917 08ff 80BD11FF 		cmpb	$34, -239(%rbp)
 917      FFFF22
 918 0906 7418     		je	.L64
 919              		.loc 1 293 0 is_stmt 0 discriminator 1
 920 0908 80BD11FF 		cmpb	$39, -239(%rbp)
 920      FFFF27
 921 090f 740F     		je	.L64
 922              		.loc 1 293 0 discriminator 2
 923 0911 C78514FF 		movl	$5, -236(%rbp)
 923      FFFF0500 
 923      0000
 924 091b E9CB0C00 		jmp	.L50
 924      00
 925              	.L64:
 294:main.c        **** 						(quoteChar != '"' && quoteChar != '\''),
 295:main.c        **** 						FLP_ILL_CHAR, cleanup);
 296:main.c        **** 					
 297:main.c        **** 					// Get the file to write bytes to:
 298:main.c        **** 					ptr++;
 926              		.loc 1 298 0 is_stmt 1
 927 0920 488B0500 		movq	ptr(%rip), %rax
 927      000000
 928 0927 4883C001 		addq	$1, %rax
 929 092b 48890500 		movq	%rax, ptr(%rip)
 929      000000
 299:main.c        **** 					p = ptr;
 930              		.loc 1 299 0
 931 0932 488B0500 		movq	ptr(%rip), %rax
 931      000000
 932 0939 48898560 		movq	%rax, -160(%rbp)
 932      FFFFFF
 300:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 933              		.loc 1 300 0
 934 0940 EB08     		jmp	.L65
 935              	.L67:
 301:main.c        **** 						p++;
 936              		.loc 1 301 0
 937 0942 48838560 		addq	$1, -160(%rbp)
 937      FFFFFF01 
 938              	.L65:
 300:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 939              		.loc 1 300 0
 940 094a 488B8560 		movq	-160(%rbp), %rax
 940      FFFFFF
 941 0951 0FB600   		movzbl	(%rax), %eax
 942 0954 3A8511FF 		cmpb	-239(%rbp), %al
 942      FFFF
 943 095a 740E     		je	.L66
 300:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 944              		.loc 1 300 0 is_stmt 0 discriminator 1
 945 095c 488B8560 		movq	-160(%rbp), %rax
 945      FFFFFF
 946 0963 0FB600   		movzbl	(%rax), %eax
 947 0966 84C0     		testb	%al, %al
 948 0968 75D8     		jne	.L67
 949              	.L66:
 302:main.c        **** 					}
 303:main.c        **** 					CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 950              		.loc 1 303 0 is_stmt 1
 951 096a 488B8560 		movq	-160(%rbp), %rax
 951      FFFFFF
 952 0971 0FB600   		movzbl	(%rax), %eax
 953 0974 84C0     		testb	%al, %al
 954 0976 750F     		jne	.L68
 955              		.loc 1 303 0 is_stmt 0 discriminator 1
 956 0978 C78514FF 		movl	$6, -236(%rbp)
 956      FFFF0600 
 956      0000
 957 0982 E9640C00 		jmp	.L50
 957      00
 958              	.L68:
 304:main.c        **** 					fileName = malloc((size_t)(p - ptr + 1));
 959              		.loc 1 304 0 is_stmt 1
 960 0987 488B8560 		movq	-160(%rbp), %rax
 960      FFFFFF
 961 098e 488B1500 		movq	ptr(%rip), %rdx
 961      000000
 962 0995 4829D0   		subq	%rdx, %rax
 963 0998 4883C001 		addq	$1, %rax
 964 099c 4889C7   		movq	%rax, %rdi
 965 099f E8000000 		call	malloc
 965      00
 966 09a4 48898550 		movq	%rax, -176(%rbp)
 966      FFFFFF
 305:main.c        **** 					CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 967              		.loc 1 305 0
 968 09ab 4883BD50 		cmpq	$0, -176(%rbp)
 968      FFFFFF00 
 969 09b3 750F     		jne	.L69
 970              		.loc 1 305 0 is_stmt 0 discriminator 1
 971 09b5 C78514FF 		movl	$7, -236(%rbp)
 971      FFFF0700 
 971      0000
 972 09bf E9270C00 		jmp	.L50
 972      00
 973              	.L69:
 306:main.c        **** 					CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 974              		.loc 1 306 0 is_stmt 1
 975 09c4 488B8560 		movq	-160(%rbp), %rax
 975      FFFFFF
 976 09cb 488B1500 		movq	ptr(%rip), %rdx
 976      000000
 977 09d2 4839D0   		cmpq	%rdx, %rax
 978 09d5 750F     		jne	.L70
 979              		.loc 1 306 0 is_stmt 0 discriminator 1
 980 09d7 C78514FF 		movl	$8, -236(%rbp)
 980      FFFF0800 
 980      0000
 981 09e1 E9050C00 		jmp	.L50
 981      00
 982              	.L70:
 307:main.c        **** 					strncpy(fileName, ptr, (size_t)(p - ptr));
 983              		.loc 1 307 0 is_stmt 1
 984 09e6 488B8560 		movq	-160(%rbp), %rax
 984      FFFFFF
 985 09ed 488B1500 		movq	ptr(%rip), %rdx
 985      000000
 986 09f4 4829D0   		subq	%rdx, %rax
 987 09f7 4889C2   		movq	%rax, %rdx
 988 09fa 488B0D00 		movq	ptr(%rip), %rcx
 988      000000
 989 0a01 488B8550 		movq	-176(%rbp), %rax
 989      FFFFFF
 990 0a08 4889CE   		movq	%rcx, %rsi
 991 0a0b 4889C7   		movq	%rax, %rdi
 992 0a0e E8000000 		call	strncpy
 992      00
 308:main.c        **** 					fileName[p - ptr] = '\0';
 993              		.loc 1 308 0
 994 0a13 488B8560 		movq	-160(%rbp), %rax
 994      FFFFFF
 995 0a1a 488B1500 		movq	ptr(%rip), %rdx
 995      000000
 996 0a21 4829D0   		subq	%rdx, %rax
 997 0a24 4889C2   		movq	%rax, %rdx
 998 0a27 488B8550 		movq	-176(%rbp), %rax
 998      FFFFFF
 999 0a2e 4801D0   		addq	%rdx, %rax
 1000 0a31 C60000   		movb	$0, (%rax)
 309:main.c        **** 					ptr = p + 1;
 1001              		.loc 1 309 0
 1002 0a34 488B8560 		movq	-160(%rbp), %rax
 1002      FFFFFF
 1003 0a3b 4883C001 		addq	$1, %rax
 1004 0a3f 48890500 		movq	%rax, ptr(%rip)
 1004      000000
 1005              	.L61:
 1006              	.LBE3:
 310:main.c        **** 				}
 311:main.c        **** 			}
 312:main.c        **** 			if ( fileName ) {
 1007              		.loc 1 312 0
 1008 0a46 4883BD50 		cmpq	$0, -176(%rbp)
 1008      FFFFFF00 
 1009 0a4e 0F84EA01 		je	.L71
 1009      0000
 1010              	.LBB4:
 313:main.c        **** 				uint16 checksum = 0x0000;
 1011              		.loc 1 313 0
 1012 0a54 66C78538 		movw	$0, -200(%rbp)
 1012      FFFFFF00 
 1012      00
 314:main.c        **** 
 315:main.c        **** 				// Open file for writing
 316:main.c        **** 				file = fopen(fileName, "wb");
 1013              		.loc 1 316 0
 1014 0a5d 488B8550 		movq	-176(%rbp), %rax
 1014      FFFFFF
 1015 0a64 BE000000 		movl	$.LC17, %esi
 1015      00
 1016 0a69 4889C7   		movq	%rax, %rdi
 1017 0a6c E8000000 		call	fopen
 1017      00
 1018 0a71 48898558 		movq	%rax, -168(%rbp)
 1018      FFFFFF
 317:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 1019              		.loc 1 317 0
 1020 0a78 4883BD58 		cmpq	$0, -168(%rbp)
 1020      FFFFFF00 
 1021 0a80 750F     		jne	.L72
 1022              		.loc 1 317 0 is_stmt 0 discriminator 1
 1023 0a82 C78514FF 		movl	$11, -236(%rbp)
 1023      FFFF0B00 
 1023      0000
 1024 0a8c E95A0B00 		jmp	.L50
 1024      00
 1025              	.L72:
 318:main.c        **** 				free(fileName);
 1026              		.loc 1 318 0 is_stmt 1
 1027 0a91 488B8550 		movq	-176(%rbp), %rax
 1027      FFFFFF
 1028 0a98 4889C7   		movq	%rax, %rdi
 1029 0a9b E8000000 		call	free
 1029      00
 319:main.c        **** 				fileName = NULL;
 1030              		.loc 1 319 0
 1031 0aa0 48C78550 		movq	$0, -176(%rbp)
 1031      FFFFFF00 
 1031      000000
 320:main.c        **** 
 321:main.c        **** 				#ifdef WIN32
 322:main.c        **** 					QueryPerformanceCounter(&tvStart);
 323:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 324:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 325:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 326:main.c        **** 					totalTime /= freq.QuadPart;
 327:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 328:main.c        **** 				#else
 329:main.c        **** 					gettimeofday(&tvStart, NULL);
 1032              		.loc 1 329 0
 1033 0aab 488D45B0 		leaq	-80(%rbp), %rax
 1034 0aaf BE000000 		movl	$0, %esi
 1034      00
 1035 0ab4 4889C7   		movq	%rax, %rdi
 1036 0ab7 E8000000 		call	gettimeofday
 1036      00
 330:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 1037              		.loc 1 330 0
 1038 0abc 8B8530FF 		movl	-208(%rbp), %eax
 1038      FFFF
 1039 0ac2 0FB6F0   		movzbl	%al, %esi
 1040 0ac5 4C8B85F8 		movq	-264(%rbp), %r8
 1040      FEFFFF
 1041 0acc 488DBD38 		leaq	-200(%rbp), %rdi
 1041      FFFFFF
 1042 0ad3 488B8D58 		movq	-168(%rbp), %rcx
 1042      FFFFFF
 1043 0ada 8B9518FF 		movl	-232(%rbp), %edx
 1043      FFFF
 1044 0ae0 488B8508 		movq	-248(%rbp), %rax
 1044      FFFFFF
 1045 0ae7 4D89C1   		movq	%r8, %r9
 1046 0aea 4989F8   		movq	%rdi, %r8
 1047 0aed 4889C7   		movq	%rax, %rdi
 1048 0af0 E8B1F6FF 		call	doRead
 1048      FF
 1049 0af5 898528FF 		movl	%eax, -216(%rbp)
 1049      FFFF
 331:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1050              		.loc 1 331 0
 1051 0afb 488D45C0 		leaq	-64(%rbp), %rax
 1052 0aff BE000000 		movl	$0, %esi
 1052      00
 1053 0b04 4889C7   		movq	%rax, %rdi
 1054 0b07 E8000000 		call	gettimeofday
 1054      00
 332:main.c        **** 					startTime = tvStart.tv_sec;
 1055              		.loc 1 332 0
 1056 0b0c 488B45B0 		movq	-80(%rbp), %rax
 1057 0b10 48894588 		movq	%rax, -120(%rbp)
 333:main.c        **** 					startTime *= 1000000;
 1058              		.loc 1 333 0
 1059 0b14 488B4588 		movq	-120(%rbp), %rax
 1060 0b18 4869C040 		imulq	$1000000, %rax, %rax
 1060      420F00
 1061 0b1f 48894588 		movq	%rax, -120(%rbp)
 334:main.c        **** 					startTime += tvStart.tv_usec;
 1062              		.loc 1 334 0
 1063 0b23 488B45B8 		movq	-72(%rbp), %rax
 1064 0b27 48014588 		addq	%rax, -120(%rbp)
 335:main.c        **** 					endTime = tvEnd.tv_sec;
 1065              		.loc 1 335 0
 1066 0b2b 488B45C0 		movq	-64(%rbp), %rax
 1067 0b2f 48894590 		movq	%rax, -112(%rbp)
 336:main.c        **** 					endTime *= 1000000;
 1068              		.loc 1 336 0
 1069 0b33 488B4590 		movq	-112(%rbp), %rax
 1070 0b37 4869C040 		imulq	$1000000, %rax, %rax
 1070      420F00
 1071 0b3e 48894590 		movq	%rax, -112(%rbp)
 337:main.c        **** 					endTime += tvEnd.tv_usec;
 1072              		.loc 1 337 0
 1073 0b42 488B45C8 		movq	-56(%rbp), %rax
 1074 0b46 48014590 		addq	%rax, -112(%rbp)
 338:main.c        **** 					totalTime = (double)(endTime - startTime);
 1075              		.loc 1 338 0
 1076 0b4a 488B4590 		movq	-112(%rbp), %rax
 1077 0b4e 482B4588 		subq	-120(%rbp), %rax
 1078 0b52 660FEFC0 		pxor	%xmm0, %xmm0
 1079 0b56 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1079      C0
 1080 0b5b F20F1145 		movsd	%xmm0, -104(%rbp)
 1080      98
 339:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1081              		.loc 1 339 0
 1082 0b60 F20F1045 		movsd	-104(%rbp), %xmm0
 1082      98
 1083 0b65 F20F100D 		movsd	.LC18(%rip), %xmm1
 1083      00000000 
 1084 0b6d F20F5EC1 		divsd	%xmm1, %xmm0
 1085 0b71 F20F1145 		movsd	%xmm0, -104(%rbp)
 1085      98
 340:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1086              		.loc 1 340 0
 1087 0b76 8B8518FF 		movl	-232(%rbp), %eax
 1087      FFFF
 1088 0b7c 4885C0   		testq	%rax, %rax
 1089 0b7f 780B     		js	.L74
 1090 0b81 660FEFC0 		pxor	%xmm0, %xmm0
 1091 0b85 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1091      C0
 1092 0b8a EB19     		jmp	.L75
 1093              	.L74:
 1094 0b8c 4889C2   		movq	%rax, %rdx
 1095 0b8f 48D1EA   		shrq	%rdx
 1096 0b92 83E001   		andl	$1, %eax
 1097 0b95 4809C2   		orq	%rax, %rdx
 1098 0b98 660FEFC0 		pxor	%xmm0, %xmm0
 1099 0b9c F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1099      C2
 1100 0ba1 F20F58C0 		addsd	%xmm0, %xmm0
 1101              	.L75:
 1102 0ba5 F20F1055 		movsd	-104(%rbp), %xmm2
 1102      98
 1103 0baa F20F100D 		movsd	.LC19(%rip), %xmm1
 1103      00000000 
 1104 0bb2 F20F59CA 		mulsd	%xmm2, %xmm1
 1105 0bb6 F20F5EC1 		divsd	%xmm1, %xmm0
 1106 0bba F20F1145 		movsd	%xmm0, -96(%rbp)
 1106      A0
 341:main.c        **** 				#endif
 342:main.c        **** 				if ( enableBenchmarking ) {
 1107              		.loc 1 342 0
 1108 0bbf 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1108      000000
 1109 0bc6 84C0     		testb	%al, %al
 1110 0bc8 743A     		je	.L76
 343:main.c        **** 					printf(
 1111              		.loc 1 343 0
 1112 0bca 0FB78538 		movzwl	-200(%rbp), %eax
 1112      FFFFFF
 1113 0bd1 0FB7D0   		movzwl	%ax, %edx
 1114 0bd4 488B75A0 		movq	-96(%rbp), %rsi
 1115 0bd8 8B8D30FF 		movl	-208(%rbp), %ecx
 1115      FFFF
 1116 0bde 8B8518FF 		movl	-232(%rbp), %eax
 1116      FFFF
 1117 0be4 4889B5F0 		movq	%rsi, -272(%rbp)
 1117      FEFFFF
 1118 0beb F20F1085 		movsd	-272(%rbp), %xmm0
 1118      F0FEFFFF 
 1119 0bf3 89C6     		movl	%eax, %esi
 1120 0bf5 BF000000 		movl	$.LC20, %edi
 1120      00
 1121 0bfa B8010000 		movl	$1, %eax
 1121      00
 1122 0bff E8000000 		call	printf
 1122      00
 1123              	.L76:
 344:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 345:main.c        **** 						length, checksum, chan, speed);
 346:main.c        **** 				}
 347:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 1124              		.loc 1 347 0
 1125 0c04 83BD28FF 		cmpl	$0, -216(%rbp)
 1125      FFFF00
 1126 0c0b 7412     		je	.L77
 1127              		.loc 1 347 0 is_stmt 0 discriminator 1
 1128 0c0d 8B8528FF 		movl	-216(%rbp), %eax
 1128      FFFF
 1129 0c13 898514FF 		movl	%eax, -236(%rbp)
 1129      FFFF
 1130 0c19 90       		nop
 1131              	.LBE4:
 270:main.c        **** 
 1132              		.loc 1 270 0 is_stmt 1 discriminator 1
 1133 0c1a E9CC0900 		jmp	.L50
 1133      00
 1134              	.L77:
 1135              	.LBB5:
 348:main.c        **** 
 349:main.c        **** 				// Close the file
 350:main.c        **** 				fclose(file);
 1136              		.loc 1 350 0
 1137 0c1f 488B8558 		movq	-168(%rbp), %rax
 1137      FFFFFF
 1138 0c26 4889C7   		movq	%rax, %rdi
 1139 0c29 E8000000 		call	fclose
 1139      00
 351:main.c        **** 				file = NULL;
 1140              		.loc 1 351 0
 1141 0c2e 48C78558 		movq	$0, -168(%rbp)
 1141      FFFFFF00 
 1141      000000
 1142              	.LBE5:
 352:main.c        **** 			} else {
 353:main.c        **** 				size_t oldLength = dataFromFPGA.length;
 354:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 355:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 356:main.c        **** 				#ifdef WIN32
 357:main.c        **** 					QueryPerformanceCounter(&tvStart);
 358:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 359:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 360:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 361:main.c        **** 					totalTime /= freq.QuadPart;
 362:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 363:main.c        **** 				#else
 364:main.c        **** 					gettimeofday(&tvStart, NULL);
 365:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 366:main.c        ****                     out = dataFromFPGA.data[0];
 367:main.c        **** 					gettimeofday(&tvEnd, NULL);
 368:main.c        **** 					startTime = tvStart.tv_sec;
 369:main.c        **** 					startTime *= 1000000;
 370:main.c        **** 					startTime += tvStart.tv_usec;
 371:main.c        **** 					endTime = tvEnd.tv_sec;
 372:main.c        **** 					endTime *= 1000000;
 373:main.c        **** 					endTime += tvEnd.tv_usec;
 374:main.c        **** 					totalTime = (double)(endTime - startTime);
 375:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 376:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 377:main.c        **** 				#endif
 378:main.c        **** 				if ( enableBenchmarking ) {
 379:main.c        **** 					printf(
 380:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 381:main.c        **** 						length, calcChecksum(dataFromFPGA.data + oldLength, length), chan, speed);
 382:main.c        **** 				}
 383:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 384:main.c        **** 			}
 385:main.c        **** 			break;
 1143              		.loc 1 385 0
 1144 0c39 E9680900 		jmp	.L127
 1144      00
 1145              	.L71:
 1146              	.LBB6:
 353:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 1147              		.loc 1 353 0
 1148 0c3e 488B45D8 		movq	-40(%rbp), %rax
 1149 0c42 488945A8 		movq	%rax, -88(%rbp)
 354:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 1150              		.loc 1 354 0
 1151 0c46 8B9518FF 		movl	-232(%rbp), %edx
 1151      FFFF
 1152 0c4c 488B8DF8 		movq	-264(%rbp), %rcx
 1152      FEFFFF
 1153 0c53 488D45D0 		leaq	-48(%rbp), %rax
 1154 0c57 BE000000 		movl	$0, %esi
 1154      00
 1155 0c5c 4889C7   		movq	%rax, %rdi
 1156 0c5f E8000000 		call	bufAppendConst
 1156      00
 1157 0c64 898520FF 		movl	%eax, -224(%rbp)
 1157      FFFF
 355:main.c        **** 				#ifdef WIN32
 1158              		.loc 1 355 0
 1159 0c6a 83BD20FF 		cmpl	$0, -224(%rbp)
 1159      FFFF00
 1160 0c71 740F     		je	.L79
 355:main.c        **** 				#ifdef WIN32
 1161              		.loc 1 355 0 is_stmt 0 discriminator 1
 1162 0c73 C78514FF 		movl	$1, -236(%rbp)
 1162      FFFF0100 
 1162      0000
 1163 0c7d E9690900 		jmp	.L50
 1163      00
 1164              	.L79:
 364:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 1165              		.loc 1 364 0 is_stmt 1
 1166 0c82 488D45B0 		leaq	-80(%rbp), %rax
 1167 0c86 BE000000 		movl	$0, %esi
 1167      00
 1168 0c8b 4889C7   		movq	%rax, %rdi
 1169 0c8e E8000000 		call	gettimeofday
 1169      00
 365:main.c        ****                     out = dataFromFPGA.data[0];
 1170              		.loc 1 365 0
 1171 0c93 488B55D0 		movq	-48(%rbp), %rdx
 1172 0c97 488B45A8 		movq	-88(%rbp), %rax
 1173 0c9b 488D0C02 		leaq	(%rdx,%rax), %rcx
 1174 0c9f 8B9518FF 		movl	-232(%rbp), %edx
 1174      FFFF
 1175 0ca5 8B8530FF 		movl	-208(%rbp), %eax
 1175      FFFF
 1176 0cab 0FB6F0   		movzbl	%al, %esi
 1177 0cae 488BBDF8 		movq	-264(%rbp), %rdi
 1177      FEFFFF
 1178 0cb5 488B8508 		movq	-248(%rbp), %rax
 1178      FFFFFF
 1179 0cbc 4989F8   		movq	%rdi, %r8
 1180 0cbf 4889C7   		movq	%rax, %rdi
 1181 0cc2 E8000000 		call	flReadChannel
 1181      00
 1182 0cc7 898524FF 		movl	%eax, -220(%rbp)
 1182      FFFF
 366:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1183              		.loc 1 366 0
 1184 0ccd 488B45D0 		movq	-48(%rbp), %rax
 1185 0cd1 0FB600   		movzbl	(%rax), %eax
 1186 0cd4 88050000 		movb	%al, out(%rip)
 1186      0000
 367:main.c        **** 					startTime = tvStart.tv_sec;
 1187              		.loc 1 367 0
 1188 0cda 488D45C0 		leaq	-64(%rbp), %rax
 1189 0cde BE000000 		movl	$0, %esi
 1189      00
 1190 0ce3 4889C7   		movq	%rax, %rdi
 1191 0ce6 E8000000 		call	gettimeofday
 1191      00
 368:main.c        **** 					startTime *= 1000000;
 1192              		.loc 1 368 0
 1193 0ceb 488B45B0 		movq	-80(%rbp), %rax
 1194 0cef 48894588 		movq	%rax, -120(%rbp)
 369:main.c        **** 					startTime += tvStart.tv_usec;
 1195              		.loc 1 369 0
 1196 0cf3 488B4588 		movq	-120(%rbp), %rax
 1197 0cf7 4869C040 		imulq	$1000000, %rax, %rax
 1197      420F00
 1198 0cfe 48894588 		movq	%rax, -120(%rbp)
 370:main.c        **** 					endTime = tvEnd.tv_sec;
 1199              		.loc 1 370 0
 1200 0d02 488B45B8 		movq	-72(%rbp), %rax
 1201 0d06 48014588 		addq	%rax, -120(%rbp)
 371:main.c        **** 					endTime *= 1000000;
 1202              		.loc 1 371 0
 1203 0d0a 488B45C0 		movq	-64(%rbp), %rax
 1204 0d0e 48894590 		movq	%rax, -112(%rbp)
 372:main.c        **** 					endTime += tvEnd.tv_usec;
 1205              		.loc 1 372 0
 1206 0d12 488B4590 		movq	-112(%rbp), %rax
 1207 0d16 4869C040 		imulq	$1000000, %rax, %rax
 1207      420F00
 1208 0d1d 48894590 		movq	%rax, -112(%rbp)
 373:main.c        **** 					totalTime = (double)(endTime - startTime);
 1209              		.loc 1 373 0
 1210 0d21 488B45C8 		movq	-56(%rbp), %rax
 1211 0d25 48014590 		addq	%rax, -112(%rbp)
 374:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1212              		.loc 1 374 0
 1213 0d29 488B4590 		movq	-112(%rbp), %rax
 1214 0d2d 482B4588 		subq	-120(%rbp), %rax
 1215 0d31 660FEFC0 		pxor	%xmm0, %xmm0
 1216 0d35 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1216      C0
 1217 0d3a F20F1145 		movsd	%xmm0, -104(%rbp)
 1217      98
 375:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1218              		.loc 1 375 0
 1219 0d3f F20F1045 		movsd	-104(%rbp), %xmm0
 1219      98
 1220 0d44 F20F100D 		movsd	.LC18(%rip), %xmm1
 1220      00000000 
 1221 0d4c F20F5EC1 		divsd	%xmm1, %xmm0
 1222 0d50 F20F1145 		movsd	%xmm0, -104(%rbp)
 1222      98
 376:main.c        **** 				#endif
 1223              		.loc 1 376 0
 1224 0d55 8B8518FF 		movl	-232(%rbp), %eax
 1224      FFFF
 1225 0d5b 4885C0   		testq	%rax, %rax
 1226 0d5e 780B     		js	.L80
 1227 0d60 660FEFC0 		pxor	%xmm0, %xmm0
 1228 0d64 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1228      C0
 1229 0d69 EB19     		jmp	.L81
 1230              	.L80:
 1231 0d6b 4889C2   		movq	%rax, %rdx
 1232 0d6e 48D1EA   		shrq	%rdx
 1233 0d71 83E001   		andl	$1, %eax
 1234 0d74 4809C2   		orq	%rax, %rdx
 1235 0d77 660FEFC0 		pxor	%xmm0, %xmm0
 1236 0d7b F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1236      C2
 1237 0d80 F20F58C0 		addsd	%xmm0, %xmm0
 1238              	.L81:
 1239 0d84 F20F1055 		movsd	-104(%rbp), %xmm2
 1239      98
 1240 0d89 F20F100D 		movsd	.LC19(%rip), %xmm1
 1240      00000000 
 1241 0d91 F20F59CA 		mulsd	%xmm2, %xmm1
 1242 0d95 F20F5EC1 		divsd	%xmm1, %xmm0
 1243 0d99 F20F1145 		movsd	%xmm0, -96(%rbp)
 1243      A0
 378:main.c        **** 					printf(
 1244              		.loc 1 378 0
 1245 0d9e 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1245      000000
 1246 0da5 84C0     		testb	%al, %al
 1247 0da7 744F     		je	.L82
 381:main.c        **** 				}
 1248              		.loc 1 381 0
 1249 0da9 8B8518FF 		movl	-232(%rbp), %eax
 1249      FFFF
 1250 0daf 488B4DD0 		movq	-48(%rbp), %rcx
 1251 0db3 488B55A8 		movq	-88(%rbp), %rdx
 1252 0db7 4801CA   		addq	%rcx, %rdx
 1253 0dba 4889C6   		movq	%rax, %rsi
 1254 0dbd 4889D7   		movq	%rdx, %rdi
 1255 0dc0 E879F2FF 		call	calcChecksum
 1255      FF
 379:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 1256              		.loc 1 379 0
 1257 0dc5 0FB7D0   		movzwl	%ax, %edx
 1258 0dc8 488B75A0 		movq	-96(%rbp), %rsi
 1259 0dcc 8B8D30FF 		movl	-208(%rbp), %ecx
 1259      FFFF
 1260 0dd2 8B8518FF 		movl	-232(%rbp), %eax
 1260      FFFF
 1261 0dd8 4889B5F0 		movq	%rsi, -272(%rbp)
 1261      FEFFFF
 1262 0ddf F20F1085 		movsd	-272(%rbp), %xmm0
 1262      F0FEFFFF 
 1263 0de7 89C6     		movl	%eax, %esi
 1264 0de9 BF000000 		movl	$.LC20, %edi
 1264      00
 1265 0dee B8010000 		movl	$1, %eax
 1265      00
 1266 0df3 E8000000 		call	printf
 1266      00
 1267              	.L82:
 383:main.c        **** 			}
 1268              		.loc 1 383 0
 1269 0df8 83BD24FF 		cmpl	$0, -220(%rbp)
 1269      FFFF00
 1270 0dff 0F84A107 		je	.L127
 1270      0000
 383:main.c        **** 			}
 1271              		.loc 1 383 0 is_stmt 0 discriminator 1
 1272 0e05 C78514FF 		movl	$1, -236(%rbp)
 1272      FFFF0100 
 1272      0000
 1273 0e0f 90       		nop
 1274 0e10 E9D60700 		jmp	.L50
 1274      00
 1275              	.L55:
 1276              	.LBE6:
 1277              	.LBE2:
 1278              	.LBB7:
 386:main.c        **** 		}
 387:main.c        **** 		case 'w':{
 388:main.c        **** 			unsigned long int chan;
 389:main.c        **** 			size_t length = 1, i;
 1279              		.loc 1 389 0 is_stmt 1
 1280 0e15 48C78538 		movq	$1, -200(%rbp)
 1280      FFFFFF01 
 1280      000000
 390:main.c        **** 			char *end, ch;
 391:main.c        **** 			const char *p;
 392:main.c        **** 			ptr++;
 1281              		.loc 1 392 0
 1282 0e20 488B0500 		movq	ptr(%rip), %rax
 1282      000000
 1283 0e27 4883C001 		addq	$1, %rax
 1284 0e2b 48890500 		movq	%rax, ptr(%rip)
 1284      000000
 393:main.c        **** 			
 394:main.c        **** 			// Get the channel to be written:
 395:main.c        **** 			errno = 0;
 1285              		.loc 1 395 0
 1286 0e32 E8000000 		call	__errno_location
 1286      00
 1287 0e37 C7000000 		movl	$0, (%rax)
 1287      0000
 396:main.c        **** 			chan = strtoul(ptr, &end, 16);
 1288              		.loc 1 396 0
 1289 0e3d 488B0500 		movq	ptr(%rip), %rax
 1289      000000
 1290 0e44 488D8D40 		leaq	-192(%rbp), %rcx
 1290      FFFFFF
 1291 0e4b BA100000 		movl	$16, %edx
 1291      00
 1292 0e50 4889CE   		movq	%rcx, %rsi
 1293 0e53 4889C7   		movq	%rax, %rdi
 1294 0e56 E8000000 		call	strtoul
 1294      00
 1295 0e5b 48894580 		movq	%rax, -128(%rbp)
 397:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1296              		.loc 1 397 0
 1297 0e5f E8000000 		call	__errno_location
 1297      00
 1298 0e64 8B00     		movl	(%rax), %eax
 1299 0e66 85C0     		testl	%eax, %eax
 1300 0e68 740F     		je	.L84
 1301              		.loc 1 397 0 is_stmt 0 discriminator 1
 1302 0e6a C78514FF 		movl	$2, -236(%rbp)
 1302      FFFF0200 
 1302      0000
 1303 0e74 E9720700 		jmp	.L50
 1303      00
 1304              	.L84:
 398:main.c        **** 
 399:main.c        **** 			// Ensure that it's 0-127
 400:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 1305              		.loc 1 400 0 is_stmt 1
 1306 0e79 48837D80 		cmpq	$127, -128(%rbp)
 1306      7F
 1307 0e7e 760F     		jbe	.L86
 1308              		.loc 1 400 0 is_stmt 0 discriminator 1
 1309 0e80 C78514FF 		movl	$3, -236(%rbp)
 1309      FFFF0300 
 1309      0000
 1310 0e8a E95C0700 		jmp	.L50
 1310      00
 1311              	.L86:
 401:main.c        **** 			ptr = end;
 1312              		.loc 1 401 0 is_stmt 1
 1313 0e8f 488B8540 		movq	-192(%rbp), %rax
 1313      FFFFFF
 1314 0e96 48890500 		movq	%rax, ptr(%rip)
 1314      000000
 402:main.c        **** 
 403:main.c        **** 			// There must be a space now:
 404:main.c        **** 			CHECK_STATUS(*ptr != ' ', FLP_ILL_CHAR, cleanup);
 1315              		.loc 1 404 0
 1316 0e9d 488B0500 		movq	ptr(%rip), %rax
 1316      000000
 1317 0ea4 0FB600   		movzbl	(%rax), %eax
 1318 0ea7 3C20     		cmpb	$32, %al
 1319 0ea9 740F     		je	.L87
 1320              		.loc 1 404 0 is_stmt 0 discriminator 1
 1321 0eab C78514FF 		movl	$5, -236(%rbp)
 1321      FFFF0500 
 1321      0000
 1322 0eb5 E9310700 		jmp	.L50
 1322      00
 1323              	.L87:
 405:main.c        **** 
 406:main.c        **** 			// Now either a quote or a hex digit
 407:main.c        **** 		   ch = *++ptr;
 1324              		.loc 1 407 0 is_stmt 1
 1325 0eba 488B0500 		movq	ptr(%rip), %rax
 1325      000000
 1326 0ec1 4883C001 		addq	$1, %rax
 1327 0ec5 48890500 		movq	%rax, ptr(%rip)
 1327      000000
 1328 0ecc 488B0500 		movq	ptr(%rip), %rax
 1328      000000
 1329 0ed3 0FB600   		movzbl	(%rax), %eax
 1330 0ed6 888510FF 		movb	%al, -240(%rbp)
 1330      FFFF
 408:main.c        **** 			if ( ch == '"' || ch == '\'' ) {
 1331              		.loc 1 408 0
 1332 0edc 80BD10FF 		cmpb	$34, -240(%rbp)
 1332      FFFF22
 1333 0ee3 740D     		je	.L88
 1334              		.loc 1 408 0 is_stmt 0 discriminator 1
 1335 0ee5 80BD10FF 		cmpb	$39, -240(%rbp)
 1335      FFFF27
 1336 0eec 0F851203 		jne	.L89
 1336      0000
 1337              	.L88:
 1338              	.LBB8:
 409:main.c        **** 				uint16 checksum = 0x0000;
 1339              		.loc 1 409 0 is_stmt 1
 1340 0ef2 66C78512 		movw	$0, -238(%rbp)
 1340      FFFFFF00 
 1340      00
 410:main.c        **** 
 411:main.c        **** 				// Get the file to read bytes from:
 412:main.c        **** 				ptr++;
 1341              		.loc 1 412 0
 1342 0efb 488B0500 		movq	ptr(%rip), %rax
 1342      000000
 1343 0f02 4883C001 		addq	$1, %rax
 1344 0f06 48890500 		movq	%rax, ptr(%rip)
 1344      000000
 413:main.c        **** 				p = ptr;
 1345              		.loc 1 413 0
 1346 0f0d 488B0500 		movq	ptr(%rip), %rax
 1346      000000
 1347 0f14 48898570 		movq	%rax, -144(%rbp)
 1347      FFFFFF
 414:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1348              		.loc 1 414 0
 1349 0f1b EB08     		jmp	.L90
 1350              	.L92:
 415:main.c        **** 					p++;
 1351              		.loc 1 415 0
 1352 0f1d 48838570 		addq	$1, -144(%rbp)
 1352      FFFFFF01 
 1353              	.L90:
 414:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1354              		.loc 1 414 0
 1355 0f25 488B8570 		movq	-144(%rbp), %rax
 1355      FFFFFF
 1356 0f2c 0FB600   		movzbl	(%rax), %eax
 1357 0f2f 3A8510FF 		cmpb	-240(%rbp), %al
 1357      FFFF
 1358 0f35 740E     		je	.L91
 414:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1359              		.loc 1 414 0 is_stmt 0 discriminator 1
 1360 0f37 488B8570 		movq	-144(%rbp), %rax
 1360      FFFFFF
 1361 0f3e 0FB600   		movzbl	(%rax), %eax
 1362 0f41 84C0     		testb	%al, %al
 1363 0f43 75D8     		jne	.L92
 1364              	.L91:
 416:main.c        **** 				}
 417:main.c        **** 				CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 1365              		.loc 1 417 0 is_stmt 1
 1366 0f45 488B8570 		movq	-144(%rbp), %rax
 1366      FFFFFF
 1367 0f4c 0FB600   		movzbl	(%rax), %eax
 1368 0f4f 84C0     		testb	%al, %al
 1369 0f51 750F     		jne	.L93
 1370              		.loc 1 417 0 is_stmt 0 discriminator 1
 1371 0f53 C78514FF 		movl	$6, -236(%rbp)
 1371      FFFF0600 
 1371      0000
 1372 0f5d E9890600 		jmp	.L50
 1372      00
 1373              	.L93:
 418:main.c        **** 				fileName = malloc((size_t)(p - ptr + 1));
 1374              		.loc 1 418 0 is_stmt 1
 1375 0f62 488B8570 		movq	-144(%rbp), %rax
 1375      FFFFFF
 1376 0f69 488B1500 		movq	ptr(%rip), %rdx
 1376      000000
 1377 0f70 4829D0   		subq	%rdx, %rax
 1378 0f73 4883C001 		addq	$1, %rax
 1379 0f77 4889C7   		movq	%rax, %rdi
 1380 0f7a E8000000 		call	malloc
 1380      00
 1381 0f7f 48898550 		movq	%rax, -176(%rbp)
 1381      FFFFFF
 419:main.c        **** 				CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 1382              		.loc 1 419 0
 1383 0f86 4883BD50 		cmpq	$0, -176(%rbp)
 1383      FFFFFF00 
 1384 0f8e 750F     		jne	.L95
 1385              		.loc 1 419 0 is_stmt 0 discriminator 1
 1386 0f90 C78514FF 		movl	$7, -236(%rbp)
 1386      FFFF0700 
 1386      0000
 1387 0f9a E9600200 		jmp	.L94
 1387      00
 1388              	.L95:
 420:main.c        **** 				CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 1389              		.loc 1 420 0 is_stmt 1
 1390 0f9f 488B8570 		movq	-144(%rbp), %rax
 1390      FFFFFF
 1391 0fa6 488B1500 		movq	ptr(%rip), %rdx
 1391      000000
 1392 0fad 4839D0   		cmpq	%rdx, %rax
 1393 0fb0 750F     		jne	.L96
 1394              		.loc 1 420 0 is_stmt 0 discriminator 1
 1395 0fb2 C78514FF 		movl	$8, -236(%rbp)
 1395      FFFF0800 
 1395      0000
 1396 0fbc E93E0200 		jmp	.L94
 1396      00
 1397              	.L96:
 421:main.c        **** 				strncpy(fileName, ptr, (size_t)(p - ptr));
 1398              		.loc 1 421 0 is_stmt 1
 1399 0fc1 488B8570 		movq	-144(%rbp), %rax
 1399      FFFFFF
 1400 0fc8 488B1500 		movq	ptr(%rip), %rdx
 1400      000000
 1401 0fcf 4829D0   		subq	%rdx, %rax
 1402 0fd2 4889C2   		movq	%rax, %rdx
 1403 0fd5 488B0D00 		movq	ptr(%rip), %rcx
 1403      000000
 1404 0fdc 488B8550 		movq	-176(%rbp), %rax
 1404      FFFFFF
 1405 0fe3 4889CE   		movq	%rcx, %rsi
 1406 0fe6 4889C7   		movq	%rax, %rdi
 1407 0fe9 E8000000 		call	strncpy
 1407      00
 422:main.c        **** 				fileName[p - ptr] = '\0';
 1408              		.loc 1 422 0
 1409 0fee 488B8570 		movq	-144(%rbp), %rax
 1409      FFFFFF
 1410 0ff5 488B1500 		movq	ptr(%rip), %rdx
 1410      000000
 1411 0ffc 4829D0   		subq	%rdx, %rax
 1412 0fff 4889C2   		movq	%rax, %rdx
 1413 1002 488B8550 		movq	-176(%rbp), %rax
 1413      FFFFFF
 1414 1009 4801D0   		addq	%rdx, %rax
 1415 100c C60000   		movb	$0, (%rax)
 423:main.c        **** 				ptr = p + 1;  // skip over closing quote
 1416              		.loc 1 423 0
 1417 100f 488B8570 		movq	-144(%rbp), %rax
 1417      FFFFFF
 1418 1016 4883C001 		addq	$1, %rax
 1419 101a 48890500 		movq	%rax, ptr(%rip)
 1419      000000
 424:main.c        **** 
 425:main.c        **** 				// Open file for reading
 426:main.c        **** 				file = fopen(fileName, "rb");
 1420              		.loc 1 426 0
 1421 1021 488B8550 		movq	-176(%rbp), %rax
 1421      FFFFFF
 1422 1028 BE000000 		movl	$.LC21, %esi
 1422      00
 1423 102d 4889C7   		movq	%rax, %rdi
 1424 1030 E8000000 		call	fopen
 1424      00
 1425 1035 48898558 		movq	%rax, -168(%rbp)
 1425      FFFFFF
 427:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_LOAD, cleanup);
 1426              		.loc 1 427 0
 1427 103c 4883BD58 		cmpq	$0, -168(%rbp)
 1427      FFFFFF00 
 1428 1044 750F     		jne	.L97
 1429              		.loc 1 427 0 is_stmt 0 discriminator 1
 1430 1046 C78514FF 		movl	$10, -236(%rbp)
 1430      FFFF0A00 
 1430      0000
 1431 1050 E9AA0100 		jmp	.L94
 1431      00
 1432              	.L97:
 428:main.c        **** 				free(fileName);
 1433              		.loc 1 428 0 is_stmt 1
 1434 1055 488B8550 		movq	-176(%rbp), %rax
 1434      FFFFFF
 1435 105c 4889C7   		movq	%rax, %rdi
 1436 105f E8000000 		call	free
 1436      00
 429:main.c        **** 				fileName = NULL;
 1437              		.loc 1 429 0
 1438 1064 48C78550 		movq	$0, -176(%rbp)
 1438      FFFFFF00 
 1438      000000
 430:main.c        **** 				
 431:main.c        **** 				#ifdef WIN32
 432:main.c        **** 					QueryPerformanceCounter(&tvStart);
 433:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 434:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 435:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 436:main.c        **** 					totalTime /= freq.QuadPart;
 437:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 438:main.c        **** 				#else
 439:main.c        **** 					gettimeofday(&tvStart, NULL);
 1439              		.loc 1 439 0
 1440 106f 488D45B0 		leaq	-80(%rbp), %rax
 1441 1073 BE000000 		movl	$0, %esi
 1441      00
 1442 1078 4889C7   		movq	%rax, %rdi
 1443 107b E8000000 		call	gettimeofday
 1443      00
 440:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 1444              		.loc 1 440 0
 1445 1080 488B4580 		movq	-128(%rbp), %rax
 1446 1084 0FB6F0   		movzbl	%al, %esi
 1447 1087 4C8B85F8 		movq	-264(%rbp), %r8
 1447      FEFFFF
 1448 108e 488DBD12 		leaq	-238(%rbp), %rdi
 1448      FFFFFF
 1449 1095 488D8D38 		leaq	-200(%rbp), %rcx
 1449      FFFFFF
 1450 109c 488B9558 		movq	-168(%rbp), %rdx
 1450      FFFFFF
 1451 10a3 488B8508 		movq	-248(%rbp), %rax
 1451      FFFFFF
 1452 10aa 4D89C1   		movq	%r8, %r9
 1453 10ad 4989F8   		movq	%rdi, %r8
 1454 10b0 4889C7   		movq	%rax, %rdi
 1455 10b3 E896F3FF 		call	doWrite
 1455      FF
 1456 10b8 898528FF 		movl	%eax, -216(%rbp)
 1456      FFFF
 441:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1457              		.loc 1 441 0
 1458 10be 488D45C0 		leaq	-64(%rbp), %rax
 1459 10c2 BE000000 		movl	$0, %esi
 1459      00
 1460 10c7 4889C7   		movq	%rax, %rdi
 1461 10ca E8000000 		call	gettimeofday
 1461      00
 442:main.c        **** 					startTime = tvStart.tv_sec;
 1462              		.loc 1 442 0
 1463 10cf 488B45B0 		movq	-80(%rbp), %rax
 1464 10d3 48894588 		movq	%rax, -120(%rbp)
 443:main.c        **** 					startTime *= 1000000;
 1465              		.loc 1 443 0
 1466 10d7 488B4588 		movq	-120(%rbp), %rax
 1467 10db 4869C040 		imulq	$1000000, %rax, %rax
 1467      420F00
 1468 10e2 48894588 		movq	%rax, -120(%rbp)
 444:main.c        **** 					startTime += tvStart.tv_usec;
 1469              		.loc 1 444 0
 1470 10e6 488B45B8 		movq	-72(%rbp), %rax
 1471 10ea 48014588 		addq	%rax, -120(%rbp)
 445:main.c        **** 					endTime = tvEnd.tv_sec;
 1472              		.loc 1 445 0
 1473 10ee 488B45C0 		movq	-64(%rbp), %rax
 1474 10f2 48894590 		movq	%rax, -112(%rbp)
 446:main.c        **** 					endTime *= 1000000;
 1475              		.loc 1 446 0
 1476 10f6 488B4590 		movq	-112(%rbp), %rax
 1477 10fa 4869C040 		imulq	$1000000, %rax, %rax
 1477      420F00
 1478 1101 48894590 		movq	%rax, -112(%rbp)
 447:main.c        **** 					endTime += tvEnd.tv_usec;
 1479              		.loc 1 447 0
 1480 1105 488B45C8 		movq	-56(%rbp), %rax
 1481 1109 48014590 		addq	%rax, -112(%rbp)
 448:main.c        **** 					totalTime = (double)(endTime - startTime);
 1482              		.loc 1 448 0
 1483 110d 488B4590 		movq	-112(%rbp), %rax
 1484 1111 482B4588 		subq	-120(%rbp), %rax
 1485 1115 660FEFC0 		pxor	%xmm0, %xmm0
 1486 1119 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1486      C0
 1487 111e F20F1145 		movsd	%xmm0, -104(%rbp)
 1487      98
 449:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1488              		.loc 1 449 0
 1489 1123 F20F1045 		movsd	-104(%rbp), %xmm0
 1489      98
 1490 1128 F20F100D 		movsd	.LC18(%rip), %xmm1
 1490      00000000 
 1491 1130 F20F5EC1 		divsd	%xmm1, %xmm0
 1492 1134 F20F1145 		movsd	%xmm0, -104(%rbp)
 1492      98
 450:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1493              		.loc 1 450 0
 1494 1139 488B8538 		movq	-200(%rbp), %rax
 1494      FFFFFF
 1495 1140 4885C0   		testq	%rax, %rax
 1496 1143 780B     		js	.L98
 1497 1145 660FEFC0 		pxor	%xmm0, %xmm0
 1498 1149 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1498      C0
 1499 114e EB19     		jmp	.L99
 1500              	.L98:
 1501 1150 4889C2   		movq	%rax, %rdx
 1502 1153 48D1EA   		shrq	%rdx
 1503 1156 83E001   		andl	$1, %eax
 1504 1159 4809C2   		orq	%rax, %rdx
 1505 115c 660FEFC0 		pxor	%xmm0, %xmm0
 1506 1160 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1506      C2
 1507 1165 F20F58C0 		addsd	%xmm0, %xmm0
 1508              	.L99:
 1509 1169 F20F1055 		movsd	-104(%rbp), %xmm2
 1509      98
 1510 116e F20F100D 		movsd	.LC19(%rip), %xmm1
 1510      00000000 
 1511 1176 F20F59CA 		mulsd	%xmm2, %xmm1
 1512 117a F20F5EC1 		divsd	%xmm1, %xmm0
 1513 117e F20F1145 		movsd	%xmm0, -96(%rbp)
 1513      A0
 451:main.c        **** 				#endif
 452:main.c        **** 				if ( enableBenchmarking ) {
 1514              		.loc 1 452 0
 1515 1183 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1515      000000
 1516 118a 84C0     		testb	%al, %al
 1517 118c 743A     		je	.L100
 453:main.c        **** 					printf(
 1518              		.loc 1 453 0
 1519 118e 0FB78512 		movzwl	-238(%rbp), %eax
 1519      FFFFFF
 1520 1195 0FB7D0   		movzwl	%ax, %edx
 1521 1198 488B8538 		movq	-200(%rbp), %rax
 1521      FFFFFF
 1522 119f 488B75A0 		movq	-96(%rbp), %rsi
 1523 11a3 488B4D80 		movq	-128(%rbp), %rcx
 1524 11a7 4889B5F0 		movq	%rsi, -272(%rbp)
 1524      FEFFFF
 1525 11ae F20F1085 		movsd	-272(%rbp), %xmm0
 1525      F0FEFFFF 
 1526 11b6 4889C6   		movq	%rax, %rsi
 1527 11b9 BF000000 		movl	$.LC22, %edi
 1527      00
 1528 11be B8010000 		movl	$1, %eax
 1528      00
 1529 11c3 E8000000 		call	printf
 1529      00
 1530              	.L100:
 454:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 455:main.c        **** 						length, checksum, chan, speed);
 456:main.c        **** 				}
 457:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 1531              		.loc 1 457 0
 1532 11c8 83BD28FF 		cmpl	$0, -216(%rbp)
 1532      FFFF00
 1533 11cf 740E     		je	.L101
 1534              		.loc 1 457 0 is_stmt 0 discriminator 1
 1535 11d1 8B8528FF 		movl	-216(%rbp), %eax
 1535      FFFF
 1536 11d7 898514FF 		movl	%eax, -236(%rbp)
 1536      FFFF
 1537 11dd EB20     		jmp	.L94
 1538              	.L101:
 458:main.c        **** 
 459:main.c        **** 				// Close the file
 460:main.c        **** 				fclose(file);
 1539              		.loc 1 460 0 is_stmt 1
 1540 11df 488B8558 		movq	-168(%rbp), %rax
 1540      FFFFFF
 1541 11e6 4889C7   		movq	%rax, %rdi
 1542 11e9 E8000000 		call	fclose
 1542      00
 461:main.c        **** 				file = NULL;
 1543              		.loc 1 461 0
 1544 11ee 48C78558 		movq	$0, -168(%rbp)
 1544      FFFFFF00 
 1544      000000
 1545              	.LBE8:
 408:main.c        **** 				uint16 checksum = 0x0000;
 1546              		.loc 1 408 0
 1547 11f9 90       		nop
 1548 11fa E9AB0300 		jmp	.L83
 1548      00
 1549              	.L94:
 397:main.c        **** 
 1550              		.loc 1 397 0 discriminator 2
 1551 11ff E9E70300 		jmp	.L50
 1551      00
 1552              	.L89:
 462:main.c        **** 			} else if ( isHexDigit(ch) ) {
 1553              		.loc 1 462 0
 1554 1204 0FBE8510 		movsbl	-240(%rbp), %eax
 1554      FFFFFF
 1555 120b 89C7     		movl	%eax, %edi
 1556 120d E8EEEDFF 		call	isHexDigit
 1556      FF
 1557 1212 84C0     		testb	%al, %al
 1558 1214 0F848402 		je	.L103
 1558      0000
 1559              	.LBB9:
 463:main.c        **** 				// Read a sequence of hex bytes to write
 464:main.c        **** 				uint8 *dataPtr;
 465:main.c        **** 				p = ptr + 1;
 1560              		.loc 1 465 0
 1561 121a 488B0500 		movq	ptr(%rip), %rax
 1561      000000
 1562 1221 4883C001 		addq	$1, %rax
 1563 1225 48898570 		movq	%rax, -144(%rbp)
 1563      FFFFFF
 466:main.c        **** 				while ( isHexDigit(*p) ) {
 1564              		.loc 1 466 0
 1565 122c EB08     		jmp	.L104
 1566              	.L105:
 467:main.c        **** 					p++;
 1567              		.loc 1 467 0
 1568 122e 48838570 		addq	$1, -144(%rbp)
 1568      FFFFFF01 
 1569              	.L104:
 466:main.c        **** 				while ( isHexDigit(*p) ) {
 1570              		.loc 1 466 0
 1571 1236 488B8570 		movq	-144(%rbp), %rax
 1571      FFFFFF
 1572 123d 0FB600   		movzbl	(%rax), %eax
 1573 1240 0FBEC0   		movsbl	%al, %eax
 1574 1243 89C7     		movl	%eax, %edi
 1575 1245 E8B6EDFF 		call	isHexDigit
 1575      FF
 1576 124a 84C0     		testb	%al, %al
 1577 124c 75E0     		jne	.L105
 468:main.c        **** 				}
 469:main.c        **** 				CHECK_STATUS((p - ptr) & 1, FLP_ODD_DIGITS, cleanup);
 1578              		.loc 1 469 0
 1579 124e 488B8570 		movq	-144(%rbp), %rax
 1579      FFFFFF
 1580 1255 488B1500 		movq	ptr(%rip), %rdx
 1580      000000
 1581 125c 4829D0   		subq	%rdx, %rax
 1582 125f 83E001   		andl	$1, %eax
 1583 1262 4885C0   		testq	%rax, %rax
 1584 1265 740F     		je	.L106
 1585              		.loc 1 469 0 is_stmt 0 discriminator 1
 1586 1267 C78514FF 		movl	$9, -236(%rbp)
 1586      FFFF0900 
 1586      0000
 1587 1271 E9750300 		jmp	.L50
 1587      00
 1588              	.L106:
 470:main.c        **** 				length = (size_t)(p - ptr) / 2;
 1589              		.loc 1 470 0 is_stmt 1
 1590 1276 488B8570 		movq	-144(%rbp), %rax
 1590      FFFFFF
 1591 127d 488B1500 		movq	ptr(%rip), %rdx
 1591      000000
 1592 1284 4829D0   		subq	%rdx, %rax
 1593 1287 48D1E8   		shrq	%rax
 1594 128a 48898538 		movq	%rax, -200(%rbp)
 1594      FFFFFF
 471:main.c        **** 				data = malloc(length);
 1595              		.loc 1 471 0
 1596 1291 488B8538 		movq	-200(%rbp), %rax
 1596      FFFFFF
 1597 1298 4889C7   		movq	%rax, %rdi
 1598 129b E8000000 		call	malloc
 1598      00
 1599 12a0 48898548 		movq	%rax, -184(%rbp)
 1599      FFFFFF
 472:main.c        **** 				dataPtr = data;
 1600              		.loc 1 472 0
 1601 12a7 488B8548 		movq	-184(%rbp), %rax
 1601      FFFFFF
 1602 12ae 48898578 		movq	%rax, -136(%rbp)
 1602      FFFFFF
 473:main.c        **** 				for ( i = 0; i < length; i++ ) {
 1603              		.loc 1 473 0
 1604 12b5 48C78568 		movq	$0, -152(%rbp)
 1604      FFFFFF00 
 1604      000000
 1605 12c0 EB34     		jmp	.L107
 1606              	.L108:
 474:main.c        **** 					getHexByte(dataPtr++);
 1607              		.loc 1 474 0 discriminator 3
 1608 12c2 488B8578 		movq	-136(%rbp), %rax
 1608      FFFFFF
 1609 12c9 488D5001 		leaq	1(%rax), %rdx
 1610 12cd 48899578 		movq	%rdx, -136(%rbp)
 1610      FFFFFF
 1611 12d4 4889C7   		movq	%rax, %rdi
 1612 12d7 E817EEFF 		call	getHexByte
 1612      FF
 475:main.c        **** 					ptr += 2;
 1613              		.loc 1 475 0 discriminator 3
 1614 12dc 488B0500 		movq	ptr(%rip), %rax
 1614      000000
 1615 12e3 4883C002 		addq	$2, %rax
 1616 12e7 48890500 		movq	%rax, ptr(%rip)
 1616      000000
 473:main.c        **** 				for ( i = 0; i < length; i++ ) {
 1617              		.loc 1 473 0 discriminator 3
 1618 12ee 48838568 		addq	$1, -152(%rbp)
 1618      FFFFFF01 
 1619              	.L107:
 473:main.c        **** 				for ( i = 0; i < length; i++ ) {
 1620              		.loc 1 473 0 is_stmt 0 discriminator 1
 1621 12f6 488B8538 		movq	-200(%rbp), %rax
 1621      FFFFFF
 1622 12fd 48398568 		cmpq	%rax, -152(%rbp)
 1622      FFFFFF
 1623 1304 72BC     		jb	.L108
 476:main.c        **** 				}
 477:main.c        **** 				#ifdef WIN32
 478:main.c        **** 					QueryPerformanceCounter(&tvStart);
 479:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 480:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 481:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 482:main.c        **** 					totalTime /= freq.QuadPart;
 483:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 484:main.c        **** 				#else
 485:main.c        **** 					gettimeofday(&tvStart, NULL);
 1624              		.loc 1 485 0 is_stmt 1
 1625 1306 488D45B0 		leaq	-80(%rbp), %rax
 1626 130a BE000000 		movl	$0, %esi
 1626      00
 1627 130f 4889C7   		movq	%rax, %rdi
 1628 1312 E8000000 		call	gettimeofday
 1628      00
 486:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 1629              		.loc 1 486 0
 1630 1317 488B9538 		movq	-200(%rbp), %rdx
 1630      FFFFFF
 1631 131e 488B4580 		movq	-128(%rbp), %rax
 1632 1322 0FB6F0   		movzbl	%al, %esi
 1633 1325 488BBDF8 		movq	-264(%rbp), %rdi
 1633      FEFFFF
 1634 132c 488B8D48 		movq	-184(%rbp), %rcx
 1634      FFFFFF
 1635 1333 488B8508 		movq	-248(%rbp), %rax
 1635      FFFFFF
 1636 133a 4989F8   		movq	%rdi, %r8
 1637 133d 4889C7   		movq	%rax, %rdi
 1638 1340 E8000000 		call	flWriteChannel
 1638      00
 1639 1345 898524FF 		movl	%eax, -220(%rbp)
 1639      FFFF
 487:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1640              		.loc 1 487 0
 1641 134b 488D45C0 		leaq	-64(%rbp), %rax
 1642 134f BE000000 		movl	$0, %esi
 1642      00
 1643 1354 4889C7   		movq	%rax, %rdi
 1644 1357 E8000000 		call	gettimeofday
 1644      00
 488:main.c        **** 					startTime = tvStart.tv_sec;
 1645              		.loc 1 488 0
 1646 135c 488B45B0 		movq	-80(%rbp), %rax
 1647 1360 48894588 		movq	%rax, -120(%rbp)
 489:main.c        **** 					startTime *= 1000000;
 1648              		.loc 1 489 0
 1649 1364 488B4588 		movq	-120(%rbp), %rax
 1650 1368 4869C040 		imulq	$1000000, %rax, %rax
 1650      420F00
 1651 136f 48894588 		movq	%rax, -120(%rbp)
 490:main.c        **** 					startTime += tvStart.tv_usec;
 1652              		.loc 1 490 0
 1653 1373 488B45B8 		movq	-72(%rbp), %rax
 1654 1377 48014588 		addq	%rax, -120(%rbp)
 491:main.c        **** 					endTime = tvEnd.tv_sec;
 1655              		.loc 1 491 0
 1656 137b 488B45C0 		movq	-64(%rbp), %rax
 1657 137f 48894590 		movq	%rax, -112(%rbp)
 492:main.c        **** 					endTime *= 1000000;
 1658              		.loc 1 492 0
 1659 1383 488B4590 		movq	-112(%rbp), %rax
 1660 1387 4869C040 		imulq	$1000000, %rax, %rax
 1660      420F00
 1661 138e 48894590 		movq	%rax, -112(%rbp)
 493:main.c        **** 					endTime += tvEnd.tv_usec;
 1662              		.loc 1 493 0
 1663 1392 488B45C8 		movq	-56(%rbp), %rax
 1664 1396 48014590 		addq	%rax, -112(%rbp)
 494:main.c        **** 					totalTime = (double)(endTime - startTime);
 1665              		.loc 1 494 0
 1666 139a 488B4590 		movq	-112(%rbp), %rax
 1667 139e 482B4588 		subq	-120(%rbp), %rax
 1668 13a2 660FEFC0 		pxor	%xmm0, %xmm0
 1669 13a6 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1669      C0
 1670 13ab F20F1145 		movsd	%xmm0, -104(%rbp)
 1670      98
 495:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1671              		.loc 1 495 0
 1672 13b0 F20F1045 		movsd	-104(%rbp), %xmm0
 1672      98
 1673 13b5 F20F100D 		movsd	.LC18(%rip), %xmm1
 1673      00000000 
 1674 13bd F20F5EC1 		divsd	%xmm1, %xmm0
 1675 13c1 F20F1145 		movsd	%xmm0, -104(%rbp)
 1675      98
 496:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1676              		.loc 1 496 0
 1677 13c6 488B8538 		movq	-200(%rbp), %rax
 1677      FFFFFF
 1678 13cd 4885C0   		testq	%rax, %rax
 1679 13d0 780B     		js	.L109
 1680 13d2 660FEFC0 		pxor	%xmm0, %xmm0
 1681 13d6 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1681      C0
 1682 13db EB19     		jmp	.L110
 1683              	.L109:
 1684 13dd 4889C2   		movq	%rax, %rdx
 1685 13e0 48D1EA   		shrq	%rdx
 1686 13e3 83E001   		andl	$1, %eax
 1687 13e6 4809C2   		orq	%rax, %rdx
 1688 13e9 660FEFC0 		pxor	%xmm0, %xmm0
 1689 13ed F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1689      C2
 1690 13f2 F20F58C0 		addsd	%xmm0, %xmm0
 1691              	.L110:
 1692 13f6 F20F1055 		movsd	-104(%rbp), %xmm2
 1692      98
 1693 13fb F20F100D 		movsd	.LC19(%rip), %xmm1
 1693      00000000 
 1694 1403 F20F59CA 		mulsd	%xmm2, %xmm1
 1695 1407 F20F5EC1 		divsd	%xmm1, %xmm0
 1696 140b F20F1145 		movsd	%xmm0, -96(%rbp)
 1696      A0
 497:main.c        **** 				#endif
 498:main.c        **** 				if ( enableBenchmarking ) {
 1697              		.loc 1 498 0
 1698 1410 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1698      000000
 1699 1417 84C0     		testb	%al, %al
 1700 1419 744C     		je	.L111
 499:main.c        **** 					printf(
 500:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 501:main.c        **** 						length, calcChecksum(data, length), chan, speed);
 1701              		.loc 1 501 0
 1702 141b 488B9538 		movq	-200(%rbp), %rdx
 1702      FFFFFF
 1703 1422 488B8548 		movq	-184(%rbp), %rax
 1703      FFFFFF
 1704 1429 4889D6   		movq	%rdx, %rsi
 1705 142c 4889C7   		movq	%rax, %rdi
 1706 142f E80AECFF 		call	calcChecksum
 1706      FF
 499:main.c        **** 					printf(
 1707              		.loc 1 499 0
 1708 1434 0FB7D0   		movzwl	%ax, %edx
 1709 1437 488B8538 		movq	-200(%rbp), %rax
 1709      FFFFFF
 1710 143e 488B75A0 		movq	-96(%rbp), %rsi
 1711 1442 488B4D80 		movq	-128(%rbp), %rcx
 1712 1446 4889B5F0 		movq	%rsi, -272(%rbp)
 1712      FEFFFF
 1713 144d F20F1085 		movsd	-272(%rbp), %xmm0
 1713      F0FEFFFF 
 1714 1455 4889C6   		movq	%rax, %rsi
 1715 1458 BF000000 		movl	$.LC22, %edi
 1715      00
 1716 145d B8010000 		movl	$1, %eax
 1716      00
 1717 1462 E8000000 		call	printf
 1717      00
 1718              	.L111:
 502:main.c        **** 				}
 503:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1719              		.loc 1 503 0
 1720 1467 83BD24FF 		cmpl	$0, -220(%rbp)
 1720      FFFF00
 1721 146e 740F     		je	.L112
 1722              		.loc 1 503 0 is_stmt 0 discriminator 1
 1723 1470 C78514FF 		movl	$1, -236(%rbp)
 1723      FFFF0100 
 1723      0000
 1724 147a E96C0100 		jmp	.L50
 1724      00
 1725              	.L112:
 504:main.c        **** 				free(data);
 1726              		.loc 1 504 0 is_stmt 1
 1727 147f 488B8548 		movq	-184(%rbp), %rax
 1727      FFFFFF
 1728 1486 4889C7   		movq	%rax, %rdi
 1729 1489 E8000000 		call	free
 1729      00
 505:main.c        **** 				data = NULL;
 1730              		.loc 1 505 0
 1731 148e 48C78548 		movq	$0, -184(%rbp)
 1731      FFFFFF00 
 1731      000000
 1732              	.LBE9:
 506:main.c        **** 			} else {
 507:main.c        **** 				FAIL(FLP_ILL_CHAR, cleanup);
 508:main.c        **** 			}
 509:main.c        **** 			break;
 1733              		.loc 1 509 0
 1734 1499 E90C0100 		jmp	.L83
 1734      00
 1735              	.L103:
 507:main.c        **** 			}
 1736              		.loc 1 507 0
 1737 149e C78514FF 		movl	$5, -236(%rbp)
 1737      FFFF0500 
 1737      0000
 1738 14a8 90       		nop
 1739 14a9 E93D0100 		jmp	.L50
 1739      00
 1740              	.L56:
 1741              	.LBE7:
 1742              	.LBB10:
 510:main.c        **** 		}
 511:main.c        **** 		case '+':{
 512:main.c        **** 			uint32 conduit;
 513:main.c        **** 			char *end;
 514:main.c        **** 			ptr++;
 1743              		.loc 1 514 0
 1744 14ae 488B0500 		movq	ptr(%rip), %rax
 1744      000000
 1745 14b5 4883C001 		addq	$1, %rax
 1746 14b9 48890500 		movq	%rax, ptr(%rip)
 1746      000000
 515:main.c        **** 
 516:main.c        **** 			// Get the conduit
 517:main.c        **** 			errno = 0;
 1747              		.loc 1 517 0
 1748 14c0 E8000000 		call	__errno_location
 1748      00
 1749 14c5 C7000000 		movl	$0, (%rax)
 1749      0000
 518:main.c        **** 			conduit = (uint32)strtoul(ptr, &end, 16);
 1750              		.loc 1 518 0
 1751 14cb 488B0500 		movq	ptr(%rip), %rax
 1751      000000
 1752 14d2 488D8D40 		leaq	-192(%rbp), %rcx
 1752      FFFFFF
 1753 14d9 BA100000 		movl	$16, %edx
 1753      00
 1754 14de 4889CE   		movq	%rcx, %rsi
 1755 14e1 4889C7   		movq	%rax, %rdi
 1756 14e4 E8000000 		call	strtoul
 1756      00
 1757 14e9 89852CFF 		movl	%eax, -212(%rbp)
 1757      FFFF
 519:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1758              		.loc 1 519 0
 1759 14ef E8000000 		call	__errno_location
 1759      00
 1760 14f4 8B00     		movl	(%rax), %eax
 1761 14f6 85C0     		testl	%eax, %eax
 1762 14f8 740F     		je	.L113
 1763              		.loc 1 519 0 is_stmt 0 discriminator 1
 1764 14fa C78514FF 		movl	$2, -236(%rbp)
 1764      FFFF0200 
 1764      0000
 1765 1504 E9E20000 		jmp	.L50
 1765      00
 1766              	.L113:
 520:main.c        **** 
 521:main.c        **** 			// Ensure that it's 0-127
 522:main.c        **** 			CHECK_STATUS(conduit > 255, FLP_CONDUIT_RANGE, cleanup);
 1767              		.loc 1 522 0 is_stmt 1
 1768 1509 81BD2CFF 		cmpl	$255, -212(%rbp)
 1768      FFFFFF00 
 1768      0000
 1769 1513 760F     		jbe	.L115
 1770              		.loc 1 522 0 is_stmt 0 discriminator 1
 1771 1515 C78514FF 		movl	$4, -236(%rbp)
 1771      FFFF0400 
 1771      0000
 1772 151f E9C70000 		jmp	.L50
 1772      00
 1773              	.L115:
 523:main.c        **** 			ptr = end;
 1774              		.loc 1 523 0 is_stmt 1
 1775 1524 488B8540 		movq	-192(%rbp), %rax
 1775      FFFFFF
 1776 152b 48890500 		movq	%rax, ptr(%rip)
 1776      000000
 524:main.c        **** 
 525:main.c        **** 			// Only two valid chars at this point:
 526:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';', FLP_ILL_CHAR, cleanup);
 1777              		.loc 1 526 0
 1778 1532 488B0500 		movq	ptr(%rip), %rax
 1778      000000
 1779 1539 0FB600   		movzbl	(%rax), %eax
 1780 153c 84C0     		testb	%al, %al
 1781 153e 741D     		je	.L116
 1782              		.loc 1 526 0 is_stmt 0 discriminator 1
 1783 1540 488B0500 		movq	ptr(%rip), %rax
 1783      000000
 1784 1547 0FB600   		movzbl	(%rax), %eax
 1785 154a 3C3B     		cmpb	$59, %al
 1786 154c 740F     		je	.L116
 1787              		.loc 1 526 0 discriminator 2
 1788 154e C78514FF 		movl	$5, -236(%rbp)
 1788      FFFF0500 
 1788      0000
 1789 1558 E98E0000 		jmp	.L50
 1789      00
 1790              	.L116:
 527:main.c        **** 
 528:main.c        **** 			fStatus = flSelectConduit(handle, (uint8)conduit, error);
 1791              		.loc 1 528 0 is_stmt 1
 1792 155d 8B852CFF 		movl	-212(%rbp), %eax
 1792      FFFF
 1793 1563 0FB6C8   		movzbl	%al, %ecx
 1794 1566 488B95F8 		movq	-264(%rbp), %rdx
 1794      FEFFFF
 1795 156d 488B8508 		movq	-248(%rbp), %rax
 1795      FFFFFF
 1796 1574 89CE     		movl	%ecx, %esi
 1797 1576 4889C7   		movq	%rax, %rdi
 1798 1579 E8000000 		call	flSelectConduit
 1798      00
 1799 157e 898524FF 		movl	%eax, -220(%rbp)
 1799      FFFF
 529:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1800              		.loc 1 529 0
 1801 1584 83BD24FF 		cmpl	$0, -220(%rbp)
 1801      FFFF00
 1802 158b 741C     		je	.L128
 1803              		.loc 1 529 0 is_stmt 0 discriminator 1
 1804 158d C78514FF 		movl	$1, -236(%rbp)
 1804      FFFF0100 
 1804      0000
 1805 1597 90       		nop
 1806 1598 EB51     		jmp	.L50
 1807              	.L126:
 1808              	.LBE10:
 530:main.c        **** 			break;
 531:main.c        **** 		}
 532:main.c        **** 		default:
 533:main.c        **** 			FAIL(FLP_ILL_CHAR, cleanup);
 1809              		.loc 1 533 0 is_stmt 1
 1810 159a C78514FF 		movl	$5, -236(%rbp)
 1810      FFFF0500 
 1810      0000
 1811 15a4 EB45     		jmp	.L50
 1812              	.L127:
 1813              	.LBB11:
 385:main.c        **** 		}
 1814              		.loc 1 385 0
 1815 15a6 90       		nop
 1816 15a7 EB01     		jmp	.L83
 1817              	.L128:
 1818              	.LBE11:
 1819              	.LBB12:
 530:main.c        **** 			break;
 1820              		.loc 1 530 0
 1821 15a9 90       		nop
 1822              	.L83:
 1823              	.LBE12:
 534:main.c        **** 		}
 535:main.c        **** 	} while ( *ptr == ';' );
 1824              		.loc 1 535 0
 1825 15aa 488B0500 		movq	ptr(%rip), %rax
 1825      000000
 1826 15b1 0FB600   		movzbl	(%rax), %eax
 1827 15b4 3C3B     		cmpb	$59, %al
 1828 15b6 0F8460F1 		je	.L51
 1828      FFFF
 536:main.c        **** 	CHECK_STATUS(*ptr != '\0', FLP_ILL_CHAR, cleanup);
 1829              		.loc 1 536 0
 1830 15bc 488B0500 		movq	ptr(%rip), %rax
 1830      000000
 1831 15c3 0FB600   		movzbl	(%rax), %eax
 1832 15c6 84C0     		testb	%al, %al
 1833 15c8 740C     		je	.L119
 1834              		.loc 1 536 0 is_stmt 0 discriminator 1
 1835 15ca C78514FF 		movl	$5, -236(%rbp)
 1835      FFFF0500 
 1835      0000
 1836 15d4 EB15     		jmp	.L50
 1837              	.L119:
 537:main.c        **** 
 538:main.c        **** 	dump(0x00000000, dataFromFPGA.data, dataFromFPGA.length);
 1838              		.loc 1 538 0 is_stmt 1
 1839 15d6 488B55D8 		movq	-40(%rbp), %rdx
 1840 15da 488B45D0 		movq	-48(%rbp), %rax
 1841 15de 4889C6   		movq	%rax, %rsi
 1842 15e1 BF000000 		movl	$0, %edi
 1842      00
 1843 15e6 E8000000 		call	dump
 1843      00
 1844              	.L50:
 539:main.c        **** 
 540:main.c        **** cleanup:
 541:main.c        **** 	bufDestroy(&dataFromFPGA);
 1845              		.loc 1 541 0
 1846 15eb 488D45D0 		leaq	-48(%rbp), %rax
 1847 15ef 4889C7   		movq	%rax, %rdi
 1848 15f2 E8000000 		call	bufDestroy
 1848      00
 542:main.c        **** 	if ( file ) {
 1849              		.loc 1 542 0
 1850 15f7 4883BD58 		cmpq	$0, -168(%rbp)
 1850      FFFFFF00 
 1851 15ff 740F     		je	.L120
 543:main.c        **** 		fclose(file);
 1852              		.loc 1 543 0
 1853 1601 488B8558 		movq	-168(%rbp), %rax
 1853      FFFFFF
 1854 1608 4889C7   		movq	%rax, %rdi
 1855 160b E8000000 		call	fclose
 1855      00
 1856              	.L120:
 544:main.c        **** 	}
 545:main.c        **** 	free(fileName);
 1857              		.loc 1 545 0
 1858 1610 488B8550 		movq	-176(%rbp), %rax
 1858      FFFFFF
 1859 1617 4889C7   		movq	%rax, %rdi
 1860 161a E8000000 		call	free
 1860      00
 546:main.c        **** 	free(data);
 1861              		.loc 1 546 0
 1862 161f 488B8548 		movq	-184(%rbp), %rax
 1862      FFFFFF
 1863 1626 4889C7   		movq	%rax, %rdi
 1864 1629 E8000000 		call	free
 1864      00
 547:main.c        **** 	if ( retVal > FLP_LIBERR ) {
 1865              		.loc 1 547 0
 1866 162e 83BD14FF 		cmpl	$1, -236(%rbp)
 1866      FFFF01
 1867 1635 0F86A700 		jbe	.L121
 1867      0000
 1868              	.LBB13:
 548:main.c        **** 		const int column = (int)(ptr - line);
 1869              		.loc 1 548 0
 1870 163b 488B0500 		movq	ptr(%rip), %rax
 1870      000000
 1871 1642 4889C2   		movq	%rax, %rdx
 1872 1645 488B8500 		movq	-256(%rbp), %rax
 1872      FFFFFF
 1873 164c 4829C2   		subq	%rax, %rdx
 1874 164f 4889D0   		movq	%rdx, %rax
 1875 1652 898534FF 		movl	%eax, -204(%rbp)
 1875      FFFF
 549:main.c        **** 		int i;
 550:main.c        **** 		fprintf(stderr, "%s at column %d\n  %s\n  ", errMessages[retVal], column, line);
 1876              		.loc 1 550 0
 1877 1658 8B8514FF 		movl	-236(%rbp), %eax
 1877      FFFF
 1878 165e 488B14C5 		movq	errMessages(,%rax,8), %rdx
 1878      00000000 
 1879 1666 488B0500 		movq	stderr(%rip), %rax
 1879      000000
 1880 166d 488BB500 		movq	-256(%rbp), %rsi
 1880      FFFFFF
 1881 1674 8B8D34FF 		movl	-204(%rbp), %ecx
 1881      FFFF
 1882 167a 4989F0   		movq	%rsi, %r8
 1883 167d BE000000 		movl	$.LC23, %esi
 1883      00
 1884 1682 4889C7   		movq	%rax, %rdi
 1885 1685 B8000000 		movl	$0, %eax
 1885      00
 1886 168a E8000000 		call	fprintf
 1886      00
 551:main.c        **** 		for ( i = 0; i < column; i++ ) {
 1887              		.loc 1 551 0
 1888 168f C7851CFF 		movl	$0, -228(%rbp)
 1888      FFFF0000 
 1888      0000
 1889 1699 EB1B     		jmp	.L122
 1890              	.L123:
 552:main.c        **** 			fprintf(stderr, " ");
 1891              		.loc 1 552 0 discriminator 3
 1892 169b 488B0500 		movq	stderr(%rip), %rax
 1892      000000
 1893 16a2 4889C6   		movq	%rax, %rsi
 1894 16a5 BF200000 		movl	$32, %edi
 1894      00
 1895 16aa E8000000 		call	fputc
 1895      00
 551:main.c        **** 		for ( i = 0; i < column; i++ ) {
 1896              		.loc 1 551 0 discriminator 3
 1897 16af 83851CFF 		addl	$1, -228(%rbp)
 1897      FFFF01
 1898              	.L122:
 551:main.c        **** 		for ( i = 0; i < column; i++ ) {
 1899              		.loc 1 551 0 is_stmt 0 discriminator 1
 1900 16b6 8B851CFF 		movl	-228(%rbp), %eax
 1900      FFFF
 1901 16bc 3B8534FF 		cmpl	-204(%rbp), %eax
 1901      FFFF
 1902 16c2 7CD7     		jl	.L123
 553:main.c        **** 		}
 554:main.c        **** 		fprintf(stderr, "^\n");
 1903              		.loc 1 554 0 is_stmt 1
 1904 16c4 488B0500 		movq	stderr(%rip), %rax
 1904      000000
 1905 16cb 4889C1   		movq	%rax, %rcx
 1906 16ce BA020000 		movl	$2, %edx
 1906      00
 1907 16d3 BE010000 		movl	$1, %esi
 1907      00
 1908 16d8 BF000000 		movl	$.LC24, %edi
 1908      00
 1909 16dd E8000000 		call	fwrite
 1909      00
 1910              	.L121:
 1911              	.LBE13:
 555:main.c        **** 	}
 556:main.c        **** 	return retVal;
 1912              		.loc 1 556 0
 1913 16e2 8B8514FF 		movl	-236(%rbp), %eax
 1913      FFFF
 557:main.c        **** }
 1914              		.loc 1 557 0
 1915 16e8 488B4DF8 		movq	-8(%rbp), %rcx
 1916 16ec 6448330C 		xorq	%fs:40, %rcx
 1916      25280000 
 1916      00
 1917 16f5 7405     		je	.L125
 1918 16f7 E8000000 		call	__stack_chk_fail
 1918      00
 1919              	.L125:
 1920 16fc C9       		leave
 1921              		.cfi_def_cfa 7, 8
 1922 16fd C3       		ret
 1923              		.cfi_endproc
 1924              	.LFE10:
 1926              		.section	.rodata
 1927              	.LC25:
 1928 0279 30303030 		.string	"0000"
 1928      00
 1929              	.LC26:
 1930 027e 30303031 		.string	"0001"
 1930      00
 1931              	.LC27:
 1932 0283 30303130 		.string	"0010"
 1932      00
 1933              	.LC28:
 1934 0288 30303131 		.string	"0011"
 1934      00
 1935              	.LC29:
 1936 028d 30313030 		.string	"0100"
 1936      00
 1937              	.LC30:
 1938 0292 30313031 		.string	"0101"
 1938      00
 1939              	.LC31:
 1940 0297 30313130 		.string	"0110"
 1940      00
 1941              	.LC32:
 1942 029c 30313131 		.string	"0111"
 1942      00
 1943              	.LC33:
 1944 02a1 31303030 		.string	"1000"
 1944      00
 1945              	.LC34:
 1946 02a6 31303031 		.string	"1001"
 1946      00
 1947              	.LC35:
 1948 02ab 58585858 		.string	"XXXX"
 1948      00
 1949              	.LC36:
 1950 02b0 31303130 		.string	"1010"
 1950      00
 1951              	.LC37:
 1952 02b5 31303131 		.string	"1011"
 1952      00
 1953              	.LC38:
 1954 02ba 31313030 		.string	"1100"
 1954      00
 1955              	.LC39:
 1956 02bf 31313031 		.string	"1101"
 1956      00
 1957              	.LC40:
 1958 02c4 31313130 		.string	"1110"
 1958      00
 1959              	.LC41:
 1960 02c9 31313131 		.string	"1111"
 1960      00
 1961              		.data
 1962 0018 00000000 		.align 32
 1962      00000000 
 1965              	nibbles:
 1966 0020 00000000 		.quad	.LC25
 1966      00000000 
 1967 0028 00000000 		.quad	.LC26
 1967      00000000 
 1968 0030 00000000 		.quad	.LC27
 1968      00000000 
 1969 0038 00000000 		.quad	.LC28
 1969      00000000 
 1970 0040 00000000 		.quad	.LC29
 1970      00000000 
 1971 0048 00000000 		.quad	.LC30
 1971      00000000 
 1972 0050 00000000 		.quad	.LC31
 1972      00000000 
 1973 0058 00000000 		.quad	.LC32
 1973      00000000 
 1974 0060 00000000 		.quad	.LC33
 1974      00000000 
 1975 0068 00000000 		.quad	.LC34
 1975      00000000 
 1976 0070 00000000 		.quad	.LC35
 1976      00000000 
 1977 0078 00000000 		.quad	.LC35
 1977      00000000 
 1978 0080 00000000 		.quad	.LC35
 1978      00000000 
 1979 0088 00000000 		.quad	.LC35
 1979      00000000 
 1980 0090 00000000 		.quad	.LC35
 1980      00000000 
 1981 0098 00000000 		.quad	.LC35
 1981      00000000 
 1982 00a0 00000000 		.quad	.LC35
 1982      00000000 
 1983 00a8 00000000 		.quad	.LC36
 1983      00000000 
 1984 00b0 00000000 		.quad	.LC37
 1984      00000000 
 1985 00b8 00000000 		.quad	.LC38
 1985      00000000 
 1986 00c0 00000000 		.quad	.LC39
 1986      00000000 
 1987 00c8 00000000 		.quad	.LC40
 1987      00000000 
 1988 00d0 00000000 		.quad	.LC41
 1988      00000000 
 1989              		.section	.rodata
 1990              	.LC42:
 1991 02ce 474F5420 		.string	"GOT INTO FUNNCTION%s"
 1991      494E544F 
 1991      2046554E 
 1991      4E435449 
 1991      4F4E2573 
 1992              	.LC43:
 1993 02e3 7200     		.string	"r"
 1994              		.text
 1995              		.globl	read_table
 1997              	read_table:
 1998              	.LFB11:
 558:main.c        **** 
 559:main.c        **** static const char *nibbles[] = {
 560:main.c        **** 	"0000",  // '0'
 561:main.c        **** 	"0001",  // '1'
 562:main.c        **** 	"0010",  // '2'
 563:main.c        **** 	"0011",  // '3'
 564:main.c        **** 	"0100",  // '4'
 565:main.c        **** 	"0101",  // '5'
 566:main.c        **** 	"0110",  // '6'
 567:main.c        **** 	"0111",  // '7'
 568:main.c        **** 	"1000",  // '8'
 569:main.c        **** 	"1001",  // '9'
 570:main.c        **** 
 571:main.c        **** 	"XXXX",  // ':'
 572:main.c        **** 	"XXXX",  // ';'
 573:main.c        **** 	"XXXX",  // '<'
 574:main.c        **** 	"XXXX",  // '='
 575:main.c        **** 	"XXXX",  // '>'
 576:main.c        **** 	"XXXX",  // '?'
 577:main.c        **** 	"XXXX",  // '@'
 578:main.c        **** 
 579:main.c        **** 	"1010",  // 'A'
 580:main.c        **** 	"1011",  // 'B'
 581:main.c        **** 	"1100",  // 'C'
 582:main.c        **** 	"1101",  // 'D'
 583:main.c        **** 	"1110",  // 'E'
 584:main.c        **** 	"1111"   // 'F'
 585:main.c        **** };
 586:main.c        **** 
 587:main.c        **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 588:main.c        **** // Our own function declarations 
 589:main.c        **** 
 590:main.c        **** 
 591:main.c        **** 
 592:main.c        **** int read_table(const char * addr, int table[][5]) {
 1999              		.loc 1 592 0
 2000              		.cfi_startproc
 2001 16fe 55       		pushq	%rbp
 2002              		.cfi_def_cfa_offset 16
 2003              		.cfi_offset 6, -16
 2004 16ff 4889E5   		movq	%rsp, %rbp
 2005              		.cfi_def_cfa_register 6
 2006 1702 4883EC30 		subq	$48, %rsp
 2007 1706 48897DD8 		movq	%rdi, -40(%rbp)
 2008 170a 488975D0 		movq	%rsi, -48(%rbp)
 593:main.c        ****         printf("GOT INTO FUNNCTION%s", addr);
 2009              		.loc 1 593 0
 2010 170e 488B45D8 		movq	-40(%rbp), %rax
 2011 1712 4889C6   		movq	%rax, %rsi
 2012 1715 BF000000 		movl	$.LC42, %edi
 2012      00
 2013 171a B8000000 		movl	$0, %eax
 2013      00
 2014 171f E8000000 		call	printf
 2014      00
 594:main.c        ****         FILE *file;
 595:main.c        ****         file=fopen( addr , "r" );
 2015              		.loc 1 595 0
 2016 1724 488B45D8 		movq	-40(%rbp), %rax
 2017 1728 BE000000 		movl	$.LC43, %esi
 2017      00
 2018 172d 4889C7   		movq	%rax, %rdi
 2019 1730 E8000000 		call	fopen
 2019      00
 2020 1735 488945F8 		movq	%rax, -8(%rbp)
 596:main.c        ****         char c;
 597:main.c        ****         int i=0,j=0;
 2021              		.loc 1 597 0
 2022 1739 C745EC00 		movl	$0, -20(%rbp)
 2022      000000
 2023 1740 C745F000 		movl	$0, -16(%rbp)
 2023      000000
 598:main.c        ****         int nl;
 599:main.c        ****         if(file){
 2024              		.loc 1 599 0
 2025 1747 48837DF8 		cmpq	$0, -8(%rbp)
 2025      00
 2026 174c 0F848700 		je	.L130
 2026      0000
 600:main.c        ****                 while( ( c=getc(file))!=EOF){
 2027              		.loc 1 600 0
 2028 1752 EB64     		jmp	.L131
 2029              	.L135:
 601:main.c        ****                         if(c == ' ' || c==',') continue;
 2030              		.loc 1 601 0
 2031 1754 807DEB20 		cmpb	$32, -21(%rbp)
 2032 1758 745E     		je	.L131
 2033              		.loc 1 601 0 is_stmt 0 discriminator 2
 2034 175a 807DEB2C 		cmpb	$44, -21(%rbp)
 2035 175e 7502     		jne	.L133
 2036              		.loc 1 601 0 discriminator 3
 2037 1760 EB56     		jmp	.L131
 2038              	.L133:
 602:main.c        ****                         else if( c >= '0' && c <= '9') { table[i][j]=c-48;  j++;  nl=i; }
 2039              		.loc 1 602 0 is_stmt 1
 2040 1762 807DEB2F 		cmpb	$47, -21(%rbp)
 2041 1766 7E3F     		jle	.L134
 2042              		.loc 1 602 0 is_stmt 0 discriminator 1
 2043 1768 807DEB39 		cmpb	$57, -21(%rbp)
 2044 176c 7F39     		jg	.L134
 2045              		.loc 1 602 0 discriminator 2
 2046 176e 8B45EC   		movl	-20(%rbp), %eax
 2047 1771 4863D0   		movslq	%eax, %rdx
 2048 1774 4889D0   		movq	%rdx, %rax
 2049 1777 48C1E002 		salq	$2, %rax
 2050 177b 4801D0   		addq	%rdx, %rax
 2051 177e 48C1E002 		salq	$2, %rax
 2052 1782 4889C2   		movq	%rax, %rdx
 2053 1785 488B45D0 		movq	-48(%rbp), %rax
 2054 1789 4801C2   		addq	%rax, %rdx
 2055 178c 0FBE45EB 		movsbl	-21(%rbp), %eax
 2056 1790 8D48D0   		leal	-48(%rax), %ecx
 2057 1793 8B45F0   		movl	-16(%rbp), %eax
 2058 1796 4898     		cltq
 2059 1798 890C82   		movl	%ecx, (%rdx,%rax,4)
 2060 179b 8345F001 		addl	$1, -16(%rbp)
 2061 179f 8B45EC   		movl	-20(%rbp), %eax
 2062 17a2 8945F4   		movl	%eax, -12(%rbp)
 2063 17a5 EB11     		jmp	.L131
 2064              	.L134:
 603:main.c        ****                         else if ( c == '\n' ) { i++; j=0; }
 2065              		.loc 1 603 0 is_stmt 1
 2066 17a7 807DEB0A 		cmpb	$10, -21(%rbp)
 2067 17ab 750B     		jne	.L131
 2068              		.loc 1 603 0 is_stmt 0 discriminator 1
 2069 17ad 8345EC01 		addl	$1, -20(%rbp)
 2070 17b1 C745F000 		movl	$0, -16(%rbp)
 2070      000000
 2071              	.L131:
 600:main.c        ****                         if(c == ' ' || c==',') continue;
 2072              		.loc 1 600 0 is_stmt 1
 2073 17b8 488B45F8 		movq	-8(%rbp), %rax
 2074 17bc 4889C7   		movq	%rax, %rdi
 2075 17bf E8000000 		call	_IO_getc
 2075      00
 2076 17c4 8845EB   		movb	%al, -21(%rbp)
 2077 17c7 807DEBFF 		cmpb	$-1, -21(%rbp)
 2078 17cb 7587     		jne	.L135
 604:main.c        ****                 }
 605:main.c        ****                 fclose(file);
 2079              		.loc 1 605 0
 2080 17cd 488B45F8 		movq	-8(%rbp), %rax
 2081 17d1 4889C7   		movq	%rax, %rdi
 2082 17d4 E8000000 		call	fclose
 2082      00
 2083              	.L130:
 606:main.c        ****         }
 607:main.c        ****         return nl+1;
 2084              		.loc 1 607 0
 2085 17d9 8B45F4   		movl	-12(%rbp), %eax
 2086 17dc 83C001   		addl	$1, %eax
 608:main.c        **** }
 2087              		.loc 1 608 0
 2088 17df C9       		leave
 2089              		.cfi_def_cfa 7, 8
 2090 17e0 C3       		ret
 2091              		.cfi_endproc
 2092              	.LFE11:
 2094              		.globl	mm
 2095              		.section	.rodata
 2096              	.LC44:
 2097 02e5 30313233 		.string	"0123456789abcdef"
 2097      34353637 
 2097      38396162 
 2097      63646566 
 2097      00
 2098              		.data
 2099              		.align 8
 2102              	mm:
 2103 00d8 00000000 		.quad	.LC44
 2103      00000000 
 2104              		.text
 2105              		.globl	boolToHex
 2107              	boolToHex:
 2108              	.LFB12:
 609:main.c        **** char * mm= "0123456789abcdef";
 610:main.c        **** char* boolToHex(char* input) // modify bool to hex , correct it 
 611:main.c        **** {
 2109              		.loc 1 611 0
 2110              		.cfi_startproc
 2111 17e1 55       		pushq	%rbp
 2112              		.cfi_def_cfa_offset 16
 2113              		.cfi_offset 6, -16
 2114 17e2 4889E5   		movq	%rsp, %rbp
 2115              		.cfi_def_cfa_register 6
 2116 17e5 4883EC30 		subq	$48, %rsp
 2117 17e9 48897DD8 		movq	%rdi, -40(%rbp)
 612:main.c        ****     char * ans=malloc(9); 
 2118              		.loc 1 612 0
 2119 17ed BF090000 		movl	$9, %edi
 2119      00
 2120 17f2 E8000000 		call	malloc
 2120      00
 2121 17f7 488945F8 		movq	%rax, -8(%rbp)
 613:main.c        ****     int var=(input[0]=='1'); 
 2122              		.loc 1 613 0
 2123 17fb 488B45D8 		movq	-40(%rbp), %rax
 2124 17ff 0FB600   		movzbl	(%rax), %eax
 2125 1802 3C31     		cmpb	$49, %al
 2126 1804 0F94C0   		sete	%al
 2127 1807 0FB6C0   		movzbl	%al, %eax
 2128 180a 8945EC   		movl	%eax, -20(%rbp)
 2129              	.LBB14:
 614:main.c        ****     for(int i=1;i<32;i++){
 2130              		.loc 1 614 0
 2131 180d C745F001 		movl	$1, -16(%rbp)
 2131      000000
 2132 1814 E98A0000 		jmp	.L138
 2132      00
 2133              	.L141:
 615:main.c        ****         if(i%4==0){
 2134              		.loc 1 615 0
 2135 1819 8B45F0   		movl	-16(%rbp), %eax
 2136 181c 83E003   		andl	$3, %eax
 2137 181f 85C0     		testl	%eax, %eax
 2138 1821 754C     		jne	.L139
 616:main.c        ****             ans[i/4-1]=mm[var]; 
 2139              		.loc 1 616 0
 2140 1823 8B45F0   		movl	-16(%rbp), %eax
 2141 1826 8D5003   		leal	3(%rax), %edx
 2142 1829 85C0     		testl	%eax, %eax
 2143 182b 0F48C2   		cmovs	%edx, %eax
 2144 182e C1F802   		sarl	$2, %eax
 2145 1831 4898     		cltq
 2146 1833 488D50FF 		leaq	-1(%rax), %rdx
 2147 1837 488B45F8 		movq	-8(%rbp), %rax
 2148 183b 4801C2   		addq	%rax, %rdx
 2149 183e 488B0D00 		movq	mm(%rip), %rcx
 2149      000000
 2150 1845 8B45EC   		movl	-20(%rbp), %eax
 2151 1848 4898     		cltq
 2152 184a 4801C8   		addq	%rcx, %rax
 2153 184d 0FB600   		movzbl	(%rax), %eax
 2154 1850 8802     		movb	%al, (%rdx)
 617:main.c        ****             var=(input[i]=='1'); 
 2155              		.loc 1 617 0
 2156 1852 8B45F0   		movl	-16(%rbp), %eax
 2157 1855 4863D0   		movslq	%eax, %rdx
 2158 1858 488B45D8 		movq	-40(%rbp), %rax
 2159 185c 4801D0   		addq	%rdx, %rax
 2160 185f 0FB600   		movzbl	(%rax), %eax
 2161 1862 3C31     		cmpb	$49, %al
 2162 1864 0F94C0   		sete	%al
 2163 1867 0FB6C0   		movzbl	%al, %eax
 2164 186a 8945EC   		movl	%eax, -20(%rbp)
 2165 186d EB30     		jmp	.L140
 2166              	.L139:
 618:main.c        ****         }
 619:main.c        ****         else {
 620:main.c        ****             if(input[i]=='1'){
 2167              		.loc 1 620 0
 2168 186f 8B45F0   		movl	-16(%rbp), %eax
 2169 1872 4863D0   		movslq	%eax, %rdx
 2170 1875 488B45D8 		movq	-40(%rbp), %rax
 2171 1879 4801D0   		addq	%rdx, %rax
 2172 187c 0FB600   		movzbl	(%rax), %eax
 2173 187f 3C31     		cmpb	$49, %al
 2174 1881 751C     		jne	.L140
 621:main.c        ****                 var+=(1<<(i%4)); 
 2175              		.loc 1 621 0
 2176 1883 8B45F0   		movl	-16(%rbp), %eax
 2177 1886 99       		cltd
 2178 1887 C1EA1E   		shrl	$30, %edx
 2179 188a 01D0     		addl	%edx, %eax
 2180 188c 83E003   		andl	$3, %eax
 2181 188f 29D0     		subl	%edx, %eax
 2182 1891 BA010000 		movl	$1, %edx
 2182      00
 2183 1896 89C1     		movl	%eax, %ecx
 2184 1898 D3E2     		sall	%cl, %edx
 2185 189a 89D0     		movl	%edx, %eax
 2186 189c 0145EC   		addl	%eax, -20(%rbp)
 2187              	.L140:
 614:main.c        ****         if(i%4==0){
 2188              		.loc 1 614 0 discriminator 2
 2189 189f 8345F001 		addl	$1, -16(%rbp)
 2190              	.L138:
 614:main.c        ****         if(i%4==0){
 2191              		.loc 1 614 0 is_stmt 0 discriminator 1
 2192 18a3 837DF01F 		cmpl	$31, -16(%rbp)
 2193 18a7 0F8E6CFF 		jle	.L141
 2193      FFFF
 2194              	.LBE14:
 622:main.c        ****             }
 623:main.c        ****         }
 624:main.c        ****     }
 625:main.c        ****     ans[7]=mm[var]; 
 2195              		.loc 1 625 0 is_stmt 1
 2196 18ad 488B45F8 		movq	-8(%rbp), %rax
 2197 18b1 488D5007 		leaq	7(%rax), %rdx
 2198 18b5 488B0D00 		movq	mm(%rip), %rcx
 2198      000000
 2199 18bc 8B45EC   		movl	-20(%rbp), %eax
 2200 18bf 4898     		cltq
 2201 18c1 4801C8   		addq	%rcx, %rax
 2202 18c4 0FB600   		movzbl	(%rax), %eax
 2203 18c7 8802     		movb	%al, (%rdx)
 2204              	.LBB15:
 626:main.c        **** 	for(int i=0;i<4;i++){
 2205              		.loc 1 626 0
 2206 18c9 C745F400 		movl	$0, -12(%rbp)
 2206      000000
 2207 18d0 EB57     		jmp	.L142
 2208              	.L143:
 2209              	.LBB16:
 627:main.c        **** 			char temp=ans[2*i]; 
 2210              		.loc 1 627 0 discriminator 3
 2211 18d2 8B45F4   		movl	-12(%rbp), %eax
 2212 18d5 01C0     		addl	%eax, %eax
 2213 18d7 4863D0   		movslq	%eax, %rdx
 2214 18da 488B45F8 		movq	-8(%rbp), %rax
 2215 18de 4801D0   		addq	%rdx, %rax
 2216 18e1 0FB600   		movzbl	(%rax), %eax
 2217 18e4 8845EB   		movb	%al, -21(%rbp)
 628:main.c        **** 			ans[2*i] =ans[2*i+1]; 
 2218              		.loc 1 628 0 discriminator 3
 2219 18e7 8B45F4   		movl	-12(%rbp), %eax
 2220 18ea 01C0     		addl	%eax, %eax
 2221 18ec 4863D0   		movslq	%eax, %rdx
 2222 18ef 488B45F8 		movq	-8(%rbp), %rax
 2223 18f3 4801C2   		addq	%rax, %rdx
 2224 18f6 8B45F4   		movl	-12(%rbp), %eax
 2225 18f9 01C0     		addl	%eax, %eax
 2226 18fb 4898     		cltq
 2227 18fd 488D4801 		leaq	1(%rax), %rcx
 2228 1901 488B45F8 		movq	-8(%rbp), %rax
 2229 1905 4801C8   		addq	%rcx, %rax
 2230 1908 0FB600   		movzbl	(%rax), %eax
 2231 190b 8802     		movb	%al, (%rdx)
 629:main.c        **** 			ans[2*i+1]=temp; 
 2232              		.loc 1 629 0 discriminator 3
 2233 190d 8B45F4   		movl	-12(%rbp), %eax
 2234 1910 01C0     		addl	%eax, %eax
 2235 1912 4898     		cltq
 2236 1914 488D5001 		leaq	1(%rax), %rdx
 2237 1918 488B45F8 		movq	-8(%rbp), %rax
 2238 191c 4801C2   		addq	%rax, %rdx
 2239 191f 0FB645EB 		movzbl	-21(%rbp), %eax
 2240 1923 8802     		movb	%al, (%rdx)
 2241              	.LBE16:
 626:main.c        **** 			char temp=ans[2*i]; 
 2242              		.loc 1 626 0 discriminator 3
 2243 1925 8345F401 		addl	$1, -12(%rbp)
 2244              	.L142:
 626:main.c        **** 			char temp=ans[2*i]; 
 2245              		.loc 1 626 0 is_stmt 0 discriminator 1
 2246 1929 837DF403 		cmpl	$3, -12(%rbp)
 2247 192d 7EA3     		jle	.L143
 2248              	.LBE15:
 630:main.c        **** 	}
 631:main.c        ****     ans[8]='\0'; 
 2249              		.loc 1 631 0 is_stmt 1
 2250 192f 488B45F8 		movq	-8(%rbp), %rax
 2251 1933 4883C008 		addq	$8, %rax
 2252 1937 C60000   		movb	$0, (%rax)
 632:main.c        ****     return ans; 
 2253              		.loc 1 632 0
 2254 193a 488B45F8 		movq	-8(%rbp), %rax
 633:main.c        **** }
 2255              		.loc 1 633 0
 2256 193e C9       		leave
 2257              		.cfi_def_cfa 7, 8
 2258 193f C3       		ret
 2259              		.cfi_endproc
 2260              	.LFE12:
 2262              		.section	.rodata
 2263              	.LC45:
 2264 02f6 25642020 		.string	"%d                       %d\n"
 2264      20202020 
 2264      20202020 
 2264      20202020 
 2264      20202020 
 2265              		.text
 2266              		.globl	get_coordinate
 2268              	get_coordinate:
 2269              	.LFB13:
 634:main.c        **** 
 635:main.c        **** void get_coordinate(const char * xy, int *x , int *y){
 2270              		.loc 1 635 0
 2271              		.cfi_startproc
 2272 1940 55       		pushq	%rbp
 2273              		.cfi_def_cfa_offset 16
 2274              		.cfi_offset 6, -16
 2275 1941 4889E5   		movq	%rsp, %rbp
 2276              		.cfi_def_cfa_register 6
 2277 1944 4883EC30 		subq	$48, %rsp
 2278 1948 48897DE8 		movq	%rdi, -24(%rbp)
 2279 194c 488975E0 		movq	%rsi, -32(%rbp)
 2280 1950 488955D8 		movq	%rdx, -40(%rbp)
 636:main.c        ****         *x=0; *y=0; 
 2281              		.loc 1 636 0
 2282 1954 488B45E0 		movq	-32(%rbp), %rax
 2283 1958 C7000000 		movl	$0, (%rax)
 2283      0000
 2284 195e 488B45D8 		movq	-40(%rbp), %rax
 2285 1962 C7000000 		movl	$0, (%rax)
 2285      0000
 2286              	.LBB17:
 637:main.c        **** 		for(int i=0;i<4;i++){
 2287              		.loc 1 637 0
 2288 1968 C745F800 		movl	$0, -8(%rbp)
 2288      000000
 2289 196f EB34     		jmp	.L146
 2290              	.L148:
 638:main.c        **** 				if(xy[i]=='1') { *x+=(1<<i); }
 2291              		.loc 1 638 0
 2292 1971 8B45F8   		movl	-8(%rbp), %eax
 2293 1974 4863D0   		movslq	%eax, %rdx
 2294 1977 488B45E8 		movq	-24(%rbp), %rax
 2295 197b 4801D0   		addq	%rdx, %rax
 2296 197e 0FB600   		movzbl	(%rax), %eax
 2297 1981 3C31     		cmpb	$49, %al
 2298 1983 751C     		jne	.L147
 2299              		.loc 1 638 0 is_stmt 0 discriminator 1
 2300 1985 488B45E0 		movq	-32(%rbp), %rax
 2301 1989 8B10     		movl	(%rax), %edx
 2302 198b 8B45F8   		movl	-8(%rbp), %eax
 2303 198e BE010000 		movl	$1, %esi
 2303      00
 2304 1993 89C1     		movl	%eax, %ecx
 2305 1995 D3E6     		sall	%cl, %esi
 2306 1997 89F0     		movl	%esi, %eax
 2307 1999 01C2     		addl	%eax, %edx
 2308 199b 488B45E0 		movq	-32(%rbp), %rax
 2309 199f 8910     		movl	%edx, (%rax)
 2310              	.L147:
 637:main.c        **** 		for(int i=0;i<4;i++){
 2311              		.loc 1 637 0 is_stmt 1 discriminator 2
 2312 19a1 8345F801 		addl	$1, -8(%rbp)
 2313              	.L146:
 637:main.c        **** 		for(int i=0;i<4;i++){
 2314              		.loc 1 637 0 is_stmt 0 discriminator 1
 2315 19a5 837DF803 		cmpl	$3, -8(%rbp)
 2316 19a9 7EC6     		jle	.L148
 2317              	.LBE17:
 2318              	.LBB18:
 639:main.c        **** 		}
 640:main.c        **** 		for(int i=4;i<8;i++){
 2319              		.loc 1 640 0 is_stmt 1
 2320 19ab C745FC04 		movl	$4, -4(%rbp)
 2320      000000
 2321 19b2 EB37     		jmp	.L149
 2322              	.L151:
 641:main.c        **** 				if(xy[i]=='1') { *y+=(1<<(i-4)); }
 2323              		.loc 1 641 0
 2324 19b4 8B45FC   		movl	-4(%rbp), %eax
 2325 19b7 4863D0   		movslq	%eax, %rdx
 2326 19ba 488B45E8 		movq	-24(%rbp), %rax
 2327 19be 4801D0   		addq	%rdx, %rax
 2328 19c1 0FB600   		movzbl	(%rax), %eax
 2329 19c4 3C31     		cmpb	$49, %al
 2330 19c6 751F     		jne	.L150
 2331              		.loc 1 641 0 is_stmt 0 discriminator 1
 2332 19c8 488B45D8 		movq	-40(%rbp), %rax
 2333 19cc 8B00     		movl	(%rax), %eax
 2334 19ce 8B55FC   		movl	-4(%rbp), %edx
 2335 19d1 83EA04   		subl	$4, %edx
 2336 19d4 BE010000 		movl	$1, %esi
 2336      00
 2337 19d9 89D1     		movl	%edx, %ecx
 2338 19db D3E6     		sall	%cl, %esi
 2339 19dd 89F2     		movl	%esi, %edx
 2340 19df 01C2     		addl	%eax, %edx
 2341 19e1 488B45D8 		movq	-40(%rbp), %rax
 2342 19e5 8910     		movl	%edx, (%rax)
 2343              	.L150:
 640:main.c        **** 				if(xy[i]=='1') { *y+=(1<<(i-4)); }
 2344              		.loc 1 640 0 is_stmt 1 discriminator 2
 2345 19e7 8345FC01 		addl	$1, -4(%rbp)
 2346              	.L149:
 640:main.c        **** 				if(xy[i]=='1') { *y+=(1<<(i-4)); }
 2347              		.loc 1 640 0 is_stmt 0 discriminator 1
 2348 19eb 837DFC07 		cmpl	$7, -4(%rbp)
 2349 19ef 7EC3     		jle	.L151
 2350              	.LBE18:
 642:main.c        **** 		}
 643:main.c        ****         printf("%d                       %d\n",*x,*y); 
 2351              		.loc 1 643 0 is_stmt 1
 2352 19f1 488B45D8 		movq	-40(%rbp), %rax
 2353 19f5 8B10     		movl	(%rax), %edx
 2354 19f7 488B45E0 		movq	-32(%rbp), %rax
 2355 19fb 8B00     		movl	(%rax), %eax
 2356 19fd 89C6     		movl	%eax, %esi
 2357 19ff BF000000 		movl	$.LC45, %edi
 2357      00
 2358 1a04 B8000000 		movl	$0, %eax
 2358      00
 2359 1a09 E8000000 		call	printf
 2359      00
 644:main.c        **** }
 2360              		.loc 1 644 0
 2361 1a0e 90       		nop
 2362 1a0f C9       		leave
 2363              		.cfi_def_cfa 7, 8
 2364 1a10 C3       		ret
 2365              		.cfi_endproc
 2366              	.LFE13:
 2368              		.globl	func
 2370              	func:
 2371              	.LFB14:
 645:main.c        **** 
 646:main.c        **** char* func(int x, int y,  int table[][5], int rows){
 2372              		.loc 1 646 0
 2373              		.cfi_startproc
 2374 1a11 55       		pushq	%rbp
 2375              		.cfi_def_cfa_offset 16
 2376              		.cfi_offset 6, -16
 2377 1a12 4889E5   		movq	%rsp, %rbp
 2378              		.cfi_def_cfa_register 6
 2379 1a15 4883EC50 		subq	$80, %rsp
 2380 1a19 897DCC   		movl	%edi, -52(%rbp)
 2381 1a1c 8975C8   		movl	%esi, -56(%rbp)
 2382 1a1f 488955C0 		movq	%rdx, -64(%rbp)
 2383 1a23 894DBC   		movl	%ecx, -68(%rbp)
 647:main.c        **** 
 648:main.c        **** 	char *ret = malloc(65);
 2384              		.loc 1 648 0
 2385 1a26 BF410000 		movl	$65, %edi
 2385      00
 2386 1a2b E8000000 		call	malloc
 2386      00
 2387 1a30 488945F0 		movq	%rax, -16(%rbp)
 649:main.c        **** 
 650:main.c        **** 	bool *seen = malloc(8) ;
 2388              		.loc 1 650 0
 2389 1a34 BF080000 		movl	$8, %edi
 2389      00
 2390 1a39 E8000000 		call	malloc
 2390      00
 2391 1a3e 488945F8 		movq	%rax, -8(%rbp)
 2392              	.LBB19:
 651:main.c        **** 
 652:main.c        **** 	for (int i=0;i<8;i++) seen[i] = false ;
 2393              		.loc 1 652 0
 2394 1a42 C745D400 		movl	$0, -44(%rbp)
 2394      000000
 2395 1a49 EB14     		jmp	.L153
 2396              	.L154:
 2397              		.loc 1 652 0 is_stmt 0 discriminator 3
 2398 1a4b 8B45D4   		movl	-44(%rbp), %eax
 2399 1a4e 4863D0   		movslq	%eax, %rdx
 2400 1a51 488B45F8 		movq	-8(%rbp), %rax
 2401 1a55 4801D0   		addq	%rdx, %rax
 2402 1a58 C60000   		movb	$0, (%rax)
 2403 1a5b 8345D401 		addl	$1, -44(%rbp)
 2404              	.L153:
 2405              		.loc 1 652 0 discriminator 1
 2406 1a5f 837DD407 		cmpl	$7, -44(%rbp)
 2407 1a63 7EE6     		jle	.L154
 2408              	.LBE19:
 2409              	.LBB20:
 653:main.c        **** 
 654:main.c        ****   	for (int i=0; i<rows; i++){
 2410              		.loc 1 654 0 is_stmt 1
 2411 1a65 C745D800 		movl	$0, -40(%rbp)
 2411      000000
 2412 1a6c E97D0200 		jmp	.L155
 2412      00
 2413              	.L171:
 655:main.c        ****    		if (table[i][0] == x && table[i][1] == y) {
 2414              		.loc 1 655 0
 2415 1a71 8B45D8   		movl	-40(%rbp), %eax
 2416 1a74 4863D0   		movslq	%eax, %rdx
 2417 1a77 4889D0   		movq	%rdx, %rax
 2418 1a7a 48C1E002 		salq	$2, %rax
 2419 1a7e 4801D0   		addq	%rdx, %rax
 2420 1a81 48C1E002 		salq	$2, %rax
 2421 1a85 4889C2   		movq	%rax, %rdx
 2422 1a88 488B45C0 		movq	-64(%rbp), %rax
 2423 1a8c 4801D0   		addq	%rdx, %rax
 2424 1a8f 8B00     		movl	(%rax), %eax
 2425 1a91 3B45CC   		cmpl	-52(%rbp), %eax
 2426 1a94 0F855002 		jne	.L156
 2426      0000
 2427              		.loc 1 655 0 is_stmt 0 discriminator 1
 2428 1a9a 8B45D8   		movl	-40(%rbp), %eax
 2429 1a9d 4863D0   		movslq	%eax, %rdx
 2430 1aa0 4889D0   		movq	%rdx, %rax
 2431 1aa3 48C1E002 		salq	$2, %rax
 2432 1aa7 4801D0   		addq	%rdx, %rax
 2433 1aaa 48C1E002 		salq	$2, %rax
 2434 1aae 4889C2   		movq	%rax, %rdx
 2435 1ab1 488B45C0 		movq	-64(%rbp), %rax
 2436 1ab5 4801D0   		addq	%rdx, %rax
 2437 1ab8 8B4004   		movl	4(%rax), %eax
 2438 1abb 3B45C8   		cmpl	-56(%rbp), %eax
 2439 1abe 0F852602 		jne	.L156
 2439      0000
 2440              	.LBB21:
 656:main.c        ****    			int dir =  table[i][2] ;
 2441              		.loc 1 656 0 is_stmt 1
 2442 1ac4 8B45D8   		movl	-40(%rbp), %eax
 2443 1ac7 4863D0   		movslq	%eax, %rdx
 2444 1aca 4889D0   		movq	%rdx, %rax
 2445 1acd 48C1E002 		salq	$2, %rax
 2446 1ad1 4801D0   		addq	%rdx, %rax
 2447 1ad4 48C1E002 		salq	$2, %rax
 2448 1ad8 4889C2   		movq	%rax, %rdx
 2449 1adb 488B45C0 		movq	-64(%rbp), %rax
 2450 1adf 4801D0   		addq	%rdx, %rax
 2451 1ae2 8B4008   		movl	8(%rax), %eax
 2452 1ae5 8945E0   		movl	%eax, -32(%rbp)
 657:main.c        ****    			int ns = table[i][4] ;
 2453              		.loc 1 657 0
 2454 1ae8 8B45D8   		movl	-40(%rbp), %eax
 2455 1aeb 4863D0   		movslq	%eax, %rdx
 2456 1aee 4889D0   		movq	%rdx, %rax
 2457 1af1 48C1E002 		salq	$2, %rax
 2458 1af5 4801D0   		addq	%rdx, %rax
 2459 1af8 48C1E002 		salq	$2, %rax
 2460 1afc 4889C2   		movq	%rax, %rdx
 2461 1aff 488B45C0 		movq	-64(%rbp), %rax
 2462 1b03 4801D0   		addq	%rdx, %rax
 2463 1b06 8B4010   		movl	16(%rax), %eax
 2464 1b09 8945E4   		movl	%eax, -28(%rbp)
 658:main.c        ****    			int j = 8*dir ;
 2465              		.loc 1 658 0
 2466 1b0c 8B45E0   		movl	-32(%rbp), %eax
 2467 1b0f C1E003   		sall	$3, %eax
 2468 1b12 8945E8   		movl	%eax, -24(%rbp)
 659:main.c        ****    			ret [j+2] = ((dir/4)%2 == 1) ? '1' : '0'  ;
 2469              		.loc 1 659 0
 2470 1b15 8B45E8   		movl	-24(%rbp), %eax
 2471 1b18 4898     		cltq
 2472 1b1a 488D5002 		leaq	2(%rax), %rdx
 2473 1b1e 488B45F0 		movq	-16(%rbp), %rax
 2474 1b22 4801C2   		addq	%rax, %rdx
 2475 1b25 8B45E0   		movl	-32(%rbp), %eax
 2476 1b28 8D4803   		leal	3(%rax), %ecx
 2477 1b2b 85C0     		testl	%eax, %eax
 2478 1b2d 0F48C1   		cmovs	%ecx, %eax
 2479 1b30 C1F802   		sarl	$2, %eax
 2480 1b33 89C1     		movl	%eax, %ecx
 2481 1b35 89C8     		movl	%ecx, %eax
 2482 1b37 C1F81F   		sarl	$31, %eax
 2483 1b3a C1E81F   		shrl	$31, %eax
 2484 1b3d 01C1     		addl	%eax, %ecx
 2485 1b3f 83E101   		andl	$1, %ecx
 2486 1b42 29C1     		subl	%eax, %ecx
 2487 1b44 89C8     		movl	%ecx, %eax
 2488 1b46 83F801   		cmpl	$1, %eax
 2489 1b49 7507     		jne	.L157
 2490              		.loc 1 659 0 is_stmt 0 discriminator 1
 2491 1b4b B8310000 		movl	$49, %eax
 2491      00
 2492 1b50 EB05     		jmp	.L158
 2493              	.L157:
 2494              		.loc 1 659 0 discriminator 2
 2495 1b52 B8300000 		movl	$48, %eax
 2495      00
 2496              	.L158:
 2497              		.loc 1 659 0 discriminator 4
 2498 1b57 8802     		movb	%al, (%rdx)
 660:main.c        ****    			ret [j+3] = ((dir/2)%2 == 1) ? '1' : '0' ;
 2499              		.loc 1 660 0 is_stmt 1 discriminator 4
 2500 1b59 8B45E8   		movl	-24(%rbp), %eax
 2501 1b5c 4898     		cltq
 2502 1b5e 488D5003 		leaq	3(%rax), %rdx
 2503 1b62 488B45F0 		movq	-16(%rbp), %rax
 2504 1b66 4801C2   		addq	%rax, %rdx
 2505 1b69 8B45E0   		movl	-32(%rbp), %eax
 2506 1b6c 89C1     		movl	%eax, %ecx
 2507 1b6e C1E91F   		shrl	$31, %ecx
 2508 1b71 01C8     		addl	%ecx, %eax
 2509 1b73 D1F8     		sarl	%eax
 2510 1b75 89C1     		movl	%eax, %ecx
 2511 1b77 89C8     		movl	%ecx, %eax
 2512 1b79 C1F81F   		sarl	$31, %eax
 2513 1b7c C1E81F   		shrl	$31, %eax
 2514 1b7f 01C1     		addl	%eax, %ecx
 2515 1b81 83E101   		andl	$1, %ecx
 2516 1b84 29C1     		subl	%eax, %ecx
 2517 1b86 89C8     		movl	%ecx, %eax
 2518 1b88 83F801   		cmpl	$1, %eax
 2519 1b8b 7507     		jne	.L159
 2520              		.loc 1 660 0 is_stmt 0 discriminator 1
 2521 1b8d B8310000 		movl	$49, %eax
 2521      00
 2522 1b92 EB05     		jmp	.L160
 2523              	.L159:
 2524              		.loc 1 660 0 discriminator 2
 2525 1b94 B8300000 		movl	$48, %eax
 2525      00
 2526              	.L160:
 2527              		.loc 1 660 0 discriminator 4
 2528 1b99 8802     		movb	%al, (%rdx)
 661:main.c        ****    			ret [j+4] = (dir%2 == 1) ? '1' : '0' ;
 2529              		.loc 1 661 0 is_stmt 1 discriminator 4
 2530 1b9b 8B45E8   		movl	-24(%rbp), %eax
 2531 1b9e 4898     		cltq
 2532 1ba0 488D5004 		leaq	4(%rax), %rdx
 2533 1ba4 488B45F0 		movq	-16(%rbp), %rax
 2534 1ba8 488D0C02 		leaq	(%rdx,%rax), %rcx
 2535 1bac 8B45E0   		movl	-32(%rbp), %eax
 2536 1baf 99       		cltd
 2537 1bb0 C1EA1F   		shrl	$31, %edx
 2538 1bb3 01D0     		addl	%edx, %eax
 2539 1bb5 83E001   		andl	$1, %eax
 2540 1bb8 29D0     		subl	%edx, %eax
 2541 1bba 83F801   		cmpl	$1, %eax
 2542 1bbd 7507     		jne	.L161
 2543              		.loc 1 661 0 is_stmt 0 discriminator 1
 2544 1bbf B8310000 		movl	$49, %eax
 2544      00
 2545 1bc4 EB05     		jmp	.L162
 2546              	.L161:
 2547              		.loc 1 661 0 discriminator 2
 2548 1bc6 B8300000 		movl	$48, %eax
 2548      00
 2549              	.L162:
 2550              		.loc 1 661 0 discriminator 4
 2551 1bcb 8801     		movb	%al, (%rcx)
 662:main.c        ****    			ret [j] = '1' ;
 2552              		.loc 1 662 0 is_stmt 1 discriminator 4
 2553 1bcd 8B45E8   		movl	-24(%rbp), %eax
 2554 1bd0 4863D0   		movslq	%eax, %rdx
 2555 1bd3 488B45F0 		movq	-16(%rbp), %rax
 2556 1bd7 4801D0   		addq	%rdx, %rax
 2557 1bda C60031   		movb	$49, (%rax)
 663:main.c        ****    			ret [j+1] = (table[i][3] == 1) ? '1' : '0' ;
 2558              		.loc 1 663 0 discriminator 4
 2559 1bdd 8B45E8   		movl	-24(%rbp), %eax
 2560 1be0 4898     		cltq
 2561 1be2 488D5001 		leaq	1(%rax), %rdx
 2562 1be6 488B45F0 		movq	-16(%rbp), %rax
 2563 1bea 488D0C02 		leaq	(%rdx,%rax), %rcx
 2564 1bee 8B45D8   		movl	-40(%rbp), %eax
 2565 1bf1 4863D0   		movslq	%eax, %rdx
 2566 1bf4 4889D0   		movq	%rdx, %rax
 2567 1bf7 48C1E002 		salq	$2, %rax
 2568 1bfb 4801D0   		addq	%rdx, %rax
 2569 1bfe 48C1E002 		salq	$2, %rax
 2570 1c02 4889C2   		movq	%rax, %rdx
 2571 1c05 488B45C0 		movq	-64(%rbp), %rax
 2572 1c09 4801D0   		addq	%rdx, %rax
 2573 1c0c 8B400C   		movl	12(%rax), %eax
 2574 1c0f 83F801   		cmpl	$1, %eax
 2575 1c12 7507     		jne	.L163
 2576              		.loc 1 663 0 is_stmt 0 discriminator 1
 2577 1c14 B8310000 		movl	$49, %eax
 2577      00
 2578 1c19 EB05     		jmp	.L164
 2579              	.L163:
 2580              		.loc 1 663 0 discriminator 2
 2581 1c1b B8300000 		movl	$48, %eax
 2581      00
 2582              	.L164:
 2583              		.loc 1 663 0 discriminator 4
 2584 1c20 8801     		movb	%al, (%rcx)
 664:main.c        ****    			ret [j+5] = ((ns/4)%2 == 1) ? '1' : '0' ;
 2585              		.loc 1 664 0 is_stmt 1 discriminator 4
 2586 1c22 8B45E8   		movl	-24(%rbp), %eax
 2587 1c25 4898     		cltq
 2588 1c27 488D5005 		leaq	5(%rax), %rdx
 2589 1c2b 488B45F0 		movq	-16(%rbp), %rax
 2590 1c2f 4801C2   		addq	%rax, %rdx
 2591 1c32 8B45E4   		movl	-28(%rbp), %eax
 2592 1c35 8D4803   		leal	3(%rax), %ecx
 2593 1c38 85C0     		testl	%eax, %eax
 2594 1c3a 0F48C1   		cmovs	%ecx, %eax
 2595 1c3d C1F802   		sarl	$2, %eax
 2596 1c40 89C1     		movl	%eax, %ecx
 2597 1c42 89C8     		movl	%ecx, %eax
 2598 1c44 C1F81F   		sarl	$31, %eax
 2599 1c47 C1E81F   		shrl	$31, %eax
 2600 1c4a 01C1     		addl	%eax, %ecx
 2601 1c4c 83E101   		andl	$1, %ecx
 2602 1c4f 29C1     		subl	%eax, %ecx
 2603 1c51 89C8     		movl	%ecx, %eax
 2604 1c53 83F801   		cmpl	$1, %eax
 2605 1c56 7507     		jne	.L165
 2606              		.loc 1 664 0 is_stmt 0 discriminator 1
 2607 1c58 B8310000 		movl	$49, %eax
 2607      00
 2608 1c5d EB05     		jmp	.L166
 2609              	.L165:
 2610              		.loc 1 664 0 discriminator 2
 2611 1c5f B8300000 		movl	$48, %eax
 2611      00
 2612              	.L166:
 2613              		.loc 1 664 0 discriminator 4
 2614 1c64 8802     		movb	%al, (%rdx)
 665:main.c        ****    			ret [j+6] = ((ns/2)%2 == 1) ? '1' : '0' ;
 2615              		.loc 1 665 0 is_stmt 1 discriminator 4
 2616 1c66 8B45E8   		movl	-24(%rbp), %eax
 2617 1c69 4898     		cltq
 2618 1c6b 488D5006 		leaq	6(%rax), %rdx
 2619 1c6f 488B45F0 		movq	-16(%rbp), %rax
 2620 1c73 4801C2   		addq	%rax, %rdx
 2621 1c76 8B45E4   		movl	-28(%rbp), %eax
 2622 1c79 89C1     		movl	%eax, %ecx
 2623 1c7b C1E91F   		shrl	$31, %ecx
 2624 1c7e 01C8     		addl	%ecx, %eax
 2625 1c80 D1F8     		sarl	%eax
 2626 1c82 89C1     		movl	%eax, %ecx
 2627 1c84 89C8     		movl	%ecx, %eax
 2628 1c86 C1F81F   		sarl	$31, %eax
 2629 1c89 C1E81F   		shrl	$31, %eax
 2630 1c8c 01C1     		addl	%eax, %ecx
 2631 1c8e 83E101   		andl	$1, %ecx
 2632 1c91 29C1     		subl	%eax, %ecx
 2633 1c93 89C8     		movl	%ecx, %eax
 2634 1c95 83F801   		cmpl	$1, %eax
 2635 1c98 7507     		jne	.L167
 2636              		.loc 1 665 0 is_stmt 0 discriminator 1
 2637 1c9a B8310000 		movl	$49, %eax
 2637      00
 2638 1c9f EB05     		jmp	.L168
 2639              	.L167:
 2640              		.loc 1 665 0 discriminator 2
 2641 1ca1 B8300000 		movl	$48, %eax
 2641      00
 2642              	.L168:
 2643              		.loc 1 665 0 discriminator 4
 2644 1ca6 8802     		movb	%al, (%rdx)
 666:main.c        ****    			ret [j+7] = (ns%2 == 1) ? '1' : '0' ;
 2645              		.loc 1 666 0 is_stmt 1 discriminator 4
 2646 1ca8 8B45E8   		movl	-24(%rbp), %eax
 2647 1cab 4898     		cltq
 2648 1cad 488D5007 		leaq	7(%rax), %rdx
 2649 1cb1 488B45F0 		movq	-16(%rbp), %rax
 2650 1cb5 488D0C02 		leaq	(%rdx,%rax), %rcx
 2651 1cb9 8B45E4   		movl	-28(%rbp), %eax
 2652 1cbc 99       		cltd
 2653 1cbd C1EA1F   		shrl	$31, %edx
 2654 1cc0 01D0     		addl	%edx, %eax
 2655 1cc2 83E001   		andl	$1, %eax
 2656 1cc5 29D0     		subl	%edx, %eax
 2657 1cc7 83F801   		cmpl	$1, %eax
 2658 1cca 7507     		jne	.L169
 2659              		.loc 1 666 0 is_stmt 0 discriminator 1
 2660 1ccc B8310000 		movl	$49, %eax
 2660      00
 2661 1cd1 EB05     		jmp	.L170
 2662              	.L169:
 2663              		.loc 1 666 0 discriminator 2
 2664 1cd3 B8300000 		movl	$48, %eax
 2664      00
 2665              	.L170:
 2666              		.loc 1 666 0 discriminator 4
 2667 1cd8 8801     		movb	%al, (%rcx)
 667:main.c        ****    			seen[dir] = true ;
 2668              		.loc 1 667 0 is_stmt 1 discriminator 4
 2669 1cda 8B45E0   		movl	-32(%rbp), %eax
 2670 1cdd 4863D0   		movslq	%eax, %rdx
 2671 1ce0 488B45F8 		movq	-8(%rbp), %rax
 2672 1ce4 4801D0   		addq	%rdx, %rax
 2673 1ce7 C60001   		movb	$1, (%rax)
 2674              	.L156:
 2675              	.LBE21:
 654:main.c        ****    		if (table[i][0] == x && table[i][1] == y) {
 2676              		.loc 1 654 0 discriminator 2
 2677 1cea 8345D801 		addl	$1, -40(%rbp)
 2678              	.L155:
 654:main.c        ****    		if (table[i][0] == x && table[i][1] == y) {
 2679              		.loc 1 654 0 is_stmt 0 discriminator 1
 2680 1cee 8B45D8   		movl	-40(%rbp), %eax
 2681 1cf1 3B45BC   		cmpl	-68(%rbp), %eax
 2682 1cf4 0F8C77FD 		jl	.L171
 2682      FFFF
 2683              	.LBE20:
 2684              	.LBB22:
 668:main.c        ****    		}
 669:main.c        ****    	}
 670:main.c        **** 
 671:main.c        ****    	for (int i=0;i<8;i++){
 2685              		.loc 1 671 0 is_stmt 1
 2686 1cfa C745DC00 		movl	$0, -36(%rbp)
 2686      000000
 2687 1d01 E93C0100 		jmp	.L172
 2687      00
 2688              	.L180:
 672:main.c        ****    		if (!(seen[i])) {
 2689              		.loc 1 672 0
 2690 1d06 8B45DC   		movl	-36(%rbp), %eax
 2691 1d09 4863D0   		movslq	%eax, %rdx
 2692 1d0c 488B45F8 		movq	-8(%rbp), %rax
 2693 1d10 4801D0   		addq	%rdx, %rax
 2694 1d13 0FB600   		movzbl	(%rax), %eax
 2695 1d16 83F001   		xorl	$1, %eax
 2696 1d19 84C0     		testb	%al, %al
 2697 1d1b 0F841D01 		je	.L173
 2697      0000
 2698              	.LBB23:
 673:main.c        ****    			int j = 8*i ;
 2699              		.loc 1 673 0
 2700 1d21 8B45DC   		movl	-36(%rbp), %eax
 2701 1d24 C1E003   		sall	$3, %eax
 2702 1d27 8945EC   		movl	%eax, -20(%rbp)
 674:main.c        ****    			ret [j+2] = ((i/4)%2 == 1) ? '1' : '0'  ;
 2703              		.loc 1 674 0
 2704 1d2a 8B45EC   		movl	-20(%rbp), %eax
 2705 1d2d 4898     		cltq
 2706 1d2f 488D5002 		leaq	2(%rax), %rdx
 2707 1d33 488B45F0 		movq	-16(%rbp), %rax
 2708 1d37 4801C2   		addq	%rax, %rdx
 2709 1d3a 8B45DC   		movl	-36(%rbp), %eax
 2710 1d3d 8D4803   		leal	3(%rax), %ecx
 2711 1d40 85C0     		testl	%eax, %eax
 2712 1d42 0F48C1   		cmovs	%ecx, %eax
 2713 1d45 C1F802   		sarl	$2, %eax
 2714 1d48 89C1     		movl	%eax, %ecx
 2715 1d4a 89C8     		movl	%ecx, %eax
 2716 1d4c C1F81F   		sarl	$31, %eax
 2717 1d4f C1E81F   		shrl	$31, %eax
 2718 1d52 01C1     		addl	%eax, %ecx
 2719 1d54 83E101   		andl	$1, %ecx
 2720 1d57 29C1     		subl	%eax, %ecx
 2721 1d59 89C8     		movl	%ecx, %eax
 2722 1d5b 83F801   		cmpl	$1, %eax
 2723 1d5e 7507     		jne	.L174
 2724              		.loc 1 674 0 is_stmt 0 discriminator 1
 2725 1d60 B8310000 		movl	$49, %eax
 2725      00
 2726 1d65 EB05     		jmp	.L175
 2727              	.L174:
 2728              		.loc 1 674 0 discriminator 2
 2729 1d67 B8300000 		movl	$48, %eax
 2729      00
 2730              	.L175:
 2731              		.loc 1 674 0 discriminator 4
 2732 1d6c 8802     		movb	%al, (%rdx)
 675:main.c        ****    			ret [j+3] = ((i/2)%2 == 1) ? '1' : '0' ;
 2733              		.loc 1 675 0 is_stmt 1 discriminator 4
 2734 1d6e 8B45EC   		movl	-20(%rbp), %eax
 2735 1d71 4898     		cltq
 2736 1d73 488D5003 		leaq	3(%rax), %rdx
 2737 1d77 488B45F0 		movq	-16(%rbp), %rax
 2738 1d7b 4801C2   		addq	%rax, %rdx
 2739 1d7e 8B45DC   		movl	-36(%rbp), %eax
 2740 1d81 89C1     		movl	%eax, %ecx
 2741 1d83 C1E91F   		shrl	$31, %ecx
 2742 1d86 01C8     		addl	%ecx, %eax
 2743 1d88 D1F8     		sarl	%eax
 2744 1d8a 89C1     		movl	%eax, %ecx
 2745 1d8c 89C8     		movl	%ecx, %eax
 2746 1d8e C1F81F   		sarl	$31, %eax
 2747 1d91 C1E81F   		shrl	$31, %eax
 2748 1d94 01C1     		addl	%eax, %ecx
 2749 1d96 83E101   		andl	$1, %ecx
 2750 1d99 29C1     		subl	%eax, %ecx
 2751 1d9b 89C8     		movl	%ecx, %eax
 2752 1d9d 83F801   		cmpl	$1, %eax
 2753 1da0 7507     		jne	.L176
 2754              		.loc 1 675 0 is_stmt 0 discriminator 1
 2755 1da2 B8310000 		movl	$49, %eax
 2755      00
 2756 1da7 EB05     		jmp	.L177
 2757              	.L176:
 2758              		.loc 1 675 0 discriminator 2
 2759 1da9 B8300000 		movl	$48, %eax
 2759      00
 2760              	.L177:
 2761              		.loc 1 675 0 discriminator 4
 2762 1dae 8802     		movb	%al, (%rdx)
 676:main.c        ****    			ret [j+4] = (i%2 == 1) ? '1' : '0' ;
 2763              		.loc 1 676 0 is_stmt 1 discriminator 4
 2764 1db0 8B45EC   		movl	-20(%rbp), %eax
 2765 1db3 4898     		cltq
 2766 1db5 488D5004 		leaq	4(%rax), %rdx
 2767 1db9 488B45F0 		movq	-16(%rbp), %rax
 2768 1dbd 488D0C02 		leaq	(%rdx,%rax), %rcx
 2769 1dc1 8B45DC   		movl	-36(%rbp), %eax
 2770 1dc4 99       		cltd
 2771 1dc5 C1EA1F   		shrl	$31, %edx
 2772 1dc8 01D0     		addl	%edx, %eax
 2773 1dca 83E001   		andl	$1, %eax
 2774 1dcd 29D0     		subl	%edx, %eax
 2775 1dcf 83F801   		cmpl	$1, %eax
 2776 1dd2 7507     		jne	.L178
 2777              		.loc 1 676 0 is_stmt 0 discriminator 1
 2778 1dd4 B8310000 		movl	$49, %eax
 2778      00
 2779 1dd9 EB05     		jmp	.L179
 2780              	.L178:
 2781              		.loc 1 676 0 discriminator 2
 2782 1ddb B8300000 		movl	$48, %eax
 2782      00
 2783              	.L179:
 2784              		.loc 1 676 0 discriminator 4
 2785 1de0 8801     		movb	%al, (%rcx)
 677:main.c        ****    			ret [j] = '0' ;
 2786              		.loc 1 677 0 is_stmt 1 discriminator 4
 2787 1de2 8B45EC   		movl	-20(%rbp), %eax
 2788 1de5 4863D0   		movslq	%eax, %rdx
 2789 1de8 488B45F0 		movq	-16(%rbp), %rax
 2790 1dec 4801D0   		addq	%rdx, %rax
 2791 1def C60030   		movb	$48, (%rax)
 678:main.c        ****    			ret [j+1] = '0' ;
 2792              		.loc 1 678 0 discriminator 4
 2793 1df2 8B45EC   		movl	-20(%rbp), %eax
 2794 1df5 4898     		cltq
 2795 1df7 488D5001 		leaq	1(%rax), %rdx
 2796 1dfb 488B45F0 		movq	-16(%rbp), %rax
 2797 1dff 4801D0   		addq	%rdx, %rax
 2798 1e02 C60030   		movb	$48, (%rax)
 679:main.c        ****    			ret [j+5] = '0' ;
 2799              		.loc 1 679 0 discriminator 4
 2800 1e05 8B45EC   		movl	-20(%rbp), %eax
 2801 1e08 4898     		cltq
 2802 1e0a 488D5005 		leaq	5(%rax), %rdx
 2803 1e0e 488B45F0 		movq	-16(%rbp), %rax
 2804 1e12 4801D0   		addq	%rdx, %rax
 2805 1e15 C60030   		movb	$48, (%rax)
 680:main.c        ****    			ret [j+6] = '0' ;
 2806              		.loc 1 680 0 discriminator 4
 2807 1e18 8B45EC   		movl	-20(%rbp), %eax
 2808 1e1b 4898     		cltq
 2809 1e1d 488D5006 		leaq	6(%rax), %rdx
 2810 1e21 488B45F0 		movq	-16(%rbp), %rax
 2811 1e25 4801D0   		addq	%rdx, %rax
 2812 1e28 C60030   		movb	$48, (%rax)
 681:main.c        ****    			ret [j+7] = '0' ;
 2813              		.loc 1 681 0 discriminator 4
 2814 1e2b 8B45EC   		movl	-20(%rbp), %eax
 2815 1e2e 4898     		cltq
 2816 1e30 488D5007 		leaq	7(%rax), %rdx
 2817 1e34 488B45F0 		movq	-16(%rbp), %rax
 2818 1e38 4801D0   		addq	%rdx, %rax
 2819 1e3b C60030   		movb	$48, (%rax)
 2820              	.L173:
 2821              	.LBE23:
 671:main.c        ****    		if (!(seen[i])) {
 2822              		.loc 1 671 0 discriminator 2
 2823 1e3e 8345DC01 		addl	$1, -36(%rbp)
 2824              	.L172:
 671:main.c        ****    		if (!(seen[i])) {
 2825              		.loc 1 671 0 is_stmt 0 discriminator 1
 2826 1e42 837DDC07 		cmpl	$7, -36(%rbp)
 2827 1e46 0F8EBAFE 		jle	.L180
 2827      FFFF
 2828              	.LBE22:
 682:main.c        ****    		}
 683:main.c        ****    	}
 684:main.c        ****     ret[64] = '\0';
 2829              		.loc 1 684 0 is_stmt 1
 2830 1e4c 488B45F0 		movq	-16(%rbp), %rax
 2831 1e50 4883C040 		addq	$64, %rax
 2832 1e54 C60000   		movb	$0, (%rax)
 685:main.c        ****    	return ret ;
 2833              		.loc 1 685 0
 2834 1e57 488B45F0 		movq	-16(%rbp), %rax
 686:main.c        **** 
 687:main.c        **** }
 2835              		.loc 1 687 0
 2836 1e5b C9       		leave
 2837              		.cfi_def_cfa 7, 8
 2838 1e5c C3       		ret
 2839              		.cfi_endproc
 2840              	.LFE14:
 2842              		.globl	xor
 2844              	xor:
 2845              	.LFB15:
 688:main.c        **** 
 689:main.c        **** char xor(char a, char b){
 2846              		.loc 1 689 0
 2847              		.cfi_startproc
 2848 1e5d 55       		pushq	%rbp
 2849              		.cfi_def_cfa_offset 16
 2850              		.cfi_offset 6, -16
 2851 1e5e 4889E5   		movq	%rsp, %rbp
 2852              		.cfi_def_cfa_register 6
 2853 1e61 89FA     		movl	%edi, %edx
 2854 1e63 89F0     		movl	%esi, %eax
 2855 1e65 8855FC   		movb	%dl, -4(%rbp)
 2856 1e68 8845F8   		movb	%al, -8(%rbp)
 690:main.c        **** 	if (a==b) return '0';
 2857              		.loc 1 690 0
 2858 1e6b 0FB645FC 		movzbl	-4(%rbp), %eax
 2859 1e6f 3A45F8   		cmpb	-8(%rbp), %al
 2860 1e72 7507     		jne	.L183
 2861              		.loc 1 690 0 is_stmt 0 discriminator 1
 2862 1e74 B8300000 		movl	$48, %eax
 2862      00
 2863 1e79 EB05     		jmp	.L184
 2864              	.L183:
 691:main.c        **** 	else return '1';
 2865              		.loc 1 691 0 is_stmt 1
 2866 1e7b B8310000 		movl	$49, %eax
 2866      00
 2867              	.L184:
 692:main.c        **** }
 2868              		.loc 1 692 0
 2869 1e80 5D       		popq	%rbp
 2870              		.cfi_def_cfa 7, 8
 2871 1e81 C3       		ret
 2872              		.cfi_endproc
 2873              	.LFE15:
 2875              		.globl	and
 2877              	and:
 2878              	.LFB16:
 693:main.c        **** 
 694:main.c        **** char and(char a, char b){
 2879              		.loc 1 694 0
 2880              		.cfi_startproc
 2881 1e82 55       		pushq	%rbp
 2882              		.cfi_def_cfa_offset 16
 2883              		.cfi_offset 6, -16
 2884 1e83 4889E5   		movq	%rsp, %rbp
 2885              		.cfi_def_cfa_register 6
 2886 1e86 89FA     		movl	%edi, %edx
 2887 1e88 89F0     		movl	%esi, %eax
 2888 1e8a 8855FC   		movb	%dl, -4(%rbp)
 2889 1e8d 8845F8   		movb	%al, -8(%rbp)
 695:main.c        **** 	if (a=='1' && b=='1') return '1';
 2890              		.loc 1 695 0
 2891 1e90 807DFC31 		cmpb	$49, -4(%rbp)
 2892 1e94 750D     		jne	.L186
 2893              		.loc 1 695 0 is_stmt 0 discriminator 1
 2894 1e96 807DF831 		cmpb	$49, -8(%rbp)
 2895 1e9a 7507     		jne	.L186
 2896              		.loc 1 695 0 discriminator 2
 2897 1e9c B8310000 		movl	$49, %eax
 2897      00
 2898 1ea1 EB05     		jmp	.L187
 2899              	.L186:
 696:main.c        **** 	else return '0';
 2900              		.loc 1 696 0 is_stmt 1
 2901 1ea3 B8300000 		movl	$48, %eax
 2901      00
 2902              	.L187:
 697:main.c        **** }
 2903              		.loc 1 697 0
 2904 1ea8 5D       		popq	%rbp
 2905              		.cfi_def_cfa 7, 8
 2906 1ea9 C3       		ret
 2907              		.cfi_endproc
 2908              	.LFE16:
 2910              		.globl	decrypt
 2912              	decrypt:
 2913              	.LFB17:
 698:main.c        **** 
 699:main.c        **** char* decrypt(char C[32], char K[32]){
 2914              		.loc 1 699 0
 2915              		.cfi_startproc
 2916 1eaa 55       		pushq	%rbp
 2917              		.cfi_def_cfa_offset 16
 2918              		.cfi_offset 6, -16
 2919 1eab 4889E5   		movq	%rsp, %rbp
 2920              		.cfi_def_cfa_register 6
 2921 1eae 4154     		pushq	%r12
 2922 1eb0 53       		pushq	%rbx
 2923 1eb1 4883EC70 		subq	$112, %rsp
 2924              		.cfi_offset 12, -24
 2925              		.cfi_offset 3, -32
 2926 1eb5 48897D88 		movq	%rdi, -120(%rbp)
 2927 1eb9 48897580 		movq	%rsi, -128(%rbp)
 700:main.c        **** 	char* P = malloc(33);
 2928              		.loc 1 700 0
 2929 1ebd BF210000 		movl	$33, %edi
 2929      00
 2930 1ec2 E8000000 		call	malloc
 2930      00
 2931 1ec7 488945C0 		movq	%rax, -64(%rbp)
 701:main.c        **** 	int N0=0;
 2932              		.loc 1 701 0
 2933 1ecb C7459400 		movl	$0, -108(%rbp)
 2933      000000
 2934              	.LBB24:
 702:main.c        **** 	for (int i=0;i<32;i++){if (K[i]=='0') N0++;}
 2935              		.loc 1 702 0
 2936 1ed2 C7459800 		movl	$0, -104(%rbp)
 2936      000000
 2937 1ed9 EB1C     		jmp	.L189
 2938              	.L191:
 2939              		.loc 1 702 0 is_stmt 0 discriminator 6
 2940 1edb 8B4598   		movl	-104(%rbp), %eax
 2941 1ede 4863D0   		movslq	%eax, %rdx
 2942 1ee1 488B4580 		movq	-128(%rbp), %rax
 2943 1ee5 4801D0   		addq	%rdx, %rax
 2944 1ee8 0FB600   		movzbl	(%rax), %eax
 2945 1eeb 3C30     		cmpb	$48, %al
 2946 1eed 7504     		jne	.L190
 2947              		.loc 1 702 0 discriminator 2
 2948 1eef 83459401 		addl	$1, -108(%rbp)
 2949              	.L190:
 2950              		.loc 1 702 0 discriminator 4
 2951 1ef3 83459801 		addl	$1, -104(%rbp)
 2952              	.L189:
 2953              		.loc 1 702 0 discriminator 5
 2954 1ef7 837D981F 		cmpl	$31, -104(%rbp)
 2955 1efb 7EDE     		jle	.L191
 2956              	.LBE24:
 2957              	.LBB25:
 703:main.c        **** 	for (int i=0;i<32;i++) P[i]=C[i];
 2958              		.loc 1 703 0 is_stmt 1
 2959 1efd C7459C00 		movl	$0, -100(%rbp)
 2959      000000
 2960 1f04 EB23     		jmp	.L192
 2961              	.L193:
 2962              		.loc 1 703 0 is_stmt 0 discriminator 3
 2963 1f06 8B459C   		movl	-100(%rbp), %eax
 2964 1f09 4863D0   		movslq	%eax, %rdx
 2965 1f0c 488B45C0 		movq	-64(%rbp), %rax
 2966 1f10 4801C2   		addq	%rax, %rdx
 2967 1f13 8B459C   		movl	-100(%rbp), %eax
 2968 1f16 4863C8   		movslq	%eax, %rcx
 2969 1f19 488B4588 		movq	-120(%rbp), %rax
 2970 1f1d 4801C8   		addq	%rcx, %rax
 2971 1f20 0FB600   		movzbl	(%rax), %eax
 2972 1f23 8802     		movb	%al, (%rdx)
 2973 1f25 83459C01 		addl	$1, -100(%rbp)
 2974              	.L192:
 2975              		.loc 1 703 0 discriminator 1
 2976 1f29 837D9C1F 		cmpl	$31, -100(%rbp)
 2977 1f2d 7ED7     		jle	.L193
 2978              	.LBE25:
 704:main.c        **** 	P[32]='\0';
 2979              		.loc 1 704 0 is_stmt 1
 2980 1f2f 488B45C0 		movq	-64(%rbp), %rax
 2981 1f33 4883C020 		addq	$32, %rax
 2982 1f37 C60000   		movb	$0, (%rax)
 705:main.c        **** 
 706:main.c        **** 	char* T = malloc(5) ;
 2983              		.loc 1 706 0
 2984 1f3a BF050000 		movl	$5, %edi
 2984      00
 2985 1f3f E8000000 		call	malloc
 2985      00
 2986 1f44 488945C8 		movq	%rax, -56(%rbp)
 707:main.c        **** 	T[4]='\0';
 2987              		.loc 1 707 0
 2988 1f48 488B45C8 		movq	-56(%rbp), %rax
 2989 1f4c 4883C004 		addq	$4, %rax
 2990 1f50 C60000   		movb	$0, (%rax)
 708:main.c        **** 	T[3] = xor(K[31],xor(K[27],xor(K[23],xor(K[19],xor(K[15],xor(K[11],xor(K[7],K[3])))))));
 2991              		.loc 1 708 0
 2992 1f53 488B45C8 		movq	-56(%rbp), %rax
 2993 1f57 488D5803 		leaq	3(%rax), %rbx
 2994 1f5b 488B4580 		movq	-128(%rbp), %rax
 2995 1f5f 4883C003 		addq	$3, %rax
 2996 1f63 0FB600   		movzbl	(%rax), %eax
 2997 1f66 0FBED0   		movsbl	%al, %edx
 2998 1f69 488B4580 		movq	-128(%rbp), %rax
 2999 1f6d 4883C007 		addq	$7, %rax
 3000 1f71 0FB600   		movzbl	(%rax), %eax
 3001 1f74 0FBEC0   		movsbl	%al, %eax
 3002 1f77 89D6     		movl	%edx, %esi
 3003 1f79 89C7     		movl	%eax, %edi
 3004 1f7b E8000000 		call	xor
 3004      00
 3005 1f80 0FBED0   		movsbl	%al, %edx
 3006 1f83 488B4580 		movq	-128(%rbp), %rax
 3007 1f87 4883C00B 		addq	$11, %rax
 3008 1f8b 0FB600   		movzbl	(%rax), %eax
 3009 1f8e 0FBEC0   		movsbl	%al, %eax
 3010 1f91 89D6     		movl	%edx, %esi
 3011 1f93 89C7     		movl	%eax, %edi
 3012 1f95 E8000000 		call	xor
 3012      00
 3013 1f9a 0FBED0   		movsbl	%al, %edx
 3014 1f9d 488B4580 		movq	-128(%rbp), %rax
 3015 1fa1 4883C00F 		addq	$15, %rax
 3016 1fa5 0FB600   		movzbl	(%rax), %eax
 3017 1fa8 0FBEC0   		movsbl	%al, %eax
 3018 1fab 89D6     		movl	%edx, %esi
 3019 1fad 89C7     		movl	%eax, %edi
 3020 1faf E8000000 		call	xor
 3020      00
 3021 1fb4 0FBED0   		movsbl	%al, %edx
 3022 1fb7 488B4580 		movq	-128(%rbp), %rax
 3023 1fbb 4883C013 		addq	$19, %rax
 3024 1fbf 0FB600   		movzbl	(%rax), %eax
 3025 1fc2 0FBEC0   		movsbl	%al, %eax
 3026 1fc5 89D6     		movl	%edx, %esi
 3027 1fc7 89C7     		movl	%eax, %edi
 3028 1fc9 E8000000 		call	xor
 3028      00
 3029 1fce 0FBED0   		movsbl	%al, %edx
 3030 1fd1 488B4580 		movq	-128(%rbp), %rax
 3031 1fd5 4883C017 		addq	$23, %rax
 3032 1fd9 0FB600   		movzbl	(%rax), %eax
 3033 1fdc 0FBEC0   		movsbl	%al, %eax
 3034 1fdf 89D6     		movl	%edx, %esi
 3035 1fe1 89C7     		movl	%eax, %edi
 3036 1fe3 E8000000 		call	xor
 3036      00
 3037 1fe8 0FBED0   		movsbl	%al, %edx
 3038 1feb 488B4580 		movq	-128(%rbp), %rax
 3039 1fef 4883C01B 		addq	$27, %rax
 3040 1ff3 0FB600   		movzbl	(%rax), %eax
 3041 1ff6 0FBEC0   		movsbl	%al, %eax
 3042 1ff9 89D6     		movl	%edx, %esi
 3043 1ffb 89C7     		movl	%eax, %edi
 3044 1ffd E8000000 		call	xor
 3044      00
 3045 2002 0FBED0   		movsbl	%al, %edx
 3046 2005 488B4580 		movq	-128(%rbp), %rax
 3047 2009 4883C01F 		addq	$31, %rax
 3048 200d 0FB600   		movzbl	(%rax), %eax
 3049 2010 0FBEC0   		movsbl	%al, %eax
 3050 2013 89D6     		movl	%edx, %esi
 3051 2015 89C7     		movl	%eax, %edi
 3052 2017 E8000000 		call	xor
 3052      00
 3053 201c 8803     		movb	%al, (%rbx)
 709:main.c        **** 	T[2] = xor(K[30],xor(K[26],xor(K[22],xor(K[18],xor(K[14],xor(K[10],xor(K[6],K[2])))))));
 3054              		.loc 1 709 0
 3055 201e 488B45C8 		movq	-56(%rbp), %rax
 3056 2022 488D5802 		leaq	2(%rax), %rbx
 3057 2026 488B4580 		movq	-128(%rbp), %rax
 3058 202a 4883C002 		addq	$2, %rax
 3059 202e 0FB600   		movzbl	(%rax), %eax
 3060 2031 0FBED0   		movsbl	%al, %edx
 3061 2034 488B4580 		movq	-128(%rbp), %rax
 3062 2038 4883C006 		addq	$6, %rax
 3063 203c 0FB600   		movzbl	(%rax), %eax
 3064 203f 0FBEC0   		movsbl	%al, %eax
 3065 2042 89D6     		movl	%edx, %esi
 3066 2044 89C7     		movl	%eax, %edi
 3067 2046 E8000000 		call	xor
 3067      00
 3068 204b 0FBED0   		movsbl	%al, %edx
 3069 204e 488B4580 		movq	-128(%rbp), %rax
 3070 2052 4883C00A 		addq	$10, %rax
 3071 2056 0FB600   		movzbl	(%rax), %eax
 3072 2059 0FBEC0   		movsbl	%al, %eax
 3073 205c 89D6     		movl	%edx, %esi
 3074 205e 89C7     		movl	%eax, %edi
 3075 2060 E8000000 		call	xor
 3075      00
 3076 2065 0FBED0   		movsbl	%al, %edx
 3077 2068 488B4580 		movq	-128(%rbp), %rax
 3078 206c 4883C00E 		addq	$14, %rax
 3079 2070 0FB600   		movzbl	(%rax), %eax
 3080 2073 0FBEC0   		movsbl	%al, %eax
 3081 2076 89D6     		movl	%edx, %esi
 3082 2078 89C7     		movl	%eax, %edi
 3083 207a E8000000 		call	xor
 3083      00
 3084 207f 0FBED0   		movsbl	%al, %edx
 3085 2082 488B4580 		movq	-128(%rbp), %rax
 3086 2086 4883C012 		addq	$18, %rax
 3087 208a 0FB600   		movzbl	(%rax), %eax
 3088 208d 0FBEC0   		movsbl	%al, %eax
 3089 2090 89D6     		movl	%edx, %esi
 3090 2092 89C7     		movl	%eax, %edi
 3091 2094 E8000000 		call	xor
 3091      00
 3092 2099 0FBED0   		movsbl	%al, %edx
 3093 209c 488B4580 		movq	-128(%rbp), %rax
 3094 20a0 4883C016 		addq	$22, %rax
 3095 20a4 0FB600   		movzbl	(%rax), %eax
 3096 20a7 0FBEC0   		movsbl	%al, %eax
 3097 20aa 89D6     		movl	%edx, %esi
 3098 20ac 89C7     		movl	%eax, %edi
 3099 20ae E8000000 		call	xor
 3099      00
 3100 20b3 0FBED0   		movsbl	%al, %edx
 3101 20b6 488B4580 		movq	-128(%rbp), %rax
 3102 20ba 4883C01A 		addq	$26, %rax
 3103 20be 0FB600   		movzbl	(%rax), %eax
 3104 20c1 0FBEC0   		movsbl	%al, %eax
 3105 20c4 89D6     		movl	%edx, %esi
 3106 20c6 89C7     		movl	%eax, %edi
 3107 20c8 E8000000 		call	xor
 3107      00
 3108 20cd 0FBED0   		movsbl	%al, %edx
 3109 20d0 488B4580 		movq	-128(%rbp), %rax
 3110 20d4 4883C01E 		addq	$30, %rax
 3111 20d8 0FB600   		movzbl	(%rax), %eax
 3112 20db 0FBEC0   		movsbl	%al, %eax
 3113 20de 89D6     		movl	%edx, %esi
 3114 20e0 89C7     		movl	%eax, %edi
 3115 20e2 E8000000 		call	xor
 3115      00
 3116 20e7 8803     		movb	%al, (%rbx)
 710:main.c        **** 	T[1] = xor(K[29],xor(K[25],xor(K[21],xor(K[17],xor(K[13],xor(K[9],xor(K[5],K[1])))))));
 3117              		.loc 1 710 0
 3118 20e9 488B45C8 		movq	-56(%rbp), %rax
 3119 20ed 488D5801 		leaq	1(%rax), %rbx
 3120 20f1 488B4580 		movq	-128(%rbp), %rax
 3121 20f5 4883C001 		addq	$1, %rax
 3122 20f9 0FB600   		movzbl	(%rax), %eax
 3123 20fc 0FBED0   		movsbl	%al, %edx
 3124 20ff 488B4580 		movq	-128(%rbp), %rax
 3125 2103 4883C005 		addq	$5, %rax
 3126 2107 0FB600   		movzbl	(%rax), %eax
 3127 210a 0FBEC0   		movsbl	%al, %eax
 3128 210d 89D6     		movl	%edx, %esi
 3129 210f 89C7     		movl	%eax, %edi
 3130 2111 E8000000 		call	xor
 3130      00
 3131 2116 0FBED0   		movsbl	%al, %edx
 3132 2119 488B4580 		movq	-128(%rbp), %rax
 3133 211d 4883C009 		addq	$9, %rax
 3134 2121 0FB600   		movzbl	(%rax), %eax
 3135 2124 0FBEC0   		movsbl	%al, %eax
 3136 2127 89D6     		movl	%edx, %esi
 3137 2129 89C7     		movl	%eax, %edi
 3138 212b E8000000 		call	xor
 3138      00
 3139 2130 0FBED0   		movsbl	%al, %edx
 3140 2133 488B4580 		movq	-128(%rbp), %rax
 3141 2137 4883C00D 		addq	$13, %rax
 3142 213b 0FB600   		movzbl	(%rax), %eax
 3143 213e 0FBEC0   		movsbl	%al, %eax
 3144 2141 89D6     		movl	%edx, %esi
 3145 2143 89C7     		movl	%eax, %edi
 3146 2145 E8000000 		call	xor
 3146      00
 3147 214a 0FBED0   		movsbl	%al, %edx
 3148 214d 488B4580 		movq	-128(%rbp), %rax
 3149 2151 4883C011 		addq	$17, %rax
 3150 2155 0FB600   		movzbl	(%rax), %eax
 3151 2158 0FBEC0   		movsbl	%al, %eax
 3152 215b 89D6     		movl	%edx, %esi
 3153 215d 89C7     		movl	%eax, %edi
 3154 215f E8000000 		call	xor
 3154      00
 3155 2164 0FBED0   		movsbl	%al, %edx
 3156 2167 488B4580 		movq	-128(%rbp), %rax
 3157 216b 4883C015 		addq	$21, %rax
 3158 216f 0FB600   		movzbl	(%rax), %eax
 3159 2172 0FBEC0   		movsbl	%al, %eax
 3160 2175 89D6     		movl	%edx, %esi
 3161 2177 89C7     		movl	%eax, %edi
 3162 2179 E8000000 		call	xor
 3162      00
 3163 217e 0FBED0   		movsbl	%al, %edx
 3164 2181 488B4580 		movq	-128(%rbp), %rax
 3165 2185 4883C019 		addq	$25, %rax
 3166 2189 0FB600   		movzbl	(%rax), %eax
 3167 218c 0FBEC0   		movsbl	%al, %eax
 3168 218f 89D6     		movl	%edx, %esi
 3169 2191 89C7     		movl	%eax, %edi
 3170 2193 E8000000 		call	xor
 3170      00
 3171 2198 0FBED0   		movsbl	%al, %edx
 3172 219b 488B4580 		movq	-128(%rbp), %rax
 3173 219f 4883C01D 		addq	$29, %rax
 3174 21a3 0FB600   		movzbl	(%rax), %eax
 3175 21a6 0FBEC0   		movsbl	%al, %eax
 3176 21a9 89D6     		movl	%edx, %esi
 3177 21ab 89C7     		movl	%eax, %edi
 3178 21ad E8000000 		call	xor
 3178      00
 3179 21b2 8803     		movb	%al, (%rbx)
 711:main.c        **** 	T[0] = xor(K[28],xor(K[24],xor(K[20],xor(K[16],xor(K[12],xor(K[8],xor(K[4],K[0])))))));
 3180              		.loc 1 711 0
 3181 21b4 488B4580 		movq	-128(%rbp), %rax
 3182 21b8 0FB600   		movzbl	(%rax), %eax
 3183 21bb 0FBED0   		movsbl	%al, %edx
 3184 21be 488B4580 		movq	-128(%rbp), %rax
 3185 21c2 4883C004 		addq	$4, %rax
 3186 21c6 0FB600   		movzbl	(%rax), %eax
 3187 21c9 0FBEC0   		movsbl	%al, %eax
 3188 21cc 89D6     		movl	%edx, %esi
 3189 21ce 89C7     		movl	%eax, %edi
 3190 21d0 E8000000 		call	xor
 3190      00
 3191 21d5 0FBED0   		movsbl	%al, %edx
 3192 21d8 488B4580 		movq	-128(%rbp), %rax
 3193 21dc 4883C008 		addq	$8, %rax
 3194 21e0 0FB600   		movzbl	(%rax), %eax
 3195 21e3 0FBEC0   		movsbl	%al, %eax
 3196 21e6 89D6     		movl	%edx, %esi
 3197 21e8 89C7     		movl	%eax, %edi
 3198 21ea E8000000 		call	xor
 3198      00
 3199 21ef 0FBED0   		movsbl	%al, %edx
 3200 21f2 488B4580 		movq	-128(%rbp), %rax
 3201 21f6 4883C00C 		addq	$12, %rax
 3202 21fa 0FB600   		movzbl	(%rax), %eax
 3203 21fd 0FBEC0   		movsbl	%al, %eax
 3204 2200 89D6     		movl	%edx, %esi
 3205 2202 89C7     		movl	%eax, %edi
 3206 2204 E8000000 		call	xor
 3206      00
 3207 2209 0FBED0   		movsbl	%al, %edx
 3208 220c 488B4580 		movq	-128(%rbp), %rax
 3209 2210 4883C010 		addq	$16, %rax
 3210 2214 0FB600   		movzbl	(%rax), %eax
 3211 2217 0FBEC0   		movsbl	%al, %eax
 3212 221a 89D6     		movl	%edx, %esi
 3213 221c 89C7     		movl	%eax, %edi
 3214 221e E8000000 		call	xor
 3214      00
 3215 2223 0FBED0   		movsbl	%al, %edx
 3216 2226 488B4580 		movq	-128(%rbp), %rax
 3217 222a 4883C014 		addq	$20, %rax
 3218 222e 0FB600   		movzbl	(%rax), %eax
 3219 2231 0FBEC0   		movsbl	%al, %eax
 3220 2234 89D6     		movl	%edx, %esi
 3221 2236 89C7     		movl	%eax, %edi
 3222 2238 E8000000 		call	xor
 3222      00
 3223 223d 0FBED0   		movsbl	%al, %edx
 3224 2240 488B4580 		movq	-128(%rbp), %rax
 3225 2244 4883C018 		addq	$24, %rax
 3226 2248 0FB600   		movzbl	(%rax), %eax
 3227 224b 0FBEC0   		movsbl	%al, %eax
 3228 224e 89D6     		movl	%edx, %esi
 3229 2250 89C7     		movl	%eax, %edi
 3230 2252 E8000000 		call	xor
 3230      00
 3231 2257 0FBED0   		movsbl	%al, %edx
 3232 225a 488B4580 		movq	-128(%rbp), %rax
 3233 225e 4883C01C 		addq	$28, %rax
 3234 2262 0FB600   		movzbl	(%rax), %eax
 3235 2265 0FBEC0   		movsbl	%al, %eax
 3236 2268 89D6     		movl	%edx, %esi
 3237 226a 89C7     		movl	%eax, %edi
 3238 226c E8000000 		call	xor
 3238      00
 3239 2271 89C2     		movl	%eax, %edx
 3240 2273 488B45C8 		movq	-56(%rbp), %rax
 3241 2277 8810     		movb	%dl, (%rax)
 712:main.c        **** 
 713:main.c        **** 	// char* T8 = malloc(32);
 714:main.c        **** 
 715:main.c        **** 	// T = T+15
 716:main.c        **** 	char* Carry = malloc(4);
 3242              		.loc 1 716 0
 3243 2279 BF040000 		movl	$4, %edi
 3243      00
 3244 227e E8000000 		call	malloc
 3244      00
 3245 2283 488945D0 		movq	%rax, -48(%rbp)
 717:main.c        **** 	char* Sum = malloc(4);
 3246              		.loc 1 717 0
 3247 2287 BF040000 		movl	$4, %edi
 3247      00
 3248 228c E8000000 		call	malloc
 3248      00
 3249 2291 488945D8 		movq	%rax, -40(%rbp)
 3250              	.LBB26:
 718:main.c        **** 	for (int l=0;l<4;l++) Carry[l]='0';
 3251              		.loc 1 718 0
 3252 2295 C745A000 		movl	$0, -96(%rbp)
 3252      000000
 3253 229c EB14     		jmp	.L194
 3254              	.L195:
 3255              		.loc 1 718 0 is_stmt 0 discriminator 3
 3256 229e 8B45A0   		movl	-96(%rbp), %eax
 3257 22a1 4863D0   		movslq	%eax, %rdx
 3258 22a4 488B45D0 		movq	-48(%rbp), %rax
 3259 22a8 4801D0   		addq	%rdx, %rax
 3260 22ab C60030   		movb	$48, (%rax)
 3261 22ae 8345A001 		addl	$1, -96(%rbp)
 3262              	.L194:
 3263              		.loc 1 718 0 discriminator 1
 3264 22b2 837DA003 		cmpl	$3, -96(%rbp)
 3265 22b6 7EE6     		jle	.L195
 3266              	.LBE26:
 719:main.c        **** 	Sum[0] = xor(T[0],'1');
 3267              		.loc 1 719 0 is_stmt 1
 3268 22b8 488B45C8 		movq	-56(%rbp), %rax
 3269 22bc 0FB600   		movzbl	(%rax), %eax
 3270 22bf 0FBEC0   		movsbl	%al, %eax
 3271 22c2 BE310000 		movl	$49, %esi
 3271      00
 3272 22c7 89C7     		movl	%eax, %edi
 3273 22c9 E8000000 		call	xor
 3273      00
 3274 22ce 89C2     		movl	%eax, %edx
 3275 22d0 488B45D8 		movq	-40(%rbp), %rax
 3276 22d4 8810     		movb	%dl, (%rax)
 720:main.c        **** 	Carry[0] = and(T[0],'1');
 3277              		.loc 1 720 0
 3278 22d6 488B45C8 		movq	-56(%rbp), %rax
 3279 22da 0FB600   		movzbl	(%rax), %eax
 3280 22dd 0FBEC0   		movsbl	%al, %eax
 3281 22e0 BE310000 		movl	$49, %esi
 3281      00
 3282 22e5 89C7     		movl	%eax, %edi
 3283 22e7 E8000000 		call	and
 3283      00
 3284 22ec 89C2     		movl	%eax, %edx
 3285 22ee 488B45D0 		movq	-48(%rbp), %rax
 3286 22f2 8810     		movb	%dl, (%rax)
 3287              	.LBB27:
 721:main.c        **** 	for (int c=1;c<4;c++){
 3288              		.loc 1 721 0
 3289 22f4 C745A401 		movl	$1, -92(%rbp)
 3289      000000
 3290 22fb E9F80000 		jmp	.L196
 3290      00
 3291              	.L197:
 722:main.c        **** 		Sum[c] = xor(T[c],xor(Carry[c-1],'1'));
 3292              		.loc 1 722 0 discriminator 3
 3293 2300 8B45A4   		movl	-92(%rbp), %eax
 3294 2303 4863D0   		movslq	%eax, %rdx
 3295 2306 488B45D8 		movq	-40(%rbp), %rax
 3296 230a 488D1C02 		leaq	(%rdx,%rax), %rbx
 3297 230e 8B45A4   		movl	-92(%rbp), %eax
 3298 2311 4898     		cltq
 3299 2313 488D50FF 		leaq	-1(%rax), %rdx
 3300 2317 488B45D0 		movq	-48(%rbp), %rax
 3301 231b 4801D0   		addq	%rdx, %rax
 3302 231e 0FB600   		movzbl	(%rax), %eax
 3303 2321 0FBEC0   		movsbl	%al, %eax
 3304 2324 BE310000 		movl	$49, %esi
 3304      00
 3305 2329 89C7     		movl	%eax, %edi
 3306 232b E8000000 		call	xor
 3306      00
 3307 2330 0FBED0   		movsbl	%al, %edx
 3308 2333 8B45A4   		movl	-92(%rbp), %eax
 3309 2336 4863C8   		movslq	%eax, %rcx
 3310 2339 488B45C8 		movq	-56(%rbp), %rax
 3311 233d 4801C8   		addq	%rcx, %rax
 3312 2340 0FB600   		movzbl	(%rax), %eax
 3313 2343 0FBEC0   		movsbl	%al, %eax
 3314 2346 89D6     		movl	%edx, %esi
 3315 2348 89C7     		movl	%eax, %edi
 3316 234a E8000000 		call	xor
 3316      00
 3317 234f 8803     		movb	%al, (%rbx)
 723:main.c        **** 		Carry[c] = xor(and(Carry[c-1],T[c]),xor(and(Carry[c-1],'1'),and(T[c],'1')));
 3318              		.loc 1 723 0 discriminator 3
 3319 2351 8B45A4   		movl	-92(%rbp), %eax
 3320 2354 4863D0   		movslq	%eax, %rdx
 3321 2357 488B45D0 		movq	-48(%rbp), %rax
 3322 235b 4C8D2402 		leaq	(%rdx,%rax), %r12
 3323 235f 8B45A4   		movl	-92(%rbp), %eax
 3324 2362 4863D0   		movslq	%eax, %rdx
 3325 2365 488B45C8 		movq	-56(%rbp), %rax
 3326 2369 4801D0   		addq	%rdx, %rax
 3327 236c 0FB600   		movzbl	(%rax), %eax
 3328 236f 0FBEC0   		movsbl	%al, %eax
 3329 2372 BE310000 		movl	$49, %esi
 3329      00
 3330 2377 89C7     		movl	%eax, %edi
 3331 2379 E8000000 		call	and
 3331      00
 3332 237e 0FBED8   		movsbl	%al, %ebx
 3333 2381 8B45A4   		movl	-92(%rbp), %eax
 3334 2384 4898     		cltq
 3335 2386 488D50FF 		leaq	-1(%rax), %rdx
 3336 238a 488B45D0 		movq	-48(%rbp), %rax
 3337 238e 4801D0   		addq	%rdx, %rax
 3338 2391 0FB600   		movzbl	(%rax), %eax
 3339 2394 0FBEC0   		movsbl	%al, %eax
 3340 2397 BE310000 		movl	$49, %esi
 3340      00
 3341 239c 89C7     		movl	%eax, %edi
 3342 239e E8000000 		call	and
 3342      00
 3343 23a3 0FBEC0   		movsbl	%al, %eax
 3344 23a6 89DE     		movl	%ebx, %esi
 3345 23a8 89C7     		movl	%eax, %edi
 3346 23aa E8000000 		call	xor
 3346      00
 3347 23af 0FBED8   		movsbl	%al, %ebx
 3348 23b2 8B45A4   		movl	-92(%rbp), %eax
 3349 23b5 4863D0   		movslq	%eax, %rdx
 3350 23b8 488B45C8 		movq	-56(%rbp), %rax
 3351 23bc 4801D0   		addq	%rdx, %rax
 3352 23bf 0FB600   		movzbl	(%rax), %eax
 3353 23c2 0FBED0   		movsbl	%al, %edx
 3354 23c5 8B45A4   		movl	-92(%rbp), %eax
 3355 23c8 4898     		cltq
 3356 23ca 488D48FF 		leaq	-1(%rax), %rcx
 3357 23ce 488B45D0 		movq	-48(%rbp), %rax
 3358 23d2 4801C8   		addq	%rcx, %rax
 3359 23d5 0FB600   		movzbl	(%rax), %eax
 3360 23d8 0FBEC0   		movsbl	%al, %eax
 3361 23db 89D6     		movl	%edx, %esi
 3362 23dd 89C7     		movl	%eax, %edi
 3363 23df E8000000 		call	and
 3363      00
 3364 23e4 0FBEC0   		movsbl	%al, %eax
 3365 23e7 89DE     		movl	%ebx, %esi
 3366 23e9 89C7     		movl	%eax, %edi
 3367 23eb E8000000 		call	xor
 3367      00
 3368 23f0 41880424 		movb	%al, (%r12)
 721:main.c        **** 	for (int c=1;c<4;c++){
 3369              		.loc 1 721 0 discriminator 3
 3370 23f4 8345A401 		addl	$1, -92(%rbp)
 3371              	.L196:
 721:main.c        **** 	for (int c=1;c<4;c++){
 3372              		.loc 1 721 0 is_stmt 0 discriminator 1
 3373 23f8 837DA403 		cmpl	$3, -92(%rbp)
 3374 23fc 0F8EFEFE 		jle	.L197
 3374      FFFF
 3375              	.LBE27:
 3376              	.LBB28:
 724:main.c        **** 	}
 725:main.c        **** 
 726:main.c        **** 	for (int k=0;k<4;k++) T[k]=Sum[k];
 3377              		.loc 1 726 0 is_stmt 1
 3378 2402 C745A800 		movl	$0, -88(%rbp)
 3378      000000
 3379 2409 EB23     		jmp	.L198
 3380              	.L199:
 3381              		.loc 1 726 0 is_stmt 0 discriminator 3
 3382 240b 8B45A8   		movl	-88(%rbp), %eax
 3383 240e 4863D0   		movslq	%eax, %rdx
 3384 2411 488B45C8 		movq	-56(%rbp), %rax
 3385 2415 4801C2   		addq	%rax, %rdx
 3386 2418 8B45A8   		movl	-88(%rbp), %eax
 3387 241b 4863C8   		movslq	%eax, %rcx
 3388 241e 488B45D8 		movq	-40(%rbp), %rax
 3389 2422 4801C8   		addq	%rcx, %rax
 3390 2425 0FB600   		movzbl	(%rax), %eax
 3391 2428 8802     		movb	%al, (%rdx)
 3392 242a 8345A801 		addl	$1, -88(%rbp)
 3393              	.L198:
 3394              		.loc 1 726 0 discriminator 1
 3395 242e 837DA803 		cmpl	$3, -88(%rbp)
 3396 2432 7ED7     		jle	.L199
 3397              	.LBE28:
 3398              	.LBB29:
 727:main.c        **** 
 728:main.c        **** ///
 729:main.c        **** 	for (int i=0;i<N0;i++){
 3399              		.loc 1 729 0 is_stmt 1
 3400 2434 C745AC00 		movl	$0, -84(%rbp)
 3400      000000
 3401 243b E91C0200 		jmp	.L200
 3401      00
 3402              	.L209:
 3403              	.LBB30:
 3404              	.LBB31:
 730:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 731:main.c        **** 		for (int j=0;j<32;j++){P[j]=xor(P[j],T[j%4]);}
 3405              		.loc 1 731 0
 3406 2440 C745B000 		movl	$0, -80(%rbp)
 3406      000000
 3407 2447 EB4E     		jmp	.L201
 3408              	.L202:
 3409              		.loc 1 731 0 is_stmt 0 discriminator 3
 3410 2449 8B45B0   		movl	-80(%rbp), %eax
 3411 244c 4863D0   		movslq	%eax, %rdx
 3412 244f 488B45C0 		movq	-64(%rbp), %rax
 3413 2453 488D1C02 		leaq	(%rdx,%rax), %rbx
 3414 2457 8B45B0   		movl	-80(%rbp), %eax
 3415 245a 99       		cltd
 3416 245b C1EA1E   		shrl	$30, %edx
 3417 245e 01D0     		addl	%edx, %eax
 3418 2460 83E003   		andl	$3, %eax
 3419 2463 29D0     		subl	%edx, %eax
 3420 2465 4863D0   		movslq	%eax, %rdx
 3421 2468 488B45C8 		movq	-56(%rbp), %rax
 3422 246c 4801D0   		addq	%rdx, %rax
 3423 246f 0FB600   		movzbl	(%rax), %eax
 3424 2472 0FBED0   		movsbl	%al, %edx
 3425 2475 8B45B0   		movl	-80(%rbp), %eax
 3426 2478 4863C8   		movslq	%eax, %rcx
 3427 247b 488B45C0 		movq	-64(%rbp), %rax
 3428 247f 4801C8   		addq	%rcx, %rax
 3429 2482 0FB600   		movzbl	(%rax), %eax
 3430 2485 0FBEC0   		movsbl	%al, %eax
 3431 2488 89D6     		movl	%edx, %esi
 3432 248a 89C7     		movl	%eax, %edi
 3433 248c E8000000 		call	xor
 3433      00
 3434 2491 8803     		movb	%al, (%rbx)
 3435 2493 8345B001 		addl	$1, -80(%rbp)
 3436              	.L201:
 3437              		.loc 1 731 0 discriminator 1
 3438 2497 837DB01F 		cmpl	$31, -80(%rbp)
 3439 249b 7EAC     		jle	.L202
 3440              	.LBE31:
 732:main.c        **** 
 733:main.c        **** 		char* Carry = malloc(5);
 3441              		.loc 1 733 0 is_stmt 1
 3442 249d BF050000 		movl	$5, %edi
 3442      00
 3443 24a2 E8000000 		call	malloc
 3443      00
 3444 24a7 488945E0 		movq	%rax, -32(%rbp)
 734:main.c        **** 		char* Sum = malloc(5);
 3445              		.loc 1 734 0
 3446 24ab BF050000 		movl	$5, %edi
 3446      00
 3447 24b0 E8000000 		call	malloc
 3447      00
 3448 24b5 488945E8 		movq	%rax, -24(%rbp)
 3449              	.LBB32:
 735:main.c        **** 		for (int l=0;l<4;l++) Carry[l]='0';
 3450              		.loc 1 735 0
 3451 24b9 C745B400 		movl	$0, -76(%rbp)
 3451      000000
 3452 24c0 EB14     		jmp	.L203
 3453              	.L204:
 3454              		.loc 1 735 0 is_stmt 0 discriminator 3
 3455 24c2 8B45B4   		movl	-76(%rbp), %eax
 3456 24c5 4863D0   		movslq	%eax, %rdx
 3457 24c8 488B45E0 		movq	-32(%rbp), %rax
 3458 24cc 4801D0   		addq	%rdx, %rax
 3459 24cf C60030   		movb	$48, (%rax)
 3460 24d2 8345B401 		addl	$1, -76(%rbp)
 3461              	.L203:
 3462              		.loc 1 735 0 discriminator 1
 3463 24d6 837DB403 		cmpl	$3, -76(%rbp)
 3464 24da 7EE6     		jle	.L204
 3465              	.LBE32:
 736:main.c        **** 		Sum[0] = xor(T[0],'1');
 3466              		.loc 1 736 0 is_stmt 1
 3467 24dc 488B45C8 		movq	-56(%rbp), %rax
 3468 24e0 0FB600   		movzbl	(%rax), %eax
 3469 24e3 0FBEC0   		movsbl	%al, %eax
 3470 24e6 BE310000 		movl	$49, %esi
 3470      00
 3471 24eb 89C7     		movl	%eax, %edi
 3472 24ed E8000000 		call	xor
 3472      00
 3473 24f2 89C2     		movl	%eax, %edx
 3474 24f4 488B45E8 		movq	-24(%rbp), %rax
 3475 24f8 8810     		movb	%dl, (%rax)
 737:main.c        **** 		Carry[0] = and(T[0],'1');
 3476              		.loc 1 737 0
 3477 24fa 488B45C8 		movq	-56(%rbp), %rax
 3478 24fe 0FB600   		movzbl	(%rax), %eax
 3479 2501 0FBEC0   		movsbl	%al, %eax
 3480 2504 BE310000 		movl	$49, %esi
 3480      00
 3481 2509 89C7     		movl	%eax, %edi
 3482 250b E8000000 		call	and
 3482      00
 3483 2510 89C2     		movl	%eax, %edx
 3484 2512 488B45E0 		movq	-32(%rbp), %rax
 3485 2516 8810     		movb	%dl, (%rax)
 3486              	.LBB33:
 738:main.c        **** 		for (int c=1;c<4;c++){
 3487              		.loc 1 738 0
 3488 2518 C745B801 		movl	$1, -72(%rbp)
 3488      000000
 3489 251f E9F80000 		jmp	.L205
 3489      00
 3490              	.L206:
 739:main.c        **** 			Sum[c] = xor(T[c],xor(Carry[c-1],'1'));
 3491              		.loc 1 739 0 discriminator 3
 3492 2524 8B45B8   		movl	-72(%rbp), %eax
 3493 2527 4863D0   		movslq	%eax, %rdx
 3494 252a 488B45E8 		movq	-24(%rbp), %rax
 3495 252e 488D1C02 		leaq	(%rdx,%rax), %rbx
 3496 2532 8B45B8   		movl	-72(%rbp), %eax
 3497 2535 4898     		cltq
 3498 2537 488D50FF 		leaq	-1(%rax), %rdx
 3499 253b 488B45E0 		movq	-32(%rbp), %rax
 3500 253f 4801D0   		addq	%rdx, %rax
 3501 2542 0FB600   		movzbl	(%rax), %eax
 3502 2545 0FBEC0   		movsbl	%al, %eax
 3503 2548 BE310000 		movl	$49, %esi
 3503      00
 3504 254d 89C7     		movl	%eax, %edi
 3505 254f E8000000 		call	xor
 3505      00
 3506 2554 0FBED0   		movsbl	%al, %edx
 3507 2557 8B45B8   		movl	-72(%rbp), %eax
 3508 255a 4863C8   		movslq	%eax, %rcx
 3509 255d 488B45C8 		movq	-56(%rbp), %rax
 3510 2561 4801C8   		addq	%rcx, %rax
 3511 2564 0FB600   		movzbl	(%rax), %eax
 3512 2567 0FBEC0   		movsbl	%al, %eax
 3513 256a 89D6     		movl	%edx, %esi
 3514 256c 89C7     		movl	%eax, %edi
 3515 256e E8000000 		call	xor
 3515      00
 3516 2573 8803     		movb	%al, (%rbx)
 740:main.c        **** 			Carry[c] = xor(and(Carry[c-1],T[c]),xor(and(Carry[c-1],'1'),and(T[c],'1')));
 3517              		.loc 1 740 0 discriminator 3
 3518 2575 8B45B8   		movl	-72(%rbp), %eax
 3519 2578 4863D0   		movslq	%eax, %rdx
 3520 257b 488B45E0 		movq	-32(%rbp), %rax
 3521 257f 4C8D2402 		leaq	(%rdx,%rax), %r12
 3522 2583 8B45B8   		movl	-72(%rbp), %eax
 3523 2586 4863D0   		movslq	%eax, %rdx
 3524 2589 488B45C8 		movq	-56(%rbp), %rax
 3525 258d 4801D0   		addq	%rdx, %rax
 3526 2590 0FB600   		movzbl	(%rax), %eax
 3527 2593 0FBEC0   		movsbl	%al, %eax
 3528 2596 BE310000 		movl	$49, %esi
 3528      00
 3529 259b 89C7     		movl	%eax, %edi
 3530 259d E8000000 		call	and
 3530      00
 3531 25a2 0FBED8   		movsbl	%al, %ebx
 3532 25a5 8B45B8   		movl	-72(%rbp), %eax
 3533 25a8 4898     		cltq
 3534 25aa 488D50FF 		leaq	-1(%rax), %rdx
 3535 25ae 488B45E0 		movq	-32(%rbp), %rax
 3536 25b2 4801D0   		addq	%rdx, %rax
 3537 25b5 0FB600   		movzbl	(%rax), %eax
 3538 25b8 0FBEC0   		movsbl	%al, %eax
 3539 25bb BE310000 		movl	$49, %esi
 3539      00
 3540 25c0 89C7     		movl	%eax, %edi
 3541 25c2 E8000000 		call	and
 3541      00
 3542 25c7 0FBEC0   		movsbl	%al, %eax
 3543 25ca 89DE     		movl	%ebx, %esi
 3544 25cc 89C7     		movl	%eax, %edi
 3545 25ce E8000000 		call	xor
 3545      00
 3546 25d3 0FBED8   		movsbl	%al, %ebx
 3547 25d6 8B45B8   		movl	-72(%rbp), %eax
 3548 25d9 4863D0   		movslq	%eax, %rdx
 3549 25dc 488B45C8 		movq	-56(%rbp), %rax
 3550 25e0 4801D0   		addq	%rdx, %rax
 3551 25e3 0FB600   		movzbl	(%rax), %eax
 3552 25e6 0FBED0   		movsbl	%al, %edx
 3553 25e9 8B45B8   		movl	-72(%rbp), %eax
 3554 25ec 4898     		cltq
 3555 25ee 488D48FF 		leaq	-1(%rax), %rcx
 3556 25f2 488B45E0 		movq	-32(%rbp), %rax
 3557 25f6 4801C8   		addq	%rcx, %rax
 3558 25f9 0FB600   		movzbl	(%rax), %eax
 3559 25fc 0FBEC0   		movsbl	%al, %eax
 3560 25ff 89D6     		movl	%edx, %esi
 3561 2601 89C7     		movl	%eax, %edi
 3562 2603 E8000000 		call	and
 3562      00
 3563 2608 0FBEC0   		movsbl	%al, %eax
 3564 260b 89DE     		movl	%ebx, %esi
 3565 260d 89C7     		movl	%eax, %edi
 3566 260f E8000000 		call	xor
 3566      00
 3567 2614 41880424 		movb	%al, (%r12)
 738:main.c        **** 		for (int c=1;c<4;c++){
 3568              		.loc 1 738 0 discriminator 3
 3569 2618 8345B801 		addl	$1, -72(%rbp)
 3570              	.L205:
 738:main.c        **** 		for (int c=1;c<4;c++){
 3571              		.loc 1 738 0 is_stmt 0 discriminator 1
 3572 261c 837DB803 		cmpl	$3, -72(%rbp)
 3573 2620 0F8EFEFE 		jle	.L206
 3573      FFFF
 3574              	.LBE33:
 3575              	.LBB34:
 741:main.c        **** 		}
 742:main.c        **** 		for (int k=0;k<4;k++) T[k]=Sum[k];
 3576              		.loc 1 742 0 is_stmt 1
 3577 2626 C745BC00 		movl	$0, -68(%rbp)
 3577      000000
 3578 262d EB23     		jmp	.L207
 3579              	.L208:
 3580              		.loc 1 742 0 is_stmt 0 discriminator 3
 3581 262f 8B45BC   		movl	-68(%rbp), %eax
 3582 2632 4863D0   		movslq	%eax, %rdx
 3583 2635 488B45C8 		movq	-56(%rbp), %rax
 3584 2639 4801C2   		addq	%rax, %rdx
 3585 263c 8B45BC   		movl	-68(%rbp), %eax
 3586 263f 4863C8   		movslq	%eax, %rcx
 3587 2642 488B45E8 		movq	-24(%rbp), %rax
 3588 2646 4801C8   		addq	%rcx, %rax
 3589 2649 0FB600   		movzbl	(%rax), %eax
 3590 264c 8802     		movb	%al, (%rdx)
 3591 264e 8345BC01 		addl	$1, -68(%rbp)
 3592              	.L207:
 3593              		.loc 1 742 0 discriminator 1
 3594 2652 837DBC03 		cmpl	$3, -68(%rbp)
 3595 2656 7ED7     		jle	.L208
 3596              	.LBE34:
 3597              	.LBE30:
 729:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 3598              		.loc 1 729 0 is_stmt 1 discriminator 2
 3599 2658 8345AC01 		addl	$1, -84(%rbp)
 3600              	.L200:
 729:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 3601              		.loc 1 729 0 is_stmt 0 discriminator 1
 3602 265c 8B45AC   		movl	-84(%rbp), %eax
 3603 265f 3B4594   		cmpl	-108(%rbp), %eax
 3604 2662 0F8CD8FD 		jl	.L209
 3604      FFFF
 3605              	.LBE29:
 743:main.c        **** 
 744:main.c        **** 	}
 745:main.c        **** 	return P;
 3606              		.loc 1 745 0 is_stmt 1
 3607 2668 488B45C0 		movq	-64(%rbp), %rax
 746:main.c        **** }
 3608              		.loc 1 746 0
 3609 266c 4883C470 		addq	$112, %rsp
 3610 2670 5B       		popq	%rbx
 3611 2671 415C     		popq	%r12
 3612 2673 5D       		popq	%rbp
 3613              		.cfi_def_cfa 7, 8
 3614 2674 C3       		ret
 3615              		.cfi_endproc
 3616              	.LFE17:
 3618              		.globl	encrypt
 3620              	encrypt:
 3621              	.LFB18:
 747:main.c        **** 
 748:main.c        **** char* encrypt(char P[32], char K[32]){
 3622              		.loc 1 748 0
 3623              		.cfi_startproc
 3624 2675 55       		pushq	%rbp
 3625              		.cfi_def_cfa_offset 16
 3626              		.cfi_offset 6, -16
 3627 2676 4889E5   		movq	%rsp, %rbp
 3628              		.cfi_def_cfa_register 6
 3629 2679 53       		pushq	%rbx
 3630 267a 4883EC58 		subq	$88, %rsp
 3631              		.cfi_offset 3, -24
 3632 267e 48897DA8 		movq	%rdi, -88(%rbp)
 3633 2682 488975A0 		movq	%rsi, -96(%rbp)
 749:main.c        **** 	char* C = malloc(33);
 3634              		.loc 1 749 0
 3635 2686 BF210000 		movl	$33, %edi
 3635      00
 3636 268b E8000000 		call	malloc
 3636      00
 3637 2690 488945D8 		movq	%rax, -40(%rbp)
 750:main.c        **** 	int N1=0;
 3638              		.loc 1 750 0
 3639 2694 C745B000 		movl	$0, -80(%rbp)
 3639      000000
 3640              	.LBB35:
 751:main.c        **** 	for (int i=0;i<32;i++){if (K[i]=='1') N1++;}
 3641              		.loc 1 751 0
 3642 269b C745B400 		movl	$0, -76(%rbp)
 3642      000000
 3643 26a2 EB1C     		jmp	.L212
 3644              	.L214:
 3645              		.loc 1 751 0 is_stmt 0 discriminator 6
 3646 26a4 8B45B4   		movl	-76(%rbp), %eax
 3647 26a7 4863D0   		movslq	%eax, %rdx
 3648 26aa 488B45A0 		movq	-96(%rbp), %rax
 3649 26ae 4801D0   		addq	%rdx, %rax
 3650 26b1 0FB600   		movzbl	(%rax), %eax
 3651 26b4 3C31     		cmpb	$49, %al
 3652 26b6 7504     		jne	.L213
 3653              		.loc 1 751 0 discriminator 2
 3654 26b8 8345B001 		addl	$1, -80(%rbp)
 3655              	.L213:
 3656              		.loc 1 751 0 discriminator 4
 3657 26bc 8345B401 		addl	$1, -76(%rbp)
 3658              	.L212:
 3659              		.loc 1 751 0 discriminator 5
 3660 26c0 837DB41F 		cmpl	$31, -76(%rbp)
 3661 26c4 7EDE     		jle	.L214
 3662              	.LBE35:
 3663              	.LBB36:
 752:main.c        **** 	for (int i=0;i<32;i++){C[i]=P[i];}
 3664              		.loc 1 752 0 is_stmt 1
 3665 26c6 C745B800 		movl	$0, -72(%rbp)
 3665      000000
 3666 26cd EB23     		jmp	.L215
 3667              	.L216:
 3668              		.loc 1 752 0 is_stmt 0 discriminator 3
 3669 26cf 8B45B8   		movl	-72(%rbp), %eax
 3670 26d2 4863D0   		movslq	%eax, %rdx
 3671 26d5 488B45D8 		movq	-40(%rbp), %rax
 3672 26d9 4801C2   		addq	%rax, %rdx
 3673 26dc 8B45B8   		movl	-72(%rbp), %eax
 3674 26df 4863C8   		movslq	%eax, %rcx
 3675 26e2 488B45A8 		movq	-88(%rbp), %rax
 3676 26e6 4801C8   		addq	%rcx, %rax
 3677 26e9 0FB600   		movzbl	(%rax), %eax
 3678 26ec 8802     		movb	%al, (%rdx)
 3679 26ee 8345B801 		addl	$1, -72(%rbp)
 3680              	.L215:
 3681              		.loc 1 752 0 discriminator 1
 3682 26f2 837DB81F 		cmpl	$31, -72(%rbp)
 3683 26f6 7ED7     		jle	.L216
 3684              	.LBE36:
 753:main.c        **** 	char* T = malloc(5) ;
 3685              		.loc 1 753 0 is_stmt 1
 3686 26f8 BF050000 		movl	$5, %edi
 3686      00
 3687 26fd E8000000 		call	malloc
 3687      00
 3688 2702 488945D0 		movq	%rax, -48(%rbp)
 754:main.c        **** 	C[32]='\0'; T[4]='\0';
 3689              		.loc 1 754 0
 3690 2706 488B45D8 		movq	-40(%rbp), %rax
 3691 270a 4883C020 		addq	$32, %rax
 3692 270e C60000   		movb	$0, (%rax)
 3693 2711 488B45D0 		movq	-48(%rbp), %rax
 3694 2715 4883C004 		addq	$4, %rax
 3695 2719 C60000   		movb	$0, (%rax)
 755:main.c        **** 	T[3] = xor(K[31],xor(K[27],xor(K[23],xor(K[19],xor(K[15],xor(K[11],xor(K[7],K[3])))))));
 3696              		.loc 1 755 0
 3697 271c 488B45D0 		movq	-48(%rbp), %rax
 3698 2720 488D5803 		leaq	3(%rax), %rbx
 3699 2724 488B45A0 		movq	-96(%rbp), %rax
 3700 2728 4883C003 		addq	$3, %rax
 3701 272c 0FB600   		movzbl	(%rax), %eax
 3702 272f 0FBED0   		movsbl	%al, %edx
 3703 2732 488B45A0 		movq	-96(%rbp), %rax
 3704 2736 4883C007 		addq	$7, %rax
 3705 273a 0FB600   		movzbl	(%rax), %eax
 3706 273d 0FBEC0   		movsbl	%al, %eax
 3707 2740 89D6     		movl	%edx, %esi
 3708 2742 89C7     		movl	%eax, %edi
 3709 2744 E8000000 		call	xor
 3709      00
 3710 2749 0FBED0   		movsbl	%al, %edx
 3711 274c 488B45A0 		movq	-96(%rbp), %rax
 3712 2750 4883C00B 		addq	$11, %rax
 3713 2754 0FB600   		movzbl	(%rax), %eax
 3714 2757 0FBEC0   		movsbl	%al, %eax
 3715 275a 89D6     		movl	%edx, %esi
 3716 275c 89C7     		movl	%eax, %edi
 3717 275e E8000000 		call	xor
 3717      00
 3718 2763 0FBED0   		movsbl	%al, %edx
 3719 2766 488B45A0 		movq	-96(%rbp), %rax
 3720 276a 4883C00F 		addq	$15, %rax
 3721 276e 0FB600   		movzbl	(%rax), %eax
 3722 2771 0FBEC0   		movsbl	%al, %eax
 3723 2774 89D6     		movl	%edx, %esi
 3724 2776 89C7     		movl	%eax, %edi
 3725 2778 E8000000 		call	xor
 3725      00
 3726 277d 0FBED0   		movsbl	%al, %edx
 3727 2780 488B45A0 		movq	-96(%rbp), %rax
 3728 2784 4883C013 		addq	$19, %rax
 3729 2788 0FB600   		movzbl	(%rax), %eax
 3730 278b 0FBEC0   		movsbl	%al, %eax
 3731 278e 89D6     		movl	%edx, %esi
 3732 2790 89C7     		movl	%eax, %edi
 3733 2792 E8000000 		call	xor
 3733      00
 3734 2797 0FBED0   		movsbl	%al, %edx
 3735 279a 488B45A0 		movq	-96(%rbp), %rax
 3736 279e 4883C017 		addq	$23, %rax
 3737 27a2 0FB600   		movzbl	(%rax), %eax
 3738 27a5 0FBEC0   		movsbl	%al, %eax
 3739 27a8 89D6     		movl	%edx, %esi
 3740 27aa 89C7     		movl	%eax, %edi
 3741 27ac E8000000 		call	xor
 3741      00
 3742 27b1 0FBED0   		movsbl	%al, %edx
 3743 27b4 488B45A0 		movq	-96(%rbp), %rax
 3744 27b8 4883C01B 		addq	$27, %rax
 3745 27bc 0FB600   		movzbl	(%rax), %eax
 3746 27bf 0FBEC0   		movsbl	%al, %eax
 3747 27c2 89D6     		movl	%edx, %esi
 3748 27c4 89C7     		movl	%eax, %edi
 3749 27c6 E8000000 		call	xor
 3749      00
 3750 27cb 0FBED0   		movsbl	%al, %edx
 3751 27ce 488B45A0 		movq	-96(%rbp), %rax
 3752 27d2 4883C01F 		addq	$31, %rax
 3753 27d6 0FB600   		movzbl	(%rax), %eax
 3754 27d9 0FBEC0   		movsbl	%al, %eax
 3755 27dc 89D6     		movl	%edx, %esi
 3756 27de 89C7     		movl	%eax, %edi
 3757 27e0 E8000000 		call	xor
 3757      00
 3758 27e5 8803     		movb	%al, (%rbx)
 756:main.c        **** 	T[2] = xor(K[30],xor(K[26],xor(K[22],xor(K[18],xor(K[14],xor(K[10],xor(K[6],K[2])))))));
 3759              		.loc 1 756 0
 3760 27e7 488B45D0 		movq	-48(%rbp), %rax
 3761 27eb 488D5802 		leaq	2(%rax), %rbx
 3762 27ef 488B45A0 		movq	-96(%rbp), %rax
 3763 27f3 4883C002 		addq	$2, %rax
 3764 27f7 0FB600   		movzbl	(%rax), %eax
 3765 27fa 0FBED0   		movsbl	%al, %edx
 3766 27fd 488B45A0 		movq	-96(%rbp), %rax
 3767 2801 4883C006 		addq	$6, %rax
 3768 2805 0FB600   		movzbl	(%rax), %eax
 3769 2808 0FBEC0   		movsbl	%al, %eax
 3770 280b 89D6     		movl	%edx, %esi
 3771 280d 89C7     		movl	%eax, %edi
 3772 280f E8000000 		call	xor
 3772      00
 3773 2814 0FBED0   		movsbl	%al, %edx
 3774 2817 488B45A0 		movq	-96(%rbp), %rax
 3775 281b 4883C00A 		addq	$10, %rax
 3776 281f 0FB600   		movzbl	(%rax), %eax
 3777 2822 0FBEC0   		movsbl	%al, %eax
 3778 2825 89D6     		movl	%edx, %esi
 3779 2827 89C7     		movl	%eax, %edi
 3780 2829 E8000000 		call	xor
 3780      00
 3781 282e 0FBED0   		movsbl	%al, %edx
 3782 2831 488B45A0 		movq	-96(%rbp), %rax
 3783 2835 4883C00E 		addq	$14, %rax
 3784 2839 0FB600   		movzbl	(%rax), %eax
 3785 283c 0FBEC0   		movsbl	%al, %eax
 3786 283f 89D6     		movl	%edx, %esi
 3787 2841 89C7     		movl	%eax, %edi
 3788 2843 E8000000 		call	xor
 3788      00
 3789 2848 0FBED0   		movsbl	%al, %edx
 3790 284b 488B45A0 		movq	-96(%rbp), %rax
 3791 284f 4883C012 		addq	$18, %rax
 3792 2853 0FB600   		movzbl	(%rax), %eax
 3793 2856 0FBEC0   		movsbl	%al, %eax
 3794 2859 89D6     		movl	%edx, %esi
 3795 285b 89C7     		movl	%eax, %edi
 3796 285d E8000000 		call	xor
 3796      00
 3797 2862 0FBED0   		movsbl	%al, %edx
 3798 2865 488B45A0 		movq	-96(%rbp), %rax
 3799 2869 4883C016 		addq	$22, %rax
 3800 286d 0FB600   		movzbl	(%rax), %eax
 3801 2870 0FBEC0   		movsbl	%al, %eax
 3802 2873 89D6     		movl	%edx, %esi
 3803 2875 89C7     		movl	%eax, %edi
 3804 2877 E8000000 		call	xor
 3804      00
 3805 287c 0FBED0   		movsbl	%al, %edx
 3806 287f 488B45A0 		movq	-96(%rbp), %rax
 3807 2883 4883C01A 		addq	$26, %rax
 3808 2887 0FB600   		movzbl	(%rax), %eax
 3809 288a 0FBEC0   		movsbl	%al, %eax
 3810 288d 89D6     		movl	%edx, %esi
 3811 288f 89C7     		movl	%eax, %edi
 3812 2891 E8000000 		call	xor
 3812      00
 3813 2896 0FBED0   		movsbl	%al, %edx
 3814 2899 488B45A0 		movq	-96(%rbp), %rax
 3815 289d 4883C01E 		addq	$30, %rax
 3816 28a1 0FB600   		movzbl	(%rax), %eax
 3817 28a4 0FBEC0   		movsbl	%al, %eax
 3818 28a7 89D6     		movl	%edx, %esi
 3819 28a9 89C7     		movl	%eax, %edi
 3820 28ab E8000000 		call	xor
 3820      00
 3821 28b0 8803     		movb	%al, (%rbx)
 757:main.c        **** 	T[1] = xor(K[29],xor(K[25],xor(K[21],xor(K[17],xor(K[13],xor(K[9],xor(K[5],K[1])))))));
 3822              		.loc 1 757 0
 3823 28b2 488B45D0 		movq	-48(%rbp), %rax
 3824 28b6 488D5801 		leaq	1(%rax), %rbx
 3825 28ba 488B45A0 		movq	-96(%rbp), %rax
 3826 28be 4883C001 		addq	$1, %rax
 3827 28c2 0FB600   		movzbl	(%rax), %eax
 3828 28c5 0FBED0   		movsbl	%al, %edx
 3829 28c8 488B45A0 		movq	-96(%rbp), %rax
 3830 28cc 4883C005 		addq	$5, %rax
 3831 28d0 0FB600   		movzbl	(%rax), %eax
 3832 28d3 0FBEC0   		movsbl	%al, %eax
 3833 28d6 89D6     		movl	%edx, %esi
 3834 28d8 89C7     		movl	%eax, %edi
 3835 28da E8000000 		call	xor
 3835      00
 3836 28df 0FBED0   		movsbl	%al, %edx
 3837 28e2 488B45A0 		movq	-96(%rbp), %rax
 3838 28e6 4883C009 		addq	$9, %rax
 3839 28ea 0FB600   		movzbl	(%rax), %eax
 3840 28ed 0FBEC0   		movsbl	%al, %eax
 3841 28f0 89D6     		movl	%edx, %esi
 3842 28f2 89C7     		movl	%eax, %edi
 3843 28f4 E8000000 		call	xor
 3843      00
 3844 28f9 0FBED0   		movsbl	%al, %edx
 3845 28fc 488B45A0 		movq	-96(%rbp), %rax
 3846 2900 4883C00D 		addq	$13, %rax
 3847 2904 0FB600   		movzbl	(%rax), %eax
 3848 2907 0FBEC0   		movsbl	%al, %eax
 3849 290a 89D6     		movl	%edx, %esi
 3850 290c 89C7     		movl	%eax, %edi
 3851 290e E8000000 		call	xor
 3851      00
 3852 2913 0FBED0   		movsbl	%al, %edx
 3853 2916 488B45A0 		movq	-96(%rbp), %rax
 3854 291a 4883C011 		addq	$17, %rax
 3855 291e 0FB600   		movzbl	(%rax), %eax
 3856 2921 0FBEC0   		movsbl	%al, %eax
 3857 2924 89D6     		movl	%edx, %esi
 3858 2926 89C7     		movl	%eax, %edi
 3859 2928 E8000000 		call	xor
 3859      00
 3860 292d 0FBED0   		movsbl	%al, %edx
 3861 2930 488B45A0 		movq	-96(%rbp), %rax
 3862 2934 4883C015 		addq	$21, %rax
 3863 2938 0FB600   		movzbl	(%rax), %eax
 3864 293b 0FBEC0   		movsbl	%al, %eax
 3865 293e 89D6     		movl	%edx, %esi
 3866 2940 89C7     		movl	%eax, %edi
 3867 2942 E8000000 		call	xor
 3867      00
 3868 2947 0FBED0   		movsbl	%al, %edx
 3869 294a 488B45A0 		movq	-96(%rbp), %rax
 3870 294e 4883C019 		addq	$25, %rax
 3871 2952 0FB600   		movzbl	(%rax), %eax
 3872 2955 0FBEC0   		movsbl	%al, %eax
 3873 2958 89D6     		movl	%edx, %esi
 3874 295a 89C7     		movl	%eax, %edi
 3875 295c E8000000 		call	xor
 3875      00
 3876 2961 0FBED0   		movsbl	%al, %edx
 3877 2964 488B45A0 		movq	-96(%rbp), %rax
 3878 2968 4883C01D 		addq	$29, %rax
 3879 296c 0FB600   		movzbl	(%rax), %eax
 3880 296f 0FBEC0   		movsbl	%al, %eax
 3881 2972 89D6     		movl	%edx, %esi
 3882 2974 89C7     		movl	%eax, %edi
 3883 2976 E8000000 		call	xor
 3883      00
 3884 297b 8803     		movb	%al, (%rbx)
 758:main.c        **** 	T[0] = xor(K[28],xor(K[24],xor(K[20],xor(K[16],xor(K[12],xor(K[8],xor(K[4],K[0])))))));
 3885              		.loc 1 758 0
 3886 297d 488B45A0 		movq	-96(%rbp), %rax
 3887 2981 0FB600   		movzbl	(%rax), %eax
 3888 2984 0FBED0   		movsbl	%al, %edx
 3889 2987 488B45A0 		movq	-96(%rbp), %rax
 3890 298b 4883C004 		addq	$4, %rax
 3891 298f 0FB600   		movzbl	(%rax), %eax
 3892 2992 0FBEC0   		movsbl	%al, %eax
 3893 2995 89D6     		movl	%edx, %esi
 3894 2997 89C7     		movl	%eax, %edi
 3895 2999 E8000000 		call	xor
 3895      00
 3896 299e 0FBED0   		movsbl	%al, %edx
 3897 29a1 488B45A0 		movq	-96(%rbp), %rax
 3898 29a5 4883C008 		addq	$8, %rax
 3899 29a9 0FB600   		movzbl	(%rax), %eax
 3900 29ac 0FBEC0   		movsbl	%al, %eax
 3901 29af 89D6     		movl	%edx, %esi
 3902 29b1 89C7     		movl	%eax, %edi
 3903 29b3 E8000000 		call	xor
 3903      00
 3904 29b8 0FBED0   		movsbl	%al, %edx
 3905 29bb 488B45A0 		movq	-96(%rbp), %rax
 3906 29bf 4883C00C 		addq	$12, %rax
 3907 29c3 0FB600   		movzbl	(%rax), %eax
 3908 29c6 0FBEC0   		movsbl	%al, %eax
 3909 29c9 89D6     		movl	%edx, %esi
 3910 29cb 89C7     		movl	%eax, %edi
 3911 29cd E8000000 		call	xor
 3911      00
 3912 29d2 0FBED0   		movsbl	%al, %edx
 3913 29d5 488B45A0 		movq	-96(%rbp), %rax
 3914 29d9 4883C010 		addq	$16, %rax
 3915 29dd 0FB600   		movzbl	(%rax), %eax
 3916 29e0 0FBEC0   		movsbl	%al, %eax
 3917 29e3 89D6     		movl	%edx, %esi
 3918 29e5 89C7     		movl	%eax, %edi
 3919 29e7 E8000000 		call	xor
 3919      00
 3920 29ec 0FBED0   		movsbl	%al, %edx
 3921 29ef 488B45A0 		movq	-96(%rbp), %rax
 3922 29f3 4883C014 		addq	$20, %rax
 3923 29f7 0FB600   		movzbl	(%rax), %eax
 3924 29fa 0FBEC0   		movsbl	%al, %eax
 3925 29fd 89D6     		movl	%edx, %esi
 3926 29ff 89C7     		movl	%eax, %edi
 3927 2a01 E8000000 		call	xor
 3927      00
 3928 2a06 0FBED0   		movsbl	%al, %edx
 3929 2a09 488B45A0 		movq	-96(%rbp), %rax
 3930 2a0d 4883C018 		addq	$24, %rax
 3931 2a11 0FB600   		movzbl	(%rax), %eax
 3932 2a14 0FBEC0   		movsbl	%al, %eax
 3933 2a17 89D6     		movl	%edx, %esi
 3934 2a19 89C7     		movl	%eax, %edi
 3935 2a1b E8000000 		call	xor
 3935      00
 3936 2a20 0FBED0   		movsbl	%al, %edx
 3937 2a23 488B45A0 		movq	-96(%rbp), %rax
 3938 2a27 4883C01C 		addq	$28, %rax
 3939 2a2b 0FB600   		movzbl	(%rax), %eax
 3940 2a2e 0FBEC0   		movsbl	%al, %eax
 3941 2a31 89D6     		movl	%edx, %esi
 3942 2a33 89C7     		movl	%eax, %edi
 3943 2a35 E8000000 		call	xor
 3943      00
 3944 2a3a 89C2     		movl	%eax, %edx
 3945 2a3c 488B45D0 		movq	-48(%rbp), %rax
 3946 2a40 8810     		movb	%dl, (%rax)
 3947              	.LBB37:
 759:main.c        **** 
 760:main.c        **** 	// char* T8 = malloc(33);
 761:main.c        **** 
 762:main.c        **** 	for (int i=0;i<N1;i++){
 3948              		.loc 1 762 0
 3949 2a42 C745BC00 		movl	$0, -68(%rbp)
 3949      000000
 3950 2a49 E9CF0100 		jmp	.L217
 3950      00
 3951              	.L228:
 3952              	.LBB38:
 763:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 764:main.c        **** 		for (int j=0;j<32;j++){C[j]=xor(C[j],T[j%4]);}
 3953              		.loc 1 764 0
 3954 2a4e C745C000 		movl	$0, -64(%rbp)
 3954      000000
 3955 2a55 EB4E     		jmp	.L218
 3956              	.L219:
 3957              		.loc 1 764 0 is_stmt 0 discriminator 3
 3958 2a57 8B45C0   		movl	-64(%rbp), %eax
 3959 2a5a 4863D0   		movslq	%eax, %rdx
 3960 2a5d 488B45D8 		movq	-40(%rbp), %rax
 3961 2a61 488D1C02 		leaq	(%rdx,%rax), %rbx
 3962 2a65 8B45C0   		movl	-64(%rbp), %eax
 3963 2a68 99       		cltd
 3964 2a69 C1EA1E   		shrl	$30, %edx
 3965 2a6c 01D0     		addl	%edx, %eax
 3966 2a6e 83E003   		andl	$3, %eax
 3967 2a71 29D0     		subl	%edx, %eax
 3968 2a73 4863D0   		movslq	%eax, %rdx
 3969 2a76 488B45D0 		movq	-48(%rbp), %rax
 3970 2a7a 4801D0   		addq	%rdx, %rax
 3971 2a7d 0FB600   		movzbl	(%rax), %eax
 3972 2a80 0FBED0   		movsbl	%al, %edx
 3973 2a83 8B45C0   		movl	-64(%rbp), %eax
 3974 2a86 4863C8   		movslq	%eax, %rcx
 3975 2a89 488B45D8 		movq	-40(%rbp), %rax
 3976 2a8d 4801C8   		addq	%rcx, %rax
 3977 2a90 0FB600   		movzbl	(%rax), %eax
 3978 2a93 0FBEC0   		movsbl	%al, %eax
 3979 2a96 89D6     		movl	%edx, %esi
 3980 2a98 89C7     		movl	%eax, %edi
 3981 2a9a E8000000 		call	xor
 3981      00
 3982 2a9f 8803     		movb	%al, (%rbx)
 3983 2aa1 8345C001 		addl	$1, -64(%rbp)
 3984              	.L218:
 3985              		.loc 1 764 0 discriminator 1
 3986 2aa5 837DC01F 		cmpl	$31, -64(%rbp)
 3987 2aa9 7EAC     		jle	.L219
 3988              	.LBE38:
 765:main.c        **** 		if(strcmp(T,"1111") == 1) T="0000";
 3989              		.loc 1 765 0 is_stmt 1
 3990 2aab 488B45D0 		movq	-48(%rbp), %rax
 3991 2aaf BE000000 		movl	$.LC41, %esi
 3991      00
 3992 2ab4 4889C7   		movq	%rax, %rdi
 3993 2ab7 E8000000 		call	strcmp
 3993      00
 3994 2abc 83F801   		cmpl	$1, %eax
 3995 2abf 750D     		jne	.L220
 3996              		.loc 1 765 0 is_stmt 0 discriminator 1
 3997 2ac1 48C745D0 		movq	$.LC25, -48(%rbp)
 3997      00000000 
 3998 2ac9 E94B0100 		jmp	.L221
 3998      00
 3999              	.L220:
 4000              	.LBB39:
 766:main.c        **** 		else {
 767:main.c        **** 			char* Carry = malloc(4);
 4001              		.loc 1 767 0 is_stmt 1
 4002 2ace BF040000 		movl	$4, %edi
 4002      00
 4003 2ad3 E8000000 		call	malloc
 4003      00
 4004 2ad8 488945E0 		movq	%rax, -32(%rbp)
 768:main.c        **** 			char* Sum = malloc(4);
 4005              		.loc 1 768 0
 4006 2adc BF040000 		movl	$4, %edi
 4006      00
 4007 2ae1 E8000000 		call	malloc
 4007      00
 4008 2ae6 488945E8 		movq	%rax, -24(%rbp)
 4009              	.LBB40:
 769:main.c        **** 			for (int l=0;l<4;l++) Carry[l]='0';
 4010              		.loc 1 769 0
 4011 2aea C745C400 		movl	$0, -60(%rbp)
 4011      000000
 4012 2af1 EB14     		jmp	.L222
 4013              	.L223:
 4014              		.loc 1 769 0 is_stmt 0 discriminator 3
 4015 2af3 8B45C4   		movl	-60(%rbp), %eax
 4016 2af6 4863D0   		movslq	%eax, %rdx
 4017 2af9 488B45E0 		movq	-32(%rbp), %rax
 4018 2afd 4801D0   		addq	%rdx, %rax
 4019 2b00 C60030   		movb	$48, (%rax)
 4020 2b03 8345C401 		addl	$1, -60(%rbp)
 4021              	.L222:
 4022              		.loc 1 769 0 discriminator 1
 4023 2b07 837DC403 		cmpl	$3, -60(%rbp)
 4024 2b0b 7EE6     		jle	.L223
 4025              	.LBE40:
 770:main.c        **** 			Sum[0] = xor(T[0],'1');
 4026              		.loc 1 770 0 is_stmt 1
 4027 2b0d 488B45D0 		movq	-48(%rbp), %rax
 4028 2b11 0FB600   		movzbl	(%rax), %eax
 4029 2b14 0FBEC0   		movsbl	%al, %eax
 4030 2b17 BE310000 		movl	$49, %esi
 4030      00
 4031 2b1c 89C7     		movl	%eax, %edi
 4032 2b1e E8000000 		call	xor
 4032      00
 4033 2b23 89C2     		movl	%eax, %edx
 4034 2b25 488B45E8 		movq	-24(%rbp), %rax
 4035 2b29 8810     		movb	%dl, (%rax)
 771:main.c        **** 			Carry[0] = and(T[0],'1');
 4036              		.loc 1 771 0
 4037 2b2b 488B45D0 		movq	-48(%rbp), %rax
 4038 2b2f 0FB600   		movzbl	(%rax), %eax
 4039 2b32 0FBEC0   		movsbl	%al, %eax
 4040 2b35 BE310000 		movl	$49, %esi
 4040      00
 4041 2b3a 89C7     		movl	%eax, %edi
 4042 2b3c E8000000 		call	and
 4042      00
 4043 2b41 89C2     		movl	%eax, %edx
 4044 2b43 488B45E0 		movq	-32(%rbp), %rax
 4045 2b47 8810     		movb	%dl, (%rax)
 4046              	.LBB41:
 772:main.c        **** 			for (int c=1;c<4;c++){
 4047              		.loc 1 772 0
 4048 2b49 C745C801 		movl	$1, -56(%rbp)
 4048      000000
 4049 2b50 E9880000 		jmp	.L224
 4049      00
 4050              	.L225:
 773:main.c        **** 				Sum[c] = xor(T[c],Carry[c-1]);
 4051              		.loc 1 773 0 discriminator 3
 4052 2b55 8B45C8   		movl	-56(%rbp), %eax
 4053 2b58 4863D0   		movslq	%eax, %rdx
 4054 2b5b 488B45E8 		movq	-24(%rbp), %rax
 4055 2b5f 488D1C02 		leaq	(%rdx,%rax), %rbx
 4056 2b63 8B45C8   		movl	-56(%rbp), %eax
 4057 2b66 4898     		cltq
 4058 2b68 488D50FF 		leaq	-1(%rax), %rdx
 4059 2b6c 488B45E0 		movq	-32(%rbp), %rax
 4060 2b70 4801D0   		addq	%rdx, %rax
 4061 2b73 0FB600   		movzbl	(%rax), %eax
 4062 2b76 0FBED0   		movsbl	%al, %edx
 4063 2b79 8B45C8   		movl	-56(%rbp), %eax
 4064 2b7c 4863C8   		movslq	%eax, %rcx
 4065 2b7f 488B45D0 		movq	-48(%rbp), %rax
 4066 2b83 4801C8   		addq	%rcx, %rax
 4067 2b86 0FB600   		movzbl	(%rax), %eax
 4068 2b89 0FBEC0   		movsbl	%al, %eax
 4069 2b8c 89D6     		movl	%edx, %esi
 4070 2b8e 89C7     		movl	%eax, %edi
 4071 2b90 E8000000 		call	xor
 4071      00
 4072 2b95 8803     		movb	%al, (%rbx)
 774:main.c        **** 				Carry[c] = and(Carry[c-1],T[c]);
 4073              		.loc 1 774 0 discriminator 3
 4074 2b97 8B45C8   		movl	-56(%rbp), %eax
 4075 2b9a 4863D0   		movslq	%eax, %rdx
 4076 2b9d 488B45E0 		movq	-32(%rbp), %rax
 4077 2ba1 488D1C02 		leaq	(%rdx,%rax), %rbx
 4078 2ba5 8B45C8   		movl	-56(%rbp), %eax
 4079 2ba8 4863D0   		movslq	%eax, %rdx
 4080 2bab 488B45D0 		movq	-48(%rbp), %rax
 4081 2baf 4801D0   		addq	%rdx, %rax
 4082 2bb2 0FB600   		movzbl	(%rax), %eax
 4083 2bb5 0FBED0   		movsbl	%al, %edx
 4084 2bb8 8B45C8   		movl	-56(%rbp), %eax
 4085 2bbb 4898     		cltq
 4086 2bbd 488D48FF 		leaq	-1(%rax), %rcx
 4087 2bc1 488B45E0 		movq	-32(%rbp), %rax
 4088 2bc5 4801C8   		addq	%rcx, %rax
 4089 2bc8 0FB600   		movzbl	(%rax), %eax
 4090 2bcb 0FBEC0   		movsbl	%al, %eax
 4091 2bce 89D6     		movl	%edx, %esi
 4092 2bd0 89C7     		movl	%eax, %edi
 4093 2bd2 E8000000 		call	and
 4093      00
 4094 2bd7 8803     		movb	%al, (%rbx)
 772:main.c        **** 			for (int c=1;c<4;c++){
 4095              		.loc 1 772 0 discriminator 3
 4096 2bd9 8345C801 		addl	$1, -56(%rbp)
 4097              	.L224:
 772:main.c        **** 			for (int c=1;c<4;c++){
 4098              		.loc 1 772 0 is_stmt 0 discriminator 1
 4099 2bdd 837DC803 		cmpl	$3, -56(%rbp)
 4100 2be1 0F8E6EFF 		jle	.L225
 4100      FFFF
 4101              	.LBE41:
 4102              	.LBB42:
 775:main.c        **** 			}
 776:main.c        **** 			for(int k=0;k<4;k++) T[k]=Sum[k];
 4103              		.loc 1 776 0 is_stmt 1
 4104 2be7 C745CC00 		movl	$0, -52(%rbp)
 4104      000000
 4105 2bee EB23     		jmp	.L226
 4106              	.L227:
 4107              		.loc 1 776 0 is_stmt 0 discriminator 3
 4108 2bf0 8B45CC   		movl	-52(%rbp), %eax
 4109 2bf3 4863D0   		movslq	%eax, %rdx
 4110 2bf6 488B45D0 		movq	-48(%rbp), %rax
 4111 2bfa 4801C2   		addq	%rax, %rdx
 4112 2bfd 8B45CC   		movl	-52(%rbp), %eax
 4113 2c00 4863C8   		movslq	%eax, %rcx
 4114 2c03 488B45E8 		movq	-24(%rbp), %rax
 4115 2c07 4801C8   		addq	%rcx, %rax
 4116 2c0a 0FB600   		movzbl	(%rax), %eax
 4117 2c0d 8802     		movb	%al, (%rdx)
 4118 2c0f 8345CC01 		addl	$1, -52(%rbp)
 4119              	.L226:
 4120              		.loc 1 776 0 discriminator 1
 4121 2c13 837DCC03 		cmpl	$3, -52(%rbp)
 4122 2c17 7ED7     		jle	.L227
 4123              	.L221:
 4124              	.LBE42:
 4125              	.LBE39:
 762:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 4126              		.loc 1 762 0 is_stmt 1 discriminator 2
 4127 2c19 8345BC01 		addl	$1, -68(%rbp)
 4128              	.L217:
 762:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 4129              		.loc 1 762 0 is_stmt 0 discriminator 1
 4130 2c1d 8B45BC   		movl	-68(%rbp), %eax
 4131 2c20 3B45B0   		cmpl	-80(%rbp), %eax
 4132 2c23 0F8C25FE 		jl	.L228
 4132      FFFF
 4133              	.LBE37:
 777:main.c        **** 
 778:main.c        **** 		}
 779:main.c        **** 	}
 780:main.c        **** 	return C;
 4134              		.loc 1 780 0 is_stmt 1
 4135 2c29 488B45D8 		movq	-40(%rbp), %rax
 781:main.c        **** }
 4136              		.loc 1 781 0
 4137 2c2d 4883C458 		addq	$88, %rsp
 4138 2c31 5B       		popq	%rbx
 4139 2c32 5D       		popq	%rbp
 4140              		.cfi_def_cfa 7, 8
 4141 2c33 C3       		ret
 4142              		.cfi_endproc
 4143              	.LFE18:
 4145              		.globl	read_byte
 4147              	read_byte:
 4148              	.LFB19:
 782:main.c        **** 
 783:main.c        **** char * read_byte(uint8 a){
 4149              		.loc 1 783 0
 4150              		.cfi_startproc
 4151 2c34 55       		pushq	%rbp
 4152              		.cfi_def_cfa_offset 16
 4153              		.cfi_offset 6, -16
 4154 2c35 4889E5   		movq	%rsp, %rbp
 4155              		.cfi_def_cfa_register 6
 4156 2c38 4883EC20 		subq	$32, %rsp
 4157 2c3c 89F8     		movl	%edi, %eax
 4158 2c3e 8845EC   		movb	%al, -20(%rbp)
 784:main.c        **** 		char* ans=malloc(9); 
 4159              		.loc 1 784 0
 4160 2c41 BF090000 		movl	$9, %edi
 4160      00
 4161 2c46 E8000000 		call	malloc
 4161      00
 4162 2c4b 488945F8 		movq	%rax, -8(%rbp)
 4163              	.LBB43:
 785:main.c        **** 		for(int i=0;i<8;i++) {
 4164              		.loc 1 785 0
 4165 2c4f C745F400 		movl	$0, -12(%rbp)
 4165      000000
 4166 2c56 EB3A     		jmp	.L231
 4167              	.L234:
 786:main.c        **** 				if(a%2==0) { ans[i]= '0'; }
 4168              		.loc 1 786 0
 4169 2c58 0FB645EC 		movzbl	-20(%rbp), %eax
 4170 2c5c 83E001   		andl	$1, %eax
 4171 2c5f 84C0     		testb	%al, %al
 4172 2c61 7512     		jne	.L232
 4173              		.loc 1 786 0 is_stmt 0 discriminator 1
 4174 2c63 8B45F4   		movl	-12(%rbp), %eax
 4175 2c66 4863D0   		movslq	%eax, %rdx
 4176 2c69 488B45F8 		movq	-8(%rbp), %rax
 4177 2c6d 4801D0   		addq	%rdx, %rax
 4178 2c70 C60030   		movb	$48, (%rax)
 4179 2c73 EB10     		jmp	.L233
 4180              	.L232:
 787:main.c        **** 				else { ans[i]='1'; }
 4181              		.loc 1 787 0 is_stmt 1
 4182 2c75 8B45F4   		movl	-12(%rbp), %eax
 4183 2c78 4863D0   		movslq	%eax, %rdx
 4184 2c7b 488B45F8 		movq	-8(%rbp), %rax
 4185 2c7f 4801D0   		addq	%rdx, %rax
 4186 2c82 C60031   		movb	$49, (%rax)
 4187              	.L233:
 788:main.c        **** 				a/=2; 
 4188              		.loc 1 788 0 discriminator 2
 4189 2c85 0FB645EC 		movzbl	-20(%rbp), %eax
 4190 2c89 D0E8     		shrb	%al
 4191 2c8b 8845EC   		movb	%al, -20(%rbp)
 785:main.c        **** 				if(a%2==0) { ans[i]= '0'; }
 4192              		.loc 1 785 0 discriminator 2
 4193 2c8e 8345F401 		addl	$1, -12(%rbp)
 4194              	.L231:
 785:main.c        **** 				if(a%2==0) { ans[i]= '0'; }
 4195              		.loc 1 785 0 is_stmt 0 discriminator 1
 4196 2c92 837DF407 		cmpl	$7, -12(%rbp)
 4197 2c96 7EC0     		jle	.L234
 4198              	.LBE43:
 789:main.c        **** 		}
 790:main.c        **** 		ans[8]='\0'; 
 4199              		.loc 1 790 0 is_stmt 1
 4200 2c98 488B45F8 		movq	-8(%rbp), %rax
 4201 2c9c 4883C008 		addq	$8, %rax
 4202 2ca0 C60000   		movb	$0, (%rax)
 791:main.c        **** 		return ans; 
 4203              		.loc 1 791 0
 4204 2ca3 488B45F8 		movq	-8(%rbp), %rax
 792:main.c        **** }
 4205              		.loc 1 792 0
 4206 2ca7 C9       		leave
 4207              		.cfi_def_cfa 7, 8
 4208 2ca8 C3       		ret
 4209              		.cfi_endproc
 4210              	.LFE19:
 4212              		.globl	write_4byte_to_board
 4214              	write_4byte_to_board:
 4215              	.LFB20:
 793:main.c        **** 
 794:main.c        **** char write_4byte_to_board(int chan, const char * data, struct FLContext *handle, const char * error
 4216              		.loc 1 794 0
 4217              		.cfi_startproc
 4218 2ca9 55       		pushq	%rbp
 4219              		.cfi_def_cfa_offset 16
 4220              		.cfi_offset 6, -16
 4221 2caa 4889E5   		movq	%rsp, %rbp
 4222              		.cfi_def_cfa_register 6
 4223 2cad 4883EC60 		subq	$96, %rsp
 4224 2cb1 897DBC   		movl	%edi, -68(%rbp)
 4225 2cb4 488975B0 		movq	%rsi, -80(%rbp)
 4226 2cb8 488955A8 		movq	%rdx, -88(%rbp)
 4227 2cbc 48894DA0 		movq	%rcx, -96(%rbp)
 4228 2cc0 448945B8 		movl	%r8d, -72(%rbp)
 4229              		.loc 1 794 0
 4230 2cc4 64488B04 		movq	%fs:40, %rax
 4230      25280000 
 4230      00
 4231 2ccd 488945F8 		movq	%rax, -8(%rbp)
 4232 2cd1 31C0     		xorl	%eax, %eax
 795:main.c        ****         char* to_enc = malloc(33);
 4233              		.loc 1 795 0
 4234 2cd3 BF210000 		movl	$33, %edi
 4234      00
 4235 2cd8 E8000000 		call	malloc
 4235      00
 4236 2cdd 488945E0 		movq	%rax, -32(%rbp)
 4237              	.LBB44:
 796:main.c        ****         for(int i=0; i< 4; i++)
 4238              		.loc 1 796 0
 4239 2ce1 C745CC00 		movl	$0, -52(%rbp)
 4239      000000
 4240 2ce8 EB4B     		jmp	.L237
 4241              	.L240:
 4242              	.LBB45:
 797:main.c        ****             for(int j= 0; j<8; j++)
 4243              		.loc 1 797 0
 4244 2cea C745D000 		movl	$0, -48(%rbp)
 4244      000000
 4245 2cf1 EB38     		jmp	.L238
 4246              	.L239:
 798:main.c        ****                 to_enc[i*8 +j] = data[i*8 + 7 - j];
 4247              		.loc 1 798 0 discriminator 3
 4248 2cf3 8B45CC   		movl	-52(%rbp), %eax
 4249 2cf6 8D14C500 		leal	0(,%rax,8), %edx
 4249      000000
 4250 2cfd 8B45D0   		movl	-48(%rbp), %eax
 4251 2d00 01D0     		addl	%edx, %eax
 4252 2d02 4863D0   		movslq	%eax, %rdx
 4253 2d05 488B45E0 		movq	-32(%rbp), %rax
 4254 2d09 4801C2   		addq	%rax, %rdx
 4255 2d0c 8B45CC   		movl	-52(%rbp), %eax
 4256 2d0f C1E003   		sall	$3, %eax
 4257 2d12 83C007   		addl	$7, %eax
 4258 2d15 2B45D0   		subl	-48(%rbp), %eax
 4259 2d18 4863C8   		movslq	%eax, %rcx
 4260 2d1b 488B45B0 		movq	-80(%rbp), %rax
 4261 2d1f 4801C8   		addq	%rcx, %rax
 4262 2d22 0FB600   		movzbl	(%rax), %eax
 4263 2d25 8802     		movb	%al, (%rdx)
 797:main.c        ****             for(int j= 0; j<8; j++)
 4264              		.loc 1 797 0 discriminator 3
 4265 2d27 8345D001 		addl	$1, -48(%rbp)
 4266              	.L238:
 797:main.c        ****             for(int j= 0; j<8; j++)
 4267              		.loc 1 797 0 is_stmt 0 discriminator 1
 4268 2d2b 837DD007 		cmpl	$7, -48(%rbp)
 4269 2d2f 7EC2     		jle	.L239
 4270              	.LBE45:
 796:main.c        ****         for(int i=0; i< 4; i++)
 4271              		.loc 1 796 0 is_stmt 1 discriminator 2
 4272 2d31 8345CC01 		addl	$1, -52(%rbp)
 4273              	.L237:
 796:main.c        ****         for(int i=0; i< 4; i++)
 4274              		.loc 1 796 0 is_stmt 0 discriminator 1
 4275 2d35 837DCC03 		cmpl	$3, -52(%rbp)
 4276 2d39 7EAF     		jle	.L240
 4277              	.LBE44:
 799:main.c        ****         to_enc[32] = '\0';
 4278              		.loc 1 799 0 is_stmt 1
 4279 2d3b 488B45E0 		movq	-32(%rbp), %rax
 4280 2d3f 4883C020 		addq	$32, %rax
 4281 2d43 C60000   		movb	$0, (%rax)
 800:main.c        **** 		char *enc_data=encrypt(to_enc,key); 
 4282              		.loc 1 800 0
 4283 2d46 488B1500 		movq	key(%rip), %rdx
 4283      000000
 4284 2d4d 488B45E0 		movq	-32(%rbp), %rax
 4285 2d51 4889D6   		movq	%rdx, %rsi
 4286 2d54 4889C7   		movq	%rax, %rdi
 4287 2d57 E8000000 		call	encrypt
 4287      00
 4288 2d5c 488945E8 		movq	%rax, -24(%rbp)
 801:main.c        **** 		uint8 buf[5]; 
 802:main.c        **** 		uint8 temp=0; 
 4289              		.loc 1 802 0
 4290 2d60 C645CB00 		movb	$0, -53(%rbp)
 4291              	.LBB46:
 803:main.c        **** 		for(int i=0;i<4;i++){
 4292              		.loc 1 803 0
 4293 2d64 C745D400 		movl	$0, -44(%rbp)
 4293      000000
 4294 2d6b EB63     		jmp	.L241
 4295              	.L245:
 804:main.c        **** 				temp=0; 
 4296              		.loc 1 804 0
 4297 2d6d C645CB00 		movb	$0, -53(%rbp)
 4298              	.LBB47:
 805:main.c        **** 				for(int j=i<<3; j<(i<<3)+8; j++){ if(enc_data[j]=='1') { temp+=(1<<(j-(i<<3))); } }
 4299              		.loc 1 805 0
 4300 2d71 8B45D4   		movl	-44(%rbp), %eax
 4301 2d74 C1E003   		sall	$3, %eax
 4302 2d77 8945D8   		movl	%eax, -40(%rbp)
 4303 2d7a EB35     		jmp	.L242
 4304              	.L244:
 4305              		.loc 1 805 0 is_stmt 0 discriminator 6
 4306 2d7c 8B45D8   		movl	-40(%rbp), %eax
 4307 2d7f 4863D0   		movslq	%eax, %rdx
 4308 2d82 488B45E8 		movq	-24(%rbp), %rax
 4309 2d86 4801D0   		addq	%rdx, %rax
 4310 2d89 0FB600   		movzbl	(%rax), %eax
 4311 2d8c 3C31     		cmpb	$49, %al
 4312 2d8e 751D     		jne	.L243
 4313              		.loc 1 805 0 discriminator 2
 4314 2d90 8B45D4   		movl	-44(%rbp), %eax
 4315 2d93 8D14C500 		leal	0(,%rax,8), %edx
 4315      000000
 4316 2d9a 8B45D8   		movl	-40(%rbp), %eax
 4317 2d9d 29D0     		subl	%edx, %eax
 4318 2d9f BA010000 		movl	$1, %edx
 4318      00
 4319 2da4 89C1     		movl	%eax, %ecx
 4320 2da6 D3E2     		sall	%cl, %edx
 4321 2da8 89D0     		movl	%edx, %eax
 4322 2daa 0045CB   		addb	%al, -53(%rbp)
 4323              	.L243:
 4324              		.loc 1 805 0 discriminator 4
 4325 2dad 8345D801 		addl	$1, -40(%rbp)
 4326              	.L242:
 4327              		.loc 1 805 0 discriminator 5
 4328 2db1 8B45D4   		movl	-44(%rbp), %eax
 4329 2db4 C1E003   		sall	$3, %eax
 4330 2db7 83C008   		addl	$8, %eax
 4331 2dba 3B45D8   		cmpl	-40(%rbp), %eax
 4332 2dbd 7FBD     		jg	.L244
 4333              	.LBE47:
 806:main.c        **** 				buf[i]=temp; 
 4334              		.loc 1 806 0 is_stmt 1 discriminator 2
 4335 2dbf 8B45D4   		movl	-44(%rbp), %eax
 4336 2dc2 4898     		cltq
 4337 2dc4 0FB655CB 		movzbl	-53(%rbp), %edx
 4338 2dc8 885405F0 		movb	%dl, -16(%rbp,%rax)
 803:main.c        **** 				temp=0; 
 4339              		.loc 1 803 0 discriminator 2
 4340 2dcc 8345D401 		addl	$1, -44(%rbp)
 4341              	.L241:
 803:main.c        **** 				temp=0; 
 4342              		.loc 1 803 0 is_stmt 0 discriminator 1
 4343 2dd0 837DD403 		cmpl	$3, -44(%rbp)
 4344 2dd4 7E97     		jle	.L245
 4345              	.LBE46:
 807:main.c        **** 		}
 808:main.c        **** 		FLStatus fStatus=flWriteChannel(handle,chan,4,buf,error); 
 4346              		.loc 1 808 0 is_stmt 1
 4347 2dd6 8B45BC   		movl	-68(%rbp), %eax
 4348 2dd9 0FB6F0   		movzbl	%al, %esi
 4349 2ddc 488B4DA0 		movq	-96(%rbp), %rcx
 4350 2de0 488D55F0 		leaq	-16(%rbp), %rdx
 4351 2de4 488B45A8 		movq	-88(%rbp), %rax
 4352 2de8 4989C8   		movq	%rcx, %r8
 4353 2deb 4889D1   		movq	%rdx, %rcx
 4354 2dee BA040000 		movl	$4, %edx
 4354      00
 4355 2df3 4889C7   		movq	%rax, %rdi
 4356 2df6 E8000000 		call	flWriteChannel
 4356      00
 4357 2dfb 8945DC   		movl	%eax, -36(%rbp)
 809:main.c        **** 		if(fStatus!=FLP_SUCCESS) { 
 4358              		.loc 1 809 0
 4359 2dfe 837DDC00 		cmpl	$0, -36(%rbp)
 4360 2e02 7407     		je	.L246
 810:main.c        **** 				return 'f'; 
 4361              		.loc 1 810 0
 4362 2e04 B8660000 		movl	$102, %eax
 4362      00
 4363 2e09 EB05     		jmp	.L248
 4364              	.L246:
 811:main.c        **** 		}
 812:main.c        **** 		else return 's'; 
 4365              		.loc 1 812 0
 4366 2e0b B8730000 		movl	$115, %eax
 4366      00
 4367              	.L248:
 813:main.c        **** //
 814:main.c        **** //		char *data_to_write=boolToHex(enc_data); 
 815:main.c        **** //		strcpy(line1,"w1 "); 
 816:main.c        **** //       // printf("%s\n",data_to_write); 
 817:main.c        **** //		char *dd=malloc(3);  dd[2]='\0'; 
 818:main.c        **** //		for(int i=0;i<4;i++){
 819:main.c        **** //				dd[0]=data_to_write[i*2]; 
 820:main.c        **** //				dd[1]=data_to_write[i*2+1]; 
 821:main.c        **** //                strcpy(line1,"w1 "); 
 822:main.c        **** //                strcat(line1,dd); 
 823:main.c        **** //				pStatus = parseLine(handle, line1 , &error);
 824:main.c        **** //				if(pStatus != FLP_SUCCESS) i--; 
 825:main.c        **** //		}
 826:main.c        **** //        wtt(); 
 827:main.c        **** 		
 828:main.c        **** }
 4368              		.loc 1 828 0 discriminator 1
 4369 2e10 488B7DF8 		movq	-8(%rbp), %rdi
 4370 2e14 6448333C 		xorq	%fs:40, %rdi
 4370      25280000 
 4370      00
 4371 2e1d 7405     		je	.L249
 4372              		.loc 1 828 0 is_stmt 0
 4373 2e1f E8000000 		call	__stack_chk_fail
 4373      00
 4374              	.L249:
 4375 2e24 C9       		leave
 4376              		.cfi_def_cfa 7, 8
 4377 2e25 C3       		ret
 4378              		.cfi_endproc
 4379              	.LFE20:
 4381              		.globl	read_4byte_from_fpga
 4383              	read_4byte_from_fpga:
 4384              	.LFB21:
 829:main.c        **** char * read_4byte_from_fpga(int chan, struct FLContext *handle, const char * error, int timeout ){
 4385              		.loc 1 829 0 is_stmt 1
 4386              		.cfi_startproc
 4387 2e26 55       		pushq	%rbp
 4388              		.cfi_def_cfa_offset 16
 4389              		.cfi_offset 6, -16
 4390 2e27 4889E5   		movq	%rsp, %rbp
 4391              		.cfi_def_cfa_register 6
 4392 2e2a 4883EC50 		subq	$80, %rsp
 4393 2e2e 897DCC   		movl	%edi, -52(%rbp)
 4394 2e31 488975C0 		movq	%rsi, -64(%rbp)
 4395 2e35 488955B8 		movq	%rdx, -72(%rbp)
 4396 2e39 894DC8   		movl	%ecx, -56(%rbp)
 4397              		.loc 1 829 0
 4398 2e3c 64488B04 		movq	%fs:40, %rax
 4398      25280000 
 4398      00
 4399 2e45 488945F8 		movq	%rax, -8(%rbp)
 4400 2e49 31C0     		xorl	%eax, %eax
 830:main.c        **** 		char* data_red_from_fpga = malloc(33); 
 4401              		.loc 1 830 0
 4402 2e4b BF210000 		movl	$33, %edi
 4402      00
 4403 2e50 E8000000 		call	malloc
 4403      00
 4404 2e55 488945E0 		movq	%rax, -32(%rbp)
 831:main.c        **** 		uint8 buf[5]; 
 832:main.c        **** 		FLStatus fstatus=flReadChannel(handle, chan, 2, buf, error); 
 4405              		.loc 1 832 0
 4406 2e59 8B45CC   		movl	-52(%rbp), %eax
 4407 2e5c 0FB6F0   		movzbl	%al, %esi
 4408 2e5f 488B4DB8 		movq	-72(%rbp), %rcx
 4409 2e63 488D55F0 		leaq	-16(%rbp), %rdx
 4410 2e67 488B45C0 		movq	-64(%rbp), %rax
 4411 2e6b 4989C8   		movq	%rcx, %r8
 4412 2e6e 4889D1   		movq	%rdx, %rcx
 4413 2e71 BA020000 		movl	$2, %edx
 4413      00
 4414 2e76 4889C7   		movq	%rax, %rdi
 4415 2e79 E8000000 		call	flReadChannel
 4415      00
 4416 2e7e 8945DC   		movl	%eax, -36(%rbp)
 833:main.c        ****     	fstatus=flReadChannel(handle, chan, 4, buf, error); 
 4417              		.loc 1 833 0
 4418 2e81 8B45CC   		movl	-52(%rbp), %eax
 4419 2e84 0FB6F0   		movzbl	%al, %esi
 4420 2e87 488B4DB8 		movq	-72(%rbp), %rcx
 4421 2e8b 488D55F0 		leaq	-16(%rbp), %rdx
 4422 2e8f 488B45C0 		movq	-64(%rbp), %rax
 4423 2e93 4989C8   		movq	%rcx, %r8
 4424 2e96 4889D1   		movq	%rdx, %rcx
 4425 2e99 BA040000 		movl	$4, %edx
 4425      00
 4426 2e9e 4889C7   		movq	%rax, %rdi
 4427 2ea1 E8000000 		call	flReadChannel
 4427      00
 4428 2ea6 8945DC   		movl	%eax, -36(%rbp)
 834:main.c        **** 		if(fstatus!=FL_SUCCESS) { data_red_from_fpga[0]='f'; return data_red_from_fpga; }
 4429              		.loc 1 834 0
 4430 2ea9 837DDC00 		cmpl	$0, -36(%rbp)
 4431 2ead 7410     		je	.L251
 4432              		.loc 1 834 0 is_stmt 0 discriminator 1
 4433 2eaf 488B45E0 		movq	-32(%rbp), %rax
 4434 2eb3 C60066   		movb	$102, (%rax)
 4435 2eb6 488B45E0 		movq	-32(%rbp), %rax
 4436 2eba E99F0000 		jmp	.L259
 4436      00
 4437              	.L251:
 4438              	.LBB48:
 835:main.c        **** 		for(int i=0;i<4;i++){
 4439              		.loc 1 835 0 is_stmt 1
 4440 2ebf C745D400 		movl	$0, -44(%rbp)
 4440      000000
 4441 2ec6 EB72     		jmp	.L253
 4442              	.L258:
 4443              	.LBB49:
 836:main.c        **** 				for(int j=0;j<8;j++){
 4444              		.loc 1 836 0
 4445 2ec8 C745D800 		movl	$0, -40(%rbp)
 4445      000000
 4446 2ecf EB5F     		jmp	.L254
 4447              	.L257:
 837:main.c        **** 						if((buf[i]&(1<<j)) > 0) { data_red_from_fpga[8*i+j]='1'; }
 4448              		.loc 1 837 0
 4449 2ed1 8B45D4   		movl	-44(%rbp), %eax
 4450 2ed4 4898     		cltq
 4451 2ed6 0FB64405 		movzbl	-16(%rbp,%rax), %eax
 4451      F0
 4452 2edb 0FB6D0   		movzbl	%al, %edx
 4453 2ede 8B45D8   		movl	-40(%rbp), %eax
 4454 2ee1 BE010000 		movl	$1, %esi
 4454      00
 4455 2ee6 89C1     		movl	%eax, %ecx
 4456 2ee8 D3E6     		sall	%cl, %esi
 4457 2eea 89F0     		movl	%esi, %eax
 4458 2eec 21D0     		andl	%edx, %eax
 4459 2eee 85C0     		testl	%eax, %eax
 4460 2ef0 7E1E     		jle	.L255
 4461              		.loc 1 837 0 is_stmt 0 discriminator 1
 4462 2ef2 8B45D4   		movl	-44(%rbp), %eax
 4463 2ef5 8D14C500 		leal	0(,%rax,8), %edx
 4463      000000
 4464 2efc 8B45D8   		movl	-40(%rbp), %eax
 4465 2eff 01D0     		addl	%edx, %eax
 4466 2f01 4863D0   		movslq	%eax, %rdx
 4467 2f04 488B45E0 		movq	-32(%rbp), %rax
 4468 2f08 4801D0   		addq	%rdx, %rax
 4469 2f0b C60031   		movb	$49, (%rax)
 4470 2f0e EB1C     		jmp	.L256
 4471              	.L255:
 838:main.c        **** 						else { data_red_from_fpga[8*i+j]='0'; }
 4472              		.loc 1 838 0 is_stmt 1
 4473 2f10 8B45D4   		movl	-44(%rbp), %eax
 4474 2f13 8D14C500 		leal	0(,%rax,8), %edx
 4474      000000
 4475 2f1a 8B45D8   		movl	-40(%rbp), %eax
 4476 2f1d 01D0     		addl	%edx, %eax
 4477 2f1f 4863D0   		movslq	%eax, %rdx
 4478 2f22 488B45E0 		movq	-32(%rbp), %rax
 4479 2f26 4801D0   		addq	%rdx, %rax
 4480 2f29 C60030   		movb	$48, (%rax)
 4481              	.L256:
 836:main.c        **** 				for(int j=0;j<8;j++){
 4482              		.loc 1 836 0 discriminator 2
 4483 2f2c 8345D801 		addl	$1, -40(%rbp)
 4484              	.L254:
 836:main.c        **** 				for(int j=0;j<8;j++){
 4485              		.loc 1 836 0 is_stmt 0 discriminator 1
 4486 2f30 837DD807 		cmpl	$7, -40(%rbp)
 4487 2f34 7E9B     		jle	.L257
 4488              	.LBE49:
 835:main.c        **** 				for(int j=0;j<8;j++){
 4489              		.loc 1 835 0 is_stmt 1 discriminator 2
 4490 2f36 8345D401 		addl	$1, -44(%rbp)
 4491              	.L253:
 835:main.c        **** 				for(int j=0;j<8;j++){
 4492              		.loc 1 835 0 is_stmt 0 discriminator 1
 4493 2f3a 837DD403 		cmpl	$3, -44(%rbp)
 4494 2f3e 7E88     		jle	.L258
 4495              	.LBE48:
 839:main.c        **** 				}
 840:main.c        **** 		}
 841:main.c        **** 		char* dec_data_from_fpga=decrypt(data_red_from_fpga,key); 
 4496              		.loc 1 841 0 is_stmt 1
 4497 2f40 488B1500 		movq	key(%rip), %rdx
 4497      000000
 4498 2f47 488B45E0 		movq	-32(%rbp), %rax
 4499 2f4b 4889D6   		movq	%rdx, %rsi
 4500 2f4e 4889C7   		movq	%rax, %rdi
 4501 2f51 E8000000 		call	decrypt
 4501      00
 4502 2f56 488945E8 		movq	%rax, -24(%rbp)
 842:main.c        **** 		return dec_data_from_fpga; 
 4503              		.loc 1 842 0
 4504 2f5a 488B45E8 		movq	-24(%rbp), %rax
 4505              	.L259:
 843:main.c        ****    //     return data_red_from_fpga; 
 844:main.c        **** 
 845:main.c        **** 
 846:main.c        **** //		char* line1="r0 1"; 
 847:main.c        **** //		data_red_from_fpga[0]='\0'; 
 848:main.c        **** //			   for(int i=0;i<4;i++){
 849:main.c        **** //					   pStatus = parseLine(handle, line1, &error);
 850:main.c        **** //					   if(pStatus == FLP_SUCCESS){
 851:main.c        **** //                            //printf("read  %d th byte \n",i); 
 852:main.c        **** //							   char *red_byte=read_byte(out); 
 853:main.c        **** //							   strcat(data_red_from_fpga,red_byte); 
 854:main.c        **** //					   }
 855:main.c        **** //					   else {
 856:main.c        **** //							   i--; 
 857:main.c        **** //					   }
 858:main.c        **** //			   }
 859:main.c        **** //		data_red_from_fpga[32]='\0'; 
 860:main.c        **** ////		char* key=malloc(33); 
 861:main.c        **** ////
 862:main.c        **** ////        printf("%s\n", data_red_from_fpga); 
 863:main.c        **** //        wtt(); 
 864:main.c        **** //		return dec_data_from_fpga; 
 865:main.c        **** 
 866:main.c        **** }
 4506              		.loc 1 866 0 discriminator 1
 4507 2f5e 488B7DF8 		movq	-8(%rbp), %rdi
 4508 2f62 6448333C 		xorq	%fs:40, %rdi
 4508      25280000 
 4508      00
 4509 2f6b 7405     		je	.L260
 4510              		.loc 1 866 0 is_stmt 0
 4511 2f6d E8000000 		call	__stack_chk_fail
 4511      00
 4512              	.L260:
 4513 2f72 C9       		leave
 4514              		.cfi_def_cfa 7, 8
 4515 2f73 C3       		ret
 4516              		.cfi_endproc
 4517              	.LFE21:
 4519              		.section	.rodata
 4520              	.LC46:
 4521 0313 72656365 		.string	"received ack is %s\n"
 4521      69766564 
 4521      2061636B 
 4521      20697320 
 4521      25730A00 
 4522              		.text
 4523              		.globl	receive_ack
 4525              	receive_ack:
 4526              	.LFB22:
 867:main.c        **** 
 868:main.c        **** char* receive_ack(int chan, struct FLContext *handle, const char * error, int timeout) {
 4527              		.loc 1 868 0 is_stmt 1
 4528              		.cfi_startproc
 4529 2f74 55       		pushq	%rbp
 4530              		.cfi_def_cfa_offset 16
 4531              		.cfi_offset 6, -16
 4532 2f75 4889E5   		movq	%rsp, %rbp
 4533              		.cfi_def_cfa_register 6
 4534 2f78 4883EC30 		subq	$48, %rsp
 4535 2f7c 897DEC   		movl	%edi, -20(%rbp)
 4536 2f7f 488975E0 		movq	%rsi, -32(%rbp)
 4537 2f83 488955D8 		movq	%rdx, -40(%rbp)
 4538 2f87 894DE8   		movl	%ecx, -24(%rbp)
 869:main.c        **** 			char * data_red_from_fpga=read_4byte_from_fpga(chan,handle , error,timeout); 
 4539              		.loc 1 869 0
 4540 2f8a 8B4DE8   		movl	-24(%rbp), %ecx
 4541 2f8d 488B55D8 		movq	-40(%rbp), %rdx
 4542 2f91 488B75E0 		movq	-32(%rbp), %rsi
 4543 2f95 8B45EC   		movl	-20(%rbp), %eax
 4544 2f98 89C7     		movl	%eax, %edi
 4545 2f9a E8000000 		call	read_4byte_from_fpga
 4545      00
 4546 2f9f 488945F8 		movq	%rax, -8(%rbp)
 870:main.c        ****             printf("received ack is %s\n",data_red_from_fpga);  
 4547              		.loc 1 870 0
 4548 2fa3 488B45F8 		movq	-8(%rbp), %rax
 4549 2fa7 4889C6   		movq	%rax, %rsi
 4550 2faa BF000000 		movl	$.LC46, %edi
 4550      00
 4551 2faf B8000000 		movl	$0, %eax
 4551      00
 4552 2fb4 E8000000 		call	printf
 4552      00
 871:main.c        **** 			if(data_red_from_fpga[0]=='f') return data_red_from_fpga; 
 4553              		.loc 1 871 0
 4554 2fb9 488B45F8 		movq	-8(%rbp), %rax
 4555 2fbd 0FB600   		movzbl	(%rax), %eax
 4556 2fc0 3C66     		cmpb	$102, %al
 4557 2fc2 7506     		jne	.L262
 4558              		.loc 1 871 0 is_stmt 0 discriminator 1
 4559 2fc4 488B45F8 		movq	-8(%rbp), %rax
 4560 2fc8 EB4A     		jmp	.L263
 4561              	.L262:
 4562              	.LBB50:
 872:main.c        **** 			for(int i=0;i<32;i++){
 4563              		.loc 1 872 0 is_stmt 1
 4564 2fca C745F400 		movl	$0, -12(%rbp)
 4564      000000
 4565 2fd1 EB37     		jmp	.L264
 4566              	.L266:
 873:main.c        **** 					if(data_red_from_fpga[i]!=ack1[i]) { data_red_from_fpga[0]='f';  return data_red_from_fpga; }
 4567              		.loc 1 873 0
 4568 2fd3 8B45F4   		movl	-12(%rbp), %eax
 4569 2fd6 4863D0   		movslq	%eax, %rdx
 4570 2fd9 488B45F8 		movq	-8(%rbp), %rax
 4571 2fdd 4801D0   		addq	%rdx, %rax
 4572 2fe0 0FB610   		movzbl	(%rax), %edx
 4573 2fe3 488B0D00 		movq	ack1(%rip), %rcx
 4573      000000
 4574 2fea 8B45F4   		movl	-12(%rbp), %eax
 4575 2fed 4898     		cltq
 4576 2fef 4801C8   		addq	%rcx, %rax
 4577 2ff2 0FB600   		movzbl	(%rax), %eax
 4578 2ff5 38C2     		cmpb	%al, %dl
 4579 2ff7 740D     		je	.L265
 4580              		.loc 1 873 0 is_stmt 0 discriminator 1
 4581 2ff9 488B45F8 		movq	-8(%rbp), %rax
 4582 2ffd C60066   		movb	$102, (%rax)
 4583 3000 488B45F8 		movq	-8(%rbp), %rax
 4584 3004 EB0E     		jmp	.L263
 4585              	.L265:
 872:main.c        **** 			for(int i=0;i<32;i++){
 4586              		.loc 1 872 0 is_stmt 1 discriminator 2
 4587 3006 8345F401 		addl	$1, -12(%rbp)
 4588              	.L264:
 872:main.c        **** 			for(int i=0;i<32;i++){
 4589              		.loc 1 872 0 is_stmt 0 discriminator 1
 4590 300a 837DF41F 		cmpl	$31, -12(%rbp)
 4591 300e 7EC3     		jle	.L266
 4592              	.LBE50:
 874:main.c        **** 			}
 875:main.c        ****             return data_red_from_fpga; 
 4593              		.loc 1 875 0 is_stmt 1
 4594 3010 488B45F8 		movq	-8(%rbp), %rax
 4595              	.L263:
 876:main.c        **** 
 877:main.c        **** }
 4596              		.loc 1 877 0
 4597 3014 C9       		leave
 4598              		.cfi_def_cfa 7, 8
 4599 3015 C3       		ret
 4600              		.cfi_endproc
 4601              	.LFE22:
 4603              		.globl	send_ack
 4605              	send_ack:
 4606              	.LFB23:
 878:main.c        **** 
 879:main.c        **** char send_ack(int chan, struct FLContext *handle, const char * error, int timeout){
 4607              		.loc 1 879 0
 4608              		.cfi_startproc
 4609 3016 55       		pushq	%rbp
 4610              		.cfi_def_cfa_offset 16
 4611              		.cfi_offset 6, -16
 4612 3017 4889E5   		movq	%rsp, %rbp
 4613              		.cfi_def_cfa_register 6
 4614 301a 4883EC40 		subq	$64, %rsp
 4615 301e 897DDC   		movl	%edi, -36(%rbp)
 4616 3021 488975D0 		movq	%rsi, -48(%rbp)
 4617 3025 488955C8 		movq	%rdx, -56(%rbp)
 4618 3029 894DD8   		movl	%ecx, -40(%rbp)
 880:main.c        **** 		char* byte_reversed = malloc(33);
 4619              		.loc 1 880 0
 4620 302c BF210000 		movl	$33, %edi
 4620      00
 4621 3031 E8000000 		call	malloc
 4621      00
 4622 3036 488945F8 		movq	%rax, -8(%rbp)
 4623              	.LBB51:
 881:main.c        ****         for(int i=0; i< 4; i++)
 4624              		.loc 1 881 0
 4625 303a C745F000 		movl	$0, -16(%rbp)
 4625      000000
 4626 3041 EB4D     		jmp	.L268
 4627              	.L271:
 4628              	.LBB52:
 882:main.c        ****             for(int j= 0; j<8; j++)
 4629              		.loc 1 882 0
 4630 3043 C745F400 		movl	$0, -12(%rbp)
 4630      000000
 4631 304a EB3A     		jmp	.L269
 4632              	.L270:
 883:main.c        ****                 byte_reversed[i*8 +j] = ack2[i*8 + 7 - j];
 4633              		.loc 1 883 0 discriminator 3
 4634 304c 8B45F0   		movl	-16(%rbp), %eax
 4635 304f 8D14C500 		leal	0(,%rax,8), %edx
 4635      000000
 4636 3056 8B45F4   		movl	-12(%rbp), %eax
 4637 3059 01D0     		addl	%edx, %eax
 4638 305b 4863D0   		movslq	%eax, %rdx
 4639 305e 488B45F8 		movq	-8(%rbp), %rax
 4640 3062 4801C2   		addq	%rax, %rdx
 4641 3065 488B0D00 		movq	ack2(%rip), %rcx
 4641      000000
 4642 306c 8B45F0   		movl	-16(%rbp), %eax
 4643 306f C1E003   		sall	$3, %eax
 4644 3072 83C007   		addl	$7, %eax
 4645 3075 2B45F4   		subl	-12(%rbp), %eax
 4646 3078 4898     		cltq
 4647 307a 4801C8   		addq	%rcx, %rax
 4648 307d 0FB600   		movzbl	(%rax), %eax
 4649 3080 8802     		movb	%al, (%rdx)
 882:main.c        ****             for(int j= 0; j<8; j++)
 4650              		.loc 1 882 0 discriminator 3
 4651 3082 8345F401 		addl	$1, -12(%rbp)
 4652              	.L269:
 882:main.c        ****             for(int j= 0; j<8; j++)
 4653              		.loc 1 882 0 is_stmt 0 discriminator 1
 4654 3086 837DF407 		cmpl	$7, -12(%rbp)
 4655 308a 7EC0     		jle	.L270
 4656              	.LBE52:
 881:main.c        ****         for(int i=0; i< 4; i++)
 4657              		.loc 1 881 0 is_stmt 1 discriminator 2
 4658 308c 8345F001 		addl	$1, -16(%rbp)
 4659              	.L268:
 881:main.c        ****         for(int i=0; i< 4; i++)
 4660              		.loc 1 881 0 is_stmt 0 discriminator 1
 4661 3090 837DF003 		cmpl	$3, -16(%rbp)
 4662 3094 7EAD     		jle	.L271
 4663              	.LBE51:
 884:main.c        ****         byte_reversed[32] = '\0';
 4664              		.loc 1 884 0 is_stmt 1
 4665 3096 488B45F8 		movq	-8(%rbp), %rax
 4666 309a 4883C020 		addq	$32, %rax
 4667 309e C60000   		movb	$0, (%rax)
 885:main.c        **** 		char write_status=write_4byte_to_board(chan,byte_reversed,handle,error,timeout); 
 4668              		.loc 1 885 0
 4669 30a1 8B7DD8   		movl	-40(%rbp), %edi
 4670 30a4 488B4DC8 		movq	-56(%rbp), %rcx
 4671 30a8 488B55D0 		movq	-48(%rbp), %rdx
 4672 30ac 488B75F8 		movq	-8(%rbp), %rsi
 4673 30b0 8B45DC   		movl	-36(%rbp), %eax
 4674 30b3 4189F8   		movl	%edi, %r8d
 4675 30b6 89C7     		movl	%eax, %edi
 4676 30b8 E8000000 		call	write_4byte_to_board
 4676      00
 4677 30bd 8845EF   		movb	%al, -17(%rbp)
 886:main.c        **** 		return write_status; 
 4678              		.loc 1 886 0
 4679 30c0 0FB645EF 		movzbl	-17(%rbp), %eax
 887:main.c        **** 
 888:main.c        **** }
 4680              		.loc 1 888 0
 4681 30c4 C9       		leave
 4682              		.cfi_def_cfa 7, 8
 4683 30c5 C3       		ret
 4684              		.cfi_endproc
 4685              	.LFE23:
 4687              		.globl	wtt
 4689              	wtt:
 4690              	.LFB24:
 889:main.c        **** 
 890:main.c        **** 		
 891:main.c        **** 
 892:main.c        **** void wtt(){
 4691              		.loc 1 892 0
 4692              		.cfi_startproc
 4693 30c6 55       		pushq	%rbp
 4694              		.cfi_def_cfa_offset 16
 4695              		.cfi_offset 6, -16
 4696 30c7 4889E5   		movq	%rsp, %rbp
 4697              		.cfi_def_cfa_register 6
 893:main.c        **** //    int n=1000000000; 
 894:main.c        **** //    int yyy=0; 
 895:main.c        **** //    for(int i=0; i<n; i++) yyy++; 
 896:main.c        **** //    for(int i=0; i<n; i++) yyy++; 
 897:main.c        **** //    for(int i=0; i<n; i++) yyy++; 
 898:main.c        **** //    for(int i=0; i<n; i++) yyy++; 
 899:main.c        ****     usleep(100000); 
 4698              		.loc 1 899 0
 4699 30ca BFA08601 		movl	$100000, %edi
 4699      00
 4700 30cf B8000000 		movl	$0, %eax
 4700      00
 4701 30d4 E8000000 		call	usleep
 4701      00
 900:main.c        **** }
 4702              		.loc 1 900 0
 4703 30d9 90       		nop
 4704 30da 5D       		popq	%rbp
 4705              		.cfi_def_cfa 7, 8
 4706 30db C3       		ret
 4707              		.cfi_endproc
 4708              	.LFE24:
 4710              		.section	.rodata
 4711 0327 00       		.align 8
 4712              	.LC47:
 4713 0328 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 4713      20202020 
 4713      20202020 
 4713      76656E64 
 4713      6F722049 
 4714              	.LC48:
 4715 035d 3C564944 		.string	"<VID:PID>"
 4715      3A504944 
 4715      3E00
 4716              	.LC49:
 4717 0367 69767000 		.string	"ivp"
 4718              	.LC50:
 4719 036b 6900     		.string	"i"
 4720 036d 000000   		.align 8
 4721              	.LC51:
 4722 0370 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 4722      20202056 
 4722      49442C20 
 4722      50494420 
 4722      616E6420 
 4723              	.LC52:
 4724 03a5 3C564944 		.string	"<VID:PID[:DID]>"
 4724      3A504944 
 4724      5B3A4449 
 4724      445D3E00 
 4725              	.LC53:
 4726 03b5 767000   		.string	"vp"
 4727              	.LC54:
 4728 03b8 7600     		.string	"v"
 4729 03ba 00000000 		.align 8
 4729      0000
 4730              	.LC55:
 4731 03c0 20202020 		.string	"       For running the program and giving the input file address"
 4731      20202046 
 4731      6F722072 
 4731      756E6E69 
 4731      6E672074 
 4732              	.LC56:
 4733 0401 3C46696C 		.string	"<File>"
 4733      653E00
 4734              	.LC57:
 4735 0408 727000   		.string	"rp"
 4736 040b 00000000 		.align 8
 4736      00
 4737              	.LC58:
 4738 0410 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 4738      20202020 
 4738      6669726D 
 4738      77617265 
 4738      20746F20 
 4739              	.LC59:
 4740 043d 3C666972 		.string	"<firmware.hex>"
 4740      6D776172 
 4740      652E6865 
 4740      783E00
 4741              	.LC60:
 4742 044c 667700   		.string	"fw"
 4743              	.LC61:
 4744 044f 6600     		.string	"f"
 4745 0451 00000000 		.align 8
 4745      000000
 4746              	.LC62:
 4747 0458 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 4747      642F7772 
 4747      69746520 
 4747      64696769 
 4747      74616C20 
 4748              	.LC63:
 4749 0485 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 4749      4366675B 
 4749      2C626974 
 4749      4366675D 
 4749      2A3E00
 4750              	.LC64:
 4751 0498 706F7274 		.string	"ports"
 4751      7300
 4752              	.LC65:
 4753 049e 6400     		.string	"d"
 4754              	.LC66:
 4755 04a0 20202020 		.string	"         query the JTAG chain"
 4755      20202020 
 4755      20717565 
 4755      72792074 
 4755      6865204A 
 4756              	.LC67:
 4757 04be 3C6A7461 		.string	"<jtagBits>"
 4757      67426974 
 4757      733E00
 4758              	.LC68:
 4759 04c9 71756572 		.string	"query"
 4759      7900
 4760              	.LC69:
 4761 04cf 7100     		.string	"q"
 4762              	.LC70:
 4763 04d1 20202020 		.string	"         program a device"
 4763      20202020 
 4763      2070726F 
 4763      6772616D 
 4763      20612064 
 4764              	.LC71:
 4765 04eb 3C636F6E 		.string	"<config>"
 4765      6669673E 
 4765      00
 4766              	.LC72:
 4767 04f4 70726F67 		.string	"program"
 4767      72616D00 
 4768              	.LC73:
 4769 04fc 7000     		.string	"p"
 4770 04fe 0000     		.align 8
 4771              	.LC74:
 4772 0500 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 4772      20202020 
 4772      77686963 
 4772      6820636F 
 4772      6D6D2063 
 4773              	.LC75:
 4774 0534 3C636F6E 		.string	"<conduit>"
 4774      64756974 
 4774      3E00
 4775              	.LC76:
 4776 053e 636F6E64 		.string	"conduit"
 4776      75697400 
 4777              	.LC77:
 4778 0546 6300     		.string	"c"
 4779              		.align 8
 4780              	.LC78:
 4781 0548 20202020 		.string	"    a series of CommFPGA actions"
 4781      61207365 
 4781      72696573 
 4781      206F6620 
 4781      436F6D6D 
 4782              	.LC79:
 4783 0569 3C616374 		.string	"<actionString>"
 4783      696F6E53 
 4783      7472696E 
 4783      673E00
 4784              	.LC80:
 4785 0578 61637469 		.string	"action"
 4785      6F6E00
 4786              	.LC81:
 4787 057f 6100     		.string	"a"
 4788 0581 00000000 		.align 8
 4788      000000
 4789              	.LC82:
 4790 0588 20202020 		.string	"                    start up an interactive CommFPGA session"
 4790      20202020 
 4790      20202020 
 4790      20202020 
 4790      20202020 
 4791              	.LC83:
 4792 05c5 7368656C 		.string	"shell"
 4792      6C00
 4793              	.LC84:
 4794 05cb 7300     		.string	"s"
 4795 05cd 000000   		.align 8
 4796              	.LC85:
 4797 05d0 20202020 		.string	"                enable benchmarking & checksumming"
 4797      20202020 
 4797      20202020 
 4797      20202020 
 4797      656E6162 
 4798              	.LC86:
 4799 0603 62656E63 		.string	"benchmark"
 4799      686D6172 
 4799      6B00
 4800              	.LC87:
 4801 060d 6200     		.string	"b"
 4802 060f 00       		.align 8
 4803              	.LC88:
 4804 0610 20202020 		.string	"                    reset the bulk endpoints"
 4804      20202020 
 4804      20202020 
 4804      20202020 
 4804      20202020 
 4805              	.LC89:
 4806 063d 72657365 		.string	"reset"
 4806      7400
 4807 0643 00000000 		.align 8
 4807      00
 4808              	.LC90:
 4809 0648 20202077 		.string	"   write data from channel ch to file"
 4809      72697465 
 4809      20646174 
 4809      61206672 
 4809      6F6D2063 
 4810              	.LC91:
 4811 066e 3C63683A 		.string	"<ch:file.bin>"
 4811      66696C65 
 4811      2E62696E 
 4811      3E00
 4812              	.LC92:
 4813 067c 64756D70 		.string	"dumploop"
 4813      6C6F6F70 
 4813      00
 4814              	.LC93:
 4815 0685 6C00     		.string	"l"
 4816 0687 00       		.align 8
 4817              	.LC94:
 4818 0688 20202020 		.string	"                     print this help and exit"
 4818      20202020 
 4818      20202020 
 4818      20202020 
 4818      20202020 
 4819              	.LC95:
 4820 06b6 68656C70 		.string	"help"
 4820      00
 4821              	.LC96:
 4822 06bb 6800     		.string	"h"
 4823 06bd 000000   		.align 8
 4824              	.LC97:
 4825 06c0 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 4825      72697465 
 4825      20666972 
 4825      6D776172 
 4825      6520746F 
 4826              	.LC98:
 4827 06e7 3C737464 		.string	"<std|fw.hex|fw.iic>"
 4827      7C66772E 
 4827      6865787C 
 4827      66772E69 
 4827      69633E00 
 4828              	.LC99:
 4829 06fb 65657072 		.string	"eeprom"
 4829      6F6D00
 4830 0702 00000000 		.align 8
 4830      0000
 4831              	.LC100:
 4832 0708 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 4832      20626163 
 4832      6B757020 
 4832      46583227 
 4832      73204545 
 4833              	.LC101:
 4834 0733 3C6B6269 		.string	"<kbitSize:fw.iic>"
 4834      7453697A 
 4834      653A6677 
 4834      2E696963 
 4834      3E00
 4835              	.LC102:
 4836 0745 6261636B 		.string	"backup"
 4836      757000
 4837              	.LC103:
 4838 074c 666C636C 		.string	"flcli"
 4838      6900
 4839              	.LC104:
 4840 0752 25733A20 		.string	"%s: insufficient memory\n"
 4840      696E7375 
 4840      66666963 
 4840      69656E74 
 4840      206D656D 
 4841 076b 00000000 		.align 8
 4841      00
 4842              	.LC105:
 4843 0770 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 4843      4C696E6B 
 4843      20436F6D 
 4843      6D616E64 
 4843      2D4C696E 
 4844              	.LC106:
 4845 07c4 0A00     		.string	"\n"
 4846 07c6 0000     		.align 8
 4847              	.LC107:
 4848 07c8 0A496E74 		.string	"\nInteract with an FPGALink device.\n"
 4848      65726163 
 4848      74207769 
 4848      74682061 
 4848      6E204650 
 4849              	.LC108:
 4850 07ec 2020252D 		.string	"  %-10s %s\n"
 4850      31307320 
 4850      25730A00 
 4851              		.align 8
 4852              	.LC109:
 4853 07f8 54727920 		.string	"Try '%s --help' for more information.\n"
 4853      27257320 
 4853      2D2D6865 
 4853      6C702720 
 4853      666F7220 
 4854 081f 00       		.align 8
 4855              	.LC110:
 4856 0820 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 4856      6D707469 
 4856      6E672074 
 4856      6F206F70 
 4856      656E2063 
 4857              	.LC111:
 4858 0858 4C6F6164 		.string	"Loading firmware into %s...\n"
 4858      696E6720 
 4858      6669726D 
 4858      77617265 
 4858      20696E74 
 4859              	.LC112:
 4860 0875 41776169 		.string	"Awaiting renumeration"
 4860      74696E67 
 4860      2072656E 
 4860      756D6572 
 4860      6174696F 
 4861 088b 00000000 		.align 8
 4861      00
 4862              	.LC113:
 4863 0890 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 4863      4C696E6B 
 4863      20646576 
 4863      69636520 
 4863      64696420 
 4864 08c3 00000000 		.align 8
 4864      00
 4865              	.LC114:
 4866 08c8 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 4866      6D707469 
 4866      6E672074 
 4866      6F206F70 
 4866      656E2063 
 4867 0905 000000   		.align 8
 4868              	.LC115:
 4869 0908 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 4869      64206E6F 
 4869      74206F70 
 4869      656E2046 
 4869      5047414C 
 4870 0952 00000000 		.align 8
 4870      0000
 4871              	.LC116:
 4872 0958 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 4872      65637465 
 4872      6420746F 
 4872      20465047 
 4872      414C696E 
 4873              	.LC117:
 4874 09a7 73746400 		.string	"std"
 4875 09ab 00000000 		.align 8
 4875      00
 4876              	.LC118:
 4877 09b0 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM..."
 4877      696E6720 
 4877      74686520 
 4877      7374616E 
 4877      64617264 
 4878 09ee 0000     		.align 8
 4879              	.LC119:
 4880 09f0 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 4880      696E6720 
 4880      63757374 
 4880      6F6D2046 
 4880      5047414C 
 4881 0a31 00000000 		.align 8
 4881      000000
 4882              	.LC120:
 4883 0a38 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 4883      696E7661 
 4883      6C696420 
 4883      61726775 
 4883      6D656E74 
 4884 0a73 00000000 		.align 8
 4884      00
 4885              	.LC121:
 4886 0a78 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 4886      6E672061 
 4886      20626163 
 4886      6B757020 
 4886      6F662025 
 4887              	.LC122:
 4888 0ab3 436F6E66 		.string	"Configuring ports..."
 4888      69677572 
 4888      696E6720 
 4888      706F7274 
 4888      732E2E2E 
 4889              	.LC123:
 4890 0ac8 25303858 		.string	"%08X"
 4890      00
 4891 0acd 000000   		.align 8
 4892              	.LC124:
 4893 0ad0 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 4893      6261636B 
 4893      3A202020 
 4893      32382020 
 4893      20323420 
 4894              	.LC125:
 4895 0b10 20257300 		.string	" %s"
 4896              	.LC126:
 4897 0b14 20202573 		.string	"  %s"
 4897      00
 4898              	.LC127:
 4899 0b19 2025730A 		.string	" %s\n"
 4899      00
 4900 0b1e 0000     		.align 8
 4901              	.LC128:
 4902 0b20 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 4902      46504741 
 4902      4C696E6B 
 4902      20646576 
 4902      69636520 
 4903              	.LC129:
 4904 0b5d 20203078 		.string	"  0x%08X\n"
 4904      25303858 
 4904      0A00
 4905 0b67 00       		.align 8
 4906              	.LC130:
 4907 0b68 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 4907      46504741 
 4907      4C696E6B 
 4907      20646576 
 4907      69636520 
 4908              		.align 8
 4909              	.LC131:
 4910 0bc0 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 4910      20636861 
 4910      696E2073 
 4910      63616E20 
 4910      72657175 
 4911              	.LC132:
 4912 0c0f 50726F67 		.string	"Programming device..."
 4912      72616D6D 
 4912      696E6720 
 4912      64657669 
 4912      63652E2E 
 4913 0c25 000000   		.align 8
 4914              	.LC133:
 4915 0c28 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 4915      72616D20 
 4915      6F706572 
 4915      6174696F 
 4915      6E207265 
 4916              		.align 8
 4917              	.LC134:
 4918 0c70 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 4918      7574696E 
 4918      6720436F 
 4918      6D6D4650 
 4918      47412061 
 4919 0ca5 000000   		.align 8
 4920              	.LC135:
 4921 0ca8 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 4921      46504741 
 4921      4C696E6B 
 4921      20646576 
 4921      69636520 
 4922 0cf4 00000000 		.align 8
 4923              	.LC136:
 4924 0cf8 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 4924      6F6E2072 
 4924      65717565 
 4924      73746564 
 4924      20627574 
 4925 0d35 000000   		.align 8
 4926              	.LC137:
 4927 0d38 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 4927      696E7661 
 4927      6C696420 
 4927      61726775 
 4927      6D656E74 
 4928 0d74 00000000 		.align 8
 4929              	.LC138:
 4930 0d78 436F7079 		.string	"Copying from channel %lu to %s"
 4930      696E6720 
 4930      66726F6D 
 4930      20636861 
 4930      6E6E656C 
 4931              	.LC139:
 4932 0d97 0A436175 		.string	"\nCaught SIGINT, quitting..."
 4932      67687420 
 4932      53494749 
 4932      4E542C20 
 4932      71756974 
 4933              	.LC140:
 4934 0db3 25642C20 		.string	"%d, %d, %d, %d, %d\n"
 4934      25642C20 
 4934      25642C20 
 4934      25642C20 
 4934      25640A00 
 4935 0dc7 00       		.align 8
 4936              	.LC141:
 4937 0dc8 61747465 		.string	"attempting to read coordinates from  channel %d\n"
 4937      6D707469 
 4937      6E672074 
 4937      6F207265 
 4937      61642063 
 4938 0df9 00000000 		.align 8
 4938      000000
 4939              	.LC142:
 4940 0e00 72656420 		.string	"red coordinates %s from channel %d\n"
 4940      636F6F72 
 4940      64696E61 
 4940      74657320 
 4940      25732066 
 4941              	.LC143:
 4942 0e24 6661696C 		.string	"failed to coordinates"
 4942      65642074 
 4942      6F20636F 
 4942      6F726469 
 4942      6E617465 
 4943 0e3a 00000000 		.align 8
 4943      0000
 4944              	.LC144:
 4945 0e40 61747465 		.string	"attempting to write coordinates at channel %d\n"
 4945      6D707469 
 4945      6E672074 
 4945      6F207772 
 4945      69746520 
 4946 0e6f 00       		.align 8
 4947              	.LC145:
 4948 0e70 77726974 		.string	"write failed , continuing for next channel"
 4948      65206661 
 4948      696C6564 
 4948      202C2063 
 4948      6F6E7469 
 4949              	.LC146:
 4950 0e9b 61747465 		.string	"attempting to receive ack"
 4950      6D707469 
 4950      6E672074 
 4950      6F207265 
 4950      63656976 
 4951 0eb5 000000   		.align 8
 4952              	.LC147:
 4953 0eb8 66697273 		.string	"first ack was incorrect , attempting after 5 seconds"
 4953      74206163 
 4953      6B207761 
 4953      7320696E 
 4953      636F7272 
 4954 0eed 000000   		.align 8
 4955              	.LC148:
 4956 0ef0 61747465 		.string	"attempting to receive ack for second time"
 4956      6D707469 
 4956      6E672074 
 4956      6F207265 
 4956      63656976 
 4957              	.LC149:
 4958 0f1a 7365636F 		.string	"second ack was also incorect"
 4958      6E642061 
 4958      636B2077 
 4958      61732061 
 4958      6C736F20 
 4959 0f37 00       		.align 8
 4960              	.LC150:
 4961 0f38 72656365 		.string	"received coordinates correctly and now breaking out of this for loop "
 4961      69766564 
 4961      20636F6F 
 4961      7264696E 
 4961      61746573 
 4962 0f7e 0000     		.align 8
 4963              	.LC151:
 4964 0f80 7820636F 		.string	"x coordinate is %d and y coordinate is %d\n"
 4964      6F726469 
 4964      6E617465 
 4964      20697320 
 4964      25642061 
 4965              	.LC152:
 4966 0fab 74726163 		.string	"track data is %s\n"
 4966      6B206461 
 4966      74612069 
 4966      73202573 
 4966      0A00
 4967 0fbd 000000   		.align 8
 4968              	.LC153:
 4969 0fc0 0A456E74 		.string	"\nEntering CommFPGA command-line mode:"
 4969      6572696E 
 4969      6720436F 
 4969      6D6D4650 
 4969      47412063 
 4970              	.LC154:
 4971 0fe6 3E2000   		.string	"> "
 4972 0fe9 00000000 		.align 8
 4972      000000
 4973              	.LC155:
 4974 0ff0 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 4974      46504741 
 4974      4C696E6B 
 4974      20646576 
 4974      69636520 
 4975 1039 00000000 		.align 8
 4975      000000
 4976              	.LC156:
 4977 1040 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 4977      6C207265 
 4977      71756573 
 4977      74656420 
 4977      62757420 
 4978              	.LC157:
 4979 107c 25730A00 		.string	"%s\n"
 4980              		.text
 4981              		.globl	main
 4983              	main:
 4984              	.LFB25:
 901:main.c        **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 902:main.c        **** 	
 903:main.c        **** int main(int argc, char *argv[]) {
 4985              		.loc 1 903 0
 4986              		.cfi_startproc
 4987 30dc 55       		pushq	%rbp
 4988              		.cfi_def_cfa_offset 16
 4989              		.cfi_offset 6, -16
 4990 30dd 4889E5   		movq	%rsp, %rbp
 4991              		.cfi_def_cfa_register 6
 4992 30e0 53       		pushq	%rbx
 4993 30e1 4881EC88 		subq	$13960, %rsp
 4993      360000
 4994              		.cfi_offset 3, -24
 4995 30e8 89BD7CC9 		movl	%edi, -13956(%rbp)
 4995      FFFF
 4996 30ee 4889B570 		movq	%rsi, -13968(%rbp)
 4996      C9FFFF
 4997              		.loc 1 903 0
 4998 30f5 64488B04 		movq	%fs:40, %rax
 4998      25280000 
 4998      00
 4999 30fe 488945E8 		movq	%rax, -24(%rbp)
 5000 3102 31C0     		xorl	%eax, %eax
 904:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, pStatus;
 5001              		.loc 1 904 0
 5002 3104 C78598C9 		movl	$0, -13928(%rbp)
 5002      FFFF0000 
 5002      0000
 905:main.c        **** 	struct arg_str *ivpOpt = arg_str0("i", "ivp", "<VID:PID>", "            vendor ID and product ID (
 5003              		.loc 1 905 0
 5004 310e B9000000 		movl	$.LC47, %ecx
 5004      00
 5005 3113 BA000000 		movl	$.LC48, %edx
 5005      00
 5006 3118 BE000000 		movl	$.LC49, %esi
 5006      00
 5007 311d BF000000 		movl	$.LC50, %edi
 5007      00
 5008 3122 E8000000 		call	arg_str0
 5008      00
 5009 3127 48898500 		movq	%rax, -13824(%rbp)
 5009      CAFFFF
 906:main.c        **** 	struct arg_str *vpOpt = arg_str1("v", "vp", "<VID:PID[:DID]>", "       VID, PID and opt. dev ID (e
 5010              		.loc 1 906 0
 5011 312e B9000000 		movl	$.LC51, %ecx
 5011      00
 5012 3133 BA000000 		movl	$.LC52, %edx
 5012      00
 5013 3138 BE000000 		movl	$.LC53, %esi
 5013      00
 5014 313d BF000000 		movl	$.LC54, %edi
 5014      00
 5015 3142 E8000000 		call	arg_str1
 5015      00
 5016 3147 48898508 		movq	%rax, -13816(%rbp)
 5016      CAFFFF
 907:main.c        **** 	struct arg_str *rpOpt = arg_str0("r", "rp", "<File>", "       For running the program and giving t
 5017              		.loc 1 907 0
 5018 314e B9000000 		movl	$.LC55, %ecx
 5018      00
 5019 3153 BA000000 		movl	$.LC56, %edx
 5019      00
 5020 3158 BE000000 		movl	$.LC57, %esi
 5020      00
 5021 315d BF000000 		movl	$.LC43, %edi
 5021      00
 5022 3162 E8000000 		call	arg_str0
 5022      00
 5023 3167 48898510 		movq	%rax, -13808(%rbp)
 5023      CAFFFF
 908:main.c        **** 	struct arg_str *fwOpt = arg_str0("f", "fw", "<firmware.hex>", "        firmware to RAM-load (or us
 5024              		.loc 1 908 0
 5025 316e B9000000 		movl	$.LC58, %ecx
 5025      00
 5026 3173 BA000000 		movl	$.LC59, %edx
 5026      00
 5027 3178 BE000000 		movl	$.LC60, %esi
 5027      00
 5028 317d BF000000 		movl	$.LC61, %edi
 5028      00
 5029 3182 E8000000 		call	arg_str0
 5029      00
 5030 3187 48898518 		movq	%rax, -13800(%rbp)
 5030      CAFFFF
 909:main.c        **** 	struct arg_str *portOpt = arg_str0("d", "ports", "<bitCfg[,bitCfg]*>", " read/write digital ports 
 5031              		.loc 1 909 0
 5032 318e B9000000 		movl	$.LC62, %ecx
 5032      00
 5033 3193 BA000000 		movl	$.LC63, %edx
 5033      00
 5034 3198 BE000000 		movl	$.LC64, %esi
 5034      00
 5035 319d BF000000 		movl	$.LC65, %edi
 5035      00
 5036 31a2 E8000000 		call	arg_str0
 5036      00
 5037 31a7 48898520 		movq	%rax, -13792(%rbp)
 5037      CAFFFF
 910:main.c        **** 	struct arg_str *queryOpt = arg_str0("q", "query", "<jtagBits>", "         query the JTAG chain");
 5038              		.loc 1 910 0
 5039 31ae B9000000 		movl	$.LC66, %ecx
 5039      00
 5040 31b3 BA000000 		movl	$.LC67, %edx
 5040      00
 5041 31b8 BE000000 		movl	$.LC68, %esi
 5041      00
 5042 31bd BF000000 		movl	$.LC69, %edi
 5042      00
 5043 31c2 E8000000 		call	arg_str0
 5043      00
 5044 31c7 48898528 		movq	%rax, -13784(%rbp)
 5044      CAFFFF
 911:main.c        **** 	struct arg_str *progOpt = arg_str0("p", "program", "<config>", "         program a device");
 5045              		.loc 1 911 0
 5046 31ce B9000000 		movl	$.LC70, %ecx
 5046      00
 5047 31d3 BA000000 		movl	$.LC71, %edx
 5047      00
 5048 31d8 BE000000 		movl	$.LC72, %esi
 5048      00
 5049 31dd BF000000 		movl	$.LC73, %edi
 5049      00
 5050 31e2 E8000000 		call	arg_str0
 5050      00
 5051 31e7 48898530 		movq	%rax, -13776(%rbp)
 5051      CAFFFF
 912:main.c        **** 	struct arg_uint *conOpt = arg_uint0("c", "conduit", "<conduit>", "        which comm conduit to ch
 5052              		.loc 1 912 0
 5053 31ee B9000000 		movl	$.LC74, %ecx
 5053      00
 5054 31f3 BA000000 		movl	$.LC75, %edx
 5054      00
 5055 31f8 BE000000 		movl	$.LC76, %esi
 5055      00
 5056 31fd BF000000 		movl	$.LC77, %edi
 5056      00
 5057 3202 E8000000 		call	arg_uint0
 5057      00
 5058 3207 48898538 		movq	%rax, -13768(%rbp)
 5058      CAFFFF
 913:main.c        **** 	struct arg_str *actOpt = arg_str0("a", "action", "<actionString>", "    a series of CommFPGA actio
 5059              		.loc 1 913 0
 5060 320e B9000000 		movl	$.LC78, %ecx
 5060      00
 5061 3213 BA000000 		movl	$.LC79, %edx
 5061      00
 5062 3218 BE000000 		movl	$.LC80, %esi
 5062      00
 5063 321d BF000000 		movl	$.LC81, %edi
 5063      00
 5064 3222 E8000000 		call	arg_str0
 5064      00
 5065 3227 48898540 		movq	%rax, -13760(%rbp)
 5065      CAFFFF
 914:main.c        **** 	struct arg_lit *shellOpt  = arg_lit0("s", "shell", "                    start up an interactive Co
 5066              		.loc 1 914 0
 5067 322e BA000000 		movl	$.LC82, %edx
 5067      00
 5068 3233 BE000000 		movl	$.LC83, %esi
 5068      00
 5069 3238 BF000000 		movl	$.LC84, %edi
 5069      00
 5070 323d E8000000 		call	arg_lit0
 5070      00
 5071 3242 48898548 		movq	%rax, -13752(%rbp)
 5071      CAFFFF
 915:main.c        **** 	struct arg_lit *benOpt  = arg_lit0("b", "benchmark", "                enable benchmarking & checks
 5072              		.loc 1 915 0
 5073 3249 BA000000 		movl	$.LC85, %edx
 5073      00
 5074 324e BE000000 		movl	$.LC86, %esi
 5074      00
 5075 3253 BF000000 		movl	$.LC87, %edi
 5075      00
 5076 3258 E8000000 		call	arg_lit0
 5076      00
 5077 325d 48898550 		movq	%rax, -13744(%rbp)
 5077      CAFFFF
 916:main.c        **** 	struct arg_lit *rstOpt  = arg_lit0("r", "reset", "                    reset the bulk endpoints");
 5078              		.loc 1 916 0
 5079 3264 BA000000 		movl	$.LC88, %edx
 5079      00
 5080 3269 BE000000 		movl	$.LC89, %esi
 5080      00
 5081 326e BF000000 		movl	$.LC43, %edi
 5081      00
 5082 3273 E8000000 		call	arg_lit0
 5082      00
 5083 3278 48898558 		movq	%rax, -13736(%rbp)
 5083      CAFFFF
 917:main.c        **** 	struct arg_str *dumpOpt = arg_str0("l", "dumploop", "<ch:file.bin>", "   write data from channel c
 5084              		.loc 1 917 0
 5085 327f B9000000 		movl	$.LC90, %ecx
 5085      00
 5086 3284 BA000000 		movl	$.LC91, %edx
 5086      00
 5087 3289 BE000000 		movl	$.LC92, %esi
 5087      00
 5088 328e BF000000 		movl	$.LC93, %edi
 5088      00
 5089 3293 E8000000 		call	arg_str0
 5089      00
 5090 3298 48898560 		movq	%rax, -13728(%rbp)
 5090      CAFFFF
 918:main.c        **** 	struct arg_lit *helpOpt  = arg_lit0("h", "help", "                     print this help and exit");
 5091              		.loc 1 918 0
 5092 329f BA000000 		movl	$.LC94, %edx
 5092      00
 5093 32a4 BE000000 		movl	$.LC95, %esi
 5093      00
 5094 32a9 BF000000 		movl	$.LC96, %edi
 5094      00
 5095 32ae E8000000 		call	arg_lit0
 5095      00
 5096 32b3 48898568 		movq	%rax, -13720(%rbp)
 5096      CAFFFF
 919:main.c        **** 	struct arg_str *eepromOpt  = arg_str0(NULL, "eeprom", "<std|fw.hex|fw.iic>", "   write firmware to
 5097              		.loc 1 919 0
 5098 32ba B9000000 		movl	$.LC97, %ecx
 5098      00
 5099 32bf BA000000 		movl	$.LC98, %edx
 5099      00
 5100 32c4 BE000000 		movl	$.LC99, %esi
 5100      00
 5101 32c9 BF000000 		movl	$0, %edi
 5101      00
 5102 32ce E8000000 		call	arg_str0
 5102      00
 5103 32d3 48898570 		movq	%rax, -13712(%rbp)
 5103      CAFFFF
 920:main.c        **** 	struct arg_str *backupOpt  = arg_str0(NULL, "backup", "<kbitSize:fw.iic>", "     backup FX2's EEPR
 5104              		.loc 1 920 0
 5105 32da B9000000 		movl	$.LC100, %ecx
 5105      00
 5106 32df BA000000 		movl	$.LC101, %edx
 5106      00
 5107 32e4 BE000000 		movl	$.LC102, %esi
 5107      00
 5108 32e9 BF000000 		movl	$0, %edi
 5108      00
 5109 32ee E8000000 		call	arg_str0
 5109      00
 5110 32f3 48898578 		movq	%rax, -13704(%rbp)
 5110      CAFFFF
 921:main.c        **** 	struct arg_end *endOpt   = arg_end(20);
 5111              		.loc 1 921 0
 5112 32fa BF140000 		movl	$20, %edi
 5112      00
 5113 32ff E8000000 		call	arg_end
 5113      00
 5114 3304 48898580 		movq	%rax, -13696(%rbp)
 5114      CAFFFF
 922:main.c        **** 	void *argTable[] = {
 5115              		.loc 1 922 0
 5116 330b 488B8500 		movq	-13824(%rbp), %rax
 5116      CAFFFF
 5117 3312 48898520 		movq	%rax, -13536(%rbp)
 5117      CBFFFF
 5118 3319 488B8508 		movq	-13816(%rbp), %rax
 5118      CAFFFF
 5119 3320 48898528 		movq	%rax, -13528(%rbp)
 5119      CBFFFF
 5120 3327 488B8510 		movq	-13808(%rbp), %rax
 5120      CAFFFF
 5121 332e 48898530 		movq	%rax, -13520(%rbp)
 5121      CBFFFF
 5122 3335 488B8518 		movq	-13800(%rbp), %rax
 5122      CAFFFF
 5123 333c 48898538 		movq	%rax, -13512(%rbp)
 5123      CBFFFF
 5124 3343 488B8520 		movq	-13792(%rbp), %rax
 5124      CAFFFF
 5125 334a 48898540 		movq	%rax, -13504(%rbp)
 5125      CBFFFF
 5126 3351 488B8528 		movq	-13784(%rbp), %rax
 5126      CAFFFF
 5127 3358 48898548 		movq	%rax, -13496(%rbp)
 5127      CBFFFF
 5128 335f 488B8530 		movq	-13776(%rbp), %rax
 5128      CAFFFF
 5129 3366 48898550 		movq	%rax, -13488(%rbp)
 5129      CBFFFF
 5130 336d 488B8538 		movq	-13768(%rbp), %rax
 5130      CAFFFF
 5131 3374 48898558 		movq	%rax, -13480(%rbp)
 5131      CBFFFF
 5132 337b 488B8540 		movq	-13760(%rbp), %rax
 5132      CAFFFF
 5133 3382 48898560 		movq	%rax, -13472(%rbp)
 5133      CBFFFF
 5134 3389 488B8548 		movq	-13752(%rbp), %rax
 5134      CAFFFF
 5135 3390 48898568 		movq	%rax, -13464(%rbp)
 5135      CBFFFF
 5136 3397 488B8550 		movq	-13744(%rbp), %rax
 5136      CAFFFF
 5137 339e 48898570 		movq	%rax, -13456(%rbp)
 5137      CBFFFF
 5138 33a5 488B8558 		movq	-13736(%rbp), %rax
 5138      CAFFFF
 5139 33ac 48898578 		movq	%rax, -13448(%rbp)
 5139      CBFFFF
 5140 33b3 488B8560 		movq	-13728(%rbp), %rax
 5140      CAFFFF
 5141 33ba 48898580 		movq	%rax, -13440(%rbp)
 5141      CBFFFF
 5142 33c1 488B8568 		movq	-13720(%rbp), %rax
 5142      CAFFFF
 5143 33c8 48898588 		movq	%rax, -13432(%rbp)
 5143      CBFFFF
 5144 33cf 488B8570 		movq	-13712(%rbp), %rax
 5144      CAFFFF
 5145 33d6 48898590 		movq	%rax, -13424(%rbp)
 5145      CBFFFF
 5146 33dd 488B8578 		movq	-13704(%rbp), %rax
 5146      CAFFFF
 5147 33e4 48898598 		movq	%rax, -13416(%rbp)
 5147      CBFFFF
 5148 33eb 488B8580 		movq	-13696(%rbp), %rax
 5148      CAFFFF
 5149 33f2 488985A0 		movq	%rax, -13408(%rbp)
 5149      CBFFFF
 923:main.c        **** 		ivpOpt, vpOpt, rpOpt, fwOpt, portOpt, queryOpt, progOpt, conOpt, actOpt,
 924:main.c        **** 		shellOpt, benOpt, rstOpt, dumpOpt, helpOpt, eepromOpt, backupOpt, endOpt
 925:main.c        **** 	};
 926:main.c        **** 	const char *progName = "flcli";
 5150              		.loc 1 926 0
 5151 33f9 48C78588 		movq	$.LC103, -13688(%rbp)
 5151      CAFFFF00 
 5151      000000
 927:main.c        **** 	int numErrors;
 928:main.c        **** 	struct FLContext *handle = NULL;
 5152              		.loc 1 928 0
 5153 3404 48C785D8 		movq	$0, -13864(%rbp)
 5153      C9FFFF00 
 5153      000000
 929:main.c        **** 	FLStatus fStatus;
 930:main.c        **** 	const char *error = NULL;
 5154              		.loc 1 930 0
 5155 340f 48C785E0 		movq	$0, -13856(%rbp)
 5155      C9FFFF00 
 5155      000000
 931:main.c        **** 	const char *ivp = NULL;
 5156              		.loc 1 931 0
 5157 341a 48C78590 		movq	$0, -13680(%rbp)
 5157      CAFFFF00 
 5157      000000
 932:main.c        **** 	const char *vp = NULL;
 5158              		.loc 1 932 0
 5159 3425 48C78598 		movq	$0, -13672(%rbp)
 5159      CAFFFF00 
 5159      000000
 933:main.c        **** 	bool isNeroCapable, isCommCapable;
 934:main.c        **** 	uint32 numDevices, scanChain[16], i;
 935:main.c        **** 	const char *line = NULL;
 5160              		.loc 1 935 0
 5161 3430 48C785F8 		movq	$0, -13832(%rbp)
 5161      C9FFFF00 
 5161      000000
 936:main.c        **** 	uint8 conduit = 0x01;
 5162              		.loc 1 936 0
 5163 343b C6858CC9 		movb	$1, -13940(%rbp)
 5163      FFFF01
 937:main.c        **** 
 938:main.c        **** 	if ( arg_nullcheck(argTable) != 0 ) {
 5164              		.loc 1 938 0
 5165 3442 488D8520 		leaq	-13536(%rbp), %rax
 5165      CBFFFF
 5166 3449 4889C7   		movq	%rax, %rdi
 5167 344c E8000000 		call	arg_nullcheck
 5167      00
 5168 3451 85C0     		testl	%eax, %eax
 5169 3453 742F     		je	.L275
 939:main.c        **** 		fprintf(stderr, "%s: insufficient memory\n", progName);
 5170              		.loc 1 939 0
 5171 3455 488B0500 		movq	stderr(%rip), %rax
 5171      000000
 5172 345c 488B9588 		movq	-13688(%rbp), %rdx
 5172      CAFFFF
 5173 3463 BE000000 		movl	$.LC104, %esi
 5173      00
 5174 3468 4889C7   		movq	%rax, %rdi
 5175 346b B8000000 		movl	$0, %eax
 5175      00
 5176 3470 E8000000 		call	fprintf
 5176      00
 940:main.c        **** 		FAIL(1, cleanup);
 5177              		.loc 1 940 0
 5178 3475 C78598C9 		movl	$1, -13928(%rbp)
 5178      FFFF0100 
 5178      0000
 5179 347f E9041700 		jmp	.L276
 5179      00
 5180              	.L275:
 941:main.c        **** 	}
 942:main.c        **** 
 943:main.c        **** 	numErrors = arg_parse(argc, argv, argTable);
 5181              		.loc 1 943 0
 5182 3484 488D9520 		leaq	-13536(%rbp), %rdx
 5182      CBFFFF
 5183 348b 488B8D70 		movq	-13968(%rbp), %rcx
 5183      C9FFFF
 5184 3492 8B857CC9 		movl	-13956(%rbp), %eax
 5184      FFFF
 5185 3498 4889CE   		movq	%rcx, %rsi
 5186 349b 89C7     		movl	%eax, %edi
 5187 349d E8000000 		call	arg_parse
 5187      00
 5188 34a2 8985C0C9 		movl	%eax, -13888(%rbp)
 5188      FFFF
 944:main.c        **** /*
 945:main.c        ****     if( rpOpt->count )
 946:main.c        ****     {
 947:main.c        ****         printf("Got the file %s\n", rpOpt->sval[0]);
 948:main.c        **** 		FAIL(FLP_SUCCESS, cleanup);
 949:main.c        ****     }*/
 950:main.c        **** 
 951:main.c        **** 	if ( helpOpt->count > 0 ) {
 5189              		.loc 1 951 0
 5190 34a8 488B8568 		movq	-13720(%rbp), %rax
 5190      CAFFFF
 5191 34af 8B4060   		movl	96(%rax), %eax
 5192 34b2 85C0     		testl	%eax, %eax
 5193 34b4 7E6E     		jle	.L277
 952:main.c        **** 		printf("FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s", p
 5194              		.loc 1 952 0
 5195 34b6 488B8588 		movq	-13688(%rbp), %rax
 5195      CAFFFF
 5196 34bd 4889C6   		movq	%rax, %rsi
 5197 34c0 BF000000 		movl	$.LC105, %edi
 5197      00
 5198 34c5 B8000000 		movl	$0, %eax
 5198      00
 5199 34ca E8000000 		call	printf
 5199      00
 953:main.c        **** 		arg_print_syntax(stdout, argTable, "\n");
 5200              		.loc 1 953 0
 5201 34cf 488B0500 		movq	stdout(%rip), %rax
 5201      000000
 5202 34d6 488D8D20 		leaq	-13536(%rbp), %rcx
 5202      CBFFFF
 5203 34dd BA000000 		movl	$.LC106, %edx
 5203      00
 5204 34e2 4889CE   		movq	%rcx, %rsi
 5205 34e5 4889C7   		movq	%rax, %rdi
 5206 34e8 E8000000 		call	arg_print_syntax
 5206      00
 954:main.c        **** 		printf("\nInteract with an FPGALink device.\n\n");
 5207              		.loc 1 954 0
 5208 34ed BF000000 		movl	$.LC107, %edi
 5208      00
 5209 34f2 E8000000 		call	puts
 5209      00
 955:main.c        **** 		arg_print_glossary(stdout, argTable,"  %-10s %s\n");
 5210              		.loc 1 955 0
 5211 34f7 488B0500 		movq	stdout(%rip), %rax
 5211      000000
 5212 34fe 488D8D20 		leaq	-13536(%rbp), %rcx
 5212      CBFFFF
 5213 3505 BA000000 		movl	$.LC108, %edx
 5213      00
 5214 350a 4889CE   		movq	%rcx, %rsi
 5215 350d 4889C7   		movq	%rax, %rdi
 5216 3510 E8000000 		call	arg_print_glossary
 5216      00
 956:main.c        **** 		FAIL(FLP_SUCCESS, cleanup);
 5217              		.loc 1 956 0
 5218 3515 C78598C9 		movl	$0, -13928(%rbp)
 5218      FFFF0000 
 5218      0000
 5219 351f E9641600 		jmp	.L276
 5219      00
 5220              	.L277:
 957:main.c        **** 	}
 958:main.c        **** 
 959:main.c        **** 	if ( numErrors > 0 ) {
 5221              		.loc 1 959 0
 5222 3524 83BDC0C9 		cmpl	$0, -13888(%rbp)
 5222      FFFF00
 5223 352b 7E4F     		jle	.L278
 960:main.c        **** 		arg_print_errors(stdout, endOpt, progName);
 5224              		.loc 1 960 0
 5225 352d 488B0500 		movq	stdout(%rip), %rax
 5225      000000
 5226 3534 488B9588 		movq	-13688(%rbp), %rdx
 5226      CAFFFF
 5227 353b 488B8D80 		movq	-13696(%rbp), %rcx
 5227      CAFFFF
 5228 3542 4889CE   		movq	%rcx, %rsi
 5229 3545 4889C7   		movq	%rax, %rdi
 5230 3548 E8000000 		call	arg_print_errors
 5230      00
 961:main.c        **** 		fprintf(stderr, "Try '%s --help' for more information.\n", progName);
 5231              		.loc 1 961 0
 5232 354d 488B0500 		movq	stderr(%rip), %rax
 5232      000000
 5233 3554 488B9588 		movq	-13688(%rbp), %rdx
 5233      CAFFFF
 5234 355b BE000000 		movl	$.LC109, %esi
 5234      00
 5235 3560 4889C7   		movq	%rax, %rdi
 5236 3563 B8000000 		movl	$0, %eax
 5236      00
 5237 3568 E8000000 		call	fprintf
 5237      00
 962:main.c        **** 		FAIL(FLP_ARGS, cleanup);
 5238              		.loc 1 962 0
 5239 356d C78598C9 		movl	$12, -13928(%rbp)
 5239      FFFF0C00 
 5239      0000
 5240 3577 E90C1600 		jmp	.L276
 5240      00
 5241              	.L278:
 963:main.c        **** 	}
 964:main.c        **** 
 965:main.c        **** 	fStatus = flInitialise(0, &error);
 5242              		.loc 1 965 0
 5243 357c 488D85E0 		leaq	-13856(%rbp), %rax
 5243      C9FFFF
 5244 3583 4889C6   		movq	%rax, %rsi
 5245 3586 BF000000 		movl	$0, %edi
 5245      00
 5246 358b E8000000 		call	flInitialise
 5246      00
 5247 3590 89859CC9 		movl	%eax, -13924(%rbp)
 5247      FFFF
 966:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5248              		.loc 1 966 0
 5249 3596 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5249      FFFF00
 5250 359d 740F     		je	.L279
 5251              		.loc 1 966 0 is_stmt 0 discriminator 1
 5252 359f C78598C9 		movl	$1, -13928(%rbp)
 5252      FFFF0100 
 5252      0000
 5253 35a9 E9DA1500 		jmp	.L276
 5253      00
 5254              	.L279:
 967:main.c        **** 
 968:main.c        **** 	vp = vpOpt->sval[0];
 5255              		.loc 1 968 0 is_stmt 1
 5256 35ae 488B8508 		movq	-13816(%rbp), %rax
 5256      CAFFFF
 5257 35b5 488B4068 		movq	104(%rax), %rax
 5258 35b9 488B00   		movq	(%rax), %rax
 5259 35bc 48898598 		movq	%rax, -13672(%rbp)
 5259      CAFFFF
 969:main.c        **** 
 970:main.c        **** 	printf("Attempting to open connection to FPGALink device %s...\n", vp);
 5260              		.loc 1 970 0
 5261 35c3 488B8598 		movq	-13672(%rbp), %rax
 5261      CAFFFF
 5262 35ca 4889C6   		movq	%rax, %rsi
 5263 35cd BF000000 		movl	$.LC110, %edi
 5263      00
 5264 35d2 B8000000 		movl	$0, %eax
 5264      00
 5265 35d7 E8000000 		call	printf
 5265      00
 971:main.c        **** 	fStatus = flOpen(vp, &handle, NULL);
 5266              		.loc 1 971 0
 5267 35dc 488D8DD8 		leaq	-13864(%rbp), %rcx
 5267      C9FFFF
 5268 35e3 488B8598 		movq	-13672(%rbp), %rax
 5268      CAFFFF
 5269 35ea BA000000 		movl	$0, %edx
 5269      00
 5270 35ef 4889CE   		movq	%rcx, %rsi
 5271 35f2 4889C7   		movq	%rax, %rdi
 5272 35f5 E8000000 		call	flOpen
 5272      00
 5273 35fa 89859CC9 		movl	%eax, -13924(%rbp)
 5273      FFFF
 972:main.c        **** 	if ( fStatus ) {
 5274              		.loc 1 972 0
 5275 3600 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5275      FFFF00
 5276 3607 0F842502 		je	.L280
 5276      0000
 973:main.c        **** 		if ( ivpOpt->count ) {
 5277              		.loc 1 973 0
 5278 360d 488B8500 		movq	-13824(%rbp), %rax
 5278      CAFFFF
 5279 3614 8B4060   		movl	96(%rax), %eax
 5280 3617 85C0     		testl	%eax, %eax
 5281 3619 0F84E401 		je	.L281
 5281      0000
 5282              	.LBB53:
 974:main.c        **** 			int count = 60;
 5283              		.loc 1 974 0
 5284 361f C785A4C9 		movl	$60, -13916(%rbp)
 5284      FFFF3C00 
 5284      0000
 975:main.c        **** 			uint8 flag;
 976:main.c        **** 			ivp = ivpOpt->sval[0];
 5285              		.loc 1 976 0
 5286 3629 488B8500 		movq	-13824(%rbp), %rax
 5286      CAFFFF
 5287 3630 488B4068 		movq	104(%rax), %rax
 5288 3634 488B00   		movq	(%rax), %rax
 5289 3637 48898590 		movq	%rax, -13680(%rbp)
 5289      CAFFFF
 977:main.c        **** 			printf("Loading firmware into %s...\n", ivp);
 5290              		.loc 1 977 0
 5291 363e 488B8590 		movq	-13680(%rbp), %rax
 5291      CAFFFF
 5292 3645 4889C6   		movq	%rax, %rsi
 5293 3648 BF000000 		movl	$.LC111, %edi
 5293      00
 5294 364d B8000000 		movl	$0, %eax
 5294      00
 5295 3652 E8000000 		call	printf
 5295      00
 978:main.c        **** 			if ( fwOpt->count ) {
 5296              		.loc 1 978 0
 5297 3657 488B8518 		movq	-13800(%rbp), %rax
 5297      CAFFFF
 5298 365e 8B4060   		movl	96(%rax), %eax
 5299 3661 85C0     		testl	%eax, %eax
 5300 3663 742F     		je	.L282
 979:main.c        **** 				fStatus = flLoadCustomFirmware(ivp, fwOpt->sval[0], &error);
 5301              		.loc 1 979 0
 5302 3665 488B8518 		movq	-13800(%rbp), %rax
 5302      CAFFFF
 5303 366c 488B4068 		movq	104(%rax), %rax
 5304 3670 488B08   		movq	(%rax), %rcx
 5305 3673 488D95E0 		leaq	-13856(%rbp), %rdx
 5305      C9FFFF
 5306 367a 488B8590 		movq	-13680(%rbp), %rax
 5306      CAFFFF
 5307 3681 4889CE   		movq	%rcx, %rsi
 5308 3684 4889C7   		movq	%rax, %rdi
 5309 3687 E8000000 		call	flLoadCustomFirmware
 5309      00
 5310 368c 89859CC9 		movl	%eax, -13924(%rbp)
 5310      FFFF
 5311 3692 EB26     		jmp	.L283
 5312              	.L282:
 980:main.c        **** 			} else {
 981:main.c        **** 				fStatus = flLoadStandardFirmware(ivp, vp, &error);
 5313              		.loc 1 981 0
 5314 3694 488D95E0 		leaq	-13856(%rbp), %rdx
 5314      C9FFFF
 5315 369b 488B8D98 		movq	-13672(%rbp), %rcx
 5315      CAFFFF
 5316 36a2 488B8590 		movq	-13680(%rbp), %rax
 5316      CAFFFF
 5317 36a9 4889CE   		movq	%rcx, %rsi
 5318 36ac 4889C7   		movq	%rax, %rdi
 5319 36af E8000000 		call	flLoadStandardFirmware
 5319      00
 5320 36b4 89859CC9 		movl	%eax, -13924(%rbp)
 5320      FFFF
 5321              	.L283:
 982:main.c        **** 			}
 983:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5322              		.loc 1 983 0
 5323 36ba 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5323      FFFF00
 5324 36c1 740F     		je	.L284
 5325              		.loc 1 983 0 is_stmt 0 discriminator 1
 5326 36c3 C78598C9 		movl	$1, -13928(%rbp)
 5326      FFFF0100 
 5326      0000
 5327 36cd E9B61400 		jmp	.L276
 5327      00
 5328              	.L284:
 984:main.c        **** 			
 985:main.c        **** 			printf("Awaiting renumeration");
 5329              		.loc 1 985 0 is_stmt 1
 5330 36d2 BF000000 		movl	$.LC112, %edi
 5330      00
 5331 36d7 B8000000 		movl	$0, %eax
 5331      00
 5332 36dc E8000000 		call	printf
 5332      00
 986:main.c        **** 			flSleep(1000);
 5333              		.loc 1 986 0
 5334 36e1 BFE80300 		movl	$1000, %edi
 5334      00
 5335 36e6 E8000000 		call	flSleep
 5335      00
 5336              	.L288:
 987:main.c        **** 			do {
 988:main.c        **** 				printf(".");
 5337              		.loc 1 988 0
 5338 36eb BF2E0000 		movl	$46, %edi
 5338      00
 5339 36f0 E8000000 		call	putchar
 5339      00
 989:main.c        **** 				fflush(stdout);
 5340              		.loc 1 989 0
 5341 36f5 488B0500 		movq	stdout(%rip), %rax
 5341      000000
 5342 36fc 4889C7   		movq	%rax, %rdi
 5343 36ff E8000000 		call	fflush
 5343      00
 990:main.c        **** 				fStatus = flIsDeviceAvailable(vp, &flag, &error);
 5344              		.loc 1 990 0
 5345 3704 488D95E0 		leaq	-13856(%rbp), %rdx
 5345      C9FFFF
 5346 370b 488D8DF0 		leaq	-13840(%rbp), %rcx
 5346      C9FFFF
 5347 3712 488B8598 		movq	-13672(%rbp), %rax
 5347      CAFFFF
 5348 3719 4889CE   		movq	%rcx, %rsi
 5349 371c 4889C7   		movq	%rax, %rdi
 5350 371f E8000000 		call	flIsDeviceAvailable
 5350      00
 5351 3724 89859CC9 		movl	%eax, -13924(%rbp)
 5351      FFFF
 991:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5352              		.loc 1 991 0
 5353 372a 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5353      FFFF00
 5354 3731 740F     		je	.L286
 5355              		.loc 1 991 0 is_stmt 0 discriminator 1
 5356 3733 C78598C9 		movl	$1, -13928(%rbp)
 5356      FFFF0100 
 5356      0000
 5357 373d E9461400 		jmp	.L276
 5357      00
 5358              	.L286:
 992:main.c        **** 				flSleep(250);
 5359              		.loc 1 992 0 is_stmt 1
 5360 3742 BFFA0000 		movl	$250, %edi
 5360      00
 5361 3747 E8000000 		call	flSleep
 5361      00
 993:main.c        **** 				count--;
 5362              		.loc 1 993 0
 5363 374c 83ADA4C9 		subl	$1, -13916(%rbp)
 5363      FFFF01
 994:main.c        **** 			} while ( !flag && count );
 5364              		.loc 1 994 0
 5365 3753 0FB685F0 		movzbl	-13840(%rbp), %eax
 5365      C9FFFF
 5366 375a 84C0     		testb	%al, %al
 5367 375c 7509     		jne	.L287
 5368              		.loc 1 994 0 is_stmt 0 discriminator 1
 5369 375e 83BDA4C9 		cmpl	$0, -13916(%rbp)
 5369      FFFF00
 5370 3765 7584     		jne	.L288
 5371              	.L287:
 995:main.c        **** 			printf("\n");
 5372              		.loc 1 995 0 is_stmt 1
 5373 3767 BF0A0000 		movl	$10, %edi
 5373      00
 5374 376c E8000000 		call	putchar
 5374      00
 996:main.c        **** 			if ( !flag ) {
 5375              		.loc 1 996 0
 5376 3771 0FB685F0 		movzbl	-13840(%rbp), %eax
 5376      C9FFFF
 5377 3778 84C0     		testb	%al, %al
 5378 377a 752F     		jne	.L289
 997:main.c        **** 				fprintf(stderr, "FPGALink device did not renumerate properly as %s\n", vp);
 5379              		.loc 1 997 0
 5380 377c 488B0500 		movq	stderr(%rip), %rax
 5380      000000
 5381 3783 488B9598 		movq	-13672(%rbp), %rdx
 5381      CAFFFF
 5382 378a BE000000 		movl	$.LC113, %esi
 5382      00
 5383 378f 4889C7   		movq	%rax, %rdi
 5384 3792 B8000000 		movl	$0, %eax
 5384      00
 5385 3797 E8000000 		call	fprintf
 5385      00
 998:main.c        **** 				FAIL(FLP_LIBERR, cleanup);
 5386              		.loc 1 998 0
 5387 379c C78598C9 		movl	$1, -13928(%rbp)
 5387      FFFF0100 
 5387      0000
 5388 37a6 E9DD1300 		jmp	.L276
 5388      00
 5389              	.L289:
 999:main.c        **** 			}
1000:main.c        **** 
1001:main.c        **** 			printf("Attempting to open connection to FPGLink device %s again...\n", vp);
 5390              		.loc 1 1001 0
 5391 37ab 488B8598 		movq	-13672(%rbp), %rax
 5391      CAFFFF
 5392 37b2 4889C6   		movq	%rax, %rsi
 5393 37b5 BF000000 		movl	$.LC114, %edi
 5393      00
 5394 37ba B8000000 		movl	$0, %eax
 5394      00
 5395 37bf E8000000 		call	printf
 5395      00
1002:main.c        **** 			fStatus = flOpen(vp, &handle, &error);
 5396              		.loc 1 1002 0
 5397 37c4 488D95E0 		leaq	-13856(%rbp), %rdx
 5397      C9FFFF
 5398 37cb 488D8DD8 		leaq	-13864(%rbp), %rcx
 5398      C9FFFF
 5399 37d2 488B8598 		movq	-13672(%rbp), %rax
 5399      CAFFFF
 5400 37d9 4889CE   		movq	%rcx, %rsi
 5401 37dc 4889C7   		movq	%rax, %rdi
 5402 37df E8000000 		call	flOpen
 5402      00
 5403 37e4 89859CC9 		movl	%eax, -13924(%rbp)
 5403      FFFF
1003:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5404              		.loc 1 1003 0
 5405 37ea 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5405      FFFF00
 5406 37f1 743F     		je	.L280
 5407              		.loc 1 1003 0 is_stmt 0 discriminator 1
 5408 37f3 C78598C9 		movl	$1, -13928(%rbp)
 5408      FFFF0100 
 5408      0000
 5409 37fd 90       		nop
 5410 37fe E9851300 		jmp	.L276
 5410      00
 5411              	.L281:
 5412              	.LBE53:
1004:main.c        **** 		} else {
1005:main.c        **** 			fprintf(stderr, "Could not open FPGALink device at %s and no initial VID:PID was supplied\n", vp
 5413              		.loc 1 1005 0 is_stmt 1
 5414 3803 488B0500 		movq	stderr(%rip), %rax
 5414      000000
 5415 380a 488B9598 		movq	-13672(%rbp), %rdx
 5415      CAFFFF
 5416 3811 BE000000 		movl	$.LC115, %esi
 5416      00
 5417 3816 4889C7   		movq	%rax, %rdi
 5418 3819 B8000000 		movl	$0, %eax
 5418      00
 5419 381e E8000000 		call	fprintf
 5419      00
1006:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5420              		.loc 1 1006 0
 5421 3823 C78598C9 		movl	$12, -13928(%rbp)
 5421      FFFF0C00 
 5421      0000
 5422 382d E9561300 		jmp	.L276
 5422      00
 5423              	.L280:
1007:main.c        **** 		}
1008:main.c        **** 	}
1009:main.c        **** 
1010:main.c        **** 	printf(
 5424              		.loc 1 1010 0
 5425 3832 488B85D8 		movq	-13864(%rbp), %rax
 5425      C9FFFF
 5426 3839 4889C7   		movq	%rax, %rdi
 5427 383c E8000000 		call	flGetFirmwareVersion
 5427      00
 5428 3841 89C3     		movl	%eax, %ebx
1011:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
1012:main.c        **** 		vp, flGetFirmwareID(handle), flGetFirmwareVersion(handle)
 5429              		.loc 1 1012 0
 5430 3843 488B85D8 		movq	-13864(%rbp), %rax
 5430      C9FFFF
 5431 384a 4889C7   		movq	%rax, %rdi
 5432 384d E8000000 		call	flGetFirmwareID
 5432      00
1010:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 5433              		.loc 1 1010 0
 5434 3852 0FB7D0   		movzwl	%ax, %edx
 5435 3855 488B8598 		movq	-13672(%rbp), %rax
 5435      CAFFFF
 5436 385c 89D9     		movl	%ebx, %ecx
 5437 385e 4889C6   		movq	%rax, %rsi
 5438 3861 BF000000 		movl	$.LC116, %edi
 5438      00
 5439 3866 B8000000 		movl	$0, %eax
 5439      00
 5440 386b E8000000 		call	printf
 5440      00
1013:main.c        **** 	);
1014:main.c        **** 
1015:main.c        **** 	if ( eepromOpt->count ) {
 5441              		.loc 1 1015 0
 5442 3870 488B8570 		movq	-13712(%rbp), %rax
 5442      CAFFFF
 5443 3877 8B4060   		movl	96(%rax), %eax
 5444 387a 85C0     		testl	%eax, %eax
 5445 387c 0F84B600 		je	.L291
 5445      0000
1016:main.c        **** 		if ( !strcmp("std", eepromOpt->sval[0]) ) {
 5446              		.loc 1 1016 0
 5447 3882 488B8570 		movq	-13712(%rbp), %rax
 5447      CAFFFF
 5448 3889 488B4068 		movq	104(%rax), %rax
 5449 388d 488B00   		movq	(%rax), %rax
 5450 3890 4889C6   		movq	%rax, %rsi
 5451 3893 BF000000 		movl	$.LC117, %edi
 5451      00
 5452 3898 E8000000 		call	strcmp
 5452      00
 5453 389d 85C0     		testl	%eax, %eax
 5454 389f 7532     		jne	.L292
1017:main.c        **** 			printf("Writing the standard FPGALink firmware to the FX2's EEPROM...\n");
 5455              		.loc 1 1017 0
 5456 38a1 BF000000 		movl	$.LC118, %edi
 5456      00
 5457 38a6 E8000000 		call	puts
 5457      00
1018:main.c        **** 			fStatus = flFlashStandardFirmware(handle, vp, &error);
 5458              		.loc 1 1018 0
 5459 38ab 488B85D8 		movq	-13864(%rbp), %rax
 5459      C9FFFF
 5460 38b2 488D95E0 		leaq	-13856(%rbp), %rdx
 5460      C9FFFF
 5461 38b9 488B8D98 		movq	-13672(%rbp), %rcx
 5461      CAFFFF
 5462 38c0 4889CE   		movq	%rcx, %rsi
 5463 38c3 4889C7   		movq	%rax, %rdi
 5464 38c6 E8000000 		call	flFlashStandardFirmware
 5464      00
 5465 38cb 89859CC9 		movl	%eax, -13924(%rbp)
 5465      FFFF
 5466 38d1 EB4D     		jmp	.L293
 5467              	.L292:
1019:main.c        **** 		} else {
1020:main.c        **** 			printf("Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n", eepromOpt->sval[0]);
 5468              		.loc 1 1020 0
 5469 38d3 488B8570 		movq	-13712(%rbp), %rax
 5469      CAFFFF
 5470 38da 488B4068 		movq	104(%rax), %rax
 5471 38de 488B00   		movq	(%rax), %rax
 5472 38e1 4889C6   		movq	%rax, %rsi
 5473 38e4 BF000000 		movl	$.LC119, %edi
 5473      00
 5474 38e9 B8000000 		movl	$0, %eax
 5474      00
 5475 38ee E8000000 		call	printf
 5475      00
1021:main.c        **** 			fStatus = flFlashCustomFirmware(handle, eepromOpt->sval[0], &error);
 5476              		.loc 1 1021 0
 5477 38f3 488B8570 		movq	-13712(%rbp), %rax
 5477      CAFFFF
 5478 38fa 488B4068 		movq	104(%rax), %rax
 5479 38fe 488B08   		movq	(%rax), %rcx
 5480 3901 488B85D8 		movq	-13864(%rbp), %rax
 5480      C9FFFF
 5481 3908 488D95E0 		leaq	-13856(%rbp), %rdx
 5481      C9FFFF
 5482 390f 4889CE   		movq	%rcx, %rsi
 5483 3912 4889C7   		movq	%rax, %rdi
 5484 3915 E8000000 		call	flFlashCustomFirmware
 5484      00
 5485 391a 89859CC9 		movl	%eax, -13924(%rbp)
 5485      FFFF
 5486              	.L293:
1022:main.c        **** 		}
1023:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5487              		.loc 1 1023 0
 5488 3920 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5488      FFFF00
 5489 3927 740F     		je	.L291
 5490              		.loc 1 1023 0 is_stmt 0 discriminator 1
 5491 3929 C78598C9 		movl	$1, -13928(%rbp)
 5491      FFFF0100 
 5491      0000
 5492 3933 E9501200 		jmp	.L276
 5492      00
 5493              	.L291:
1024:main.c        **** 	}
1025:main.c        **** 
1026:main.c        **** 	if ( backupOpt->count ) {
 5494              		.loc 1 1026 0 is_stmt 1
 5495 3938 488B8578 		movq	-13704(%rbp), %rax
 5495      CAFFFF
 5496 393f 8B4060   		movl	96(%rax), %eax
 5497 3942 85C0     		testl	%eax, %eax
 5498 3944 0F84DA00 		je	.L294
 5498      0000
 5499              	.LBB54:
1027:main.c        **** 		const char *fileName;
1028:main.c        **** 		const uint32 kbitSize = strtoul(backupOpt->sval[0], (char**)&fileName, 0);
 5500              		.loc 1 1028 0
 5501 394a 488B8578 		movq	-13704(%rbp), %rax
 5501      CAFFFF
 5502 3951 488B4068 		movq	104(%rax), %rax
 5503 3955 488B00   		movq	(%rax), %rax
 5504 3958 488D8DF0 		leaq	-13840(%rbp), %rcx
 5504      C9FFFF
 5505 395f BA000000 		movl	$0, %edx
 5505      00
 5506 3964 4889CE   		movq	%rcx, %rsi
 5507 3967 4889C7   		movq	%rax, %rdi
 5508 396a E8000000 		call	strtoul
 5508      00
 5509 396f 8985C4C9 		movl	%eax, -13884(%rbp)
 5509      FFFF
1029:main.c        **** 		if ( *fileName != ':' ) {
 5510              		.loc 1 1029 0
 5511 3975 488B85F0 		movq	-13840(%rbp), %rax
 5511      C9FFFF
 5512 397c 0FB600   		movzbl	(%rax), %eax
 5513 397f 3C3A     		cmpb	$58, %al
 5514 3981 742F     		je	.L295
1030:main.c        **** 			fprintf(stderr, "%s: invalid argument to option --backup=<kbitSize:fw.iic>\n", progName);
 5515              		.loc 1 1030 0
 5516 3983 488B0500 		movq	stderr(%rip), %rax
 5516      000000
 5517 398a 488B9588 		movq	-13688(%rbp), %rdx
 5517      CAFFFF
 5518 3991 BE000000 		movl	$.LC120, %esi
 5518      00
 5519 3996 4889C7   		movq	%rax, %rdi
 5520 3999 B8000000 		movl	$0, %eax
 5520      00
 5521 399e E8000000 		call	fprintf
 5521      00
1031:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5522              		.loc 1 1031 0
 5523 39a3 C78598C9 		movl	$12, -13928(%rbp)
 5523      FFFF0C00 
 5523      0000
 5524 39ad E9D61100 		jmp	.L276
 5524      00
 5525              	.L295:
1032:main.c        **** 		}
1033:main.c        **** 		fileName++;
 5526              		.loc 1 1033 0
 5527 39b2 488B85F0 		movq	-13840(%rbp), %rax
 5527      C9FFFF
 5528 39b9 4883C001 		addq	$1, %rax
 5529 39bd 488985F0 		movq	%rax, -13840(%rbp)
 5529      C9FFFF
1034:main.c        **** 		printf("Saving a backup of %d kbit from the FX2's EEPROM to %s...\n", kbitSize, fileName);
 5530              		.loc 1 1034 0
 5531 39c4 488B95F0 		movq	-13840(%rbp), %rdx
 5531      C9FFFF
 5532 39cb 8B85C4C9 		movl	-13884(%rbp), %eax
 5532      FFFF
 5533 39d1 89C6     		movl	%eax, %esi
 5534 39d3 BF000000 		movl	$.LC121, %edi
 5534      00
 5535 39d8 B8000000 		movl	$0, %eax
 5535      00
 5536 39dd E8000000 		call	printf
 5536      00
1035:main.c        **** 		fStatus = flSaveFirmware(handle, kbitSize, fileName, &error);
 5537              		.loc 1 1035 0
 5538 39e2 488B95F0 		movq	-13840(%rbp), %rdx
 5538      C9FFFF
 5539 39e9 488B85D8 		movq	-13864(%rbp), %rax
 5539      C9FFFF
 5540 39f0 488D8DE0 		leaq	-13856(%rbp), %rcx
 5540      C9FFFF
 5541 39f7 8BB5C4C9 		movl	-13884(%rbp), %esi
 5541      FFFF
 5542 39fd 4889C7   		movq	%rax, %rdi
 5543 3a00 E8000000 		call	flSaveFirmware
 5543      00
 5544 3a05 89859CC9 		movl	%eax, -13924(%rbp)
 5544      FFFF
1036:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5545              		.loc 1 1036 0
 5546 3a0b 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5546      FFFF00
 5547 3a12 7410     		je	.L294
 5548              		.loc 1 1036 0 is_stmt 0 discriminator 1
 5549 3a14 C78598C9 		movl	$1, -13928(%rbp)
 5549      FFFF0100 
 5549      0000
 5550 3a1e 90       		nop
 5551 3a1f E9641100 		jmp	.L276
 5551      00
 5552              	.L294:
 5553              	.LBE54:
1037:main.c        **** 	}
1038:main.c        **** 
1039:main.c        **** 	if ( rstOpt->count ) {
 5554              		.loc 1 1039 0 is_stmt 1
 5555 3a24 488B8558 		movq	-13736(%rbp), %rax
 5555      CAFFFF
 5556 3a2b 8B4060   		movl	96(%rax), %eax
 5557 3a2e 85C0     		testl	%eax, %eax
 5558 3a30 7437     		je	.L298
1040:main.c        **** 		// Reset the bulk endpoints (only needed in some virtualised environments)
1041:main.c        **** 		fStatus = flResetToggle(handle, &error);
 5559              		.loc 1 1041 0
 5560 3a32 488B85D8 		movq	-13864(%rbp), %rax
 5560      C9FFFF
 5561 3a39 488D95E0 		leaq	-13856(%rbp), %rdx
 5561      C9FFFF
 5562 3a40 4889D6   		movq	%rdx, %rsi
 5563 3a43 4889C7   		movq	%rax, %rdi
 5564 3a46 E8000000 		call	flResetToggle
 5564      00
 5565 3a4b 89859CC9 		movl	%eax, -13924(%rbp)
 5565      FFFF
1042:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5566              		.loc 1 1042 0
 5567 3a51 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5567      FFFF00
 5568 3a58 740F     		je	.L298
 5569              		.loc 1 1042 0 is_stmt 0 discriminator 1
 5570 3a5a C78598C9 		movl	$1, -13928(%rbp)
 5570      FFFF0100 
 5570      0000
 5571 3a64 E91F1100 		jmp	.L276
 5571      00
 5572              	.L298:
1043:main.c        **** 	}
1044:main.c        **** 
1045:main.c        **** 	if ( conOpt->count ) {
 5573              		.loc 1 1045 0 is_stmt 1
 5574 3a69 488B8538 		movq	-13768(%rbp), %rax
 5574      CAFFFF
 5575 3a70 8B4060   		movl	96(%rax), %eax
 5576 3a73 85C0     		testl	%eax, %eax
 5577 3a75 7413     		je	.L299
1046:main.c        **** 		conduit = (uint8)conOpt->ival[0];
 5578              		.loc 1 1046 0
 5579 3a77 488B8538 		movq	-13768(%rbp), %rax
 5579      CAFFFF
 5580 3a7e 488B4068 		movq	104(%rax), %rax
 5581 3a82 8B00     		movl	(%rax), %eax
 5582 3a84 88858CC9 		movb	%al, -13940(%rbp)
 5582      FFFF
 5583              	.L299:
1047:main.c        **** 	}
1048:main.c        **** 
1049:main.c        **** 	isNeroCapable = flIsNeroCapable(handle);
 5584              		.loc 1 1049 0
 5585 3a8a 488B85D8 		movq	-13864(%rbp), %rax
 5585      C9FFFF
 5586 3a91 4889C7   		movq	%rax, %rdi
 5587 3a94 E8000000 		call	flIsNeroCapable
 5587      00
 5588 3a99 84C0     		testb	%al, %al
 5589 3a9b 0F95C0   		setne	%al
 5590 3a9e 88858DC9 		movb	%al, -13939(%rbp)
 5590      FFFF
1050:main.c        **** 	isCommCapable = flIsCommCapable(handle, conduit);
 5591              		.loc 1 1050 0
 5592 3aa4 0FB6958C 		movzbl	-13940(%rbp), %edx
 5592      C9FFFF
 5593 3aab 488B85D8 		movq	-13864(%rbp), %rax
 5593      C9FFFF
 5594 3ab2 89D6     		movl	%edx, %esi
 5595 3ab4 4889C7   		movq	%rax, %rdi
 5596 3ab7 E8000000 		call	flIsCommCapable
 5596      00
 5597 3abc 84C0     		testb	%al, %al
 5598 3abe 0F95C0   		setne	%al
 5599 3ac1 88858EC9 		movb	%al, -13938(%rbp)
 5599      FFFF
1051:main.c        **** 
1052:main.c        **** 	if ( portOpt->count ) {
 5600              		.loc 1 1052 0
 5601 3ac7 488B8520 		movq	-13792(%rbp), %rax
 5601      CAFFFF
 5602 3ace 8B4060   		movl	96(%rax), %eax
 5603 3ad1 85C0     		testl	%eax, %eax
 5604 3ad3 0F843C02 		je	.L300
 5604      0000
 5605              	.LBB55:
1053:main.c        **** 		uint32 readState;
1054:main.c        **** 		char hex[9];
1055:main.c        **** 		const uint8 *p = (const uint8 *)hex;
 5606              		.loc 1 1055 0
 5607 3ad9 488D45D0 		leaq	-48(%rbp), %rax
 5608 3add 488985A0 		movq	%rax, -13664(%rbp)
 5608      CAFFFF
1056:main.c        **** 		printf("Configuring ports...\n");
 5609              		.loc 1 1056 0
 5610 3ae4 BF000000 		movl	$.LC122, %edi
 5610      00
 5611 3ae9 E8000000 		call	puts
 5611      00
1057:main.c        **** 		fStatus = flMultiBitPortAccess(handle, portOpt->sval[0], &readState, &error);
 5612              		.loc 1 1057 0
 5613 3aee 488B8520 		movq	-13792(%rbp), %rax
 5613      CAFFFF
 5614 3af5 488B4068 		movq	104(%rax), %rax
 5615 3af9 488B30   		movq	(%rax), %rsi
 5616 3afc 488B85D8 		movq	-13864(%rbp), %rax
 5616      C9FFFF
 5617 3b03 488D8DE0 		leaq	-13856(%rbp), %rcx
 5617      C9FFFF
 5618 3b0a 488D95F0 		leaq	-13840(%rbp), %rdx
 5618      C9FFFF
 5619 3b11 4889C7   		movq	%rax, %rdi
 5620 3b14 E8000000 		call	flMultiBitPortAccess
 5620      00
 5621 3b19 89859CC9 		movl	%eax, -13924(%rbp)
 5621      FFFF
1058:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5622              		.loc 1 1058 0
 5623 3b1f 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5623      FFFF00
 5624 3b26 740F     		je	.L301
 5625              		.loc 1 1058 0 is_stmt 0 discriminator 1
 5626 3b28 C78598C9 		movl	$1, -13928(%rbp)
 5626      FFFF0100 
 5626      0000
 5627 3b32 E9511000 		jmp	.L276
 5627      00
 5628              	.L301:
1059:main.c        **** 		sprintf(hex, "%08X", readState);
 5629              		.loc 1 1059 0 is_stmt 1
 5630 3b37 8B95F0C9 		movl	-13840(%rbp), %edx
 5630      FFFF
 5631 3b3d 488D45D0 		leaq	-48(%rbp), %rax
 5632 3b41 BE000000 		movl	$.LC123, %esi
 5632      00
 5633 3b46 4889C7   		movq	%rax, %rdi
 5634 3b49 B8000000 		movl	$0, %eax
 5634      00
 5635 3b4e E8000000 		call	sprintf
 5635      00
1060:main.c        **** 		printf("Readback:   28   24   20   16    12    8    4    0\n          %s", nibbles[*p++ - '0']);
 5636              		.loc 1 1060 0
 5637 3b53 488B85A0 		movq	-13664(%rbp), %rax
 5637      CAFFFF
 5638 3b5a 488D5001 		leaq	1(%rax), %rdx
 5639 3b5e 488995A0 		movq	%rdx, -13664(%rbp)
 5639      CAFFFF
 5640 3b65 0FB600   		movzbl	(%rax), %eax
 5641 3b68 0FB6C0   		movzbl	%al, %eax
 5642 3b6b 83E830   		subl	$48, %eax
 5643 3b6e 4898     		cltq
 5644 3b70 488B04C5 		movq	nibbles(,%rax,8), %rax
 5644      00000000 
 5645 3b78 4889C6   		movq	%rax, %rsi
 5646 3b7b BF000000 		movl	$.LC124, %edi
 5646      00
 5647 3b80 B8000000 		movl	$0, %eax
 5647      00
 5648 3b85 E8000000 		call	printf
 5648      00
1061:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 5649              		.loc 1 1061 0
 5650 3b8a 488B85A0 		movq	-13664(%rbp), %rax
 5650      CAFFFF
 5651 3b91 488D5001 		leaq	1(%rax), %rdx
 5652 3b95 488995A0 		movq	%rdx, -13664(%rbp)
 5652      CAFFFF
 5653 3b9c 0FB600   		movzbl	(%rax), %eax
 5654 3b9f 0FB6C0   		movzbl	%al, %eax
 5655 3ba2 83E830   		subl	$48, %eax
 5656 3ba5 4898     		cltq
 5657 3ba7 488B04C5 		movq	nibbles(,%rax,8), %rax
 5657      00000000 
 5658 3baf 4889C6   		movq	%rax, %rsi
 5659 3bb2 BF000000 		movl	$.LC125, %edi
 5659      00
 5660 3bb7 B8000000 		movl	$0, %eax
 5660      00
 5661 3bbc E8000000 		call	printf
 5661      00
1062:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 5662              		.loc 1 1062 0
 5663 3bc1 488B85A0 		movq	-13664(%rbp), %rax
 5663      CAFFFF
 5664 3bc8 488D5001 		leaq	1(%rax), %rdx
 5665 3bcc 488995A0 		movq	%rdx, -13664(%rbp)
 5665      CAFFFF
 5666 3bd3 0FB600   		movzbl	(%rax), %eax
 5667 3bd6 0FB6C0   		movzbl	%al, %eax
 5668 3bd9 83E830   		subl	$48, %eax
 5669 3bdc 4898     		cltq
 5670 3bde 488B04C5 		movq	nibbles(,%rax,8), %rax
 5670      00000000 
 5671 3be6 4889C6   		movq	%rax, %rsi
 5672 3be9 BF000000 		movl	$.LC125, %edi
 5672      00
 5673 3bee B8000000 		movl	$0, %eax
 5673      00
 5674 3bf3 E8000000 		call	printf
 5674      00
1063:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 5675              		.loc 1 1063 0
 5676 3bf8 488B85A0 		movq	-13664(%rbp), %rax
 5676      CAFFFF
 5677 3bff 488D5001 		leaq	1(%rax), %rdx
 5678 3c03 488995A0 		movq	%rdx, -13664(%rbp)
 5678      CAFFFF
 5679 3c0a 0FB600   		movzbl	(%rax), %eax
 5680 3c0d 0FB6C0   		movzbl	%al, %eax
 5681 3c10 83E830   		subl	$48, %eax
 5682 3c13 4898     		cltq
 5683 3c15 488B04C5 		movq	nibbles(,%rax,8), %rax
 5683      00000000 
 5684 3c1d 4889C6   		movq	%rax, %rsi
 5685 3c20 BF000000 		movl	$.LC125, %edi
 5685      00
 5686 3c25 B8000000 		movl	$0, %eax
 5686      00
 5687 3c2a E8000000 		call	printf
 5687      00
1064:main.c        **** 		printf("  %s", nibbles[*p++ - '0']);
 5688              		.loc 1 1064 0
 5689 3c2f 488B85A0 		movq	-13664(%rbp), %rax
 5689      CAFFFF
 5690 3c36 488D5001 		leaq	1(%rax), %rdx
 5691 3c3a 488995A0 		movq	%rdx, -13664(%rbp)
 5691      CAFFFF
 5692 3c41 0FB600   		movzbl	(%rax), %eax
 5693 3c44 0FB6C0   		movzbl	%al, %eax
 5694 3c47 83E830   		subl	$48, %eax
 5695 3c4a 4898     		cltq
 5696 3c4c 488B04C5 		movq	nibbles(,%rax,8), %rax
 5696      00000000 
 5697 3c54 4889C6   		movq	%rax, %rsi
 5698 3c57 BF000000 		movl	$.LC126, %edi
 5698      00
 5699 3c5c B8000000 		movl	$0, %eax
 5699      00
 5700 3c61 E8000000 		call	printf
 5700      00
1065:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 5701              		.loc 1 1065 0
 5702 3c66 488B85A0 		movq	-13664(%rbp), %rax
 5702      CAFFFF
 5703 3c6d 488D5001 		leaq	1(%rax), %rdx
 5704 3c71 488995A0 		movq	%rdx, -13664(%rbp)
 5704      CAFFFF
 5705 3c78 0FB600   		movzbl	(%rax), %eax
 5706 3c7b 0FB6C0   		movzbl	%al, %eax
 5707 3c7e 83E830   		subl	$48, %eax
 5708 3c81 4898     		cltq
 5709 3c83 488B04C5 		movq	nibbles(,%rax,8), %rax
 5709      00000000 
 5710 3c8b 4889C6   		movq	%rax, %rsi
 5711 3c8e BF000000 		movl	$.LC125, %edi
 5711      00
 5712 3c93 B8000000 		movl	$0, %eax
 5712      00
 5713 3c98 E8000000 		call	printf
 5713      00
1066:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 5714              		.loc 1 1066 0
 5715 3c9d 488B85A0 		movq	-13664(%rbp), %rax
 5715      CAFFFF
 5716 3ca4 488D5001 		leaq	1(%rax), %rdx
 5717 3ca8 488995A0 		movq	%rdx, -13664(%rbp)
 5717      CAFFFF
 5718 3caf 0FB600   		movzbl	(%rax), %eax
 5719 3cb2 0FB6C0   		movzbl	%al, %eax
 5720 3cb5 83E830   		subl	$48, %eax
 5721 3cb8 4898     		cltq
 5722 3cba 488B04C5 		movq	nibbles(,%rax,8), %rax
 5722      00000000 
 5723 3cc2 4889C6   		movq	%rax, %rsi
 5724 3cc5 BF000000 		movl	$.LC125, %edi
 5724      00
 5725 3cca B8000000 		movl	$0, %eax
 5725      00
 5726 3ccf E8000000 		call	printf
 5726      00
1067:main.c        **** 		printf(" %s\n", nibbles[*p++ - '0']);
 5727              		.loc 1 1067 0
 5728 3cd4 488B85A0 		movq	-13664(%rbp), %rax
 5728      CAFFFF
 5729 3cdb 488D5001 		leaq	1(%rax), %rdx
 5730 3cdf 488995A0 		movq	%rdx, -13664(%rbp)
 5730      CAFFFF
 5731 3ce6 0FB600   		movzbl	(%rax), %eax
 5732 3ce9 0FB6C0   		movzbl	%al, %eax
 5733 3cec 83E830   		subl	$48, %eax
 5734 3cef 4898     		cltq
 5735 3cf1 488B04C5 		movq	nibbles(,%rax,8), %rax
 5735      00000000 
 5736 3cf9 4889C6   		movq	%rax, %rsi
 5737 3cfc BF000000 		movl	$.LC127, %edi
 5737      00
 5738 3d01 B8000000 		movl	$0, %eax
 5738      00
 5739 3d06 E8000000 		call	printf
 5739      00
1068:main.c        **** 		flSleep(100);
 5740              		.loc 1 1068 0
 5741 3d0b BF640000 		movl	$100, %edi
 5741      00
 5742 3d10 E8000000 		call	flSleep
 5742      00
 5743              	.L300:
 5744              	.LBE55:
1069:main.c        **** 	}
1070:main.c        **** 
1071:main.c        **** 	if ( queryOpt->count ) {
 5745              		.loc 1 1071 0
 5746 3d15 488B8528 		movq	-13784(%rbp), %rax
 5746      CAFFFF
 5747 3d1c 8B4060   		movl	96(%rax), %eax
 5748 3d1f 85C0     		testl	%eax, %eax
 5749 3d21 0F844D01 		je	.L302
 5749      0000
1072:main.c        **** 		if ( isNeroCapable ) {
 5750              		.loc 1 1072 0
 5751 3d27 80BD8DC9 		cmpb	$0, -13939(%rbp)
 5751      FFFF00
 5752 3d2e 0F841101 		je	.L303
 5752      0000
1073:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 5753              		.loc 1 1073 0
 5754 3d34 488B85D8 		movq	-13864(%rbp), %rax
 5754      C9FFFF
 5755 3d3b 488D95E0 		leaq	-13856(%rbp), %rdx
 5755      C9FFFF
 5756 3d42 BE000000 		movl	$0, %esi
 5756      00
 5757 3d47 4889C7   		movq	%rax, %rdi
 5758 3d4a E8000000 		call	flSelectConduit
 5758      00
 5759 3d4f 89859CC9 		movl	%eax, -13924(%rbp)
 5759      FFFF
1074:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5760              		.loc 1 1074 0
 5761 3d55 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5761      FFFF00
 5762 3d5c 740F     		je	.L304
 5763              		.loc 1 1074 0 is_stmt 0 discriminator 1
 5764 3d5e C78598C9 		movl	$1, -13928(%rbp)
 5764      FFFF0100 
 5764      0000
 5765 3d68 E91B0E00 		jmp	.L276
 5765      00
 5766              	.L304:
1075:main.c        **** 			fStatus = jtagScanChain(handle, queryOpt->sval[0], &numDevices, scanChain, 16, &error);
 5767              		.loc 1 1075 0 is_stmt 1
 5768 3d6d 488B8528 		movq	-13784(%rbp), %rax
 5768      CAFFFF
 5769 3d74 488B4068 		movq	104(%rax), %rax
 5770 3d78 488B30   		movq	(%rax), %rsi
 5771 3d7b 488B85D8 		movq	-13864(%rbp), %rax
 5771      C9FFFF
 5772 3d82 488DBDE0 		leaq	-13856(%rbp), %rdi
 5772      C9FFFF
 5773 3d89 488D8DE0 		leaq	-13600(%rbp), %rcx
 5773      CAFFFF
 5774 3d90 488D9590 		leaq	-13936(%rbp), %rdx
 5774      C9FFFF
 5775 3d97 4989F9   		movq	%rdi, %r9
 5776 3d9a 41B81000 		movl	$16, %r8d
 5776      0000
 5777 3da0 4889C7   		movq	%rax, %rdi
 5778 3da3 E8000000 		call	jtagScanChain
 5778      00
 5779 3da8 89859CC9 		movl	%eax, -13924(%rbp)
 5779      FFFF
1076:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5780              		.loc 1 1076 0
 5781 3dae 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5781      FFFF00
 5782 3db5 740F     		je	.L305
 5783              		.loc 1 1076 0 is_stmt 0 discriminator 1
 5784 3db7 C78598C9 		movl	$1, -13928(%rbp)
 5784      FFFF0100 
 5784      0000
 5785 3dc1 E9C20D00 		jmp	.L276
 5785      00
 5786              	.L305:
1077:main.c        **** 			if ( numDevices ) {
 5787              		.loc 1 1077 0 is_stmt 1
 5788 3dc6 8B8590C9 		movl	-13936(%rbp), %eax
 5788      FFFF
 5789 3dcc 85C0     		testl	%eax, %eax
 5790 3dce 745A     		je	.L306
1078:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain, yielding:\n", vp);
 5791              		.loc 1 1078 0
 5792 3dd0 488B8598 		movq	-13672(%rbp), %rax
 5792      CAFFFF
 5793 3dd7 4889C6   		movq	%rax, %rsi
 5794 3dda BF000000 		movl	$.LC128, %edi
 5794      00
 5795 3ddf B8000000 		movl	$0, %eax
 5795      00
 5796 3de4 E8000000 		call	printf
 5796      00
1079:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 5797              		.loc 1 1079 0
 5798 3de9 C785A0C9 		movl	$0, -13920(%rbp)
 5798      FFFF0000 
 5798      0000
 5799 3df3 EB25     		jmp	.L307
 5800              	.L308:
1080:main.c        **** 					printf("  0x%08X\n", scanChain[i]);
 5801              		.loc 1 1080 0 discriminator 3
 5802 3df5 8B85A0C9 		movl	-13920(%rbp), %eax
 5802      FFFF
 5803 3dfb 8B8485E0 		movl	-13600(%rbp,%rax,4), %eax
 5803      CAFFFF
 5804 3e02 89C6     		movl	%eax, %esi
 5805 3e04 BF000000 		movl	$.LC129, %edi
 5805      00
 5806 3e09 B8000000 		movl	$0, %eax
 5806      00
 5807 3e0e E8000000 		call	printf
 5807      00
1079:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 5808              		.loc 1 1079 0 discriminator 3
 5809 3e13 8385A0C9 		addl	$1, -13920(%rbp)
 5809      FFFF01
 5810              	.L307:
1079:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 5811              		.loc 1 1079 0 is_stmt 0 discriminator 1
 5812 3e1a 8B8590C9 		movl	-13936(%rbp), %eax
 5812      FFFF
 5813 3e20 3985A0C9 		cmpl	%eax, -13920(%rbp)
 5813      FFFF
 5814 3e26 72CD     		jb	.L308
 5815 3e28 EB4A     		jmp	.L302
 5816              	.L306:
1081:main.c        **** 				}
1082:main.c        **** 			} else {
1083:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\
 5817              		.loc 1 1083 0 is_stmt 1
 5818 3e2a 488B8598 		movq	-13672(%rbp), %rax
 5818      CAFFFF
 5819 3e31 4889C6   		movq	%rax, %rsi
 5820 3e34 BF000000 		movl	$.LC130, %edi
 5820      00
 5821 3e39 B8000000 		movl	$0, %eax
 5821      00
 5822 3e3e E8000000 		call	printf
 5822      00
 5823 3e43 EB2F     		jmp	.L302
 5824              	.L303:
1084:main.c        **** 			}
1085:main.c        **** 		} else {
1086:main.c        **** 			fprintf(stderr, "JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n
 5825              		.loc 1 1086 0
 5826 3e45 488B0500 		movq	stderr(%rip), %rax
 5826      000000
 5827 3e4c 488B9598 		movq	-13672(%rbp), %rdx
 5827      CAFFFF
 5828 3e53 BE000000 		movl	$.LC131, %esi
 5828      00
 5829 3e58 4889C7   		movq	%rax, %rdi
 5830 3e5b B8000000 		movl	$0, %eax
 5830      00
 5831 3e60 E8000000 		call	fprintf
 5831      00
1087:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5832              		.loc 1 1087 0
 5833 3e65 C78598C9 		movl	$12, -13928(%rbp)
 5833      FFFF0C00 
 5833      0000
 5834 3e6f E9140D00 		jmp	.L276
 5834      00
 5835              	.L302:
1088:main.c        **** 		}
1089:main.c        **** 	}
1090:main.c        **** 
1091:main.c        **** 	if ( progOpt->count ) {
 5836              		.loc 1 1091 0
 5837 3e74 488B8530 		movq	-13776(%rbp), %rax
 5837      CAFFFF
 5838 3e7b 8B4060   		movl	96(%rax), %eax
 5839 3e7e 85C0     		testl	%eax, %eax
 5840 3e80 0F84C900 		je	.L310
 5840      0000
1092:main.c        **** 		printf("Programming device...\n");
 5841              		.loc 1 1092 0
 5842 3e86 BF000000 		movl	$.LC132, %edi
 5842      00
 5843 3e8b E8000000 		call	puts
 5843      00
1093:main.c        **** 		if ( isNeroCapable ) {
 5844              		.loc 1 1093 0
 5845 3e90 80BD8DC9 		cmpb	$0, -13939(%rbp)
 5845      FFFF00
 5846 3e97 0F848300 		je	.L311
 5846      0000
1094:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 5847              		.loc 1 1094 0
 5848 3e9d 488B85D8 		movq	-13864(%rbp), %rax
 5848      C9FFFF
 5849 3ea4 488D95E0 		leaq	-13856(%rbp), %rdx
 5849      C9FFFF
 5850 3eab BE000000 		movl	$0, %esi
 5850      00
 5851 3eb0 4889C7   		movq	%rax, %rdi
 5852 3eb3 E8000000 		call	flSelectConduit
 5852      00
 5853 3eb8 89859CC9 		movl	%eax, -13924(%rbp)
 5853      FFFF
1095:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5854              		.loc 1 1095 0
 5855 3ebe 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5855      FFFF00
 5856 3ec5 740F     		je	.L312
 5857              		.loc 1 1095 0 is_stmt 0 discriminator 1
 5858 3ec7 C78598C9 		movl	$1, -13928(%rbp)
 5858      FFFF0100 
 5858      0000
 5859 3ed1 E9B20C00 		jmp	.L276
 5859      00
 5860              	.L312:
1096:main.c        **** 			fStatus = flProgram(handle, progOpt->sval[0], NULL, &error);
 5861              		.loc 1 1096 0 is_stmt 1
 5862 3ed6 488B8530 		movq	-13776(%rbp), %rax
 5862      CAFFFF
 5863 3edd 488B4068 		movq	104(%rax), %rax
 5864 3ee1 488B30   		movq	(%rax), %rsi
 5865 3ee4 488B85D8 		movq	-13864(%rbp), %rax
 5865      C9FFFF
 5866 3eeb 488D95E0 		leaq	-13856(%rbp), %rdx
 5866      C9FFFF
 5867 3ef2 4889D1   		movq	%rdx, %rcx
 5868 3ef5 BA000000 		movl	$0, %edx
 5868      00
 5869 3efa 4889C7   		movq	%rax, %rdi
 5870 3efd E8000000 		call	flProgram
 5870      00
 5871 3f02 89859CC9 		movl	%eax, -13924(%rbp)
 5871      FFFF
1097:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5872              		.loc 1 1097 0
 5873 3f08 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5873      FFFF00
 5874 3f0f 743E     		je	.L310
 5875              		.loc 1 1097 0 is_stmt 0 discriminator 1
 5876 3f11 C78598C9 		movl	$1, -13928(%rbp)
 5876      FFFF0100 
 5876      0000
 5877 3f1b E9680C00 		jmp	.L276
 5877      00
 5878              	.L311:
1098:main.c        **** 		} else {
1099:main.c        **** 			fprintf(stderr, "Program operation requested but device at %s does not support NeroProg\n", vp);
 5879              		.loc 1 1099 0 is_stmt 1
 5880 3f20 488B0500 		movq	stderr(%rip), %rax
 5880      000000
 5881 3f27 488B9598 		movq	-13672(%rbp), %rdx
 5881      CAFFFF
 5882 3f2e BE000000 		movl	$.LC133, %esi
 5882      00
 5883 3f33 4889C7   		movq	%rax, %rdi
 5884 3f36 B8000000 		movl	$0, %eax
 5884      00
 5885 3f3b E8000000 		call	fprintf
 5885      00
1100:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5886              		.loc 1 1100 0
 5887 3f40 C78598C9 		movl	$12, -13928(%rbp)
 5887      FFFF0C00 
 5887      0000
 5888 3f4a E9390C00 		jmp	.L276
 5888      00
 5889              	.L310:
1101:main.c        **** 		}
1102:main.c        **** 	}
1103:main.c        **** 
1104:main.c        **** 	if ( benOpt->count ) {
 5890              		.loc 1 1104 0
 5891 3f4f 488B8550 		movq	-13744(%rbp), %rax
 5891      CAFFFF
 5892 3f56 8B4060   		movl	96(%rax), %eax
 5893 3f59 85C0     		testl	%eax, %eax
 5894 3f5b 7407     		je	.L313
1105:main.c        **** 		enableBenchmarking = true;
 5895              		.loc 1 1105 0
 5896 3f5d C6050000 		movb	$1, enableBenchmarking(%rip)
 5896      000001
 5897              	.L313:
1106:main.c        **** 	}
1107:main.c        **** 	
1108:main.c        **** 	if ( actOpt->count ) {
 5898              		.loc 1 1108 0
 5899 3f64 488B8540 		movq	-13760(%rbp), %rax
 5899      CAFFFF
 5900 3f6b 8B4060   		movl	96(%rax), %eax
 5901 3f6e 85C0     		testl	%eax, %eax
 5902 3f70 0F845201 		je	.L314
 5902      0000
1109:main.c        **** 		printf("Executing CommFPGA actions on FPGALink device %s...\n", vp);
 5903              		.loc 1 1109 0
 5904 3f76 488B8598 		movq	-13672(%rbp), %rax
 5904      CAFFFF
 5905 3f7d 4889C6   		movq	%rax, %rsi
 5906 3f80 BF000000 		movl	$.LC134, %edi
 5906      00
 5907 3f85 B8000000 		movl	$0, %eax
 5907      00
 5908 3f8a E8000000 		call	printf
 5908      00
1110:main.c        **** 		if ( isCommCapable ) {
 5909              		.loc 1 1110 0
 5910 3f8f 80BD8EC9 		cmpb	$0, -13938(%rbp)
 5910      FFFF00
 5911 3f96 0F84FD00 		je	.L315
 5911      0000
 5912              	.LBB56:
1111:main.c        **** 			uint8 isRunning;
1112:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 5913              		.loc 1 1112 0
 5914 3f9c 0FB68D8C 		movzbl	-13940(%rbp), %ecx
 5914      C9FFFF
 5915 3fa3 488B85D8 		movq	-13864(%rbp), %rax
 5915      C9FFFF
 5916 3faa 488D95E0 		leaq	-13856(%rbp), %rdx
 5916      C9FFFF
 5917 3fb1 89CE     		movl	%ecx, %esi
 5918 3fb3 4889C7   		movq	%rax, %rdi
 5919 3fb6 E8000000 		call	flSelectConduit
 5919      00
 5920 3fbb 89859CC9 		movl	%eax, -13924(%rbp)
 5920      FFFF
1113:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5921              		.loc 1 1113 0
 5922 3fc1 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5922      FFFF00
 5923 3fc8 740F     		je	.L316
 5924              		.loc 1 1113 0 is_stmt 0 discriminator 1
 5925 3fca C78598C9 		movl	$1, -13928(%rbp)
 5925      FFFF0100 
 5925      0000
 5926 3fd4 E9AF0B00 		jmp	.L276
 5926      00
 5927              	.L316:
1114:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 5928              		.loc 1 1114 0 is_stmt 1
 5929 3fd9 488B85D8 		movq	-13864(%rbp), %rax
 5929      C9FFFF
 5930 3fe0 488D95E0 		leaq	-13856(%rbp), %rdx
 5930      C9FFFF
 5931 3fe7 488D8DF0 		leaq	-13840(%rbp), %rcx
 5931      C9FFFF
 5932 3fee 4889CE   		movq	%rcx, %rsi
 5933 3ff1 4889C7   		movq	%rax, %rdi
 5934 3ff4 E8000000 		call	flIsFPGARunning
 5934      00
 5935 3ff9 89859CC9 		movl	%eax, -13924(%rbp)
 5935      FFFF
1115:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5936              		.loc 1 1115 0
 5937 3fff 83BD9CC9 		cmpl	$0, -13924(%rbp)
 5937      FFFF00
 5938 4006 740F     		je	.L318
 5939              		.loc 1 1115 0 is_stmt 0 discriminator 1
 5940 4008 C78598C9 		movl	$1, -13928(%rbp)
 5940      FFFF0100 
 5940      0000
 5941 4012 E9710B00 		jmp	.L276
 5941      00
 5942              	.L318:
1116:main.c        **** 			if ( isRunning ) {
 5943              		.loc 1 1116 0 is_stmt 1
 5944 4017 0FB685F0 		movzbl	-13840(%rbp), %eax
 5944      C9FFFF
 5945 401e 84C0     		testb	%al, %al
 5946 4020 7447     		je	.L319
1117:main.c        **** 				pStatus = parseLine(handle, actOpt->sval[0], &error);
 5947              		.loc 1 1117 0
 5948 4022 488B8540 		movq	-13760(%rbp), %rax
 5948      CAFFFF
 5949 4029 488B4068 		movq	104(%rax), %rax
 5950 402d 488B08   		movq	(%rax), %rcx
 5951 4030 488B85D8 		movq	-13864(%rbp), %rax
 5951      C9FFFF
 5952 4037 488D95E0 		leaq	-13856(%rbp), %rdx
 5952      C9FFFF
 5953 403e 4889CE   		movq	%rcx, %rsi
 5954 4041 4889C7   		movq	%rax, %rdi
 5955 4044 E8F9C5FF 		call	parseLine
 5955      FF
 5956 4049 8985C8C9 		movl	%eax, -13880(%rbp)
 5956      FFFF
1118:main.c        **** 				CHECK_STATUS(pStatus, pStatus, cleanup);
 5957              		.loc 1 1118 0
 5958 404f 83BDC8C9 		cmpl	$0, -13880(%rbp)
 5958      FFFF00
 5959 4056 7470     		je	.L314
 5960              		.loc 1 1118 0 is_stmt 0 discriminator 1
 5961 4058 8B85C8C9 		movl	-13880(%rbp), %eax
 5961      FFFF
 5962 405e 898598C9 		movl	%eax, -13928(%rbp)
 5962      FFFF
 5963 4064 E91F0B00 		jmp	.L276
 5963      00
 5964              	.L319:
1119:main.c        **** 			} else {
1120:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 5965              		.loc 1 1120 0 is_stmt 1
 5966 4069 488B0500 		movq	stderr(%rip), %rax
 5966      000000
 5967 4070 488B9598 		movq	-13672(%rbp), %rdx
 5967      CAFFFF
 5968 4077 BE000000 		movl	$.LC135, %esi
 5968      00
 5969 407c 4889C7   		movq	%rax, %rdi
 5970 407f B8000000 		movl	$0, %eax
 5970      00
 5971 4084 E8000000 		call	fprintf
 5971      00
1121:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 5972              		.loc 1 1121 0
 5973 4089 C78598C9 		movl	$12, -13928(%rbp)
 5973      FFFF0C00 
 5973      0000
 5974 4093 90       		nop
 5975 4094 E9EF0A00 		jmp	.L276
 5975      00
 5976              	.L315:
 5977              	.LBE56:
1122:main.c        **** 			}
1123:main.c        **** 		} else {
1124:main.c        **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 5978              		.loc 1 1124 0
 5979 4099 488B0500 		movq	stderr(%rip), %rax
 5979      000000
 5980 40a0 488B9598 		movq	-13672(%rbp), %rdx
 5980      CAFFFF
 5981 40a7 BE000000 		movl	$.LC136, %esi
 5981      00
 5982 40ac 4889C7   		movq	%rax, %rdi
 5983 40af B8000000 		movl	$0, %eax
 5983      00
 5984 40b4 E8000000 		call	fprintf
 5984      00
1125:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5985              		.loc 1 1125 0
 5986 40b9 C78598C9 		movl	$12, -13928(%rbp)
 5986      FFFF0C00 
 5986      0000
 5987 40c3 E9C00A00 		jmp	.L276
 5987      00
 5988              	.L314:
1126:main.c        **** 		}
1127:main.c        **** 	}
1128:main.c        **** 
1129:main.c        **** 	if ( dumpOpt->count ) {
 5989              		.loc 1 1129 0
 5990 40c8 488B8560 		movq	-13728(%rbp), %rax
 5990      CAFFFF
 5991 40cf 8B4060   		movl	96(%rax), %eax
 5992 40d2 85C0     		testl	%eax, %eax
 5993 40d4 0F84D002 		je	.L321
 5993      0000
 5994              	.LBB57:
1130:main.c        **** 		const char *fileName;
1131:main.c        **** 		unsigned long chan = strtoul(dumpOpt->sval[0], (char**)&fileName, 10);
 5995              		.loc 1 1131 0
 5996 40da 488B8560 		movq	-13728(%rbp), %rax
 5996      CAFFFF
 5997 40e1 488B4068 		movq	104(%rax), %rax
 5998 40e5 488B00   		movq	(%rax), %rax
 5999 40e8 488D8DE8 		leaq	-13848(%rbp), %rcx
 5999      C9FFFF
 6000 40ef BA0A0000 		movl	$10, %edx
 6000      00
 6001 40f4 4889CE   		movq	%rcx, %rsi
 6002 40f7 4889C7   		movq	%rax, %rdi
 6003 40fa E8000000 		call	strtoul
 6003      00
 6004 40ff 488985A8 		movq	%rax, -13656(%rbp)
 6004      CAFFFF
1132:main.c        **** 		FILE *file = NULL;
 6005              		.loc 1 1132 0
 6006 4106 48C785B0 		movq	$0, -13648(%rbp)
 6006      CAFFFF00 
 6006      000000
1133:main.c        **** 		const uint8 *recvData;
1134:main.c        **** 		uint32 actualLength;
1135:main.c        **** 		if ( *fileName != ':' ) {
 6007              		.loc 1 1135 0
 6008 4111 488B85E8 		movq	-13848(%rbp), %rax
 6008      C9FFFF
 6009 4118 0FB600   		movzbl	(%rax), %eax
 6010 411b 3C3A     		cmpb	$58, %al
 6011 411d 742F     		je	.L322
1136:main.c        **** 			fprintf(stderr, "%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n", progName);
 6012              		.loc 1 1136 0
 6013 411f 488B0500 		movq	stderr(%rip), %rax
 6013      000000
 6014 4126 488B9588 		movq	-13688(%rbp), %rdx
 6014      CAFFFF
 6015 412d BE000000 		movl	$.LC137, %esi
 6015      00
 6016 4132 4889C7   		movq	%rax, %rdi
 6017 4135 B8000000 		movl	$0, %eax
 6017      00
 6018 413a E8000000 		call	fprintf
 6018      00
1137:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6019              		.loc 1 1137 0
 6020 413f C78598C9 		movl	$12, -13928(%rbp)
 6020      FFFF0C00 
 6020      0000
 6021 4149 E93A0A00 		jmp	.L276
 6021      00
 6022              	.L322:
1138:main.c        **** 		}
1139:main.c        **** 		fileName++;
 6023              		.loc 1 1139 0
 6024 414e 488B85E8 		movq	-13848(%rbp), %rax
 6024      C9FFFF
 6025 4155 4883C001 		addq	$1, %rax
 6026 4159 488985E8 		movq	%rax, -13848(%rbp)
 6026      C9FFFF
1140:main.c        **** 		printf("Copying from channel %lu to %s", chan, fileName);
 6027              		.loc 1 1140 0
 6028 4160 488B95E8 		movq	-13848(%rbp), %rdx
 6028      C9FFFF
 6029 4167 488B85A8 		movq	-13656(%rbp), %rax
 6029      CAFFFF
 6030 416e 4889C6   		movq	%rax, %rsi
 6031 4171 BF000000 		movl	$.LC138, %edi
 6031      00
 6032 4176 B8000000 		movl	$0, %eax
 6032      00
 6033 417b E8000000 		call	printf
 6033      00
1141:main.c        **** 		file = fopen(fileName, "wb");
 6034              		.loc 1 1141 0
 6035 4180 488B85E8 		movq	-13848(%rbp), %rax
 6035      C9FFFF
 6036 4187 BE000000 		movl	$.LC17, %esi
 6036      00
 6037 418c 4889C7   		movq	%rax, %rdi
 6038 418f E8000000 		call	fopen
 6038      00
 6039 4194 488985B0 		movq	%rax, -13648(%rbp)
 6039      CAFFFF
1142:main.c        **** 		CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 6040              		.loc 1 1142 0
 6041 419b 4883BDB0 		cmpq	$0, -13648(%rbp)
 6041      CAFFFF00 
 6042 41a3 750F     		jne	.L324
 6043              		.loc 1 1142 0 is_stmt 0 discriminator 1
 6044 41a5 C78598C9 		movl	$11, -13928(%rbp)
 6044      FFFF0B00 
 6044      0000
 6045 41af E9D40900 		jmp	.L276
 6045      00
 6046              	.L324:
1143:main.c        **** 		sigRegisterHandler();
 6047              		.loc 1 1143 0 is_stmt 1
 6048 41b4 E8000000 		call	sigRegisterHandler
 6048      00
1144:main.c        **** 		fStatus = flSelectConduit(handle, conduit, &error);
 6049              		.loc 1 1144 0
 6050 41b9 0FB68D8C 		movzbl	-13940(%rbp), %ecx
 6050      C9FFFF
 6051 41c0 488B85D8 		movq	-13864(%rbp), %rax
 6051      C9FFFF
 6052 41c7 488D95E0 		leaq	-13856(%rbp), %rdx
 6052      C9FFFF
 6053 41ce 89CE     		movl	%ecx, %esi
 6054 41d0 4889C7   		movq	%rax, %rdi
 6055 41d3 E8000000 		call	flSelectConduit
 6055      00
 6056 41d8 89859CC9 		movl	%eax, -13924(%rbp)
 6056      FFFF
1145:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6057              		.loc 1 1145 0
 6058 41de 83BD9CC9 		cmpl	$0, -13924(%rbp)
 6058      FFFF00
 6059 41e5 740F     		je	.L325
 6060              		.loc 1 1145 0 is_stmt 0 discriminator 1
 6061 41e7 C78598C9 		movl	$1, -13928(%rbp)
 6061      FFFF0100 
 6061      0000
 6062 41f1 E9920900 		jmp	.L276
 6062      00
 6063              	.L325:
1146:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 6064              		.loc 1 1146 0 is_stmt 1
 6065 41f6 488B85A8 		movq	-13656(%rbp), %rax
 6065      CAFFFF
 6066 41fd 0FB6F0   		movzbl	%al, %esi
 6067 4200 488B85D8 		movq	-13864(%rbp), %rax
 6067      C9FFFF
 6068 4207 488D95E0 		leaq	-13856(%rbp), %rdx
 6068      C9FFFF
 6069 420e 4989D0   		movq	%rdx, %r8
 6070 4211 B9000000 		movl	$0, %ecx
 6070      00
 6071 4216 BA005800 		movl	$22528, %edx
 6071      00
 6072 421b 4889C7   		movq	%rax, %rdi
 6073 421e E8000000 		call	flReadChannelAsyncSubmit
 6073      00
 6074 4223 89859CC9 		movl	%eax, -13924(%rbp)
 6074      FFFF
1147:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6075              		.loc 1 1147 0
 6076 4229 83BD9CC9 		cmpl	$0, -13924(%rbp)
 6076      FFFF00
 6077 4230 740F     		je	.L326
 6078              		.loc 1 1147 0 is_stmt 0 discriminator 1
 6079 4232 C78598C9 		movl	$1, -13928(%rbp)
 6079      FFFF0100 
 6079      0000
 6080 423c E9470900 		jmp	.L276
 6080      00
 6081              	.L326:
1148:main.c        **** 		do {
1149:main.c        **** 			fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 6082              		.loc 1 1149 0 is_stmt 1
 6083 4241 488B85A8 		movq	-13656(%rbp), %rax
 6083      CAFFFF
 6084 4248 0FB6F0   		movzbl	%al, %esi
 6085 424b 488B85D8 		movq	-13864(%rbp), %rax
 6085      C9FFFF
 6086 4252 488D95E0 		leaq	-13856(%rbp), %rdx
 6086      C9FFFF
 6087 4259 4989D0   		movq	%rdx, %r8
 6088 425c B9000000 		movl	$0, %ecx
 6088      00
 6089 4261 BA005800 		movl	$22528, %edx
 6089      00
 6090 4266 4889C7   		movq	%rax, %rdi
 6091 4269 E8000000 		call	flReadChannelAsyncSubmit
 6091      00
 6092 426e 89859CC9 		movl	%eax, -13924(%rbp)
 6092      FFFF
1150:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6093              		.loc 1 1150 0
 6094 4274 83BD9CC9 		cmpl	$0, -13924(%rbp)
 6094      FFFF00
 6095 427b 740F     		je	.L327
 6096              		.loc 1 1150 0 is_stmt 0 discriminator 1
 6097 427d C78598C9 		movl	$1, -13928(%rbp)
 6097      FFFF0100 
 6097      0000
 6098 4287 E9FC0800 		jmp	.L276
 6098      00
 6099              	.L327:
1151:main.c        **** 			fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6100              		.loc 1 1151 0 is_stmt 1
 6101 428c 488B85D8 		movq	-13864(%rbp), %rax
 6101      C9FFFF
 6102 4293 488DBDE0 		leaq	-13856(%rbp), %rdi
 6102      C9FFFF
 6103 429a 488D8D94 		leaq	-13932(%rbp), %rcx
 6103      C9FFFF
 6104 42a1 488D9594 		leaq	-13932(%rbp), %rdx
 6104      C9FFFF
 6105 42a8 488DB5F0 		leaq	-13840(%rbp), %rsi
 6105      C9FFFF
 6106 42af 4989F8   		movq	%rdi, %r8
 6107 42b2 4889C7   		movq	%rax, %rdi
 6108 42b5 E8000000 		call	flReadChannelAsyncAwait
 6108      00
 6109 42ba 89859CC9 		movl	%eax, -13924(%rbp)
 6109      FFFF
1152:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6110              		.loc 1 1152 0
 6111 42c0 83BD9CC9 		cmpl	$0, -13924(%rbp)
 6111      FFFF00
 6112 42c7 740F     		je	.L328
 6113              		.loc 1 1152 0 is_stmt 0 discriminator 1
 6114 42c9 C78598C9 		movl	$1, -13928(%rbp)
 6114      FFFF0100 
 6114      0000
 6115 42d3 E9B00800 		jmp	.L276
 6115      00
 6116              	.L328:
1153:main.c        **** 			fwrite(recvData, 1, actualLength, file);
 6117              		.loc 1 1153 0 is_stmt 1
 6118 42d8 8B8594C9 		movl	-13932(%rbp), %eax
 6118      FFFF
 6119 42de 89C6     		movl	%eax, %esi
 6120 42e0 488B85F0 		movq	-13840(%rbp), %rax
 6120      C9FFFF
 6121 42e7 488B95B0 		movq	-13648(%rbp), %rdx
 6121      CAFFFF
 6122 42ee 4889D1   		movq	%rdx, %rcx
 6123 42f1 4889F2   		movq	%rsi, %rdx
 6124 42f4 BE010000 		movl	$1, %esi
 6124      00
 6125 42f9 4889C7   		movq	%rax, %rdi
 6126 42fc E8000000 		call	fwrite
 6126      00
1154:main.c        **** 			printf(".");
 6127              		.loc 1 1154 0
 6128 4301 BF2E0000 		movl	$46, %edi
 6128      00
 6129 4306 E8000000 		call	putchar
 6129      00
1155:main.c        **** 		} while ( !sigIsRaised() );
 6130              		.loc 1 1155 0
 6131 430b E8000000 		call	sigIsRaised
 6131      00
 6132 4310 83F001   		xorl	$1, %eax
 6133 4313 84C0     		testb	%al, %al
 6134 4315 0F8526FF 		jne	.L326
 6134      FFFF
1156:main.c        **** 		printf("\nCaught SIGINT, quitting...\n");
 6135              		.loc 1 1156 0
 6136 431b BF000000 		movl	$.LC139, %edi
 6136      00
 6137 4320 E8000000 		call	puts
 6137      00
1157:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6138              		.loc 1 1157 0
 6139 4325 488B85D8 		movq	-13864(%rbp), %rax
 6139      C9FFFF
 6140 432c 488DBDE0 		leaq	-13856(%rbp), %rdi
 6140      C9FFFF
 6141 4333 488D8D94 		leaq	-13932(%rbp), %rcx
 6141      C9FFFF
 6142 433a 488D9594 		leaq	-13932(%rbp), %rdx
 6142      C9FFFF
 6143 4341 488DB5F0 		leaq	-13840(%rbp), %rsi
 6143      C9FFFF
 6144 4348 4989F8   		movq	%rdi, %r8
 6145 434b 4889C7   		movq	%rax, %rdi
 6146 434e E8000000 		call	flReadChannelAsyncAwait
 6146      00
 6147 4353 89859CC9 		movl	%eax, -13924(%rbp)
 6147      FFFF
1158:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6148              		.loc 1 1158 0
 6149 4359 83BD9CC9 		cmpl	$0, -13924(%rbp)
 6149      FFFF00
 6150 4360 7410     		je	.L329
 6151              		.loc 1 1158 0 is_stmt 0 discriminator 1
 6152 4362 C78598C9 		movl	$1, -13928(%rbp)
 6152      FFFF0100 
 6152      0000
 6153 436c 90       		nop
 6154 436d E9160800 		jmp	.L276
 6154      00
 6155              	.L329:
1159:main.c        **** 		fwrite(recvData, 1, actualLength, file);
 6156              		.loc 1 1159 0 is_stmt 1
 6157 4372 8B8594C9 		movl	-13932(%rbp), %eax
 6157      FFFF
 6158 4378 89C6     		movl	%eax, %esi
 6159 437a 488B85F0 		movq	-13840(%rbp), %rax
 6159      C9FFFF
 6160 4381 488B95B0 		movq	-13648(%rbp), %rdx
 6160      CAFFFF
 6161 4388 4889D1   		movq	%rdx, %rcx
 6162 438b 4889F2   		movq	%rsi, %rdx
 6163 438e BE010000 		movl	$1, %esi
 6163      00
 6164 4393 4889C7   		movq	%rax, %rdi
 6165 4396 E8000000 		call	fwrite
 6165      00
1160:main.c        **** 		fclose(file);
 6166              		.loc 1 1160 0
 6167 439b 488B85B0 		movq	-13648(%rbp), %rax
 6167      CAFFFF
 6168 43a2 4889C7   		movq	%rax, %rdi
 6169 43a5 E8000000 		call	fclose
 6169      00
 6170              	.L321:
 6171              	.LBE57:
1161:main.c        **** 	}
1162:main.c        **** //   cccccccccccccccccccccccccccccc
1163:main.c        ****     if( rpOpt->count )
 6172              		.loc 1 1163 0
 6173 43aa 488B8510 		movq	-13808(%rbp), %rax
 6173      CAFFFF
 6174 43b1 8B4060   		movl	96(%rax), %eax
 6175 43b4 85C0     		testl	%eax, %eax
 6176 43b6 0F84F605 		je	.L330
 6176      0000
 6177              	.LBB58:
1164:main.c        ****     {
1165:main.c        ****         //printf("Got the file %s\n", rpOpt->sval[0]);
1166:main.c        ****    		int table[640][5];
1167:main.c        ****         int rows;
1168:main.c        **** 		const char* path = rpOpt->sval[0];
 6178              		.loc 1 1168 0
 6179 43bc 488B8510 		movq	-13808(%rbp), %rax
 6179      CAFFFF
 6180 43c3 488B4068 		movq	104(%rax), %rax
 6181 43c7 488B00   		movq	(%rax), %rax
 6182 43ca 488985B8 		movq	%rax, -13640(%rbp)
 6182      CAFFFF
 6183              	.L331:
1169:main.c        **** 		entire_process:
1170:main.c        **** 		rows = read_table(path, table);
 6184              		.loc 1 1170 0
 6185 43d1 488D95D0 		leaq	-12848(%rbp), %rdx
 6185      CDFFFF
 6186 43d8 488B85B8 		movq	-13640(%rbp), %rax
 6186      CAFFFF
 6187 43df 4889D6   		movq	%rdx, %rsi
 6188 43e2 4889C7   		movq	%rax, %rdi
 6189 43e5 E8000000 		call	read_table
 6189      00
 6190 43ea 8985CCC9 		movl	%eax, -13876(%rbp)
 6190      FFFF
 6191              	.LBB59:
1171:main.c        **** 		for(int i=0; i<15; i++)
 6192              		.loc 1 1171 0
 6193 43f0 C785A8C9 		movl	$0, -13912(%rbp)
 6193      FFFF0000 
 6193      0000
 6194 43fa E9DF0000 		jmp	.L332
 6194      00
 6195              	.L333:
1172:main.c        **** 		{
1173:main.c        **** 			printf("%d, %d, %d, %d, %d\n", table[i][0], table[i][1], table[i][2], table[i][3], table[i][4]);
 6196              		.loc 1 1173 0 discriminator 3
 6197 43ff 8B85A8C9 		movl	-13912(%rbp), %eax
 6197      FFFF
 6198 4405 4863D0   		movslq	%eax, %rdx
 6199 4408 4889D0   		movq	%rdx, %rax
 6200 440b 48C1E002 		salq	$2, %rax
 6201 440f 4801D0   		addq	%rdx, %rax
 6202 4412 48C1E002 		salq	$2, %rax
 6203 4416 488D5DF0 		leaq	-16(%rbp), %rbx
 6204 441a 4801D8   		addq	%rbx, %rax
 6205 441d 482D1032 		subq	$12816, %rax
 6205      0000
 6206 4423 448B00   		movl	(%rax), %r8d
 6207 4426 8B85A8C9 		movl	-13912(%rbp), %eax
 6207      FFFF
 6208 442c 4863D0   		movslq	%eax, %rdx
 6209 442f 4889D0   		movq	%rdx, %rax
 6210 4432 48C1E002 		salq	$2, %rax
 6211 4436 4801D0   		addq	%rdx, %rax
 6212 4439 48C1E002 		salq	$2, %rax
 6213 443d 488D5DF0 		leaq	-16(%rbp), %rbx
 6214 4441 4801D8   		addq	%rbx, %rax
 6215 4444 482D1432 		subq	$12820, %rax
 6215      0000
 6216 444a 8B38     		movl	(%rax), %edi
 6217 444c 8B85A8C9 		movl	-13912(%rbp), %eax
 6217      FFFF
 6218 4452 4863D0   		movslq	%eax, %rdx
 6219 4455 4889D0   		movq	%rdx, %rax
 6220 4458 48C1E002 		salq	$2, %rax
 6221 445c 4801D0   		addq	%rdx, %rax
 6222 445f 48C1E002 		salq	$2, %rax
 6223 4463 488D5DF0 		leaq	-16(%rbp), %rbx
 6224 4467 4801D8   		addq	%rbx, %rax
 6225 446a 482D1832 		subq	$12824, %rax
 6225      0000
 6226 4470 8B08     		movl	(%rax), %ecx
 6227 4472 8B85A8C9 		movl	-13912(%rbp), %eax
 6227      FFFF
 6228 4478 4863D0   		movslq	%eax, %rdx
 6229 447b 4889D0   		movq	%rdx, %rax
 6230 447e 48C1E002 		salq	$2, %rax
 6231 4482 4801D0   		addq	%rdx, %rax
 6232 4485 48C1E002 		salq	$2, %rax
 6233 4489 488D5DF0 		leaq	-16(%rbp), %rbx
 6234 448d 4801D8   		addq	%rbx, %rax
 6235 4490 482D1C32 		subq	$12828, %rax
 6235      0000
 6236 4496 8B30     		movl	(%rax), %esi
 6237 4498 8B85A8C9 		movl	-13912(%rbp), %eax
 6237      FFFF
 6238 449e 4863D0   		movslq	%eax, %rdx
 6239 44a1 4889D0   		movq	%rdx, %rax
 6240 44a4 48C1E002 		salq	$2, %rax
 6241 44a8 4801D0   		addq	%rdx, %rax
 6242 44ab 48C1E002 		salq	$2, %rax
 6243 44af 488D5DF0 		leaq	-16(%rbp), %rbx
 6244 44b3 4801D8   		addq	%rbx, %rax
 6245 44b6 482D2032 		subq	$12832, %rax
 6245      0000
 6246 44bc 8B00     		movl	(%rax), %eax
 6247 44be 4589C1   		movl	%r8d, %r9d
 6248 44c1 4189F8   		movl	%edi, %r8d
 6249 44c4 89F2     		movl	%esi, %edx
 6250 44c6 89C6     		movl	%eax, %esi
 6251 44c8 BF000000 		movl	$.LC140, %edi
 6251      00
 6252 44cd B8000000 		movl	$0, %eax
 6252      00
 6253 44d2 E8000000 		call	printf
 6253      00
1171:main.c        **** 		for(int i=0; i<15; i++)
 6254              		.loc 1 1171 0 discriminator 3
 6255 44d7 8385A8C9 		addl	$1, -13912(%rbp)
 6255      FFFF01
 6256              	.L332:
1171:main.c        **** 		for(int i=0; i<15; i++)
 6257              		.loc 1 1171 0 is_stmt 0 discriminator 1
 6258 44de 83BDA8C9 		cmpl	$14, -13912(%rbp)
 6258      FFFF0E
 6259 44e5 0F8E14FF 		jle	.L333
 6259      FFFF
 6260              	.LBE59:
1174:main.c        **** 		}
1175:main.c        ****     
1176:main.c        ****     	sleep(1); 
 6261              		.loc 1 1176 0 is_stmt 1
 6262 44eb BF010000 		movl	$1, %edi
 6262      00
 6263 44f0 B8000000 		movl	$0, %eax
 6263      00
 6264 44f5 E8000000 		call	sleep
 6264      00
 6265              	.L334:
 6266              	.LBB60:
1177:main.c        ****     	int x_coordinate[65],y_coordinate[65]; 
1178:main.c        ****     	host_label_2:
1179:main.c        ****     	for(int i=0;i<65;i++) { x_coordinate[i]=-1; y_coordinate[i]=-1; }
 6267              		.loc 1 1179 0
 6268 44fa C785ACC9 		movl	$0, -13908(%rbp)
 6268      FFFF0000 
 6268      0000
 6269 4504 EB2D     		jmp	.L335
 6270              	.L336:
 6271              		.loc 1 1179 0 is_stmt 0 discriminator 3
 6272 4506 8B85ACC9 		movl	-13908(%rbp), %eax
 6272      FFFF
 6273 450c 4898     		cltq
 6274 450e C78485B0 		movl	$-1, -13392(%rbp,%rax,4)
 6274      CBFFFFFF 
 6274      FFFFFF
 6275 4519 8B85ACC9 		movl	-13908(%rbp), %eax
 6275      FFFF
 6276 451f 4898     		cltq
 6277 4521 C78485C0 		movl	$-1, -13120(%rbp,%rax,4)
 6277      CCFFFFFF 
 6277      FFFFFF
 6278 452c 8385ACC9 		addl	$1, -13908(%rbp)
 6278      FFFF01
 6279              	.L335:
 6280              		.loc 1 1179 0 discriminator 1
 6281 4533 83BDACC9 		cmpl	$64, -13908(%rbp)
 6281      FFFF40
 6282 453a 7ECA     		jle	.L336
 6283              	.LBE60:
1180:main.c        ****     	int start_i=0, end_i=64; 
 6284              		.loc 1 1180 0 is_stmt 1
 6285 453c C785D0C9 		movl	$0, -13872(%rbp)
 6285      FFFF0000 
 6285      0000
 6286 4546 C785D4C9 		movl	$64, -13868(%rbp)
 6286      FFFF4000 
 6286      0000
 6287              	.LBB61:
1181:main.c        ****     	for(int i=start_i;i<end_i;i++){
 6288              		.loc 1 1181 0
 6289 4550 8B85D0C9 		movl	-13872(%rbp), %eax
 6289      FFFF
 6290 4556 8985B0C9 		movl	%eax, -13904(%rbp)
 6290      FFFF
 6291 455c E94B0200 		jmp	.L337
 6291      00
 6292              	.L347:
1182:main.c        ****     			if(isCommCapable){
 6293              		.loc 1 1182 0
 6294 4561 80BD8EC9 		cmpb	$0, -13938(%rbp)
 6294      FFFF00
 6295 4568 0F843702 		je	.L338
 6295      0000
 6296              	.LBB62:
1183:main.c        ****     					uint8 isRunning; 
1184:main.c        ****     					fStatus=flIsFPGARunning(handle,&isRunning,&error);
 6297              		.loc 1 1184 0
 6298 456e 488B85D8 		movq	-13864(%rbp), %rax
 6298      C9FFFF
 6299 4575 488D95E0 		leaq	-13856(%rbp), %rdx
 6299      C9FFFF
 6300 457c 488D8DF0 		leaq	-13840(%rbp), %rcx
 6300      C9FFFF
 6301 4583 4889CE   		movq	%rcx, %rsi
 6302 4586 4889C7   		movq	%rax, %rdi
 6303 4589 E8000000 		call	flIsFPGARunning
 6303      00
 6304 458e 89859CC9 		movl	%eax, -13924(%rbp)
 6304      FFFF
1185:main.c        ****     					CHECK_STATUS(fStatus,FLP_LIBERR,cleanup); 
 6305              		.loc 1 1185 0
 6306 4594 83BD9CC9 		cmpl	$0, -13924(%rbp)
 6306      FFFF00
 6307 459b 740F     		je	.L339
 6308              		.loc 1 1185 0 is_stmt 0 discriminator 1
 6309 459d C78598C9 		movl	$1, -13928(%rbp)
 6309      FFFF0100 
 6309      0000
 6310 45a7 E9DC0500 		jmp	.L276
 6310      00
 6311              	.L339:
1186:main.c        ****     					if(isRunning){
 6312              		.loc 1 1186 0 is_stmt 1
 6313 45ac 0FB685F0 		movzbl	-13840(%rbp), %eax
 6313      C9FFFF
 6314 45b3 84C0     		testb	%al, %al
 6315 45b5 0F84EA01 		je	.L338
 6315      0000
 6316              	.LBB63:
1187:main.c        ****                                 printf("\n"); 
 6317              		.loc 1 1187 0
 6318 45bb BF0A0000 		movl	$10, %edi
 6318      00
 6319 45c0 E8000000 		call	putchar
 6319      00
1188:main.c        ****     							printf("attempting to read coordinates from  channel %d\n",2*i); 
 6320              		.loc 1 1188 0
 6321 45c5 8B85B0C9 		movl	-13904(%rbp), %eax
 6321      FFFF
 6322 45cb 01C0     		addl	%eax, %eax
 6323 45cd 89C6     		movl	%eax, %esi
 6324 45cf BF000000 		movl	$.LC141, %edi
 6324      00
 6325 45d4 B8000000 		movl	$0, %eax
 6325      00
 6326 45d9 E8000000 		call	printf
 6326      00
1189:main.c        ****     							char* red_data=read_4byte_from_fpga(2*i,handle,error,32); 
 6327              		.loc 1 1189 0
 6328 45de 488B95E0 		movq	-13856(%rbp), %rdx
 6328      C9FFFF
 6329 45e5 488B85D8 		movq	-13864(%rbp), %rax
 6329      C9FFFF
 6330 45ec 8B8DB0C9 		movl	-13904(%rbp), %ecx
 6330      FFFF
 6331 45f2 8D3C09   		leal	(%rcx,%rcx), %edi
 6332 45f5 B9200000 		movl	$32, %ecx
 6332      00
 6333 45fa 4889C6   		movq	%rax, %rsi
 6334 45fd E8000000 		call	read_4byte_from_fpga
 6334      00
 6335 4602 488985D0 		movq	%rax, -13616(%rbp)
 6335      CAFFFF
1190:main.c        ****     							printf("red coordinates %s from channel %d\n",red_data, 2*i); 
 6336              		.loc 1 1190 0
 6337 4609 8B85B0C9 		movl	-13904(%rbp), %eax
 6337      FFFF
 6338 460f 8D1400   		leal	(%rax,%rax), %edx
 6339 4612 488B85D0 		movq	-13616(%rbp), %rax
 6339      CAFFFF
 6340 4619 4889C6   		movq	%rax, %rsi
 6341 461c BF000000 		movl	$.LC142, %edi
 6341      00
 6342 4621 B8000000 		movl	$0, %eax
 6342      00
 6343 4626 E8000000 		call	printf
 6343      00
1191:main.c        ****     							if(red_data[0]=='f') { printf("failed to coordinates\n"); continue; }
 6344              		.loc 1 1191 0
 6345 462b 488B85D0 		movq	-13616(%rbp), %rax
 6345      CAFFFF
 6346 4632 0FB600   		movzbl	(%rax), %eax
 6347 4635 3C66     		cmpb	$102, %al
 6348 4637 750F     		jne	.L341
 6349              		.loc 1 1191 0 is_stmt 0 discriminator 1
 6350 4639 BF000000 		movl	$.LC143, %edi
 6350      00
 6351 463e E8000000 		call	puts
 6351      00
 6352 4643 E95D0100 		jmp	.L338
 6352      00
 6353              	.L341:
1192:main.c        ****                                 printf("attempting to write coordinates at channel %d\n",2*i+1); 
 6354              		.loc 1 1192 0 is_stmt 1
 6355 4648 8B85B0C9 		movl	-13904(%rbp), %eax
 6355      FFFF
 6356 464e 01C0     		addl	%eax, %eax
 6357 4650 83C001   		addl	$1, %eax
 6358 4653 89C6     		movl	%eax, %esi
 6359 4655 BF000000 		movl	$.LC144, %edi
 6359      00
 6360 465a B8000000 		movl	$0, %eax
 6360      00
 6361 465f E8000000 		call	printf
 6361      00
1193:main.c        ****     							char write_status=write_4byte_to_board(2*i+1,red_data,handle,error,32); 
 6362              		.loc 1 1193 0
 6363 4664 488B8DE0 		movq	-13856(%rbp), %rcx
 6363      C9FFFF
 6364 466b 488B95D8 		movq	-13864(%rbp), %rdx
 6364      C9FFFF
 6365 4672 8B85B0C9 		movl	-13904(%rbp), %eax
 6365      FFFF
 6366 4678 01C0     		addl	%eax, %eax
 6367 467a 8D7801   		leal	1(%rax), %edi
 6368 467d 488B85D0 		movq	-13616(%rbp), %rax
 6368      CAFFFF
 6369 4684 41B82000 		movl	$32, %r8d
 6369      0000
 6370 468a 4889C6   		movq	%rax, %rsi
 6371 468d E8000000 		call	write_4byte_to_board
 6371      00
 6372 4692 88858FC9 		movb	%al, -13937(%rbp)
 6372      FFFF
1194:main.c        ****     							if(write_status=='f') { printf("write failed , continuing for next channel\n"); continue
 6373              		.loc 1 1194 0
 6374 4698 80BD8FC9 		cmpb	$102, -13937(%rbp)
 6374      FFFF66
 6375 469f 750F     		jne	.L343
 6376              		.loc 1 1194 0 is_stmt 0 discriminator 1
 6377 46a1 BF000000 		movl	$.LC145, %edi
 6377      00
 6378 46a6 E8000000 		call	puts
 6378      00
 6379 46ab E9F50000 		jmp	.L338
 6379      00
 6380              	.L343:
1195:main.c        ****                                 printf("attempting to receive ack\n"); 
 6381              		.loc 1 1195 0 is_stmt 1
 6382 46b0 BF000000 		movl	$.LC146, %edi
 6382      00
 6383 46b5 E8000000 		call	puts
 6383      00
1196:main.c        ****     							char* ack_status=receive_ack(2*i,handle,error,1); 
 6384              		.loc 1 1196 0
 6385 46ba 488B95E0 		movq	-13856(%rbp), %rdx
 6385      C9FFFF
 6386 46c1 488B85D8 		movq	-13864(%rbp), %rax
 6386      C9FFFF
 6387 46c8 8B8DB0C9 		movl	-13904(%rbp), %ecx
 6387      FFFF
 6388 46ce 8D3C09   		leal	(%rcx,%rcx), %edi
 6389 46d1 B9010000 		movl	$1, %ecx
 6389      00
 6390 46d6 4889C6   		movq	%rax, %rsi
 6391 46d9 E8000000 		call	receive_ack
 6391      00
 6392 46de 488985D8 		movq	%rax, -13608(%rbp)
 6392      CAFFFF
1197:main.c        ****     							if(ack_status[0]=='f'){
 6393              		.loc 1 1197 0
 6394 46e5 488B85D8 		movq	-13608(%rbp), %rax
 6394      CAFFFF
 6395 46ec 0FB600   		movzbl	(%rax), %eax
 6396 46ef 3C66     		cmpb	$102, %al
 6397 46f1 7565     		jne	.L344
1198:main.c        ****                                         printf("first ack was incorrect , attempting after 5 second
 6398              		.loc 1 1198 0
 6399 46f3 BF000000 		movl	$.LC147, %edi
 6399      00
 6400 46f8 E8000000 		call	puts
 6400      00
1199:main.c        ****     									sleep(5); 
 6401              		.loc 1 1199 0
 6402 46fd BF050000 		movl	$5, %edi
 6402      00
 6403 4702 B8000000 		movl	$0, %eax
 6403      00
 6404 4707 E8000000 		call	sleep
 6404      00
1200:main.c        ****                                         printf("attempting to receive ack for second time\n"); 
 6405              		.loc 1 1200 0
 6406 470c BF000000 		movl	$.LC148, %edi
 6406      00
 6407 4711 E8000000 		call	puts
 6407      00
1201:main.c        ****     									ack_status=receive_ack(2*i,handle,error,1); 
 6408              		.loc 1 1201 0
 6409 4716 488B95E0 		movq	-13856(%rbp), %rdx
 6409      C9FFFF
 6410 471d 488B85D8 		movq	-13864(%rbp), %rax
 6410      C9FFFF
 6411 4724 8B8DB0C9 		movl	-13904(%rbp), %ecx
 6411      FFFF
 6412 472a 8D3C09   		leal	(%rcx,%rcx), %edi
 6413 472d B9010000 		movl	$1, %ecx
 6413      00
 6414 4732 4889C6   		movq	%rax, %rsi
 6415 4735 E8000000 		call	receive_ack
 6415      00
 6416 473a 488985D8 		movq	%rax, -13608(%rbp)
 6416      CAFFFF
1202:main.c        ****     									if(ack_status[0]='f'){
 6417              		.loc 1 1202 0
 6418 4741 488B85D8 		movq	-13608(%rbp), %rax
 6418      CAFFFF
 6419 4748 C60066   		movb	$102, (%rax)
1203:main.c        ****                                                 printf("second ack was also incorect\n"); 
 6420              		.loc 1 1203 0
 6421 474b BF000000 		movl	$.LC149, %edi
 6421      00
 6422 4750 E8000000 		call	puts
 6422      00
1204:main.c        ****     											/*start_i=(i+1)%64; 
1205:main.c        ****     											end_i=i+1; 
1206:main.c        ****     											i=start_i-1; 
1207:main.c        ****     											*/
1208:main.c        ****     											continue; 
 6423              		.loc 1 1208 0
 6424 4755 90       		nop
 6425 4756 EB4D     		jmp	.L338
 6426              	.L344:
1209:main.c        ****     									}
1210:main.c        ****     							}
1211:main.c        ****                                 printf("received coordinates correctly and now breaking out of this
 6427              		.loc 1 1211 0
 6428 4758 BF000000 		movl	$.LC150, %edi
 6428      00
 6429 475d E8000000 		call	puts
 6429      00
1212:main.c        ****     							get_coordinate(red_data,&x_coordinate[i],&y_coordinate[i]); 
 6430              		.loc 1 1212 0
 6431 4762 488D85C0 		leaq	-13120(%rbp), %rax
 6431      CCFFFF
 6432 4769 8B95B0C9 		movl	-13904(%rbp), %edx
 6432      FFFF
 6433 476f 4863D2   		movslq	%edx, %rdx
 6434 4772 48C1E202 		salq	$2, %rdx
 6435 4776 4801C2   		addq	%rax, %rdx
 6436 4779 488D85B0 		leaq	-13392(%rbp), %rax
 6436      CBFFFF
 6437 4780 8B8DB0C9 		movl	-13904(%rbp), %ecx
 6437      FFFF
 6438 4786 4863C9   		movslq	%ecx, %rcx
 6439 4789 48C1E102 		salq	$2, %rcx
 6440 478d 4801C1   		addq	%rax, %rcx
 6441 4790 488B85D0 		movq	-13616(%rbp), %rax
 6441      CAFFFF
 6442 4797 4889CE   		movq	%rcx, %rsi
 6443 479a 4889C7   		movq	%rax, %rdi
 6444 479d E8000000 		call	get_coordinate
 6444      00
1213:main.c        ****                                 break; 
 6445              		.loc 1 1213 0
 6446 47a2 90       		nop
 6447 47a3 EB19     		jmp	.L346
 6448              	.L338:
 6449              	.LBE63:
 6450              	.LBE62:
1181:main.c        ****     			if(isCommCapable){
 6451              		.loc 1 1181 0 discriminator 2
 6452 47a5 8385B0C9 		addl	$1, -13904(%rbp)
 6452      FFFF01
 6453              	.L337:
1181:main.c        ****     			if(isCommCapable){
 6454              		.loc 1 1181 0 is_stmt 0 discriminator 1
 6455 47ac 8B85B0C9 		movl	-13904(%rbp), %eax
 6455      FFFF
 6456 47b2 3B85D4C9 		cmpl	-13868(%rbp), %eax
 6456      FFFF
 6457 47b8 0F8CA3FD 		jl	.L347
 6457      FFFF
 6458              	.L346:
 6459              	.LBE61:
 6460              	.LBB64:
1214:main.c        ****     
1215:main.c        ****     					}
1216:main.c        ****     			}
1217:main.c        ****     	}
1218:main.c        ****     	int read_chan, write_chan; for(int i=0;i<64;i++) { if(x_coordinate[i]!=-1) { read_chan=2*i;wri
 6461              		.loc 1 1218 0 is_stmt 1
 6462 47be C785BCC9 		movl	$0, -13892(%rbp)
 6462      FFFF0000 
 6462      0000
 6463 47c8 EB3A     		jmp	.L348
 6464              	.L351:
 6465              		.loc 1 1218 0 is_stmt 0 discriminator 5
 6466 47ca 8B85BCC9 		movl	-13892(%rbp), %eax
 6466      FFFF
 6467 47d0 4898     		cltq
 6468 47d2 8B8485B0 		movl	-13392(%rbp,%rax,4), %eax
 6468      CBFFFF
 6469 47d9 83F8FF   		cmpl	$-1, %eax
 6470 47dc 741F     		je	.L349
 6471              		.loc 1 1218 0 discriminator 2
 6472 47de 8B85BCC9 		movl	-13892(%rbp), %eax
 6472      FFFF
 6473 47e4 01C0     		addl	%eax, %eax
 6474 47e6 8985B4C9 		movl	%eax, -13900(%rbp)
 6474      FFFF
 6475 47ec 8B85B4C9 		movl	-13900(%rbp), %eax
 6475      FFFF
 6476 47f2 83C001   		addl	$1, %eax
 6477 47f5 8985B8C9 		movl	%eax, -13896(%rbp)
 6477      FFFF
 6478 47fb EB10     		jmp	.L350
 6479              	.L349:
 6480              		.loc 1 1218 0 discriminator 3
 6481 47fd 8385BCC9 		addl	$1, -13892(%rbp)
 6481      FFFF01
 6482              	.L348:
 6483              		.loc 1 1218 0 discriminator 4
 6484 4804 83BDBCC9 		cmpl	$63, -13892(%rbp)
 6484      FFFF3F
 6485 480b 7EBD     		jle	.L351
 6486              	.L350:
 6487              	.LBE64:
1219:main.c        ****     	send_ack(write_chan,handle, error,32); 
 6488              		.loc 1 1219 0 is_stmt 1
 6489 480d 488B95E0 		movq	-13856(%rbp), %rdx
 6489      C9FFFF
 6490 4814 488BB5D8 		movq	-13864(%rbp), %rsi
 6490      C9FFFF
 6491 481b 8B85B8C9 		movl	-13896(%rbp), %eax
 6491      FFFF
 6492 4821 B9200000 		movl	$32, %ecx
 6492      00
 6493 4826 89C7     		movl	%eax, %edi
 6494 4828 E8000000 		call	send_ack
 6494      00
1220:main.c        ****         printf("x coordinate is %d and y coordinate is %d\n",x_coordinate[read_chan>>1],y_coordinat
 6495              		.loc 1 1220 0
 6496 482d 8B85B4C9 		movl	-13900(%rbp), %eax
 6496      FFFF
 6497 4833 D1F8     		sarl	%eax
 6498 4835 4898     		cltq
 6499 4837 8B9485C0 		movl	-13120(%rbp,%rax,4), %edx
 6499      CCFFFF
 6500 483e 8B85B4C9 		movl	-13900(%rbp), %eax
 6500      FFFF
 6501 4844 D1F8     		sarl	%eax
 6502 4846 4898     		cltq
 6503 4848 8B8485B0 		movl	-13392(%rbp,%rax,4), %eax
 6503      CBFFFF
 6504 484f 89C6     		movl	%eax, %esi
 6505 4851 BF000000 		movl	$.LC151, %edi
 6505      00
 6506 4856 B8000000 		movl	$0, %eax
 6506      00
 6507 485b E8000000 		call	printf
 6507      00
1221:main.c        ****     	char* track_data=func(x_coordinate[read_chan>>1],y_coordinate[read_chan>>1],table,rows); 
 6508              		.loc 1 1221 0
 6509 4860 8B85B4C9 		movl	-13900(%rbp), %eax
 6509      FFFF
 6510 4866 D1F8     		sarl	%eax
 6511 4868 4898     		cltq
 6512 486a 8BB485C0 		movl	-13120(%rbp,%rax,4), %esi
 6512      CCFFFF
 6513 4871 8B85B4C9 		movl	-13900(%rbp), %eax
 6513      FFFF
 6514 4877 D1F8     		sarl	%eax
 6515 4879 4898     		cltq
 6516 487b 8B8485B0 		movl	-13392(%rbp,%rax,4), %eax
 6516      CBFFFF
 6517 4882 8B8DCCC9 		movl	-13876(%rbp), %ecx
 6517      FFFF
 6518 4888 488D95D0 		leaq	-12848(%rbp), %rdx
 6518      CDFFFF
 6519 488f 89C7     		movl	%eax, %edi
 6520 4891 E8000000 		call	func
 6520      00
 6521 4896 488985C0 		movq	%rax, -13632(%rbp)
 6521      CAFFFF
1222:main.c        ****         printf("track data is %s\n", track_data); 
 6522              		.loc 1 1222 0
 6523 489d 488B85C0 		movq	-13632(%rbp), %rax
 6523      CAFFFF
 6524 48a4 4889C6   		movq	%rax, %rsi
 6525 48a7 BF000000 		movl	$.LC152, %edi
 6525      00
 6526 48ac B8000000 		movl	$0, %eax
 6526      00
 6527 48b1 E8000000 		call	printf
 6527      00
1223:main.c        ****     	write_4byte_to_board(write_chan,track_data,handle, error,32); 
 6528              		.loc 1 1223 0
 6529 48b6 488B8DE0 		movq	-13856(%rbp), %rcx
 6529      C9FFFF
 6530 48bd 488B95D8 		movq	-13864(%rbp), %rdx
 6530      C9FFFF
 6531 48c4 488BB5C0 		movq	-13632(%rbp), %rsi
 6531      CAFFFF
 6532 48cb 8B85B8C9 		movl	-13896(%rbp), %eax
 6532      FFFF
 6533 48d1 41B82000 		movl	$32, %r8d
 6533      0000
 6534 48d7 89C7     		movl	%eax, %edi
 6535 48d9 E8000000 		call	write_4byte_to_board
 6535      00
1224:main.c        ****     	char* ack_status=receive_ack(read_chan,handle, error, 256); 
 6536              		.loc 1 1224 0
 6537 48de 488B95E0 		movq	-13856(%rbp), %rdx
 6537      C9FFFF
 6538 48e5 488BB5D8 		movq	-13864(%rbp), %rsi
 6538      C9FFFF
 6539 48ec 8B85B4C9 		movl	-13900(%rbp), %eax
 6539      FFFF
 6540 48f2 B9000100 		movl	$256, %ecx
 6540      00
 6541 48f7 89C7     		movl	%eax, %edi
 6542 48f9 E8000000 		call	receive_ack
 6542      00
 6543 48fe 488985C8 		movq	%rax, -13624(%rbp)
 6543      CAFFFF
1225:main.c        ****     	if(ack_status[0]=='f') { goto host_label_2; }
 6544              		.loc 1 1225 0
 6545 4905 488B85C8 		movq	-13624(%rbp), %rax
 6545      CAFFFF
 6546 490c 0FB600   		movzbl	(%rax), %eax
 6547 490f 3C66     		cmpb	$102, %al
 6548 4911 7505     		jne	.L352
 6549 4913 E9E2FBFF 		jmp	.L334
 6549      FF
 6550              	.L352:
1226:main.c        ****     	else {
1227:main.c        ****     			write_4byte_to_board(write_chan,track_data+32,handle,error,32); 
 6551              		.loc 1 1227 0
 6552 4918 488B8DE0 		movq	-13856(%rbp), %rcx
 6552      C9FFFF
 6553 491f 488B95D8 		movq	-13864(%rbp), %rdx
 6553      C9FFFF
 6554 4926 488B85C0 		movq	-13632(%rbp), %rax
 6554      CAFFFF
 6555 492d 488D7020 		leaq	32(%rax), %rsi
 6556 4931 8B85B8C9 		movl	-13896(%rbp), %eax
 6556      FFFF
 6557 4937 41B82000 		movl	$32, %r8d
 6557      0000
 6558 493d 89C7     		movl	%eax, %edi
 6559 493f E8000000 		call	write_4byte_to_board
 6559      00
1228:main.c        ****     			ack_status=receive_ack(read_chan,handle, error, 256); 
 6560              		.loc 1 1228 0
 6561 4944 488B95E0 		movq	-13856(%rbp), %rdx
 6561      C9FFFF
 6562 494b 488BB5D8 		movq	-13864(%rbp), %rsi
 6562      C9FFFF
 6563 4952 8B85B4C9 		movl	-13900(%rbp), %eax
 6563      FFFF
 6564 4958 B9000100 		movl	$256, %ecx
 6564      00
 6565 495d 89C7     		movl	%eax, %edi
 6566 495f E8000000 		call	receive_ack
 6566      00
 6567 4964 488985C8 		movq	%rax, -13624(%rbp)
 6567      CAFFFF
1229:main.c        ****     			if(ack_status[0]=='f') { goto host_label_2; }
 6568              		.loc 1 1229 0
 6569 496b 488B85C8 		movq	-13624(%rbp), %rax
 6569      CAFFFF
 6570 4972 0FB600   		movzbl	(%rax), %eax
 6571 4975 3C66     		cmpb	$102, %al
 6572 4977 7505     		jne	.L353
 6573 4979 E97CFBFF 		jmp	.L334
 6573      FF
 6574              	.L353:
1230:main.c        ****     			else {
1231:main.c        ****     					send_ack(write_chan,handle,error,32); 
 6575              		.loc 1 1231 0
 6576 497e 488B95E0 		movq	-13856(%rbp), %rdx
 6576      C9FFFF
 6577 4985 488BB5D8 		movq	-13864(%rbp), %rsi
 6577      C9FFFF
 6578 498c 8B85B8C9 		movl	-13896(%rbp), %eax
 6578      FFFF
 6579 4992 B9200000 		movl	$32, %ecx
 6579      00
 6580 4997 89C7     		movl	%eax, %edi
 6581 4999 E8000000 		call	send_ack
 6581      00
1232:main.c        ****     					sleep(32); 
 6582              		.loc 1 1232 0
 6583 499e BF200000 		movl	$32, %edi
 6583      00
 6584 49a3 B8000000 		movl	$0, %eax
 6584      00
 6585 49a8 E8000000 		call	sleep
 6585      00
1233:main.c        ****     					goto entire_process; 
 6586              		.loc 1 1233 0
 6587 49ad E91FFAFF 		jmp	.L331
 6587      FF
 6588              	.L330:
 6589              	.LBE58:
1234:main.c        ****     			}
1235:main.c        **** 	}
1236:main.c        **** 
1237:main.c        **** //
1238:main.c        **** //    while(true){
1239:main.c        **** //		if ( isCommCapable ) {
1240:main.c        **** //		   uint8 isRunning;
1241:main.c        **** //			fStatus = flSelectConduit(handle, conduit, &error);
1242:main.c        **** //			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
1243:main.c        **** //			fStatus = flIsFPGARunning(handle, &isRunning, &error);
1244:main.c        **** //			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
1245:main.c        **** //            //printf("is commCapable\n"); 
1246:main.c        **** //            if ( isRunning ) {
1247:main.c        **** //               printf("is Running \n"); 
1248:main.c        **** //			   char* red_data=read_4byte_from_fpga(handle, error);
1249:main.c        **** //               printf("Red coordinates  %s\n", red_data); 
1250:main.c        **** //			   write_4byte_to_board(red_data, handle, error); 
1251:main.c        **** //               printf("wrote coordinates %s\n", red_data); 
1252:main.c        **** //			   //red_data=read_4byte_from_fpga(handle, error); 
1253:main.c        **** //               receive_ack(handle,error); 
1254:main.c        **** //               printf("received ack1 for corordinates\n"); 
1255:main.c        **** //			   send_ack(handle, error); 
1256:main.c        **** //               printf("sent ack2 from host to board \n"); 
1257:main.c        **** //    	       char* writeData = func(red_data, table, rows);
1258:main.c        **** //               printf("Data to be sent to board %s\n",writeData); 
1259:main.c        **** //			   write_4byte_to_board(writeData, handle, error); 
1260:main.c        **** //               printf("wrote first 32 bit of track data \n"); 
1261:main.c        **** //			   //read_4byte_from_fpga(handle, error); 
1262:main.c        **** //               receive_ack(handle,error); 
1263:main.c        **** //               printf("received ack1 \n"); 
1264:main.c        **** //			   write_4byte_to_board(&writeData[32], handle, error); 
1265:main.c        **** //               printf("wrote last 32 bit of track data\n"); 
1266:main.c        **** //			   //read_4byte_from_fpga(handle, error); 
1267:main.c        **** //               receive_ack(handle,error); 
1268:main.c        **** //               printf("received ack1\n"); 
1269:main.c        **** //			   send_ack(handle, error); 
1270:main.c        **** //               printf("sent ack2\n"); 
1271:main.c        **** //               printf(" completed one sequence of communication \n\n\n\n");
1272:main.c        **** //            }
1273:main.c        **** //        	}
1274:main.c        **** //    	}
1275:main.c        **** 	}
1276:main.c        **** 	if ( shellOpt->count ) {
 6590              		.loc 1 1276 0
 6591 49b2 488B8548 		movq	-13752(%rbp), %rax
 6591      CAFFFF
 6592 49b9 8B4060   		movl	96(%rax), %eax
 6593 49bc 85C0     		testl	%eax, %eax
 6594 49be 0F84C401 		je	.L276
 6594      0000
1277:main.c        **** 		printf("\nEntering CommFPGA command-line mode:\n");
 6595              		.loc 1 1277 0
 6596 49c4 BF000000 		movl	$.LC153, %edi
 6596      00
 6597 49c9 E8000000 		call	puts
 6597      00
1278:main.c        **** 		if ( isCommCapable ) {
 6598              		.loc 1 1278 0
 6599 49ce 80BD8EC9 		cmpb	$0, -13938(%rbp)
 6599      FFFF00
 6600 49d5 0F848201 		je	.L354
 6600      0000
 6601              	.LBB65:
1279:main.c        **** 		   uint8 isRunning;
1280:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 6602              		.loc 1 1280 0
 6603 49db 0FB68D8C 		movzbl	-13940(%rbp), %ecx
 6603      C9FFFF
 6604 49e2 488B85D8 		movq	-13864(%rbp), %rax
 6604      C9FFFF
 6605 49e9 488D95E0 		leaq	-13856(%rbp), %rdx
 6605      C9FFFF
 6606 49f0 89CE     		movl	%ecx, %esi
 6607 49f2 4889C7   		movq	%rax, %rdi
 6608 49f5 E8000000 		call	flSelectConduit
 6608      00
 6609 49fa 89859CC9 		movl	%eax, -13924(%rbp)
 6609      FFFF
1281:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6610              		.loc 1 1281 0
 6611 4a00 83BD9CC9 		cmpl	$0, -13924(%rbp)
 6611      FFFF00
 6612 4a07 740F     		je	.L355
 6613              		.loc 1 1281 0 is_stmt 0 discriminator 1
 6614 4a09 C78598C9 		movl	$1, -13928(%rbp)
 6614      FFFF0100 
 6614      0000
 6615 4a13 E9700100 		jmp	.L276
 6615      00
 6616              	.L355:
1282:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 6617              		.loc 1 1282 0 is_stmt 1
 6618 4a18 488B85D8 		movq	-13864(%rbp), %rax
 6618      C9FFFF
 6619 4a1f 488D95E0 		leaq	-13856(%rbp), %rdx
 6619      C9FFFF
 6620 4a26 488D8DF0 		leaq	-13840(%rbp), %rcx
 6620      C9FFFF
 6621 4a2d 4889CE   		movq	%rcx, %rsi
 6622 4a30 4889C7   		movq	%rax, %rdi
 6623 4a33 E8000000 		call	flIsFPGARunning
 6623      00
 6624 4a38 89859CC9 		movl	%eax, -13924(%rbp)
 6624      FFFF
1283:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6625              		.loc 1 1283 0
 6626 4a3e 83BD9CC9 		cmpl	$0, -13924(%rbp)
 6626      FFFF00
 6627 4a45 740F     		je	.L357
 6628              		.loc 1 1283 0 is_stmt 0 discriminator 1
 6629 4a47 C78598C9 		movl	$1, -13928(%rbp)
 6629      FFFF0100 
 6629      0000
 6630 4a51 E9320100 		jmp	.L276
 6630      00
 6631              	.L357:
1284:main.c        **** 			if ( isRunning ) {
 6632              		.loc 1 1284 0 is_stmt 1
 6633 4a56 0FB685F0 		movzbl	-13840(%rbp), %eax
 6633      C9FFFF
 6634 4a5d 84C0     		testb	%al, %al
 6635 4a5f 0F84CB00 		je	.L358
 6635      0000
 6636              	.L360:
1285:main.c        **** 				do {
1286:main.c        **** 					do {
1287:main.c        **** 						line = readline("> ");
 6637              		.loc 1 1287 0 discriminator 2
 6638 4a65 BF000000 		movl	$.LC154, %edi
 6638      00
 6639 4a6a E8000000 		call	readline
 6639      00
 6640 4a6f 488985F8 		movq	%rax, -13832(%rbp)
 6640      C9FFFF
1288:main.c        **** 					} while ( line && !line[0] );
 6641              		.loc 1 1288 0 discriminator 2
 6642 4a76 4883BDF8 		cmpq	$0, -13832(%rbp)
 6642      C9FFFF00 
 6643 4a7e 740E     		je	.L359
 6644              		.loc 1 1288 0 is_stmt 0 discriminator 1
 6645 4a80 488B85F8 		movq	-13832(%rbp), %rax
 6645      C9FFFF
 6646 4a87 0FB600   		movzbl	(%rax), %eax
 6647 4a8a 84C0     		testb	%al, %al
 6648 4a8c 74D7     		je	.L360
 6649              	.L359:
1289:main.c        **** 					if ( line && line[0] && line[0] != 'q' ) {
 6650              		.loc 1 1289 0 is_stmt 1
 6651 4a8e 4883BDF8 		cmpq	$0, -13832(%rbp)
 6651      C9FFFF00 
 6652 4a96 747A     		je	.L361
 6653              		.loc 1 1289 0 is_stmt 0 discriminator 1
 6654 4a98 488B85F8 		movq	-13832(%rbp), %rax
 6654      C9FFFF
 6655 4a9f 0FB600   		movzbl	(%rax), %eax
 6656 4aa2 84C0     		testb	%al, %al
 6657 4aa4 746C     		je	.L361
 6658              		.loc 1 1289 0 discriminator 2
 6659 4aa6 488B85F8 		movq	-13832(%rbp), %rax
 6659      C9FFFF
 6660 4aad 0FB600   		movzbl	(%rax), %eax
 6661 4ab0 3C71     		cmpb	$113, %al
 6662 4ab2 745E     		je	.L361
1290:main.c        **** 						add_history(line);
 6663              		.loc 1 1290 0 is_stmt 1
 6664 4ab4 488B85F8 		movq	-13832(%rbp), %rax
 6664      C9FFFF
 6665 4abb 4889C7   		movq	%rax, %rdi
 6666 4abe E8000000 		call	add_history
 6666      00
1291:main.c        **** 						pStatus = parseLine(handle, line, &error);
 6667              		.loc 1 1291 0
 6668 4ac3 488B85D8 		movq	-13864(%rbp), %rax
 6668      C9FFFF
 6669 4aca 488D95E0 		leaq	-13856(%rbp), %rdx
 6669      C9FFFF
 6670 4ad1 488B8DF8 		movq	-13832(%rbp), %rcx
 6670      C9FFFF
 6671 4ad8 4889CE   		movq	%rcx, %rsi
 6672 4adb 4889C7   		movq	%rax, %rdi
 6673 4ade E85FBBFF 		call	parseLine
 6673      FF
 6674 4ae3 8985C8C9 		movl	%eax, -13880(%rbp)
 6674      FFFF
1292:main.c        **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 6675              		.loc 1 1292 0
 6676 4ae9 83BDC8C9 		cmpl	$0, -13880(%rbp)
 6676      FFFF00
 6677 4af0 7411     		je	.L362
 6678              		.loc 1 1292 0 is_stmt 0 discriminator 1
 6679 4af2 8B85C8C9 		movl	-13880(%rbp), %eax
 6679      FFFF
 6680 4af8 898598C9 		movl	%eax, -13928(%rbp)
 6680      FFFF
 6681 4afe E9850000 		jmp	.L276
 6681      00
 6682              	.L362:
1293:main.c        **** 						free((void*)line);
 6683              		.loc 1 1293 0 is_stmt 1
 6684 4b03 488B85F8 		movq	-13832(%rbp), %rax
 6684      C9FFFF
 6685 4b0a 4889C7   		movq	%rax, %rdi
 6686 4b0d E8000000 		call	free
 6686      00
 6687              	.L361:
1294:main.c        **** 					}
1295:main.c        **** 				} while ( line && line[0] != 'q' );
 6688              		.loc 1 1295 0
 6689 4b12 4883BDF8 		cmpq	$0, -13832(%rbp)
 6689      C9FFFF00 
 6690 4b1a 746C     		je	.L276
 6691              		.loc 1 1295 0 is_stmt 0 discriminator 1
 6692 4b1c 488B85F8 		movq	-13832(%rbp), %rax
 6692      C9FFFF
 6693 4b23 0FB600   		movzbl	(%rax), %eax
 6694 4b26 3C71     		cmpb	$113, %al
 6695 4b28 0F8537FF 		jne	.L360
 6695      FFFF
 6696 4b2e EB58     		jmp	.L276
 6697              	.L358:
1296:main.c        **** 			} else {
1297:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 6698              		.loc 1 1297 0 is_stmt 1
 6699 4b30 488B0500 		movq	stderr(%rip), %rax
 6699      000000
 6700 4b37 488B9598 		movq	-13672(%rbp), %rdx
 6700      CAFFFF
 6701 4b3e BE000000 		movl	$.LC155, %esi
 6701      00
 6702 4b43 4889C7   		movq	%rax, %rdi
 6703 4b46 B8000000 		movl	$0, %eax
 6703      00
 6704 4b4b E8000000 		call	fprintf
 6704      00
1298:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 6705              		.loc 1 1298 0
 6706 4b50 C78598C9 		movl	$12, -13928(%rbp)
 6706      FFFF0C00 
 6706      0000
 6707 4b5a 90       		nop
 6708 4b5b EB2B     		jmp	.L276
 6709              	.L354:
 6710              	.LBE65:
1299:main.c        **** 			}
1300:main.c        **** 		} else {
1301:main.c        **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 6711              		.loc 1 1301 0
 6712 4b5d 488B0500 		movq	stderr(%rip), %rax
 6712      000000
 6713 4b64 488B9598 		movq	-13672(%rbp), %rdx
 6713      CAFFFF
 6714 4b6b BE000000 		movl	$.LC156, %esi
 6714      00
 6715 4b70 4889C7   		movq	%rax, %rdi
 6716 4b73 B8000000 		movl	$0, %eax
 6716      00
 6717 4b78 E8000000 		call	fprintf
 6717      00
1302:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6718              		.loc 1 1302 0
 6719 4b7d C78598C9 		movl	$12, -13928(%rbp)
 6719      FFFF0C00 
 6719      0000
 6720 4b87 90       		nop
 6721              	.L276:
1303:main.c        **** 		}
1304:main.c        **** 	}
1305:main.c        **** 
1306:main.c        **** cleanup:
1307:main.c        **** 	free((void*)line);
 6722              		.loc 1 1307 0
 6723 4b88 488B85F8 		movq	-13832(%rbp), %rax
 6723      C9FFFF
 6724 4b8f 4889C7   		movq	%rax, %rdi
 6725 4b92 E8000000 		call	free
 6725      00
1308:main.c        **** 	flClose(handle);
 6726              		.loc 1 1308 0
 6727 4b97 488B85D8 		movq	-13864(%rbp), %rax
 6727      C9FFFF
 6728 4b9e 4889C7   		movq	%rax, %rdi
 6729 4ba1 E8000000 		call	flClose
 6729      00
1309:main.c        **** 	if ( error ) {
 6730              		.loc 1 1309 0
 6731 4ba6 488B85E0 		movq	-13856(%rbp), %rax
 6731      C9FFFF
 6732 4bad 4885C0   		testq	%rax, %rax
 6733 4bb0 742F     		je	.L364
1310:main.c        **** 		fprintf(stderr, "%s\n", error);
 6734              		.loc 1 1310 0
 6735 4bb2 488B95E0 		movq	-13856(%rbp), %rdx
 6735      C9FFFF
 6736 4bb9 488B0500 		movq	stderr(%rip), %rax
 6736      000000
 6737 4bc0 BE000000 		movl	$.LC157, %esi
 6737      00
 6738 4bc5 4889C7   		movq	%rax, %rdi
 6739 4bc8 B8000000 		movl	$0, %eax
 6739      00
 6740 4bcd E8000000 		call	fprintf
 6740      00
1311:main.c        **** 		flFreeError(error);
 6741              		.loc 1 1311 0
 6742 4bd2 488B85E0 		movq	-13856(%rbp), %rax
 6742      C9FFFF
 6743 4bd9 4889C7   		movq	%rax, %rdi
 6744 4bdc E8000000 		call	flFreeError
 6744      00
 6745              	.L364:
1312:main.c        **** 	}
1313:main.c        **** 	return retVal;
 6746              		.loc 1 1313 0
 6747 4be1 8B8598C9 		movl	-13928(%rbp), %eax
 6747      FFFF
1314:main.c        **** }
 6748              		.loc 1 1314 0
 6749 4be7 488B5DE8 		movq	-24(%rbp), %rbx
 6750 4beb 6448331C 		xorq	%fs:40, %rbx
 6750      25280000 
 6750      00
 6751 4bf4 7405     		je	.L366
 6752 4bf6 E8000000 		call	__stack_chk_fail
 6752      00
 6753              	.L366:
 6754 4bfb 4881C488 		addq	$13960, %rsp
 6754      360000
 6755 4c02 5B       		popq	%rbx
 6756 4c03 5D       		popq	%rbp
 6757              		.cfi_def_cfa 7, 8
 6758 4c04 C3       		ret
 6759              		.cfi_endproc
 6760              	.LFE25:
 6762              		.section	.rodata
 6763              		.align 8
 6764              	.LC18:
 6765 1080 00000000 		.long	0
 6766 1084 80842E41 		.long	1093567616
 6767              		.align 8
 6768              	.LC19:
 6769 1088 00000000 		.long	0
 6770 108c 00003041 		.long	1093664768
 6771              		.text
 6772              	.Letext0:
 6773              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 6774              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 6775              		.file 4 "/usr/include/stdio.h"
 6776              		.file 5 "/usr/include/libio.h"
 6777              		.file 6 "/home/shubham/20140524/makestuff/common/makestuff.h"
 6778              		.file 7 "/home/shubham/20140524/makestuff/libs/libfpgalink/libfpgalink.h"
 6779              		.file 8 "/home/shubham/20140524/makestuff/libs/libbuffer/libbuffer.h"
 6780              		.file 9 "/home/shubham/20140524/makestuff/libs/libargtable2/argtable2.h"
 6781              		.file 10 "/usr/include/x86_64-linux-gnu/bits/time.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccv5pNf8.s:13     .data:0000000000000000 key
                            *COM*:0000000000000064 line1
     /tmp/ccv5pNf8.s:25     .data:0000000000000008 ack1
     /tmp/ccv5pNf8.s:36     .data:0000000000000010 ack2
     /tmp/ccv5pNf8.s:39     .bss:0000000000000000 ptr
     /tmp/ccv5pNf8.s:39     .bss:0000000000000008 enableBenchmarking
     /tmp/ccv5pNf8.s:44     .text:0000000000000000 isHexDigit
     /tmp/ccv5pNf8.s:94     .text:000000000000003e calcChecksum
     /tmp/ccv5pNf8.s:134    .text:000000000000007f getHexNibble
     /tmp/ccv5pNf8.s:206    .text:00000000000000f3 getHexByte
     /tmp/ccv5pNf8.s:306    .rodata:0000000000000160 errMessages
     /tmp/ccv5pNf8.s:324    .text:00000000000001a6 doRead
     /tmp/ccv5pNf8.s:572    .text:000000000000044e doWrite
                            *COM*:0000000000000001 out
     /tmp/ccv5pNf8.s:722    .text:0000000000000642 parseLine
     /tmp/ccv5pNf8.s:1965   .data:0000000000000020 nibbles
     /tmp/ccv5pNf8.s:1997   .text:00000000000016fe read_table
     /tmp/ccv5pNf8.s:2102   .data:00000000000000d8 mm
     /tmp/ccv5pNf8.s:2107   .text:00000000000017e1 boolToHex
     /tmp/ccv5pNf8.s:2268   .text:0000000000001940 get_coordinate
     /tmp/ccv5pNf8.s:2370   .text:0000000000001a11 func
     /tmp/ccv5pNf8.s:2844   .text:0000000000001e5d xor
     /tmp/ccv5pNf8.s:2877   .text:0000000000001e82 and
     /tmp/ccv5pNf8.s:2912   .text:0000000000001eaa decrypt
     /tmp/ccv5pNf8.s:3620   .text:0000000000002675 encrypt
     /tmp/ccv5pNf8.s:4147   .text:0000000000002c34 read_byte
     /tmp/ccv5pNf8.s:4214   .text:0000000000002ca9 write_4byte_to_board
     /tmp/ccv5pNf8.s:4383   .text:0000000000002e26 read_4byte_from_fpga
     /tmp/ccv5pNf8.s:4525   .text:0000000000002f74 receive_ack
     /tmp/ccv5pNf8.s:4605   .text:0000000000003016 send_ack
     /tmp/ccv5pNf8.s:4689   .text:00000000000030c6 wtt
     /tmp/ccv5pNf8.s:4983   .text:00000000000030dc main

UNDEFINED SYMBOLS
printf
__stack_chk_fail
flReadChannelAsyncSubmit
errPrefix
flReadChannelAsyncAwait
fwrite
fread
flWriteChannelAsync
flAwaitAsyncWrites
bufInitialise
__errno_location
strtoul
malloc
strncpy
fopen
free
gettimeofday
fclose
bufAppendConst
flReadChannel
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
fprintf
fputc
_IO_getc
strcmp
usleep
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
arg_parse
stdout
arg_print_syntax
puts
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flLoadStandardFirmware
flSleep
putchar
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
flFlashStandardFirmware
flFlashCustomFirmware
flSaveFirmware
flResetToggle
flIsNeroCapable
flIsCommCapable
flMultiBitPortAccess
sprintf
jtagScanChain
flProgram
flIsFPGARunning
sigRegisterHandler
sigIsRaised
sleep
readline
add_history
flClose
flFreeError
