   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.globl	key
   5              		.section	.rodata
   6              		.align 8
   7              	.LC0:
   8 0000 31313030 		.string	"11001100110011001100110011000001"
   8      31313030 
   8      31313030 
   8      31313030 
   8      31313030 
   9              		.data
  10              		.align 8
  13              	key:
  14 0000 00000000 		.quad	.LC0
  14      00000000 
  15              		.comm	line1,100,32
  16              		.globl	ack1
  17              		.section	.rodata
  18 0021 00000000 		.align 8
  18      000000
  19              	.LC1:
  20 0028 31313131 		.string	"11110000111100001111000011110000"
  20      30303030 
  20      31313131 
  20      30303030 
  20      31313131 
  21              		.data
  22              		.align 8
  25              	ack1:
  26 0008 00000000 		.quad	.LC1
  26      00000000 
  27              		.globl	ack2
  28              		.section	.rodata
  29 0049 00000000 		.align 8
  29      000000
  30              	.LC2:
  31 0050 30303030 		.string	"00001111000011110000111100001111"
  31      31313131 
  31      30303030 
  31      31313131 
  31      30303030 
  32              		.data
  33              		.align 8
  36              	ack2:
  37 0010 00000000 		.quad	.LC2
  37      00000000 
  38              		.local	ptr
  39              		.comm	ptr,8,8
  40              		.local	enableBenchmarking
  41              		.comm	enableBenchmarking,1,1
  42              		.text
  43              		.globl	timediff
  45              	timediff:
  46              	.LFB4:
  47              		.file 1 "main.c"
   1:main.c        **** /* 
   2:main.c        ****  * Copyright (C) 2012-2014 Chris McClelland
   3:main.c        ****  * This program is free software: you can redistribute it and/or modify
   4:main.c        ****  * it under the terms of the GNU General Public License as published by
   5:main.c        ****  * the Free Software Foundation, either version 3 of the License, or
   6:main.c        ****  * (at your option) any later version.
   7:main.c        ****  * This program is distributed in the hope that it will be useful,
   8:main.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:main.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:main.c        ****  * GNU General Public License for more details.
  11:main.c        ****  * You should have received a copy of the GNU General Public License
  12:main.c        ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:main.c        ****  */
  14:main.c        **** #include <stdio.h>
  15:main.c        **** #include <stdlib.h>
  16:main.c        **** #include <string.h>
  17:main.c        **** #include <errno.h>
  18:main.c        **** #include <makestuff.h>
  19:main.c        **** #include <libfpgalink.h>
  20:main.c        **** #include <libbuffer.h>
  21:main.c        **** #include <liberror.h>
  22:main.c        **** #include <libdump.h>
  23:main.c        **** #include <argtable2.h>
  24:main.c        **** #include <readline/readline.h>
  25:main.c        **** #include <readline/history.h>
  26:main.c        **** #include <fcntl.h> 
  27:main.c        **** #include <string.h>
  28:main.c        **** #include <termios.h>
  29:main.c        **** #include <unistd.h>
  30:main.c        **** #include <time.h>
  31:main.c        **** 
  32:main.c        **** #ifdef WIN32
  33:main.c        **** #include <Windows.h>
  34:main.c        **** #else
  35:main.c        **** #include <sys/time.h>
  36:main.c        **** #endif
  37:main.c        **** 
  38:main.c        **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  39:main.c        **** // global declarations 
  40:main.c        **** char* key="11001100110011001100110011000001"; // initialise it 
  41:main.c        **** char line1[100];
  42:main.c        **** char* ack1="11110000111100001111000011110000"; 
  43:main.c        **** char* ack2="00001111000011110000111100001111"; 
  44:main.c        **** 
  45:main.c        **** 
  46:main.c        **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  47:main.c        **** 
  48:main.c        **** 
  49:main.c        **** bool sigIsRaised(void);
  50:main.c        **** void sigRegisterHandler(void);
  51:main.c        **** 
  52:main.c        **** static const char *ptr;
  53:main.c        **** static bool enableBenchmarking = false;
  54:main.c        **** 
  55:main.c        **** 
  56:main.c        **** long timediff(clock_t t1, clock_t t2) {
  48              		.loc 1 56 0
  49              		.cfi_startproc
  50 0000 55       		pushq	%rbp
  51              		.cfi_def_cfa_offset 16
  52              		.cfi_offset 6, -16
  53 0001 4889E5   		movq	%rsp, %rbp
  54              		.cfi_def_cfa_register 6
  55 0004 48897DE8 		movq	%rdi, -24(%rbp)
  56 0008 488975E0 		movq	%rsi, -32(%rbp)
  57:main.c        ****     long elapsed;
  58:main.c        ****     elapsed = ((double)t2 - t1) / CLOCKS_PER_SEC * 1000;
  57              		.loc 1 58 0
  58 000c 660FEFC0 		pxor	%xmm0, %xmm0
  59 0010 F2480F2A 		cvtsi2sdq	-32(%rbp), %xmm0
  59      45E0
  60 0016 660FEFC9 		pxor	%xmm1, %xmm1
  61 001a F2480F2A 		cvtsi2sdq	-24(%rbp), %xmm1
  61      4DE8
  62 0020 F20F5CC1 		subsd	%xmm1, %xmm0
  63 0024 F20F100D 		movsd	.LC3(%rip), %xmm1
  63      00000000 
  64 002c F20F5EC1 		divsd	%xmm1, %xmm0
  65 0030 F20F100D 		movsd	.LC4(%rip), %xmm1
  65      00000000 
  66 0038 F20F59C1 		mulsd	%xmm1, %xmm0
  67 003c F2480F2C 		cvttsd2siq	%xmm0, %rax
  67      C0
  68 0041 488945F8 		movq	%rax, -8(%rbp)
  59:main.c        ****     return elapsed;
  69              		.loc 1 59 0
  70 0045 488B45F8 		movq	-8(%rbp), %rax
  60:main.c        **** }
  71              		.loc 1 60 0
  72 0049 5D       		popq	%rbp
  73              		.cfi_def_cfa 7, 8
  74 004a C3       		ret
  75              		.cfi_endproc
  76              	.LFE4:
  78              		.section	.rodata
  79              	.LC5:
  80 0071 74726163 		.string	"track_data"
  80      6B5F6461 
  80      746100
  81              	.LC6:
  82 007c 7700     		.string	"w"
  83              	.LC7:
  84 007e 0A256400 		.string	"\n%d"
  85              	.LC8:
  86 0082 2C256420 		.string	",%d "
  86      00
  87              		.text
  88              		.globl	save_to_file
  90              	save_to_file:
  91              	.LFB5:
  61:main.c        **** 
  62:main.c        **** 
  63:main.c        **** void save_to_file(int table[][5], int m){
  92              		.loc 1 63 0
  93              		.cfi_startproc
  94 004b 55       		pushq	%rbp
  95              		.cfi_def_cfa_offset 16
  96              		.cfi_offset 6, -16
  97 004c 4889E5   		movq	%rsp, %rbp
  98              		.cfi_def_cfa_register 6
  99 004f 4883EC30 		subq	$48, %rsp
 100 0053 48897DD8 		movq	%rdi, -40(%rbp)
 101 0057 8975D4   		movl	%esi, -44(%rbp)
  64:main.c        **** 	
  65:main.c        **** 	FILE *fp;
  66:main.c        **** 	 
  67:main.c        **** 	int i,j;
  68:main.c        **** 	 
  69:main.c        **** 	char* filename=strcat("track_data",".csv");
 102              		.loc 1 69 0
 103 005a B80A0000 		movl	$10, %eax
 103      00
 104 005f 48050000 		addq	$.LC5, %rax
 104      0000
 105 0065 C7002E63 		movl	$1987273518, (%rax)
 105      7376
 106 006b C6400400 		movb	$0, 4(%rax)
 107 006f 48C745F0 		movq	$.LC5, -16(%rbp)
 107      00000000 
  70:main.c        **** 	 
  71:main.c        **** 	fp=fopen(filename,"w");
 108              		.loc 1 71 0
 109 0077 488B45F0 		movq	-16(%rbp), %rax
 110 007b BE000000 		movl	$.LC6, %esi
 110      00
 111 0080 4889C7   		movq	%rax, %rdi
 112 0083 E8000000 		call	fopen
 112      00
 113 0088 488945F8 		movq	%rax, -8(%rbp)
  72:main.c        **** 	 	 
  73:main.c        **** 	for(i=0;i<m;i++){
 114              		.loc 1 73 0
 115 008c C745E800 		movl	$0, -24(%rbp)
 115      000000
 116 0093 EB6F     		jmp	.L4
 117              	.L7:
  74:main.c        **** 	 
  75:main.c        **** 	    fprintf(fp,"\n%d",i+1);
 118              		.loc 1 75 0
 119 0095 8B45E8   		movl	-24(%rbp), %eax
 120 0098 8D5001   		leal	1(%rax), %edx
 121 009b 488B45F8 		movq	-8(%rbp), %rax
 122 009f BE000000 		movl	$.LC7, %esi
 122      00
 123 00a4 4889C7   		movq	%rax, %rdi
 124 00a7 B8000000 		movl	$0, %eax
 124      00
 125 00ac E8000000 		call	fprintf
 125      00
  76:main.c        **** 	 
  77:main.c        **** 	    for(j=0;j<5;j++)
 126              		.loc 1 77 0
 127 00b1 C745EC00 		movl	$0, -20(%rbp)
 127      000000
 128 00b8 EB40     		jmp	.L5
 129              	.L6:
  78:main.c        **** 	 
  79:main.c        **** 	        fprintf(fp,",%d ",table[i][j]);
 130              		.loc 1 79 0 discriminator 3
 131 00ba 8B45E8   		movl	-24(%rbp), %eax
 132 00bd 4863D0   		movslq	%eax, %rdx
 133 00c0 4889D0   		movq	%rdx, %rax
 134 00c3 48C1E002 		salq	$2, %rax
 135 00c7 4801D0   		addq	%rdx, %rax
 136 00ca 48C1E002 		salq	$2, %rax
 137 00ce 4889C2   		movq	%rax, %rdx
 138 00d1 488B45D8 		movq	-40(%rbp), %rax
 139 00d5 4801C2   		addq	%rax, %rdx
 140 00d8 8B45EC   		movl	-20(%rbp), %eax
 141 00db 4898     		cltq
 142 00dd 8B1482   		movl	(%rdx,%rax,4), %edx
 143 00e0 488B45F8 		movq	-8(%rbp), %rax
 144 00e4 BE000000 		movl	$.LC8, %esi
 144      00
 145 00e9 4889C7   		movq	%rax, %rdi
 146 00ec B8000000 		movl	$0, %eax
 146      00
 147 00f1 E8000000 		call	fprintf
 147      00
  77:main.c        **** 	 
 148              		.loc 1 77 0 discriminator 3
 149 00f6 8345EC01 		addl	$1, -20(%rbp)
 150              	.L5:
  77:main.c        **** 	 
 151              		.loc 1 77 0 is_stmt 0 discriminator 1
 152 00fa 837DEC04 		cmpl	$4, -20(%rbp)
 153 00fe 7EBA     		jle	.L6
  73:main.c        **** 	 
 154              		.loc 1 73 0 is_stmt 1 discriminator 2
 155 0100 8345E801 		addl	$1, -24(%rbp)
 156              	.L4:
  73:main.c        **** 	 
 157              		.loc 1 73 0 is_stmt 0 discriminator 1
 158 0104 8B45E8   		movl	-24(%rbp), %eax
 159 0107 3B45D4   		cmpl	-44(%rbp), %eax
 160 010a 7C89     		jl	.L7
  80:main.c        **** 	 
  81:main.c        **** 	    }
  82:main.c        **** 	 
  83:main.c        **** 	fclose(fp);
 161              		.loc 1 83 0 is_stmt 1
 162 010c 488B45F8 		movq	-8(%rbp), %rax
 163 0110 4889C7   		movq	%rax, %rdi
 164 0113 E8000000 		call	fclose
 164      00
  84:main.c        ****  
  85:main.c        ****  	return ;
 165              		.loc 1 85 0
 166 0118 90       		nop
  86:main.c        **** }
 167              		.loc 1 86 0
 168 0119 C9       		leave
 169              		.cfi_def_cfa 7, 8
 170 011a C3       		ret
 171              		.cfi_endproc
 172              	.LFE5:
 174              		.section	.rodata
 175              	.LC9:
 176 0087 6572726F 		.string	"error %d from tcgetattr"
 176      72202564 
 176      2066726F 
 176      6D207463 
 176      67657461 
 177              	.LC10:
 178 009f 6572726F 		.string	"error %d from tcsetattr"
 178      72202564 
 178      2066726F 
 178      6D207463 
 178      73657461 
 179              		.text
 180              		.globl	set_interface_attribs
 182              	set_interface_attribs:
 183              	.LFB6:
  87:main.c        **** 
  88:main.c        **** 
  89:main.c        **** int set_interface_attribs (int fd, int speed, int parity)
  90:main.c        **** {
 184              		.loc 1 90 0
 185              		.cfi_startproc
 186 011b 55       		pushq	%rbp
 187              		.cfi_def_cfa_offset 16
 188              		.cfi_offset 6, -16
 189 011c 4889E5   		movq	%rsp, %rbp
 190              		.cfi_def_cfa_register 6
 191 011f 4883EC60 		subq	$96, %rsp
 192 0123 897DAC   		movl	%edi, -84(%rbp)
 193 0126 8975A8   		movl	%esi, -88(%rbp)
 194 0129 8955A4   		movl	%edx, -92(%rbp)
 195              		.loc 1 90 0
 196 012c 64488B04 		movq	%fs:40, %rax
 196      25280000 
 196      00
 197 0135 488945F8 		movq	%rax, -8(%rbp)
 198 0139 31C0     		xorl	%eax, %eax
  91:main.c        ****         struct termios tty;
  92:main.c        ****         memset (&tty, 0, sizeof tty);
 199              		.loc 1 92 0
 200 013b 488D45B0 		leaq	-80(%rbp), %rax
 201 013f BA3C0000 		movl	$60, %edx
 201      00
 202 0144 BE000000 		movl	$0, %esi
 202      00
 203 0149 4889C7   		movq	%rax, %rdi
 204 014c E8000000 		call	memset
 204      00
  93:main.c        ****         if (tcgetattr (fd, &tty) != 0)
 205              		.loc 1 93 0
 206 0151 488D55B0 		leaq	-80(%rbp), %rdx
 207 0155 8B45AC   		movl	-84(%rbp), %eax
 208 0158 4889D6   		movq	%rdx, %rsi
 209 015b 89C7     		movl	%eax, %edi
 210 015d E8000000 		call	tcgetattr
 210      00
 211 0162 85C0     		testl	%eax, %eax
 212 0164 7422     		je	.L10
  94:main.c        ****         {
  95:main.c        ****                 printf("error %d from tcgetattr", errno);
 213              		.loc 1 95 0
 214 0166 E8000000 		call	__errno_location
 214      00
 215 016b 8B00     		movl	(%rax), %eax
 216 016d 89C6     		movl	%eax, %esi
 217 016f BF000000 		movl	$.LC9, %edi
 217      00
 218 0174 B8000000 		movl	$0, %eax
 218      00
 219 0179 E8000000 		call	printf
 219      00
  96:main.c        ****                 return -1;
 220              		.loc 1 96 0
 221 017e B8FFFFFF 		movl	$-1, %eax
 221      FF
 222 0183 E9B60000 		jmp	.L13
 222      00
 223              	.L10:
  97:main.c        ****         }
  98:main.c        **** 
  99:main.c        ****         cfsetospeed (&tty, speed);
 224              		.loc 1 99 0
 225 0188 8B55A8   		movl	-88(%rbp), %edx
 226 018b 488D45B0 		leaq	-80(%rbp), %rax
 227 018f 89D6     		movl	%edx, %esi
 228 0191 4889C7   		movq	%rax, %rdi
 229 0194 E8000000 		call	cfsetospeed
 229      00
 100:main.c        ****         cfsetispeed (&tty, speed);
 230              		.loc 1 100 0
 231 0199 8B55A8   		movl	-88(%rbp), %edx
 232 019c 488D45B0 		leaq	-80(%rbp), %rax
 233 01a0 89D6     		movl	%edx, %esi
 234 01a2 4889C7   		movq	%rax, %rdi
 235 01a5 E8000000 		call	cfsetispeed
 235      00
 101:main.c        **** 
 102:main.c        ****         tty.c_cflag = (tty.c_cflag & ~CSIZE) | CS8;     // 8-bit chars
 236              		.loc 1 102 0
 237 01aa 8B45B8   		movl	-72(%rbp), %eax
 238 01ad 83C830   		orl	$48, %eax
 239 01b0 8945B8   		movl	%eax, -72(%rbp)
 103:main.c        ****         // disable IGNBRK for mismatched speed tests; otherwise receive break
 104:main.c        ****         // as \000 chars
 105:main.c        ****         tty.c_iflag &= ~IGNBRK;         // disable break processing
 240              		.loc 1 105 0
 241 01b3 8B45B0   		movl	-80(%rbp), %eax
 242 01b6 83E0FE   		andl	$-2, %eax
 243 01b9 8945B0   		movl	%eax, -80(%rbp)
 106:main.c        ****         tty.c_lflag = 0;                // no signaling chars, no echo,
 244              		.loc 1 106 0
 245 01bc C745BC00 		movl	$0, -68(%rbp)
 245      000000
 107:main.c        ****                                         // no canonical processing
 108:main.c        ****         tty.c_oflag = 0;                // no remapping, no delays
 246              		.loc 1 108 0
 247 01c3 C745B400 		movl	$0, -76(%rbp)
 247      000000
 109:main.c        ****         tty.c_cc[VMIN]  = 0;            // read doesn't block
 248              		.loc 1 109 0
 249 01ca C645C700 		movb	$0, -57(%rbp)
 110:main.c        ****         tty.c_cc[VTIME] = 5;            // 0.5 seconds read timeout
 250              		.loc 1 110 0
 251 01ce C645C605 		movb	$5, -58(%rbp)
 111:main.c        **** 
 112:main.c        ****         tty.c_iflag &= ~(IXON | IXOFF | IXANY); // shut off xon/xoff ctrl
 252              		.loc 1 112 0
 253 01d2 8B45B0   		movl	-80(%rbp), %eax
 254 01d5 80E4E3   		andb	$227, %ah
 255 01d8 8945B0   		movl	%eax, -80(%rbp)
 113:main.c        **** 
 114:main.c        ****         tty.c_cflag |= (CLOCAL | CREAD);// ignore modem controls,
 256              		.loc 1 114 0
 257 01db 8B45B8   		movl	-72(%rbp), %eax
 258 01de 0D800800 		orl	$2176, %eax
 258      00
 259 01e3 8945B8   		movl	%eax, -72(%rbp)
 115:main.c        ****                                         // enable reading
 116:main.c        ****         tty.c_cflag &= ~(PARENB | PARODD);      // shut off parity
 260              		.loc 1 116 0
 261 01e6 8B45B8   		movl	-72(%rbp), %eax
 262 01e9 80E4FC   		andb	$252, %ah
 263 01ec 8945B8   		movl	%eax, -72(%rbp)
 117:main.c        ****         tty.c_cflag |= parity;
 264              		.loc 1 117 0
 265 01ef 8B55B8   		movl	-72(%rbp), %edx
 266 01f2 8B45A4   		movl	-92(%rbp), %eax
 267 01f5 09D0     		orl	%edx, %eax
 268 01f7 8945B8   		movl	%eax, -72(%rbp)
 118:main.c        ****         tty.c_cflag &= ~CSTOPB;
 269              		.loc 1 118 0
 270 01fa 8B45B8   		movl	-72(%rbp), %eax
 271 01fd 83E0BF   		andl	$-65, %eax
 272 0200 8945B8   		movl	%eax, -72(%rbp)
 119:main.c        ****        // tty.c_cflag &= ~CRTSCTS;
 120:main.c        ****     
 121:main.c        **** 
 122:main.c        ****         if (tcsetattr (fd, TCSANOW, &tty) != 0)
 273              		.loc 1 122 0
 274 0203 488D55B0 		leaq	-80(%rbp), %rdx
 275 0207 8B45AC   		movl	-84(%rbp), %eax
 276 020a BE000000 		movl	$0, %esi
 276      00
 277 020f 89C7     		movl	%eax, %edi
 278 0211 E8000000 		call	tcsetattr
 278      00
 279 0216 85C0     		testl	%eax, %eax
 280 0218 741F     		je	.L12
 123:main.c        ****         {
 124:main.c        ****                 printf ("error %d from tcsetattr", errno);
 281              		.loc 1 124 0
 282 021a E8000000 		call	__errno_location
 282      00
 283 021f 8B00     		movl	(%rax), %eax
 284 0221 89C6     		movl	%eax, %esi
 285 0223 BF000000 		movl	$.LC10, %edi
 285      00
 286 0228 B8000000 		movl	$0, %eax
 286      00
 287 022d E8000000 		call	printf
 287      00
 125:main.c        ****                 return -1;
 288              		.loc 1 125 0
 289 0232 B8FFFFFF 		movl	$-1, %eax
 289      FF
 290 0237 EB05     		jmp	.L13
 291              	.L12:
 126:main.c        ****         }
 127:main.c        ****         return 0;
 292              		.loc 1 127 0
 293 0239 B8000000 		movl	$0, %eax
 293      00
 294              	.L13:
 128:main.c        **** }
 295              		.loc 1 128 0 discriminator 1
 296 023e 488B4DF8 		movq	-8(%rbp), %rcx
 297 0242 6448330C 		xorq	%fs:40, %rcx
 297      25280000 
 297      00
 298 024b 7405     		je	.L14
 299              		.loc 1 128 0 is_stmt 0
 300 024d E8000000 		call	__stack_chk_fail
 300      00
 301              	.L14:
 302 0252 C9       		leave
 303              		.cfi_def_cfa 7, 8
 304 0253 C3       		ret
 305              		.cfi_endproc
 306              	.LFE6:
 308              		.section	.rodata
 309              	.LC11:
 310 00b7 6572726F 		.string	"error %d from tggetattr"
 310      72202564 
 310      2066726F 
 310      6D207467 
 310      67657461 
 311 00cf 00       		.align 8
 312              	.LC12:
 313 00d0 6572726F 		.string	"error %d setting term attributes"
 313      72202564 
 313      20736574 
 313      74696E67 
 313      20746572 
 314              		.text
 315              		.globl	set_blocking
 317              	set_blocking:
 318              	.LFB7:
 129:main.c        **** 
 130:main.c        **** void set_blocking (int fd, int should_block)
 131:main.c        **** {
 319              		.loc 1 131 0 is_stmt 1
 320              		.cfi_startproc
 321 0254 55       		pushq	%rbp
 322              		.cfi_def_cfa_offset 16
 323              		.cfi_offset 6, -16
 324 0255 4889E5   		movq	%rsp, %rbp
 325              		.cfi_def_cfa_register 6
 326 0258 4883EC60 		subq	$96, %rsp
 327 025c 897DAC   		movl	%edi, -84(%rbp)
 328 025f 8975A8   		movl	%esi, -88(%rbp)
 329              		.loc 1 131 0
 330 0262 64488B04 		movq	%fs:40, %rax
 330      25280000 
 330      00
 331 026b 488945F8 		movq	%rax, -8(%rbp)
 332 026f 31C0     		xorl	%eax, %eax
 132:main.c        ****         struct termios tty;
 133:main.c        ****         memset (&tty, 0, sizeof tty);
 333              		.loc 1 133 0
 334 0271 488D45B0 		leaq	-80(%rbp), %rax
 335 0275 BA3C0000 		movl	$60, %edx
 335      00
 336 027a BE000000 		movl	$0, %esi
 336      00
 337 027f 4889C7   		movq	%rax, %rdi
 338 0282 E8000000 		call	memset
 338      00
 134:main.c        ****         if (tcgetattr (fd, &tty) != 0)
 339              		.loc 1 134 0
 340 0287 488D55B0 		leaq	-80(%rbp), %rdx
 341 028b 8B45AC   		movl	-84(%rbp), %eax
 342 028e 4889D6   		movq	%rdx, %rsi
 343 0291 89C7     		movl	%eax, %edi
 344 0293 E8000000 		call	tcgetattr
 344      00
 345 0298 85C0     		testl	%eax, %eax
 346 029a 741A     		je	.L16
 135:main.c        ****         {
 136:main.c        ****                 printf ("error %d from tggetattr", errno);
 347              		.loc 1 136 0
 348 029c E8000000 		call	__errno_location
 348      00
 349 02a1 8B00     		movl	(%rax), %eax
 350 02a3 89C6     		movl	%eax, %esi
 351 02a5 BF000000 		movl	$.LC11, %edi
 351      00
 352 02aa B8000000 		movl	$0, %eax
 352      00
 353 02af E8000000 		call	printf
 353      00
 354 02b4 EB3D     		jmp	.L15
 355              	.L16:
 137:main.c        ****                 return;
 138:main.c        ****         }
 139:main.c        **** 
 140:main.c        ****         tty.c_cc[VMIN]  = should_block ? 1 : 0;
 356              		.loc 1 140 0
 357 02b6 837DA800 		cmpl	$0, -88(%rbp)
 358 02ba 0F95C0   		setne	%al
 359 02bd 8845C7   		movb	%al, -57(%rbp)
 141:main.c        ****         tty.c_cc[VTIME] = 5;            // 0.5 seconds read timeout
 360              		.loc 1 141 0
 361 02c0 C645C605 		movb	$5, -58(%rbp)
 142:main.c        **** 
 143:main.c        ****         if (tcsetattr (fd, TCSANOW, &tty) != 0)
 362              		.loc 1 143 0
 363 02c4 488D55B0 		leaq	-80(%rbp), %rdx
 364 02c8 8B45AC   		movl	-84(%rbp), %eax
 365 02cb BE000000 		movl	$0, %esi
 365      00
 366 02d0 89C7     		movl	%eax, %edi
 367 02d2 E8000000 		call	tcsetattr
 367      00
 368 02d7 85C0     		testl	%eax, %eax
 369 02d9 7418     		je	.L15
 144:main.c        ****                printf ("error %d setting term attributes", errno);
 370              		.loc 1 144 0
 371 02db E8000000 		call	__errno_location
 371      00
 372 02e0 8B00     		movl	(%rax), %eax
 373 02e2 89C6     		movl	%eax, %esi
 374 02e4 BF000000 		movl	$.LC12, %edi
 374      00
 375 02e9 B8000000 		movl	$0, %eax
 375      00
 376 02ee E8000000 		call	printf
 376      00
 377              	.L15:
 145:main.c        **** } 
 378              		.loc 1 145 0
 379 02f3 488B45F8 		movq	-8(%rbp), %rax
 380 02f7 64483304 		xorq	%fs:40, %rax
 380      25280000 
 380      00
 381 0300 7405     		je	.L19
 382 0302 E8000000 		call	__stack_chk_fail
 382      00
 383              	.L19:
 384 0307 C9       		leave
 385              		.cfi_def_cfa 7, 8
 386 0308 C3       		ret
 387              		.cfi_endproc
 388              	.LFE7:
 390              		.globl	portname
 391              		.section	.rodata
 392              	.LC13:
 393 00f1 2F646576 		.string	"/dev/ttyXRUSB0"
 393      2F747479 
 393      58525553 
 393      423000
 394              		.data
 395              		.align 8
 398              	portname:
 399 0018 00000000 		.quad	.LC13
 399      00000000 
 400              		.comm	fd,4,4
 401              		.section	.rodata
 402              	.LC14:
 403 0100 6572726F 		.string	"error %d opening %s: %s"
 403      72202564 
 403      206F7065 
 403      6E696E67 
 403      2025733A 
 404              	.LC15:
 405 0118 4E206973 		.string	"N is =%d"
 405      203D2564 
 405      00
 406              	.LC16:
 407 0121 54686520 		.string	"The read string is %hhx\n"
 407      72656164 
 407      20737472 
 407      696E6720 
 407      69732025 
 408 013a 00000000 		.align 8
 408      0000
 409              	.LC17:
 410 0140 64617461 		.string	"data read from uart in uint8 %d \n"
 410      20726561 
 410      64206672 
 410      6F6D2075 
 410      61727420 
 411              		.text
 412              		.globl	read_one_byte_from_uart
 414              	read_one_byte_from_uart:
 415              	.LFB8:
 146:main.c        **** 
 147:main.c        **** char *portname = "/dev/ttyXRUSB0" ;
 148:main.c        **** int fd; 
 149:main.c        **** char* read_one_byte_from_uart(long long  timeout){
 416              		.loc 1 149 0
 417              		.cfi_startproc
 418 0309 55       		pushq	%rbp
 419              		.cfi_def_cfa_offset 16
 420              		.cfi_offset 6, -16
 421 030a 4889E5   		movq	%rsp, %rbp
 422              		.cfi_def_cfa_register 6
 423 030d 4154     		pushq	%r12
 424 030f 53       		pushq	%rbx
 425 0310 4883EC30 		subq	$48, %rsp
 426              		.cfi_offset 12, -24
 427              		.cfi_offset 3, -32
 428 0314 48897DC8 		movq	%rdi, -56(%rbp)
 429              		.loc 1 149 0
 430 0318 64488B04 		movq	%fs:40, %rax
 430      25280000 
 430      00
 431 0321 488945E8 		movq	%rax, -24(%rbp)
 432 0325 31C0     		xorl	%eax, %eax
 150:main.c        ****     
 151:main.c        ****     clock_t start;	
 152:main.c        **** 
 153:main.c        ****     if (fd < 0)
 433              		.loc 1 153 0
 434 0327 8B050000 		movl	fd(%rip), %eax
 434      0000
 435 032d 85C0     		testl	%eax, %eax
 436 032f 7940     		jns	.L21
 154:main.c        ****     {
 155:main.c        ****         printf ("error %d opening %s: %s", errno, portname, strerror (errno));
 437              		.loc 1 155 0
 438 0331 E8000000 		call	__errno_location
 438      00
 439 0336 8B00     		movl	(%rax), %eax
 440 0338 89C7     		movl	%eax, %edi
 441 033a E8000000 		call	strerror
 441      00
 442 033f 4989C4   		movq	%rax, %r12
 443 0342 488B1D00 		movq	portname(%rip), %rbx
 443      000000
 444 0349 E8000000 		call	__errno_location
 444      00
 445 034e 8B00     		movl	(%rax), %eax
 446 0350 4C89E1   		movq	%r12, %rcx
 447 0353 4889DA   		movq	%rbx, %rdx
 448 0356 89C6     		movl	%eax, %esi
 449 0358 BF000000 		movl	$.LC14, %edi
 449      00
 450 035d B8000000 		movl	$0, %eax
 450      00
 451 0362 E8000000 		call	printf
 451      00
 156:main.c        ****         return 0;
 452              		.loc 1 156 0
 453 0367 B8000000 		movl	$0, %eax
 453      00
 454 036c E9310100 		jmp	.L28
 454      00
 455              	.L21:
 157:main.c        ****     }
 158:main.c        ****     
 159:main.c        ****     set_interface_attribs (fd, B2400, 0);  // set speed to 115,200 bps, 8n1 (no parity)
 456              		.loc 1 159 0
 457 0371 8B050000 		movl	fd(%rip), %eax
 457      0000
 458 0377 BA000000 		movl	$0, %edx
 458      00
 459 037c BE0B0000 		movl	$11, %esi
 459      00
 460 0381 89C7     		movl	%eax, %edi
 461 0383 E8000000 		call	set_interface_attribs
 461      00
 160:main.c        ****     set_blocking (fd, 0);                // set no blocking
 462              		.loc 1 160 0
 463 0388 8B050000 		movl	fd(%rip), %eax
 463      0000
 464 038e BE000000 		movl	$0, %esi
 464      00
 465 0393 89C7     		movl	%eax, %edi
 466 0395 E8000000 		call	set_blocking
 466      00
 161:main.c        ****     char buf[1];
 162:main.c        ****     char *ans=malloc(9); 
 467              		.loc 1 162 0
 468 039a BF090000 		movl	$9, %edi
 468      00
 469 039f E8000000 		call	malloc
 469      00
 470 03a4 488945D8 		movq	%rax, -40(%rbp)
 471              	.LBB2:
 163:main.c        **** 
 164:main.c        ****     //printf(" reading data from uart \n"); 
 165:main.c        ****     //while (timediff(clock(), start) < timeout) {
 166:main.c        ****     {    	int n = read (fd, buf, sizeof(buf)); 
 472              		.loc 1 166 0
 473 03a8 8B050000 		movl	fd(%rip), %eax
 473      0000
 474 03ae 488D4DE7 		leaq	-25(%rbp), %rcx
 475 03b2 BA010000 		movl	$1, %edx
 475      00
 476 03b7 4889CE   		movq	%rcx, %rsi
 477 03ba 89C7     		movl	%eax, %edi
 478 03bc E8000000 		call	read
 478      00
 479 03c1 8945D4   		movl	%eax, -44(%rbp)
 167:main.c        ****     	if (n == 1) {
 480              		.loc 1 167 0
 481 03c4 837DD401 		cmpl	$1, -44(%rbp)
 482 03c8 0F85C900 		jne	.L23
 482      0000
 483              	.LBB3:
 168:main.c        **** 	    	printf("N is =%d", n);
 484              		.loc 1 168 0
 485 03ce 8B45D4   		movl	-44(%rbp), %eax
 486 03d1 89C6     		movl	%eax, %esi
 487 03d3 BF000000 		movl	$.LC15, %edi
 487      00
 488 03d8 B8000000 		movl	$0, %eax
 488      00
 489 03dd E8000000 		call	printf
 489      00
 169:main.c        **** 	    	printf("The read string is %hhx\n",buf[0]);
 490              		.loc 1 169 0
 491 03e2 0FB645E7 		movzbl	-25(%rbp), %eax
 492 03e6 0FBEC0   		movsbl	%al, %eax
 493 03e9 89C6     		movl	%eax, %esi
 494 03eb BF000000 		movl	$.LC16, %edi
 494      00
 495 03f0 B8000000 		movl	$0, %eax
 495      00
 496 03f5 E8000000 		call	printf
 496      00
 170:main.c        **** 	    	uint8 temp=buf[0]; 
 497              		.loc 1 170 0
 498 03fa 0FB645E7 		movzbl	-25(%rbp), %eax
 499 03fe 8845D3   		movb	%al, -45(%rbp)
 171:main.c        ****             ans[0]='\0'; 
 500              		.loc 1 171 0
 501 0401 488B45D8 		movq	-40(%rbp), %rax
 502 0405 C60000   		movb	$0, (%rax)
 172:main.c        ****             printf("data read from uart in uint8 %d \n", temp); 
 503              		.loc 1 172 0
 504 0408 0FB645D3 		movzbl	-45(%rbp), %eax
 505 040c 89C6     		movl	%eax, %esi
 506 040e BF000000 		movl	$.LC17, %edi
 506      00
 507 0413 B8000000 		movl	$0, %eax
 507      00
 508 0418 E8000000 		call	printf
 508      00
 173:main.c        ****             while(temp>0){
 509              		.loc 1 173 0
 510 041d EB6C     		jmp	.L24
 511              	.L27:
 174:main.c        ****                 if(temp%2==1) { strcat(ans,"1"); }
 512              		.loc 1 174 0
 513 041f 0FB645D3 		movzbl	-45(%rbp), %eax
 514 0423 83E001   		andl	$1, %eax
 515 0426 84C0     		testb	%al, %al
 516 0428 7430     		je	.L25
 517              		.loc 1 174 0 is_stmt 0 discriminator 1
 518 042a 488B45D8 		movq	-40(%rbp), %rax
 519 042e 48C7C1FF 		movq	$-1, %rcx
 519      FFFFFF
 520 0435 4889C2   		movq	%rax, %rdx
 521 0438 B8000000 		movl	$0, %eax
 521      00
 522 043d 4889D7   		movq	%rdx, %rdi
 523 0440 F2AE     		repnz scasb
 524 0442 4889C8   		movq	%rcx, %rax
 525 0445 48F7D0   		notq	%rax
 526 0448 488D50FF 		leaq	-1(%rax), %rdx
 527 044c 488B45D8 		movq	-40(%rbp), %rax
 528 0450 4801D0   		addq	%rdx, %rax
 529 0453 66C70031 		movw	$49, (%rax)
 529      00
 530 0458 EB2E     		jmp	.L26
 531              	.L25:
 175:main.c        ****                 else strcat(ans,"0"); 
 532              		.loc 1 175 0 is_stmt 1
 533 045a 488B45D8 		movq	-40(%rbp), %rax
 534 045e 48C7C1FF 		movq	$-1, %rcx
 534      FFFFFF
 535 0465 4889C2   		movq	%rax, %rdx
 536 0468 B8000000 		movl	$0, %eax
 536      00
 537 046d 4889D7   		movq	%rdx, %rdi
 538 0470 F2AE     		repnz scasb
 539 0472 4889C8   		movq	%rcx, %rax
 540 0475 48F7D0   		notq	%rax
 541 0478 488D50FF 		leaq	-1(%rax), %rdx
 542 047c 488B45D8 		movq	-40(%rbp), %rax
 543 0480 4801D0   		addq	%rdx, %rax
 544 0483 66C70030 		movw	$48, (%rax)
 544      00
 545              	.L26:
 176:main.c        ****                 temp>>=1; 
 546              		.loc 1 176 0
 547 0488 D06DD3   		shrb	-45(%rbp)
 548              	.L24:
 173:main.c        ****                 if(temp%2==1) { strcat(ans,"1"); }
 549              		.loc 1 173 0
 550 048b 807DD300 		cmpb	$0, -45(%rbp)
 551 048f 758E     		jne	.L27
 177:main.c        ****             }
 178:main.c        **** 	    	return ans;
 552              		.loc 1 178 0
 553 0491 488B45D8 		movq	-40(%rbp), %rax
 554 0495 EB0B     		jmp	.L28
 555              	.L23:
 556              	.LBE3:
 557              	.LBE2:
 179:main.c        **** 	    }
 180:main.c        **** 	}
 181:main.c        **** 	ans[0]='f'; return ans; 
 558              		.loc 1 181 0
 559 0497 488B45D8 		movq	-40(%rbp), %rax
 560 049b C60066   		movb	$102, (%rax)
 561 049e 488B45D8 		movq	-40(%rbp), %rax
 562              	.L28:
 182:main.c        **** }
 563              		.loc 1 182 0 discriminator 1
 564 04a2 488B5DE8 		movq	-24(%rbp), %rbx
 565 04a6 6448331C 		xorq	%fs:40, %rbx
 565      25280000 
 565      00
 566 04af 7405     		je	.L29
 567              		.loc 1 182 0 is_stmt 0
 568 04b1 E8000000 		call	__stack_chk_fail
 568      00
 569              	.L29:
 570 04b6 4883C430 		addq	$48, %rsp
 571 04ba 5B       		popq	%rbx
 572 04bb 415C     		popq	%r12
 573 04bd 5D       		popq	%rbp
 574              		.cfi_def_cfa 7, 8
 575 04be C3       		ret
 576              		.cfi_endproc
 577              	.LFE8:
 579              		.section	.rodata
 580              	.LC18:
 581 0162 57726974 		.string	"Write to the UART port in hex"
 581      6520746F 
 581      20746865 
 581      20554152 
 581      5420706F 
 582              	.LC19:
 583 0180 25686878 		.string	"%hhx"
 583      00
 584 0185 000000   		.align 8
 585              	.LC20:
 586 0188 6572726F 		.string	"error in writing to the board through UART port"
 586      7220696E 
 586      20777269 
 586      74696E67 
 586      20746F20 
 587              	.LC21:
 588 01b8 57726974 		.string	"Write Success"
 588      65205375 
 588      63636573 
 588      7300
 589              		.text
 590              		.globl	write_one_byte_to_uart
 592              	write_one_byte_to_uart:
 593              	.LFB9:
 183:main.c        **** 
 184:main.c        **** void write_one_byte_to_uart(){
 594              		.loc 1 184 0 is_stmt 1
 595              		.cfi_startproc
 596 04bf 55       		pushq	%rbp
 597              		.cfi_def_cfa_offset 16
 598              		.cfi_offset 6, -16
 599 04c0 4889E5   		movq	%rsp, %rbp
 600              		.cfi_def_cfa_register 6
 601 04c3 4883EC10 		subq	$16, %rsp
 602              		.loc 1 184 0
 603 04c7 64488B04 		movq	%fs:40, %rax
 603      25280000 
 603      00
 604 04d0 488945F8 		movq	%rax, -8(%rbp)
 605 04d4 31C0     		xorl	%eax, %eax
 185:main.c        **** 	    
 186:main.c        **** 	    printf("Write to the UART port in hex\n");
 606              		.loc 1 186 0
 607 04d6 BF000000 		movl	$.LC18, %edi
 607      00
 608 04db E8000000 		call	puts
 608      00
 187:main.c        **** 	    unsigned char data[1];
 188:main.c        ****     	scanf("%hhx", &data);
 609              		.loc 1 188 0
 610 04e0 488D45F7 		leaq	-9(%rbp), %rax
 611 04e4 4889C6   		movq	%rax, %rsi
 612 04e7 BF000000 		movl	$.LC19, %edi
 612      00
 613 04ec B8000000 		movl	$0, %eax
 613      00
 614 04f1 E8000000 		call	__isoc99_scanf
 614      00
 189:main.c        **** 
 190:main.c        ****     	// error checking 
 191:main.c        ****     	int n = write (fd, data, 1); 
 615              		.loc 1 191 0
 616 04f6 8B050000 		movl	fd(%rip), %eax
 616      0000
 617 04fc 488D4DF7 		leaq	-9(%rbp), %rcx
 618 0500 BA010000 		movl	$1, %edx
 618      00
 619 0505 4889CE   		movq	%rcx, %rsi
 620 0508 89C7     		movl	%eax, %edi
 621 050a E8000000 		call	write
 621      00
 622 050f 8945F0   		movl	%eax, -16(%rbp)
 192:main.c        ****  		if (n!=1)
 623              		.loc 1 192 0
 624 0512 837DF001 		cmpl	$1, -16(%rbp)
 625 0516 7419     		je	.L31
 193:main.c        ****     	{
 194:main.c        ****         	printf ("error in writing to the board through UART port");
 626              		.loc 1 194 0
 627 0518 BF000000 		movl	$.LC20, %edi
 627      00
 628 051d B8000000 		movl	$0, %eax
 628      00
 629 0522 E8000000 		call	printf
 629      00
 195:main.c        ****         	exit(1);
 630              		.loc 1 195 0
 631 0527 BF010000 		movl	$1, %edi
 631      00
 632 052c E8000000 		call	exit
 632      00
 633              	.L31:
 196:main.c        ****     	}
 197:main.c        ****         printf("Write Success\n");
 634              		.loc 1 197 0
 635 0531 BF000000 		movl	$.LC21, %edi
 635      00
 636 0536 E8000000 		call	puts
 636      00
 198:main.c        ****     	return ;
 637              		.loc 1 198 0
 638 053b 90       		nop
 199:main.c        **** 
 200:main.c        **** }
 639              		.loc 1 200 0
 640 053c 488B45F8 		movq	-8(%rbp), %rax
 641 0540 64483304 		xorq	%fs:40, %rax
 641      25280000 
 641      00
 642 0549 7405     		je	.L33
 643 054b E8000000 		call	__stack_chk_fail
 643      00
 644              	.L33:
 645 0550 C9       		leave
 646              		.cfi_def_cfa 7, 8
 647 0551 C3       		ret
 648              		.cfi_endproc
 649              	.LFE9:
 652              	isHexDigit:
 653              	.LFB10:
 201:main.c        **** 
 202:main.c        **** static bool isHexDigit(char ch) {
 654              		.loc 1 202 0
 655              		.cfi_startproc
 656 0552 55       		pushq	%rbp
 657              		.cfi_def_cfa_offset 16
 658              		.cfi_offset 6, -16
 659 0553 4889E5   		movq	%rsp, %rbp
 660              		.cfi_def_cfa_register 6
 661 0556 89F8     		movl	%edi, %eax
 662 0558 8845FC   		movb	%al, -4(%rbp)
 203:main.c        **** 	return
 204:main.c        **** 		(ch >= '0' && ch <= '9') ||
 205:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 663              		.loc 1 205 0
 664 055b 807DFC2F 		cmpb	$47, -4(%rbp)
 665 055f 7E06     		jle	.L35
 204:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 666              		.loc 1 204 0
 667 0561 807DFC39 		cmpb	$57, -4(%rbp)
 668 0565 7E18     		jle	.L36
 669              	.L35:
 204:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 670              		.loc 1 204 0 is_stmt 0 discriminator 1
 671 0567 807DFC60 		cmpb	$96, -4(%rbp)
 672 056b 7E06     		jle	.L37
 673              		.loc 1 205 0 is_stmt 1
 674 056d 807DFC66 		cmpb	$102, -4(%rbp)
 675 0571 7E0C     		jle	.L36
 676              	.L37:
 677              		.loc 1 205 0 is_stmt 0 discriminator 2
 678 0573 807DFC40 		cmpb	$64, -4(%rbp)
 679 0577 7E0D     		jle	.L38
 206:main.c        **** 		(ch >= 'A' && ch <= 'F');
 680              		.loc 1 206 0 is_stmt 1
 681 0579 807DFC46 		cmpb	$70, -4(%rbp)
 682 057d 7F07     		jg	.L38
 683              	.L36:
 205:main.c        **** 		(ch >= 'A' && ch <= 'F');
 684              		.loc 1 205 0 discriminator 1
 685 057f B8010000 		movl	$1, %eax
 685      00
 686 0584 EB05     		jmp	.L39
 687              	.L38:
 205:main.c        **** 		(ch >= 'A' && ch <= 'F');
 688              		.loc 1 205 0 is_stmt 0 discriminator 3
 689 0586 B8000000 		movl	$0, %eax
 689      00
 690              	.L39:
 204:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 691              		.loc 1 204 0 is_stmt 1
 692 058b 83E001   		andl	$1, %eax
 207:main.c        **** }
 693              		.loc 1 207 0
 694 058e 5D       		popq	%rbp
 695              		.cfi_def_cfa 7, 8
 696 058f C3       		ret
 697              		.cfi_endproc
 698              	.LFE10:
 701              	calcChecksum:
 702              	.LFB11:
 208:main.c        **** 
 209:main.c        **** static uint16 calcChecksum(const uint8 *data, size_t length) {
 703              		.loc 1 209 0
 704              		.cfi_startproc
 705 0590 55       		pushq	%rbp
 706              		.cfi_def_cfa_offset 16
 707              		.cfi_offset 6, -16
 708 0591 4889E5   		movq	%rsp, %rbp
 709              		.cfi_def_cfa_register 6
 710 0594 48897DE8 		movq	%rdi, -24(%rbp)
 711 0598 488975E0 		movq	%rsi, -32(%rbp)
 210:main.c        **** 	uint16 cksum = 0x0000;
 712              		.loc 1 210 0
 713 059c 66C745FE 		movw	$0, -2(%rbp)
 713      0000
 211:main.c        **** 	while ( length-- ) {
 714              		.loc 1 211 0
 715 05a2 EB16     		jmp	.L42
 716              	.L43:
 212:main.c        **** 		cksum = (uint16)(cksum + *data++);
 717              		.loc 1 212 0
 718 05a4 488B45E8 		movq	-24(%rbp), %rax
 719 05a8 488D5001 		leaq	1(%rax), %rdx
 720 05ac 488955E8 		movq	%rdx, -24(%rbp)
 721 05b0 0FB600   		movzbl	(%rax), %eax
 722 05b3 0FB6C0   		movzbl	%al, %eax
 723 05b6 660145FE 		addw	%ax, -2(%rbp)
 724              	.L42:
 211:main.c        **** 	while ( length-- ) {
 725              		.loc 1 211 0
 726 05ba 488B45E0 		movq	-32(%rbp), %rax
 727 05be 488D50FF 		leaq	-1(%rax), %rdx
 728 05c2 488955E0 		movq	%rdx, -32(%rbp)
 729 05c6 4885C0   		testq	%rax, %rax
 730 05c9 75D9     		jne	.L43
 213:main.c        **** 	}
 214:main.c        **** 	return cksum;
 731              		.loc 1 214 0
 732 05cb 0FB745FE 		movzwl	-2(%rbp), %eax
 215:main.c        **** }
 733              		.loc 1 215 0
 734 05cf 5D       		popq	%rbp
 735              		.cfi_def_cfa 7, 8
 736 05d0 C3       		ret
 737              		.cfi_endproc
 738              	.LFE11:
 741              	getHexNibble:
 742              	.LFB12:
 216:main.c        **** 
 217:main.c        **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
 743              		.loc 1 217 0
 744              		.cfi_startproc
 745 05d1 55       		pushq	%rbp
 746              		.cfi_def_cfa_offset 16
 747              		.cfi_offset 6, -16
 748 05d2 4889E5   		movq	%rsp, %rbp
 749              		.cfi_def_cfa_register 6
 750 05d5 89F8     		movl	%edi, %eax
 751 05d7 488975F0 		movq	%rsi, -16(%rbp)
 752 05db 8845FC   		movb	%al, -4(%rbp)
 218:main.c        **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
 753              		.loc 1 218 0
 754 05de 807DFC2F 		cmpb	$47, -4(%rbp)
 755 05e2 7E1A     		jle	.L46
 756              		.loc 1 218 0 is_stmt 0 discriminator 1
 757 05e4 807DFC39 		cmpb	$57, -4(%rbp)
 758 05e8 7F14     		jg	.L46
 219:main.c        **** 		*nibble = (uint8)(hexDigit - '0');
 759              		.loc 1 219 0 is_stmt 1
 760 05ea 0FB645FC 		movzbl	-4(%rbp), %eax
 761 05ee 8D50D0   		leal	-48(%rax), %edx
 762 05f1 488B45F0 		movq	-16(%rbp), %rax
 763 05f5 8810     		movb	%dl, (%rax)
 220:main.c        **** 		return false;
 764              		.loc 1 220 0
 765 05f7 B8000000 		movl	$0, %eax
 765      00
 766 05fc EB45     		jmp	.L47
 767              	.L46:
 221:main.c        **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
 768              		.loc 1 221 0
 769 05fe 807DFC60 		cmpb	$96, -4(%rbp)
 770 0602 7E1A     		jle	.L48
 771              		.loc 1 221 0 is_stmt 0 discriminator 1
 772 0604 807DFC66 		cmpb	$102, -4(%rbp)
 773 0608 7F14     		jg	.L48
 222:main.c        **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
 774              		.loc 1 222 0 is_stmt 1
 775 060a 0FB645FC 		movzbl	-4(%rbp), %eax
 776 060e 8D50A9   		leal	-87(%rax), %edx
 777 0611 488B45F0 		movq	-16(%rbp), %rax
 778 0615 8810     		movb	%dl, (%rax)
 223:main.c        **** 		return false;
 779              		.loc 1 223 0
 780 0617 B8000000 		movl	$0, %eax
 780      00
 781 061c EB25     		jmp	.L47
 782              	.L48:
 224:main.c        **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
 783              		.loc 1 224 0
 784 061e 807DFC40 		cmpb	$64, -4(%rbp)
 785 0622 7E1A     		jle	.L49
 786              		.loc 1 224 0 is_stmt 0 discriminator 1
 787 0624 807DFC46 		cmpb	$70, -4(%rbp)
 788 0628 7F14     		jg	.L49
 225:main.c        **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
 789              		.loc 1 225 0 is_stmt 1
 790 062a 0FB645FC 		movzbl	-4(%rbp), %eax
 791 062e 8D50C9   		leal	-55(%rax), %edx
 792 0631 488B45F0 		movq	-16(%rbp), %rax
 793 0635 8810     		movb	%dl, (%rax)
 226:main.c        **** 		return false;
 794              		.loc 1 226 0
 795 0637 B8000000 		movl	$0, %eax
 795      00
 796 063c EB05     		jmp	.L47
 797              	.L49:
 227:main.c        **** 	} else {
 228:main.c        **** 		return true;
 798              		.loc 1 228 0
 799 063e B8010000 		movl	$1, %eax
 799      00
 800              	.L47:
 229:main.c        **** 	}
 230:main.c        **** }
 801              		.loc 1 230 0
 802 0643 5D       		popq	%rbp
 803              		.cfi_def_cfa 7, 8
 804 0644 C3       		ret
 805              		.cfi_endproc
 806              	.LFE12:
 808              		.section	.rodata
 809              	.LC22:
 810 01c6 20616674 		.string	" after dump \n "
 810      65722064 
 810      756D7020 
 810      0A2000
 811              		.text
 813              	getHexByte:
 814              	.LFB13:
 231:main.c        **** 
 232:main.c        **** static int getHexByte(uint8 *byte) {
 815              		.loc 1 232 0
 816              		.cfi_startproc
 817 0645 55       		pushq	%rbp
 818              		.cfi_def_cfa_offset 16
 819              		.cfi_offset 6, -16
 820 0646 4889E5   		movq	%rsp, %rbp
 821              		.cfi_def_cfa_register 6
 822 0649 4883EC20 		subq	$32, %rsp
 823 064d 48897DE8 		movq	%rdi, -24(%rbp)
 824              		.loc 1 232 0
 825 0651 64488B04 		movq	%fs:40, %rax
 825      25280000 
 825      00
 826 065a 488945F8 		movq	%rax, -8(%rbp)
 827 065e 31C0     		xorl	%eax, %eax
 233:main.c        **** 	uint8 upperNibble;
 234:main.c        **** 	uint8 lowerNibble;
 235:main.c        **** 	if ( !getHexNibble(ptr[0], &upperNibble) && !getHexNibble(ptr[1], &lowerNibble) ) {
 828              		.loc 1 235 0
 829 0660 488B0500 		movq	ptr(%rip), %rax
 829      000000
 830 0667 0FB600   		movzbl	(%rax), %eax
 831 066a 0FBEC0   		movsbl	%al, %eax
 832 066d 488D55F6 		leaq	-10(%rbp), %rdx
 833 0671 4889D6   		movq	%rdx, %rsi
 834 0674 89C7     		movl	%eax, %edi
 835 0676 E856FFFF 		call	getHexNibble
 835      FF
 836 067b 83F001   		xorl	$1, %eax
 837 067e 84C0     		testb	%al, %al
 838 0680 744C     		je	.L51
 839              		.loc 1 235 0 is_stmt 0 discriminator 1
 840 0682 488B0500 		movq	ptr(%rip), %rax
 840      000000
 841 0689 4883C001 		addq	$1, %rax
 842 068d 0FB600   		movzbl	(%rax), %eax
 843 0690 0FBEC0   		movsbl	%al, %eax
 844 0693 488D55F7 		leaq	-9(%rbp), %rdx
 845 0697 4889D6   		movq	%rdx, %rsi
 846 069a 89C7     		movl	%eax, %edi
 847 069c E830FFFF 		call	getHexNibble
 847      FF
 848 06a1 83F001   		xorl	$1, %eax
 849 06a4 84C0     		testb	%al, %al
 850 06a6 7426     		je	.L51
 236:main.c        **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 851              		.loc 1 236 0 is_stmt 1
 852 06a8 0FB645F6 		movzbl	-10(%rbp), %eax
 853 06ac 0FB6C0   		movzbl	%al, %eax
 854 06af C1E004   		sall	$4, %eax
 855 06b2 89C2     		movl	%eax, %edx
 856 06b4 0FB645F7 		movzbl	-9(%rbp), %eax
 857 06b8 09D0     		orl	%edx, %eax
 858 06ba 89C2     		movl	%eax, %edx
 859 06bc 488B45E8 		movq	-24(%rbp), %rax
 860 06c0 8810     		movb	%dl, (%rax)
 237:main.c        **** 		byte += 2;
 861              		.loc 1 237 0
 862 06c2 488345E8 		addq	$2, -24(%rbp)
 862      02
 238:main.c        **** 		return 0;
 863              		.loc 1 238 0
 864 06c7 B8000000 		movl	$0, %eax
 864      00
 865 06cc EB14     		jmp	.L53
 866              	.L51:
 239:main.c        **** 	} else {
 240:main.c        ****     printf(" after dump \n "); 
 867              		.loc 1 240 0
 868 06ce BF000000 		movl	$.LC22, %edi
 868      00
 869 06d3 B8000000 		movl	$0, %eax
 869      00
 870 06d8 E8000000 		call	printf
 870      00
 241:main.c        **** 		return 1;
 871              		.loc 1 241 0
 872 06dd B8010000 		movl	$1, %eax
 872      00
 873              	.L53:
 242:main.c        **** 	}
 243:main.c        **** }
 874              		.loc 1 243 0 discriminator 1
 875 06e2 488B4DF8 		movq	-8(%rbp), %rcx
 876 06e6 6448330C 		xorq	%fs:40, %rcx
 876      25280000 
 876      00
 877 06ef 7405     		je	.L54
 878              		.loc 1 243 0 is_stmt 0
 879 06f1 E8000000 		call	__stack_chk_fail
 879      00
 880              	.L54:
 881 06f6 C9       		leave
 882              		.cfi_def_cfa 7, 8
 883 06f7 C3       		ret
 884              		.cfi_endproc
 885              	.LFE13:
 887              		.section	.rodata
 888              	.LC23:
 889 01d5 556E7061 		.string	"Unparseable hex number"
 889      72736561 
 889      626C6520 
 889      68657820 
 889      6E756D62 
 890              	.LC24:
 891 01ec 4368616E 		.string	"Channel out of range"
 891      6E656C20 
 891      6F757420 
 891      6F662072 
 891      616E6765 
 892              	.LC25:
 893 0201 436F6E64 		.string	"Conduit out of range"
 893      75697420 
 893      6F757420 
 893      6F662072 
 893      616E6765 
 894              	.LC26:
 895 0216 496C6C65 		.string	"Illegal character"
 895      67616C20 
 895      63686172 
 895      61637465 
 895      7200
 896              	.LC27:
 897 0228 556E7465 		.string	"Unterminated string"
 897      726D696E 
 897      61746564 
 897      20737472 
 897      696E6700 
 898              	.LC28:
 899 023c 4E6F206D 		.string	"No memory"
 899      656D6F72 
 899      7900
 900              	.LC29:
 901 0246 456D7074 		.string	"Empty string"
 901      79207374 
 901      72696E67 
 901      00
 902              	.LC30:
 903 0253 4F646420 		.string	"Odd number of digits"
 903      6E756D62 
 903      6572206F 
 903      66206469 
 903      67697473 
 904              	.LC31:
 905 0268 43616E6E 		.string	"Cannot load file"
 905      6F74206C 
 905      6F616420 
 905      66696C65 
 905      00
 906              	.LC32:
 907 0279 43616E6E 		.string	"Cannot save file"
 907      6F742073 
 907      61766520 
 907      66696C65 
 907      00
 908              	.LC33:
 909 028a 42616420 		.string	"Bad arguments"
 909      61726775 
 909      6D656E74 
 909      7300
 910 0298 00000000 		.align 32
 910      00000000 
 913              	errMessages:
 914 02a0 00000000 		.quad	0
 914      00000000 
 915 02a8 00000000 		.quad	0
 915      00000000 
 916 02b0 00000000 		.quad	.LC23
 916      00000000 
 917 02b8 00000000 		.quad	.LC24
 917      00000000 
 918 02c0 00000000 		.quad	.LC25
 918      00000000 
 919 02c8 00000000 		.quad	.LC26
 919      00000000 
 920 02d0 00000000 		.quad	.LC27
 920      00000000 
 921 02d8 00000000 		.quad	.LC28
 921      00000000 
 922 02e0 00000000 		.quad	.LC29
 922      00000000 
 923 02e8 00000000 		.quad	.LC30
 923      00000000 
 924 02f0 00000000 		.quad	.LC31
 924      00000000 
 925 02f8 00000000 		.quad	.LC32
 925      00000000 
 926 0300 00000000 		.quad	.LC33
 926      00000000 
 927              	.LC34:
 928 0308 646F5265 		.string	"doRead()"
 928      61642829 
 928      00
 929              		.text
 931              	doRead:
 932              	.LFB14:
 244:main.c        **** 
 245:main.c        **** static const char *const errMessages[] = {
 246:main.c        **** 	NULL,
 247:main.c        **** 	NULL,
 248:main.c        **** 	"Unparseable hex number",
 249:main.c        **** 	"Channel out of range",
 250:main.c        **** 	"Conduit out of range",
 251:main.c        **** 	"Illegal character",
 252:main.c        **** 	"Unterminated string",
 253:main.c        **** 	"No memory",
 254:main.c        **** 	"Empty string",
 255:main.c        **** 	"Odd number of digits",
 256:main.c        **** 	"Cannot load file",
 257:main.c        **** 	"Cannot save file",
 258:main.c        **** 	"Bad arguments"
 259:main.c        **** };
 260:main.c        **** 
 261:main.c        **** typedef enum {
 262:main.c        **** 	FLP_SUCCESS,
 263:main.c        **** 	FLP_LIBERR,
 264:main.c        **** 	FLP_BAD_HEX,
 265:main.c        **** 	FLP_CHAN_RANGE,
 266:main.c        **** 	FLP_CONDUIT_RANGE,
 267:main.c        **** 	FLP_ILL_CHAR,
 268:main.c        **** 	FLP_UNTERM_STRING,
 269:main.c        **** 	FLP_NO_MEMORY,
 270:main.c        **** 	FLP_EMPTY_STRING,
 271:main.c        **** 	FLP_ODD_DIGITS,
 272:main.c        **** 	FLP_CANNOT_LOAD,
 273:main.c        **** 	FLP_CANNOT_SAVE,
 274:main.c        **** 	FLP_ARGS
 275:main.c        **** } ReturnCode;
 276:main.c        **** 
 277:main.c        **** static ReturnCode doRead(
 278:main.c        **** 	struct FLContext *handle, uint8 chan, uint32 length, FILE *destFile, uint16 *checksum,
 279:main.c        **** 	const char **error)
 280:main.c        **** {
 933              		.loc 1 280 0 is_stmt 1
 934              		.cfi_startproc
 935 06f8 55       		pushq	%rbp
 936              		.cfi_def_cfa_offset 16
 937              		.cfi_offset 6, -16
 938 06f9 4889E5   		movq	%rsp, %rbp
 939              		.cfi_def_cfa_register 6
 940 06fc 4883EC60 		subq	$96, %rsp
 941 0700 48897DC8 		movq	%rdi, -56(%rbp)
 942 0704 89F0     		movl	%esi, %eax
 943 0706 8955C0   		movl	%edx, -64(%rbp)
 944 0709 48894DB8 		movq	%rcx, -72(%rbp)
 945 070d 4C8945B0 		movq	%r8, -80(%rbp)
 946 0711 4C894DA8 		movq	%r9, -88(%rbp)
 947 0715 8845C4   		movb	%al, -60(%rbp)
 948              		.loc 1 280 0
 949 0718 64488B04 		movq	%fs:40, %rax
 949      25280000 
 949      00
 950 0721 488945F8 		movq	%rax, -8(%rbp)
 951 0725 31C0     		xorl	%eax, %eax
 281:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 952              		.loc 1 281 0
 953 0727 C745D800 		movl	$0, -40(%rbp)
 953      000000
 282:main.c        **** 	uint32 bytesWritten;
 283:main.c        **** 	FLStatus fStatus;
 284:main.c        **** 	uint32 chunkSize;
 285:main.c        **** 	const uint8 *recvData;
 286:main.c        **** 	uint32 actualLength;
 287:main.c        **** 	const uint8 *ptr;
 288:main.c        **** 	uint16 csVal = 0x0000;
 954              		.loc 1 288 0
 955 072e 66C745D2 		movw	$0, -46(%rbp)
 955      0000
 289:main.c        **** 	#define READ_MAX 65536
 290:main.c        **** 
 291:main.c        **** 	// Read first chunk
 292:main.c        **** 	chunkSize = length >= READ_MAX ? READ_MAX : length;
 956              		.loc 1 292 0
 957 0734 B8000001 		movl	$65536, %eax
 957      00
 958 0739 817DC000 		cmpl	$65536, -64(%rbp)
 958      000100
 959 0740 0F4645C0 		cmovbe	-64(%rbp), %eax
 960 0744 8945DC   		movl	%eax, -36(%rbp)
 293:main.c        **** 	fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 961              		.loc 1 293 0
 962 0747 0FB675C4 		movzbl	-60(%rbp), %esi
 963 074b 488B4DA8 		movq	-88(%rbp), %rcx
 964 074f 8B55DC   		movl	-36(%rbp), %edx
 965 0752 488B45C8 		movq	-56(%rbp), %rax
 966 0756 4989C8   		movq	%rcx, %r8
 967 0759 B9000000 		movl	$0, %ecx
 967      00
 968 075e 4889C7   		movq	%rax, %rdi
 969 0761 E8000000 		call	flReadChannelAsyncSubmit
 969      00
 970 0766 8945E0   		movl	%eax, -32(%rbp)
 294:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 971              		.loc 1 294 0
 972 0769 837DE000 		cmpl	$0, -32(%rbp)
 973 076d 741D     		je	.L56
 974              		.loc 1 294 0 is_stmt 0 discriminator 1
 975 076f 488B45A8 		movq	-88(%rbp), %rax
 976 0773 BE000000 		movl	$.LC34, %esi
 976      00
 977 0778 4889C7   		movq	%rax, %rdi
 978 077b E8000000 		call	errPrefix
 978      00
 979 0780 C745D801 		movl	$1, -40(%rbp)
 979      000000
 980 0787 E9FB0100 		jmp	.L57
 980      00
 981              	.L56:
 295:main.c        **** 	length = length - chunkSize;
 982              		.loc 1 295 0 is_stmt 1
 983 078c 8B45DC   		movl	-36(%rbp), %eax
 984 078f 2945C0   		subl	%eax, -64(%rbp)
 296:main.c        **** 
 297:main.c        **** 	while ( length ) {
 985              		.loc 1 297 0
 986 0792 E91E0100 		jmp	.L58
 986      00
 987              	.L64:
 298:main.c        **** 		// Read chunk N
 299:main.c        **** 		chunkSize = length >= READ_MAX ? READ_MAX : length;
 988              		.loc 1 299 0
 989 0797 B8000001 		movl	$65536, %eax
 989      00
 990 079c 817DC000 		cmpl	$65536, -64(%rbp)
 990      000100
 991 07a3 0F4645C0 		cmovbe	-64(%rbp), %eax
 992 07a7 8945DC   		movl	%eax, -36(%rbp)
 300:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 993              		.loc 1 300 0
 994 07aa 0FB675C4 		movzbl	-60(%rbp), %esi
 995 07ae 488B4DA8 		movq	-88(%rbp), %rcx
 996 07b2 8B55DC   		movl	-36(%rbp), %edx
 997 07b5 488B45C8 		movq	-56(%rbp), %rax
 998 07b9 4989C8   		movq	%rcx, %r8
 999 07bc B9000000 		movl	$0, %ecx
 999      00
 1000 07c1 4889C7   		movq	%rax, %rdi
 1001 07c4 E8000000 		call	flReadChannelAsyncSubmit
 1001      00
 1002 07c9 8945E0   		movl	%eax, -32(%rbp)
 301:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 1003              		.loc 1 301 0
 1004 07cc 837DE000 		cmpl	$0, -32(%rbp)
 1005 07d0 741D     		je	.L59
 1006              		.loc 1 301 0 is_stmt 0 discriminator 1
 1007 07d2 488B45A8 		movq	-88(%rbp), %rax
 1008 07d6 BE000000 		movl	$.LC34, %esi
 1008      00
 1009 07db 4889C7   		movq	%rax, %rdi
 1010 07de E8000000 		call	errPrefix
 1010      00
 1011 07e3 C745D801 		movl	$1, -40(%rbp)
 1011      000000
 1012 07ea E9980100 		jmp	.L57
 1012      00
 1013              	.L59:
 302:main.c        **** 		length = length - chunkSize;
 1014              		.loc 1 302 0 is_stmt 1
 1015 07ef 8B45DC   		movl	-36(%rbp), %eax
 1016 07f2 2945C0   		subl	%eax, -64(%rbp)
 303:main.c        **** 		
 304:main.c        **** 		// Await chunk N-1
 305:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 1017              		.loc 1 305 0
 1018 07f5 488B7DA8 		movq	-88(%rbp), %rdi
 1019 07f9 488D4DD4 		leaq	-44(%rbp), %rcx
 1020 07fd 488D55D4 		leaq	-44(%rbp), %rdx
 1021 0801 488D75E8 		leaq	-24(%rbp), %rsi
 1022 0805 488B45C8 		movq	-56(%rbp), %rax
 1023 0809 4989F8   		movq	%rdi, %r8
 1024 080c 4889C7   		movq	%rax, %rdi
 1025 080f E8000000 		call	flReadChannelAsyncAwait
 1025      00
 1026 0814 8945E0   		movl	%eax, -32(%rbp)
 306:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 1027              		.loc 1 306 0
 1028 0817 837DE000 		cmpl	$0, -32(%rbp)
 1029 081b 741D     		je	.L60
 1030              		.loc 1 306 0 is_stmt 0 discriminator 1
 1031 081d 488B45A8 		movq	-88(%rbp), %rax
 1032 0821 BE000000 		movl	$.LC34, %esi
 1032      00
 1033 0826 4889C7   		movq	%rax, %rdi
 1034 0829 E8000000 		call	errPrefix
 1034      00
 1035 082e C745D801 		movl	$1, -40(%rbp)
 1035      000000
 1036 0835 E94D0100 		jmp	.L57
 1036      00
 1037              	.L60:
 307:main.c        **** 
 308:main.c        **** 		// Write chunk N-1 to file
 309:main.c        **** 		bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 1038              		.loc 1 309 0 is_stmt 1
 1039 083a 8B45D4   		movl	-44(%rbp), %eax
 1040 083d 89C6     		movl	%eax, %esi
 1041 083f 488B45E8 		movq	-24(%rbp), %rax
 1042 0843 488B55B8 		movq	-72(%rbp), %rdx
 1043 0847 4889D1   		movq	%rdx, %rcx
 1044 084a 4889F2   		movq	%rsi, %rdx
 1045 084d BE010000 		movl	$1, %esi
 1045      00
 1046 0852 4889C7   		movq	%rax, %rdi
 1047 0855 E8000000 		call	fwrite
 1047      00
 1048 085a 8945E4   		movl	%eax, -28(%rbp)
 310:main.c        **** 		CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 1049              		.loc 1 310 0
 1050 085d 8B45D4   		movl	-44(%rbp), %eax
 1051 0860 3945E4   		cmpl	%eax, -28(%rbp)
 1052 0863 741D     		je	.L61
 1053              		.loc 1 310 0 is_stmt 0 discriminator 1
 1054 0865 488B45A8 		movq	-88(%rbp), %rax
 1055 0869 BE000000 		movl	$.LC34, %esi
 1055      00
 1056 086e 4889C7   		movq	%rax, %rdi
 1057 0871 E8000000 		call	errPrefix
 1057      00
 1058 0876 C745D80B 		movl	$11, -40(%rbp)
 1058      000000
 1059 087d E9050100 		jmp	.L57
 1059      00
 1060              	.L61:
 311:main.c        **** 
 312:main.c        **** 		// Checksum chunk N-1
 313:main.c        **** 		chunkSize = actualLength;
 1061              		.loc 1 313 0 is_stmt 1
 1062 0882 8B45D4   		movl	-44(%rbp), %eax
 1063 0885 8945DC   		movl	%eax, -36(%rbp)
 314:main.c        **** 		ptr = recvData;
 1064              		.loc 1 314 0
 1065 0888 488B45E8 		movq	-24(%rbp), %rax
 1066 088c 488945F0 		movq	%rax, -16(%rbp)
 315:main.c        **** 		while ( chunkSize-- ) {
 1067              		.loc 1 315 0
 1068 0890 EB16     		jmp	.L62
 1069              	.L63:
 316:main.c        **** 			csVal = (uint16)(csVal + *ptr++);
 1070              		.loc 1 316 0
 1071 0892 488B45F0 		movq	-16(%rbp), %rax
 1072 0896 488D5001 		leaq	1(%rax), %rdx
 1073 089a 488955F0 		movq	%rdx, -16(%rbp)
 1074 089e 0FB600   		movzbl	(%rax), %eax
 1075 08a1 0FB6C0   		movzbl	%al, %eax
 1076 08a4 660145D2 		addw	%ax, -46(%rbp)
 1077              	.L62:
 315:main.c        **** 		while ( chunkSize-- ) {
 1078              		.loc 1 315 0
 1079 08a8 8B45DC   		movl	-36(%rbp), %eax
 1080 08ab 8D50FF   		leal	-1(%rax), %edx
 1081 08ae 8955DC   		movl	%edx, -36(%rbp)
 1082 08b1 85C0     		testl	%eax, %eax
 1083 08b3 75DD     		jne	.L63
 1084              	.L58:
 297:main.c        **** 		// Read chunk N
 1085              		.loc 1 297 0
 1086 08b5 837DC000 		cmpl	$0, -64(%rbp)
 1087 08b9 0F85D8FE 		jne	.L64
 1087      FFFF
 317:main.c        **** 		}
 318:main.c        **** 	}
 319:main.c        **** 
 320:main.c        **** 	// Await last chunk
 321:main.c        **** 	fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 1088              		.loc 1 321 0
 1089 08bf 488B7DA8 		movq	-88(%rbp), %rdi
 1090 08c3 488D4DD4 		leaq	-44(%rbp), %rcx
 1091 08c7 488D55D4 		leaq	-44(%rbp), %rdx
 1092 08cb 488D75E8 		leaq	-24(%rbp), %rsi
 1093 08cf 488B45C8 		movq	-56(%rbp), %rax
 1094 08d3 4989F8   		movq	%rdi, %r8
 1095 08d6 4889C7   		movq	%rax, %rdi
 1096 08d9 E8000000 		call	flReadChannelAsyncAwait
 1096      00
 1097 08de 8945E0   		movl	%eax, -32(%rbp)
 322:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 1098              		.loc 1 322 0
 1099 08e1 837DE000 		cmpl	$0, -32(%rbp)
 1100 08e5 741D     		je	.L65
 1101              		.loc 1 322 0 is_stmt 0 discriminator 1
 1102 08e7 488B45A8 		movq	-88(%rbp), %rax
 1103 08eb BE000000 		movl	$.LC34, %esi
 1103      00
 1104 08f0 4889C7   		movq	%rax, %rdi
 1105 08f3 E8000000 		call	errPrefix
 1105      00
 1106 08f8 C745D801 		movl	$1, -40(%rbp)
 1106      000000
 1107 08ff E9830000 		jmp	.L57
 1107      00
 1108              	.L65:
 323:main.c        **** 	
 324:main.c        **** 	// Write last chunk to file
 325:main.c        **** 	bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 1109              		.loc 1 325 0 is_stmt 1
 1110 0904 8B45D4   		movl	-44(%rbp), %eax
 1111 0907 89C6     		movl	%eax, %esi
 1112 0909 488B45E8 		movq	-24(%rbp), %rax
 1113 090d 488B55B8 		movq	-72(%rbp), %rdx
 1114 0911 4889D1   		movq	%rdx, %rcx
 1115 0914 4889F2   		movq	%rsi, %rdx
 1116 0917 BE010000 		movl	$1, %esi
 1116      00
 1117 091c 4889C7   		movq	%rax, %rdi
 1118 091f E8000000 		call	fwrite
 1118      00
 1119 0924 8945E4   		movl	%eax, -28(%rbp)
 326:main.c        **** 	CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 1120              		.loc 1 326 0
 1121 0927 8B45D4   		movl	-44(%rbp), %eax
 1122 092a 3945E4   		cmpl	%eax, -28(%rbp)
 1123 092d 741A     		je	.L66
 1124              		.loc 1 326 0 is_stmt 0 discriminator 1
 1125 092f 488B45A8 		movq	-88(%rbp), %rax
 1126 0933 BE000000 		movl	$.LC34, %esi
 1126      00
 1127 0938 4889C7   		movq	%rax, %rdi
 1128 093b E8000000 		call	errPrefix
 1128      00
 1129 0940 C745D80B 		movl	$11, -40(%rbp)
 1129      000000
 1130 0947 EB3E     		jmp	.L57
 1131              	.L66:
 327:main.c        **** 
 328:main.c        **** 	// Checksum last chunk
 329:main.c        **** 	chunkSize = actualLength;
 1132              		.loc 1 329 0 is_stmt 1
 1133 0949 8B45D4   		movl	-44(%rbp), %eax
 1134 094c 8945DC   		movl	%eax, -36(%rbp)
 330:main.c        **** 	ptr = recvData;
 1135              		.loc 1 330 0
 1136 094f 488B45E8 		movq	-24(%rbp), %rax
 1137 0953 488945F0 		movq	%rax, -16(%rbp)
 331:main.c        **** 	while ( chunkSize-- ) {
 1138              		.loc 1 331 0
 1139 0957 EB16     		jmp	.L67
 1140              	.L68:
 332:main.c        **** 		csVal = (uint16)(csVal + *ptr++);
 1141              		.loc 1 332 0
 1142 0959 488B45F0 		movq	-16(%rbp), %rax
 1143 095d 488D5001 		leaq	1(%rax), %rdx
 1144 0961 488955F0 		movq	%rdx, -16(%rbp)
 1145 0965 0FB600   		movzbl	(%rax), %eax
 1146 0968 0FB6C0   		movzbl	%al, %eax
 1147 096b 660145D2 		addw	%ax, -46(%rbp)
 1148              	.L67:
 331:main.c        **** 	while ( chunkSize-- ) {
 1149              		.loc 1 331 0
 1150 096f 8B45DC   		movl	-36(%rbp), %eax
 1151 0972 8D50FF   		leal	-1(%rax), %edx
 1152 0975 8955DC   		movl	%edx, -36(%rbp)
 1153 0978 85C0     		testl	%eax, %eax
 1154 097a 75DD     		jne	.L68
 333:main.c        **** 	}
 334:main.c        **** 	
 335:main.c        **** 	// Return checksum to caller
 336:main.c        **** 	*checksum = csVal;
 1155              		.loc 1 336 0
 1156 097c 488B45B0 		movq	-80(%rbp), %rax
 1157 0980 0FB755D2 		movzwl	-46(%rbp), %edx
 1158 0984 668910   		movw	%dx, (%rax)
 1159              	.L57:
 337:main.c        **** cleanup:
 338:main.c        **** 	return retVal;
 1160              		.loc 1 338 0
 1161 0987 8B45D8   		movl	-40(%rbp), %eax
 339:main.c        **** }
 1162              		.loc 1 339 0
 1163 098a 488B4DF8 		movq	-8(%rbp), %rcx
 1164 098e 6448330C 		xorq	%fs:40, %rcx
 1164      25280000 
 1164      00
 1165 0997 7405     		je	.L70
 1166 0999 E8000000 		call	__stack_chk_fail
 1166      00
 1167              	.L70:
 1168 099e C9       		leave
 1169              		.cfi_def_cfa 7, 8
 1170 099f C3       		ret
 1171              		.cfi_endproc
 1172              	.LFE14:
 1174              		.section	.rodata
 1175              	.LC35:
 1176 0311 646F5772 		.string	"doWrite()"
 1176      69746528 
 1176      2900
 1177              		.text
 1179              	doWrite:
 1180              	.LFB15:
 340:main.c        **** 
 341:main.c        **** static ReturnCode doWrite(
 342:main.c        **** 	struct FLContext *handle, uint8 chan, FILE *srcFile, size_t *length, uint16 *checksum,
 343:main.c        **** 	const char **error)
 344:main.c        **** {
 1181              		.loc 1 344 0
 1182              		.cfi_startproc
 1183 09a0 55       		pushq	%rbp
 1184              		.cfi_def_cfa_offset 16
 1185              		.cfi_offset 6, -16
 1186 09a1 4889E5   		movq	%rsp, %rbp
 1187              		.cfi_def_cfa_register 6
 1188 09a4 4881EC70 		subq	$65648, %rsp
 1188      000100
 1189 09ab 4889BDB8 		movq	%rdi, -65608(%rbp)
 1189      FFFEFF
 1190 09b2 89F0     		movl	%esi, %eax
 1191 09b4 488995A8 		movq	%rdx, -65624(%rbp)
 1191      FFFEFF
 1192 09bb 48898DA0 		movq	%rcx, -65632(%rbp)
 1192      FFFEFF
 1193 09c2 4C898598 		movq	%r8, -65640(%rbp)
 1193      FFFEFF
 1194 09c9 4C898D90 		movq	%r9, -65648(%rbp)
 1194      FFFEFF
 1195 09d0 8885B4FF 		movb	%al, -65612(%rbp)
 1195      FEFF
 1196              		.loc 1 344 0
 1197 09d6 64488B04 		movq	%fs:40, %rax
 1197      25280000 
 1197      00
 1198 09df 488945F8 		movq	%rax, -8(%rbp)
 1199 09e3 31C0     		xorl	%eax, %eax
 345:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 1200              		.loc 1 345 0
 1201 09e5 C785C8FF 		movl	$0, -65592(%rbp)
 1201      FEFF0000 
 1201      0000
 346:main.c        **** 	size_t bytesRead, i;
 347:main.c        **** 	FLStatus fStatus;
 348:main.c        **** 	const uint8 *ptr;
 349:main.c        **** 	uint16 csVal = 0x0000;
 1202              		.loc 1 349 0
 1203 09ef 66C785C6 		movw	$0, -65594(%rbp)
 1203      FFFEFF00 
 1203      00
 350:main.c        **** 	size_t lenVal = 0;
 1204              		.loc 1 350 0
 1205 09f8 48C785E0 		movq	$0, -65568(%rbp)
 1205      FFFEFF00 
 1205      000000
 1206              	.L77:
 351:main.c        **** 	#define WRITE_MAX (65536 - 5)
 352:main.c        **** 	uint8 buffer[WRITE_MAX];
 353:main.c        **** 
 354:main.c        **** 	do {
 355:main.c        **** 		// Read Nth chunk
 356:main.c        **** 		bytesRead = fread(buffer, 1, WRITE_MAX, srcFile);
 1207              		.loc 1 356 0
 1208 0a03 488B95A8 		movq	-65624(%rbp), %rdx
 1208      FFFEFF
 1209 0a0a 488D85F0 		leaq	-65552(%rbp), %rax
 1209      FFFEFF
 1210 0a11 4889D1   		movq	%rdx, %rcx
 1211 0a14 BAFBFF00 		movl	$65531, %edx
 1211      00
 1212 0a19 BE010000 		movl	$1, %esi
 1212      00
 1213 0a1e 4889C7   		movq	%rax, %rdi
 1214 0a21 E8000000 		call	fread
 1214      00
 1215 0a26 488985E8 		movq	%rax, -65560(%rbp)
 1215      FFFEFF
 357:main.c        **** 		if ( bytesRead ) {
 1216              		.loc 1 357 0
 1217 0a2d 4883BDE8 		cmpq	$0, -65560(%rbp)
 1217      FFFEFF00 
 1218 0a35 0F84C200 		je	.L72
 1218      0000
 358:main.c        **** 			// Update running total
 359:main.c        **** 			lenVal = lenVal + bytesRead;
 1219              		.loc 1 359 0
 1220 0a3b 488B85E8 		movq	-65560(%rbp), %rax
 1220      FFFEFF
 1221 0a42 480185E0 		addq	%rax, -65568(%rbp)
 1221      FFFEFF
 360:main.c        **** 
 361:main.c        **** 			// Submit Nth chunk
 362:main.c        **** 			fStatus = flWriteChannelAsync(handle, chan, bytesRead, buffer, error);
 1222              		.loc 1 362 0
 1223 0a49 0FB6B5B4 		movzbl	-65612(%rbp), %esi
 1223      FFFEFF
 1224 0a50 488BBD90 		movq	-65648(%rbp), %rdi
 1224      FFFEFF
 1225 0a57 488D8DF0 		leaq	-65552(%rbp), %rcx
 1225      FFFEFF
 1226 0a5e 488B95E8 		movq	-65560(%rbp), %rdx
 1226      FFFEFF
 1227 0a65 488B85B8 		movq	-65608(%rbp), %rax
 1227      FFFEFF
 1228 0a6c 4989F8   		movq	%rdi, %r8
 1229 0a6f 4889C7   		movq	%rax, %rdi
 1230 0a72 E8000000 		call	flWriteChannelAsync
 1230      00
 1231 0a77 8985CCFF 		movl	%eax, -65588(%rbp)
 1231      FEFF
 363:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 1232              		.loc 1 363 0
 1233 0a7d 83BDCCFF 		cmpl	$0, -65588(%rbp)
 1233      FEFF00
 1234 0a84 7423     		je	.L73
 1235              		.loc 1 363 0 is_stmt 0 discriminator 1
 1236 0a86 488B8590 		movq	-65648(%rbp), %rax
 1236      FFFEFF
 1237 0a8d BE000000 		movl	$.LC35, %esi
 1237      00
 1238 0a92 4889C7   		movq	%rax, %rdi
 1239 0a95 E8000000 		call	errPrefix
 1239      00
 1240 0a9a C785C8FF 		movl	$1, -65592(%rbp)
 1240      FEFF0100 
 1240      0000
 1241 0aa4 E9CF0000 		jmp	.L74
 1241      00
 1242              	.L73:
 364:main.c        **** 
 365:main.c        **** 			// Checksum Nth chunk
 366:main.c        **** 			i = bytesRead;
 1243              		.loc 1 366 0 is_stmt 1
 1244 0aa9 488B85E8 		movq	-65560(%rbp), %rax
 1244      FFFEFF
 1245 0ab0 488985D0 		movq	%rax, -65584(%rbp)
 1245      FFFEFF
 367:main.c        **** 			ptr = buffer;
 1246              		.loc 1 367 0
 1247 0ab7 488D85F0 		leaq	-65552(%rbp), %rax
 1247      FFFEFF
 1248 0abe 488985D8 		movq	%rax, -65576(%rbp)
 1248      FFFEFF
 368:main.c        **** 			while ( i-- ) {
 1249              		.loc 1 368 0
 1250 0ac5 EB1F     		jmp	.L75
 1251              	.L76:
 369:main.c        **** 				csVal = (uint16)(csVal + *ptr++);
 1252              		.loc 1 369 0
 1253 0ac7 488B85D8 		movq	-65576(%rbp), %rax
 1253      FFFEFF
 1254 0ace 488D5001 		leaq	1(%rax), %rdx
 1255 0ad2 488995D8 		movq	%rdx, -65576(%rbp)
 1255      FFFEFF
 1256 0ad9 0FB600   		movzbl	(%rax), %eax
 1257 0adc 0FB6C0   		movzbl	%al, %eax
 1258 0adf 660185C6 		addw	%ax, -65594(%rbp)
 1258      FFFEFF
 1259              	.L75:
 368:main.c        **** 			while ( i-- ) {
 1260              		.loc 1 368 0
 1261 0ae6 488B85D0 		movq	-65584(%rbp), %rax
 1261      FFFEFF
 1262 0aed 488D50FF 		leaq	-1(%rax), %rdx
 1263 0af1 488995D0 		movq	%rdx, -65584(%rbp)
 1263      FFFEFF
 1264 0af8 4885C0   		testq	%rax, %rax
 1265 0afb 75CA     		jne	.L76
 1266              	.L72:
 370:main.c        **** 			}
 371:main.c        **** 		}
 372:main.c        **** 	} while ( bytesRead == WRITE_MAX );
 1267              		.loc 1 372 0
 1268 0afd 4881BDE8 		cmpq	$65531, -65560(%rbp)
 1268      FFFEFFFB 
 1268      FF0000
 1269 0b08 0F84F5FE 		je	.L77
 1269      FFFF
 373:main.c        **** 
 374:main.c        **** 	// Wait for writes to be eeceived. This is optional, but it's only fair if we're benchmarking to
 375:main.c        **** 	// actually wait for the work to be completed.
 376:main.c        **** 	fStatus = flAwaitAsyncWrites(handle, error);
 1270              		.loc 1 376 0
 1271 0b0e 488B9590 		movq	-65648(%rbp), %rdx
 1271      FFFEFF
 1272 0b15 488B85B8 		movq	-65608(%rbp), %rax
 1272      FFFEFF
 1273 0b1c 4889D6   		movq	%rdx, %rsi
 1274 0b1f 4889C7   		movq	%rax, %rdi
 1275 0b22 E8000000 		call	flAwaitAsyncWrites
 1275      00
 1276 0b27 8985CCFF 		movl	%eax, -65588(%rbp)
 1276      FEFF
 377:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 1277              		.loc 1 377 0
 1278 0b2d 83BDCCFF 		cmpl	$0, -65588(%rbp)
 1278      FEFF00
 1279 0b34 7420     		je	.L78
 1280              		.loc 1 377 0 is_stmt 0 discriminator 1
 1281 0b36 488B8590 		movq	-65648(%rbp), %rax
 1281      FFFEFF
 1282 0b3d BE000000 		movl	$.LC35, %esi
 1282      00
 1283 0b42 4889C7   		movq	%rax, %rdi
 1284 0b45 E8000000 		call	errPrefix
 1284      00
 1285 0b4a C785C8FF 		movl	$1, -65592(%rbp)
 1285      FEFF0100 
 1285      0000
 1286 0b54 EB22     		jmp	.L74
 1287              	.L78:
 378:main.c        **** 
 379:main.c        **** 	// Return checksum & length to caller
 380:main.c        **** 	*checksum = csVal;
 1288              		.loc 1 380 0 is_stmt 1
 1289 0b56 488B8598 		movq	-65640(%rbp), %rax
 1289      FFFEFF
 1290 0b5d 0FB795C6 		movzwl	-65594(%rbp), %edx
 1290      FFFEFF
 1291 0b64 668910   		movw	%dx, (%rax)
 381:main.c        **** 	*length = lenVal;
 1292              		.loc 1 381 0
 1293 0b67 488B85A0 		movq	-65632(%rbp), %rax
 1293      FFFEFF
 1294 0b6e 488B95E0 		movq	-65568(%rbp), %rdx
 1294      FFFEFF
 1295 0b75 488910   		movq	%rdx, (%rax)
 1296              	.L74:
 382:main.c        **** cleanup:
 383:main.c        **** 	return retVal;
 1297              		.loc 1 383 0
 1298 0b78 8B85C8FF 		movl	-65592(%rbp), %eax
 1298      FEFF
 384:main.c        **** }
 1299              		.loc 1 384 0
 1300 0b7e 488B4DF8 		movq	-8(%rbp), %rcx
 1301 0b82 6448330C 		xorq	%fs:40, %rcx
 1301      25280000 
 1301      00
 1302 0b8b 7405     		je	.L80
 1303 0b8d E8000000 		call	__stack_chk_fail
 1303      00
 1304              	.L80:
 1305 0b92 C9       		leave
 1306              		.cfi_def_cfa 7, 8
 1307 0b93 C3       		ret
 1308              		.cfi_endproc
 1309              	.LFE15:
 1311              		.comm	out,1,1
 1312              		.section	.rodata
 1313              	.LC36:
 1314 031b 776200   		.string	"wb"
 1315 031e 0000     		.align 8
 1316              	.LC38:
 1317 0320 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 1317      20256420 
 1317      62797465 
 1317      73202863 
 1317      6865636B 
 1318              	.LC39:
 1319 035d 726200   		.string	"rb"
 1320              		.align 8
 1321              	.LC40:
 1322 0360 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 1322      6520257A 
 1322      75206279 
 1322      74657320 
 1322      28636865 
 1323              	.LC41:
 1324 039e 25732061 		.string	"%s at column %d\n  %s\n  "
 1324      7420636F 
 1324      6C756D6E 
 1324      2025640A 
 1324      20202573 
 1325              	.LC42:
 1326 03b6 5E0A00   		.string	"^\n"
 1327              		.text
 1329              	parseLine:
 1330              	.LFB16:
 385:main.c        **** 
 386:main.c        **** uint8 out;
 387:main.c        **** 
 388:main.c        **** static int parseLine(struct FLContext *handle, const char *line, const char **error) {
 1331              		.loc 1 388 0
 1332              		.cfi_startproc
 1333 0b94 55       		pushq	%rbp
 1334              		.cfi_def_cfa_offset 16
 1335              		.cfi_offset 6, -16
 1336 0b95 4889E5   		movq	%rsp, %rbp
 1337              		.cfi_def_cfa_register 6
 1338 0b98 4881EC10 		subq	$272, %rsp
 1338      010000
 1339 0b9f 4889BD08 		movq	%rdi, -248(%rbp)
 1339      FFFFFF
 1340 0ba6 4889B500 		movq	%rsi, -256(%rbp)
 1340      FFFFFF
 1341 0bad 488995F8 		movq	%rdx, -264(%rbp)
 1341      FEFFFF
 1342              		.loc 1 388 0
 1343 0bb4 64488B04 		movq	%fs:40, %rax
 1343      25280000 
 1343      00
 1344 0bbd 488945F8 		movq	%rax, -8(%rbp)
 1345 0bc1 31C0     		xorl	%eax, %eax
 389:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, status;
 1346              		.loc 1 389 0
 1347 0bc3 C78514FF 		movl	$0, -236(%rbp)
 1347      FFFF0000 
 1347      0000
 390:main.c        **** 	FLStatus fStatus;
 391:main.c        **** 	struct Buffer dataFromFPGA = {0,};
 1348              		.loc 1 391 0
 1349 0bcd 48C745D0 		movq	$0, -48(%rbp)
 1349      00000000 
 1350 0bd5 48C745D8 		movq	$0, -40(%rbp)
 1350      00000000 
 1351 0bdd 48C745E0 		movq	$0, -32(%rbp)
 1351      00000000 
 1352 0be5 48C745E8 		movq	$0, -24(%rbp)
 1352      00000000 
 392:main.c        **** 	BufferStatus bStatus;
 393:main.c        **** 	uint8 *data = NULL;
 1353              		.loc 1 393 0
 1354 0bed 48C78548 		movq	$0, -184(%rbp)
 1354      FFFFFF00 
 1354      000000
 394:main.c        **** 	char *fileName = NULL;
 1355              		.loc 1 394 0
 1356 0bf8 48C78550 		movq	$0, -176(%rbp)
 1356      FFFFFF00 
 1356      000000
 395:main.c        **** 	FILE *file = NULL;
 1357              		.loc 1 395 0
 1358 0c03 48C78558 		movq	$0, -168(%rbp)
 1358      FFFFFF00 
 1358      000000
 396:main.c        **** 	double totalTime, speed;
 397:main.c        **** 	#ifdef WIN32
 398:main.c        **** 		LARGE_INTEGER tvStart, tvEnd, freq;
 399:main.c        **** 		DWORD_PTR mask = 1;
 400:main.c        **** 		SetThreadAffinityMask(GetCurrentThread(), mask);
 401:main.c        **** 		QueryPerformanceFrequency(&freq);
 402:main.c        **** 	#else
 403:main.c        **** 		struct timeval tvStart, tvEnd;
 404:main.c        **** 		long long startTime, endTime;
 405:main.c        **** 	#endif
 406:main.c        **** 	bStatus = bufInitialise(&dataFromFPGA, 1024, 0x00, error);
 1359              		.loc 1 406 0
 1360 0c0e 488B95F8 		movq	-264(%rbp), %rdx
 1360      FEFFFF
 1361 0c15 488D45D0 		leaq	-48(%rbp), %rax
 1362 0c19 4889D1   		movq	%rdx, %rcx
 1363 0c1c BA000000 		movl	$0, %edx
 1363      00
 1364 0c21 BE000400 		movl	$1024, %esi
 1364      00
 1365 0c26 4889C7   		movq	%rax, %rdi
 1366 0c29 E8000000 		call	bufInitialise
 1366      00
 1367 0c2e 898520FF 		movl	%eax, -224(%rbp)
 1367      FFFF
 407:main.c        **** 	CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 1368              		.loc 1 407 0
 1369 0c34 83BD20FF 		cmpl	$0, -224(%rbp)
 1369      FFFF00
 1370 0c3b 740F     		je	.L82
 1371              		.loc 1 407 0 is_stmt 0 discriminator 1
 1372 0c3d C78514FF 		movl	$1, -236(%rbp)
 1372      FFFF0100 
 1372      0000
 1373 0c47 E9F10E00 		jmp	.L83
 1373      00
 1374              	.L82:
 408:main.c        **** 	ptr = line;
 1375              		.loc 1 408 0 is_stmt 1
 1376 0c4c 488B8500 		movq	-256(%rbp), %rax
 1376      FFFFFF
 1377 0c53 48890500 		movq	%rax, ptr(%rip)
 1377      000000
 409:main.c        **** 	do {
 410:main.c        **** 		while ( *ptr == ';' ) {
 1378              		.loc 1 410 0
 1379 0c5a EB12     		jmp	.L84
 1380              	.L85:
 411:main.c        **** 			ptr++;
 1381              		.loc 1 411 0
 1382 0c5c 488B0500 		movq	ptr(%rip), %rax
 1382      000000
 1383 0c63 4883C001 		addq	$1, %rax
 1384 0c67 48890500 		movq	%rax, ptr(%rip)
 1384      000000
 1385              	.L84:
 410:main.c        **** 			ptr++;
 1386              		.loc 1 410 0
 1387 0c6e 488B0500 		movq	ptr(%rip), %rax
 1387      000000
 1388 0c75 0FB600   		movzbl	(%rax), %eax
 1389 0c78 3C3B     		cmpb	$59, %al
 1390 0c7a 74E0     		je	.L85
 412:main.c        **** 		}
 413:main.c        **** 		switch ( *ptr ) {
 1391              		.loc 1 413 0
 1392 0c7c 488B0500 		movq	ptr(%rip), %rax
 1392      000000
 1393 0c83 0FB600   		movzbl	(%rax), %eax
 1394 0c86 0FBEC0   		movsbl	%al, %eax
 1395 0c89 83F872   		cmpl	$114, %eax
 1396 0c8c 7417     		je	.L87
 1397 0c8e 83F877   		cmpl	$119, %eax
 1398 0c91 0F84D006 		je	.L88
 1398      0000
 1399 0c97 83F82B   		cmpl	$43, %eax
 1400 0c9a 0F84600D 		je	.L89
 1400      0000
 1401 0ca0 E9470E00 		jmp	.L159
 1401      00
 1402              	.L87:
 1403              	.LBB4:
 414:main.c        **** 		case 'r':{
 415:main.c        **** 			uint32 chan;
 416:main.c        **** 			uint32 length = 1;
 1404              		.loc 1 416 0
 1405 0ca5 C78518FF 		movl	$1, -232(%rbp)
 1405      FFFF0100 
 1405      0000
 417:main.c        **** 			char *end;
 418:main.c        **** 			ptr++;
 1406              		.loc 1 418 0
 1407 0caf 488B0500 		movq	ptr(%rip), %rax
 1407      000000
 1408 0cb6 4883C001 		addq	$1, %rax
 1409 0cba 48890500 		movq	%rax, ptr(%rip)
 1409      000000
 419:main.c        **** 			
 420:main.c        **** 			// Get the channel to be read:
 421:main.c        **** 			errno = 0;
 1410              		.loc 1 421 0
 1411 0cc1 E8000000 		call	__errno_location
 1411      00
 1412 0cc6 C7000000 		movl	$0, (%rax)
 1412      0000
 422:main.c        **** 			chan = (uint32)strtoul(ptr, &end, 16);
 1413              		.loc 1 422 0
 1414 0ccc 488B0500 		movq	ptr(%rip), %rax
 1414      000000
 1415 0cd3 488D8D40 		leaq	-192(%rbp), %rcx
 1415      FFFFFF
 1416 0cda BA100000 		movl	$16, %edx
 1416      00
 1417 0cdf 4889CE   		movq	%rcx, %rsi
 1418 0ce2 4889C7   		movq	%rax, %rdi
 1419 0ce5 E8000000 		call	strtoul
 1419      00
 1420 0cea 898530FF 		movl	%eax, -208(%rbp)
 1420      FFFF
 423:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1421              		.loc 1 423 0
 1422 0cf0 E8000000 		call	__errno_location
 1422      00
 1423 0cf5 8B00     		movl	(%rax), %eax
 1424 0cf7 85C0     		testl	%eax, %eax
 1425 0cf9 740F     		je	.L90
 1426              		.loc 1 423 0 is_stmt 0 discriminator 1
 1427 0cfb C78514FF 		movl	$2, -236(%rbp)
 1427      FFFF0200 
 1427      0000
 1428 0d05 E9330E00 		jmp	.L83
 1428      00
 1429              	.L90:
 424:main.c        **** 
 425:main.c        **** 			// Ensure that it's 0-127
 426:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 1430              		.loc 1 426 0 is_stmt 1
 1431 0d0a 83BD30FF 		cmpl	$127, -208(%rbp)
 1431      FFFF7F
 1432 0d11 760F     		jbe	.L92
 1433              		.loc 1 426 0 is_stmt 0 discriminator 1
 1434 0d13 C78514FF 		movl	$3, -236(%rbp)
 1434      FFFF0300 
 1434      0000
 1435 0d1d E91B0E00 		jmp	.L83
 1435      00
 1436              	.L92:
 427:main.c        **** 			ptr = end;
 1437              		.loc 1 427 0 is_stmt 1
 1438 0d22 488B8540 		movq	-192(%rbp), %rax
 1438      FFFFFF
 1439 0d29 48890500 		movq	%rax, ptr(%rip)
 1439      000000
 428:main.c        **** 
 429:main.c        **** 			// Only three valid chars at this point:
 430:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 1440              		.loc 1 430 0
 1441 0d30 488B0500 		movq	ptr(%rip), %rax
 1441      000000
 1442 0d37 0FB600   		movzbl	(%rax), %eax
 1443 0d3a 84C0     		testb	%al, %al
 1444 0d3c 742B     		je	.L93
 1445              		.loc 1 430 0 is_stmt 0 discriminator 1
 1446 0d3e 488B0500 		movq	ptr(%rip), %rax
 1446      000000
 1447 0d45 0FB600   		movzbl	(%rax), %eax
 1448 0d48 3C3B     		cmpb	$59, %al
 1449 0d4a 741D     		je	.L93
 1450              		.loc 1 430 0 discriminator 2
 1451 0d4c 488B0500 		movq	ptr(%rip), %rax
 1451      000000
 1452 0d53 0FB600   		movzbl	(%rax), %eax
 1453 0d56 3C20     		cmpb	$32, %al
 1454 0d58 740F     		je	.L93
 1455              		.loc 1 430 0 discriminator 3
 1456 0d5a C78514FF 		movl	$5, -236(%rbp)
 1456      FFFF0500 
 1456      0000
 1457 0d64 E9D40D00 		jmp	.L83
 1457      00
 1458              	.L93:
 431:main.c        **** 
 432:main.c        **** 			if ( *ptr == ' ' ) {
 1459              		.loc 1 432 0 is_stmt 1
 1460 0d69 488B0500 		movq	ptr(%rip), %rax
 1460      000000
 1461 0d70 0FB600   		movzbl	(%rax), %eax
 1462 0d73 3C20     		cmpb	$32, %al
 1463 0d75 0F851D02 		jne	.L94
 1463      0000
 433:main.c        **** 				ptr++;
 1464              		.loc 1 433 0
 1465 0d7b 488B0500 		movq	ptr(%rip), %rax
 1465      000000
 1466 0d82 4883C001 		addq	$1, %rax
 1467 0d86 48890500 		movq	%rax, ptr(%rip)
 1467      000000
 434:main.c        **** 
 435:main.c        **** 				// Get the read count:
 436:main.c        **** 				errno = 0;
 1468              		.loc 1 436 0
 1469 0d8d E8000000 		call	__errno_location
 1469      00
 1470 0d92 C7000000 		movl	$0, (%rax)
 1470      0000
 437:main.c        **** 				length = (uint32)strtoul(ptr, &end, 16);
 1471              		.loc 1 437 0
 1472 0d98 488B0500 		movq	ptr(%rip), %rax
 1472      000000
 1473 0d9f 488D8D40 		leaq	-192(%rbp), %rcx
 1473      FFFFFF
 1474 0da6 BA100000 		movl	$16, %edx
 1474      00
 1475 0dab 4889CE   		movq	%rcx, %rsi
 1476 0dae 4889C7   		movq	%rax, %rdi
 1477 0db1 E8000000 		call	strtoul
 1477      00
 1478 0db6 898518FF 		movl	%eax, -232(%rbp)
 1478      FFFF
 438:main.c        **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1479              		.loc 1 438 0
 1480 0dbc E8000000 		call	__errno_location
 1480      00
 1481 0dc1 8B00     		movl	(%rax), %eax
 1482 0dc3 85C0     		testl	%eax, %eax
 1483 0dc5 740F     		je	.L95
 1484              		.loc 1 438 0 is_stmt 0 discriminator 1
 1485 0dc7 C78514FF 		movl	$2, -236(%rbp)
 1485      FFFF0200 
 1485      0000
 1486 0dd1 E9670D00 		jmp	.L83
 1486      00
 1487              	.L95:
 439:main.c        **** 				ptr = end;
 1488              		.loc 1 439 0 is_stmt 1
 1489 0dd6 488B8540 		movq	-192(%rbp), %rax
 1489      FFFFFF
 1490 0ddd 48890500 		movq	%rax, ptr(%rip)
 1490      000000
 440:main.c        **** 				
 441:main.c        **** 				// Only three valid chars at this point:
 442:main.c        **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 1491              		.loc 1 442 0
 1492 0de4 488B0500 		movq	ptr(%rip), %rax
 1492      000000
 1493 0deb 0FB600   		movzbl	(%rax), %eax
 1494 0dee 84C0     		testb	%al, %al
 1495 0df0 742B     		je	.L96
 1496              		.loc 1 442 0 is_stmt 0 discriminator 1
 1497 0df2 488B0500 		movq	ptr(%rip), %rax
 1497      000000
 1498 0df9 0FB600   		movzbl	(%rax), %eax
 1499 0dfc 3C3B     		cmpb	$59, %al
 1500 0dfe 741D     		je	.L96
 1501              		.loc 1 442 0 discriminator 2
 1502 0e00 488B0500 		movq	ptr(%rip), %rax
 1502      000000
 1503 0e07 0FB600   		movzbl	(%rax), %eax
 1504 0e0a 3C20     		cmpb	$32, %al
 1505 0e0c 740F     		je	.L96
 1506              		.loc 1 442 0 discriminator 3
 1507 0e0e C78514FF 		movl	$5, -236(%rbp)
 1507      FFFF0500 
 1507      0000
 1508 0e18 E9200D00 		jmp	.L83
 1508      00
 1509              	.L96:
 443:main.c        **** 				if ( *ptr == ' ' ) {
 1510              		.loc 1 443 0 is_stmt 1
 1511 0e1d 488B0500 		movq	ptr(%rip), %rax
 1511      000000
 1512 0e24 0FB600   		movzbl	(%rax), %eax
 1513 0e27 3C20     		cmpb	$32, %al
 1514 0e29 0F856901 		jne	.L94
 1514      0000
 1515              	.LBB5:
 444:main.c        **** 					const char *p;
 445:main.c        **** 					const char quoteChar = *++ptr;
 1516              		.loc 1 445 0
 1517 0e2f 488B0500 		movq	ptr(%rip), %rax
 1517      000000
 1518 0e36 4883C001 		addq	$1, %rax
 1519 0e3a 48890500 		movq	%rax, ptr(%rip)
 1519      000000
 1520 0e41 488B0500 		movq	ptr(%rip), %rax
 1520      000000
 1521 0e48 0FB600   		movzbl	(%rax), %eax
 1522 0e4b 888511FF 		movb	%al, -239(%rbp)
 1522      FFFF
 446:main.c        **** 					CHECK_STATUS(
 1523              		.loc 1 446 0
 1524 0e51 80BD11FF 		cmpb	$34, -239(%rbp)
 1524      FFFF22
 1525 0e58 7418     		je	.L97
 1526              		.loc 1 446 0 is_stmt 0 discriminator 1
 1527 0e5a 80BD11FF 		cmpb	$39, -239(%rbp)
 1527      FFFF27
 1528 0e61 740F     		je	.L97
 1529              		.loc 1 446 0 discriminator 2
 1530 0e63 C78514FF 		movl	$5, -236(%rbp)
 1530      FFFF0500 
 1530      0000
 1531 0e6d E9CB0C00 		jmp	.L83
 1531      00
 1532              	.L97:
 447:main.c        **** 						(quoteChar != '"' && quoteChar != '\''),
 448:main.c        **** 						FLP_ILL_CHAR, cleanup);
 449:main.c        **** 					
 450:main.c        **** 					// Get the file to write bytes to:
 451:main.c        **** 					ptr++;
 1533              		.loc 1 451 0 is_stmt 1
 1534 0e72 488B0500 		movq	ptr(%rip), %rax
 1534      000000
 1535 0e79 4883C001 		addq	$1, %rax
 1536 0e7d 48890500 		movq	%rax, ptr(%rip)
 1536      000000
 452:main.c        **** 					p = ptr;
 1537              		.loc 1 452 0
 1538 0e84 488B0500 		movq	ptr(%rip), %rax
 1538      000000
 1539 0e8b 48898560 		movq	%rax, -160(%rbp)
 1539      FFFFFF
 453:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 1540              		.loc 1 453 0
 1541 0e92 EB08     		jmp	.L98
 1542              	.L100:
 454:main.c        **** 						p++;
 1543              		.loc 1 454 0
 1544 0e94 48838560 		addq	$1, -160(%rbp)
 1544      FFFFFF01 
 1545              	.L98:
 453:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 1546              		.loc 1 453 0
 1547 0e9c 488B8560 		movq	-160(%rbp), %rax
 1547      FFFFFF
 1548 0ea3 0FB600   		movzbl	(%rax), %eax
 1549 0ea6 3A8511FF 		cmpb	-239(%rbp), %al
 1549      FFFF
 1550 0eac 740E     		je	.L99
 453:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 1551              		.loc 1 453 0 is_stmt 0 discriminator 1
 1552 0eae 488B8560 		movq	-160(%rbp), %rax
 1552      FFFFFF
 1553 0eb5 0FB600   		movzbl	(%rax), %eax
 1554 0eb8 84C0     		testb	%al, %al
 1555 0eba 75D8     		jne	.L100
 1556              	.L99:
 455:main.c        **** 					}
 456:main.c        **** 					CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 1557              		.loc 1 456 0 is_stmt 1
 1558 0ebc 488B8560 		movq	-160(%rbp), %rax
 1558      FFFFFF
 1559 0ec3 0FB600   		movzbl	(%rax), %eax
 1560 0ec6 84C0     		testb	%al, %al
 1561 0ec8 750F     		jne	.L101
 1562              		.loc 1 456 0 is_stmt 0 discriminator 1
 1563 0eca C78514FF 		movl	$6, -236(%rbp)
 1563      FFFF0600 
 1563      0000
 1564 0ed4 E9640C00 		jmp	.L83
 1564      00
 1565              	.L101:
 457:main.c        **** 					fileName = malloc((size_t)(p - ptr + 1));
 1566              		.loc 1 457 0 is_stmt 1
 1567 0ed9 488B8560 		movq	-160(%rbp), %rax
 1567      FFFFFF
 1568 0ee0 488B1500 		movq	ptr(%rip), %rdx
 1568      000000
 1569 0ee7 4829D0   		subq	%rdx, %rax
 1570 0eea 4883C001 		addq	$1, %rax
 1571 0eee 4889C7   		movq	%rax, %rdi
 1572 0ef1 E8000000 		call	malloc
 1572      00
 1573 0ef6 48898550 		movq	%rax, -176(%rbp)
 1573      FFFFFF
 458:main.c        **** 					CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 1574              		.loc 1 458 0
 1575 0efd 4883BD50 		cmpq	$0, -176(%rbp)
 1575      FFFFFF00 
 1576 0f05 750F     		jne	.L102
 1577              		.loc 1 458 0 is_stmt 0 discriminator 1
 1578 0f07 C78514FF 		movl	$7, -236(%rbp)
 1578      FFFF0700 
 1578      0000
 1579 0f11 E9270C00 		jmp	.L83
 1579      00
 1580              	.L102:
 459:main.c        **** 					CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 1581              		.loc 1 459 0 is_stmt 1
 1582 0f16 488B8560 		movq	-160(%rbp), %rax
 1582      FFFFFF
 1583 0f1d 488B1500 		movq	ptr(%rip), %rdx
 1583      000000
 1584 0f24 4839D0   		cmpq	%rdx, %rax
 1585 0f27 750F     		jne	.L103
 1586              		.loc 1 459 0 is_stmt 0 discriminator 1
 1587 0f29 C78514FF 		movl	$8, -236(%rbp)
 1587      FFFF0800 
 1587      0000
 1588 0f33 E9050C00 		jmp	.L83
 1588      00
 1589              	.L103:
 460:main.c        **** 					strncpy(fileName, ptr, (size_t)(p - ptr));
 1590              		.loc 1 460 0 is_stmt 1
 1591 0f38 488B8560 		movq	-160(%rbp), %rax
 1591      FFFFFF
 1592 0f3f 488B1500 		movq	ptr(%rip), %rdx
 1592      000000
 1593 0f46 4829D0   		subq	%rdx, %rax
 1594 0f49 4889C2   		movq	%rax, %rdx
 1595 0f4c 488B0D00 		movq	ptr(%rip), %rcx
 1595      000000
 1596 0f53 488B8550 		movq	-176(%rbp), %rax
 1596      FFFFFF
 1597 0f5a 4889CE   		movq	%rcx, %rsi
 1598 0f5d 4889C7   		movq	%rax, %rdi
 1599 0f60 E8000000 		call	strncpy
 1599      00
 461:main.c        **** 					fileName[p - ptr] = '\0';
 1600              		.loc 1 461 0
 1601 0f65 488B8560 		movq	-160(%rbp), %rax
 1601      FFFFFF
 1602 0f6c 488B1500 		movq	ptr(%rip), %rdx
 1602      000000
 1603 0f73 4829D0   		subq	%rdx, %rax
 1604 0f76 4889C2   		movq	%rax, %rdx
 1605 0f79 488B8550 		movq	-176(%rbp), %rax
 1605      FFFFFF
 1606 0f80 4801D0   		addq	%rdx, %rax
 1607 0f83 C60000   		movb	$0, (%rax)
 462:main.c        **** 					ptr = p + 1;
 1608              		.loc 1 462 0
 1609 0f86 488B8560 		movq	-160(%rbp), %rax
 1609      FFFFFF
 1610 0f8d 4883C001 		addq	$1, %rax
 1611 0f91 48890500 		movq	%rax, ptr(%rip)
 1611      000000
 1612              	.L94:
 1613              	.LBE5:
 463:main.c        **** 				}
 464:main.c        **** 			}
 465:main.c        **** 			if ( fileName ) {
 1614              		.loc 1 465 0
 1615 0f98 4883BD50 		cmpq	$0, -176(%rbp)
 1615      FFFFFF00 
 1616 0fa0 0F84EA01 		je	.L104
 1616      0000
 1617              	.LBB6:
 466:main.c        **** 				uint16 checksum = 0x0000;
 1618              		.loc 1 466 0
 1619 0fa6 66C78538 		movw	$0, -200(%rbp)
 1619      FFFFFF00 
 1619      00
 467:main.c        **** 
 468:main.c        **** 				// Open file for writing
 469:main.c        **** 				file = fopen(fileName, "wb");
 1620              		.loc 1 469 0
 1621 0faf 488B8550 		movq	-176(%rbp), %rax
 1621      FFFFFF
 1622 0fb6 BE000000 		movl	$.LC36, %esi
 1622      00
 1623 0fbb 4889C7   		movq	%rax, %rdi
 1624 0fbe E8000000 		call	fopen
 1624      00
 1625 0fc3 48898558 		movq	%rax, -168(%rbp)
 1625      FFFFFF
 470:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 1626              		.loc 1 470 0
 1627 0fca 4883BD58 		cmpq	$0, -168(%rbp)
 1627      FFFFFF00 
 1628 0fd2 750F     		jne	.L105
 1629              		.loc 1 470 0 is_stmt 0 discriminator 1
 1630 0fd4 C78514FF 		movl	$11, -236(%rbp)
 1630      FFFF0B00 
 1630      0000
 1631 0fde E95A0B00 		jmp	.L83
 1631      00
 1632              	.L105:
 471:main.c        **** 				free(fileName);
 1633              		.loc 1 471 0 is_stmt 1
 1634 0fe3 488B8550 		movq	-176(%rbp), %rax
 1634      FFFFFF
 1635 0fea 4889C7   		movq	%rax, %rdi
 1636 0fed E8000000 		call	free
 1636      00
 472:main.c        **** 				fileName = NULL;
 1637              		.loc 1 472 0
 1638 0ff2 48C78550 		movq	$0, -176(%rbp)
 1638      FFFFFF00 
 1638      000000
 473:main.c        **** 
 474:main.c        **** 				#ifdef WIN32
 475:main.c        **** 					QueryPerformanceCounter(&tvStart);
 476:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 477:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 478:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 479:main.c        **** 					totalTime /= freq.QuadPart;
 480:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 481:main.c        **** 				#else
 482:main.c        **** 					gettimeofday(&tvStart, NULL);
 1639              		.loc 1 482 0
 1640 0ffd 488D45B0 		leaq	-80(%rbp), %rax
 1641 1001 BE000000 		movl	$0, %esi
 1641      00
 1642 1006 4889C7   		movq	%rax, %rdi
 1643 1009 E8000000 		call	gettimeofday
 1643      00
 483:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 1644              		.loc 1 483 0
 1645 100e 8B8530FF 		movl	-208(%rbp), %eax
 1645      FFFF
 1646 1014 0FB6F0   		movzbl	%al, %esi
 1647 1017 4C8B85F8 		movq	-264(%rbp), %r8
 1647      FEFFFF
 1648 101e 488DBD38 		leaq	-200(%rbp), %rdi
 1648      FFFFFF
 1649 1025 488B8D58 		movq	-168(%rbp), %rcx
 1649      FFFFFF
 1650 102c 8B9518FF 		movl	-232(%rbp), %edx
 1650      FFFF
 1651 1032 488B8508 		movq	-248(%rbp), %rax
 1651      FFFFFF
 1652 1039 4D89C1   		movq	%r8, %r9
 1653 103c 4989F8   		movq	%rdi, %r8
 1654 103f 4889C7   		movq	%rax, %rdi
 1655 1042 E8B1F6FF 		call	doRead
 1655      FF
 1656 1047 898528FF 		movl	%eax, -216(%rbp)
 1656      FFFF
 484:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1657              		.loc 1 484 0
 1658 104d 488D45C0 		leaq	-64(%rbp), %rax
 1659 1051 BE000000 		movl	$0, %esi
 1659      00
 1660 1056 4889C7   		movq	%rax, %rdi
 1661 1059 E8000000 		call	gettimeofday
 1661      00
 485:main.c        **** 					startTime = tvStart.tv_sec;
 1662              		.loc 1 485 0
 1663 105e 488B45B0 		movq	-80(%rbp), %rax
 1664 1062 48894588 		movq	%rax, -120(%rbp)
 486:main.c        **** 					startTime *= 1000000;
 1665              		.loc 1 486 0
 1666 1066 488B4588 		movq	-120(%rbp), %rax
 1667 106a 4869C040 		imulq	$1000000, %rax, %rax
 1667      420F00
 1668 1071 48894588 		movq	%rax, -120(%rbp)
 487:main.c        **** 					startTime += tvStart.tv_usec;
 1669              		.loc 1 487 0
 1670 1075 488B45B8 		movq	-72(%rbp), %rax
 1671 1079 48014588 		addq	%rax, -120(%rbp)
 488:main.c        **** 					endTime = tvEnd.tv_sec;
 1672              		.loc 1 488 0
 1673 107d 488B45C0 		movq	-64(%rbp), %rax
 1674 1081 48894590 		movq	%rax, -112(%rbp)
 489:main.c        **** 					endTime *= 1000000;
 1675              		.loc 1 489 0
 1676 1085 488B4590 		movq	-112(%rbp), %rax
 1677 1089 4869C040 		imulq	$1000000, %rax, %rax
 1677      420F00
 1678 1090 48894590 		movq	%rax, -112(%rbp)
 490:main.c        **** 					endTime += tvEnd.tv_usec;
 1679              		.loc 1 490 0
 1680 1094 488B45C8 		movq	-56(%rbp), %rax
 1681 1098 48014590 		addq	%rax, -112(%rbp)
 491:main.c        **** 					totalTime = (double)(endTime - startTime);
 1682              		.loc 1 491 0
 1683 109c 488B4590 		movq	-112(%rbp), %rax
 1684 10a0 482B4588 		subq	-120(%rbp), %rax
 1685 10a4 660FEFC0 		pxor	%xmm0, %xmm0
 1686 10a8 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1686      C0
 1687 10ad F20F1145 		movsd	%xmm0, -104(%rbp)
 1687      98
 492:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1688              		.loc 1 492 0
 1689 10b2 F20F1045 		movsd	-104(%rbp), %xmm0
 1689      98
 1690 10b7 F20F100D 		movsd	.LC3(%rip), %xmm1
 1690      00000000 
 1691 10bf F20F5EC1 		divsd	%xmm1, %xmm0
 1692 10c3 F20F1145 		movsd	%xmm0, -104(%rbp)
 1692      98
 493:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1693              		.loc 1 493 0
 1694 10c8 8B8518FF 		movl	-232(%rbp), %eax
 1694      FFFF
 1695 10ce 4885C0   		testq	%rax, %rax
 1696 10d1 780B     		js	.L107
 1697 10d3 660FEFC0 		pxor	%xmm0, %xmm0
 1698 10d7 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1698      C0
 1699 10dc EB19     		jmp	.L108
 1700              	.L107:
 1701 10de 4889C2   		movq	%rax, %rdx
 1702 10e1 48D1EA   		shrq	%rdx
 1703 10e4 83E001   		andl	$1, %eax
 1704 10e7 4809C2   		orq	%rax, %rdx
 1705 10ea 660FEFC0 		pxor	%xmm0, %xmm0
 1706 10ee F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1706      C2
 1707 10f3 F20F58C0 		addsd	%xmm0, %xmm0
 1708              	.L108:
 1709 10f7 F20F1055 		movsd	-104(%rbp), %xmm2
 1709      98
 1710 10fc F20F100D 		movsd	.LC37(%rip), %xmm1
 1710      00000000 
 1711 1104 F20F59CA 		mulsd	%xmm2, %xmm1
 1712 1108 F20F5EC1 		divsd	%xmm1, %xmm0
 1713 110c F20F1145 		movsd	%xmm0, -96(%rbp)
 1713      A0
 494:main.c        **** 				#endif
 495:main.c        **** 				if ( enableBenchmarking ) {
 1714              		.loc 1 495 0
 1715 1111 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1715      000000
 1716 1118 84C0     		testb	%al, %al
 1717 111a 743A     		je	.L109
 496:main.c        **** 					printf(
 1718              		.loc 1 496 0
 1719 111c 0FB78538 		movzwl	-200(%rbp), %eax
 1719      FFFFFF
 1720 1123 0FB7D0   		movzwl	%ax, %edx
 1721 1126 488B75A0 		movq	-96(%rbp), %rsi
 1722 112a 8B8D30FF 		movl	-208(%rbp), %ecx
 1722      FFFF
 1723 1130 8B8518FF 		movl	-232(%rbp), %eax
 1723      FFFF
 1724 1136 4889B5F0 		movq	%rsi, -272(%rbp)
 1724      FEFFFF
 1725 113d F20F1085 		movsd	-272(%rbp), %xmm0
 1725      F0FEFFFF 
 1726 1145 89C6     		movl	%eax, %esi
 1727 1147 BF000000 		movl	$.LC38, %edi
 1727      00
 1728 114c B8010000 		movl	$1, %eax
 1728      00
 1729 1151 E8000000 		call	printf
 1729      00
 1730              	.L109:
 497:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 498:main.c        **** 						length, checksum, chan, speed);
 499:main.c        **** 				}
 500:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 1731              		.loc 1 500 0
 1732 1156 83BD28FF 		cmpl	$0, -216(%rbp)
 1732      FFFF00
 1733 115d 7412     		je	.L110
 1734              		.loc 1 500 0 is_stmt 0 discriminator 1
 1735 115f 8B8528FF 		movl	-216(%rbp), %eax
 1735      FFFF
 1736 1165 898514FF 		movl	%eax, -236(%rbp)
 1736      FFFF
 1737 116b 90       		nop
 1738              	.LBE6:
 423:main.c        **** 
 1739              		.loc 1 423 0 is_stmt 1 discriminator 1
 1740 116c E9CC0900 		jmp	.L83
 1740      00
 1741              	.L110:
 1742              	.LBB7:
 501:main.c        **** 
 502:main.c        **** 				// Close the file
 503:main.c        **** 				fclose(file);
 1743              		.loc 1 503 0
 1744 1171 488B8558 		movq	-168(%rbp), %rax
 1744      FFFFFF
 1745 1178 4889C7   		movq	%rax, %rdi
 1746 117b E8000000 		call	fclose
 1746      00
 504:main.c        **** 				file = NULL;
 1747              		.loc 1 504 0
 1748 1180 48C78558 		movq	$0, -168(%rbp)
 1748      FFFFFF00 
 1748      000000
 1749              	.LBE7:
 505:main.c        **** 			} else {
 506:main.c        **** 				size_t oldLength = dataFromFPGA.length;
 507:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 508:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 509:main.c        **** 				#ifdef WIN32
 510:main.c        **** 					QueryPerformanceCounter(&tvStart);
 511:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 512:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 513:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 514:main.c        **** 					totalTime /= freq.QuadPart;
 515:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 516:main.c        **** 				#else
 517:main.c        **** 					gettimeofday(&tvStart, NULL);
 518:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 519:main.c        ****                     out = dataFromFPGA.data[0];
 520:main.c        **** 					gettimeofday(&tvEnd, NULL);
 521:main.c        **** 					startTime = tvStart.tv_sec;
 522:main.c        **** 					startTime *= 1000000;
 523:main.c        **** 					startTime += tvStart.tv_usec;
 524:main.c        **** 					endTime = tvEnd.tv_sec;
 525:main.c        **** 					endTime *= 1000000;
 526:main.c        **** 					endTime += tvEnd.tv_usec;
 527:main.c        **** 					totalTime = (double)(endTime - startTime);
 528:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 529:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 530:main.c        **** 				#endif
 531:main.c        **** 				if ( enableBenchmarking ) {
 532:main.c        **** 					printf(
 533:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 534:main.c        **** 						length, calcChecksum(dataFromFPGA.data + oldLength, length), chan, speed);
 535:main.c        **** 				}
 536:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 537:main.c        **** 			}
 538:main.c        **** 			break;
 1750              		.loc 1 538 0
 1751 118b E9680900 		jmp	.L160
 1751      00
 1752              	.L104:
 1753              	.LBB8:
 506:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 1754              		.loc 1 506 0
 1755 1190 488B45D8 		movq	-40(%rbp), %rax
 1756 1194 488945A8 		movq	%rax, -88(%rbp)
 507:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 1757              		.loc 1 507 0
 1758 1198 8B9518FF 		movl	-232(%rbp), %edx
 1758      FFFF
 1759 119e 488B8DF8 		movq	-264(%rbp), %rcx
 1759      FEFFFF
 1760 11a5 488D45D0 		leaq	-48(%rbp), %rax
 1761 11a9 BE000000 		movl	$0, %esi
 1761      00
 1762 11ae 4889C7   		movq	%rax, %rdi
 1763 11b1 E8000000 		call	bufAppendConst
 1763      00
 1764 11b6 898520FF 		movl	%eax, -224(%rbp)
 1764      FFFF
 508:main.c        **** 				#ifdef WIN32
 1765              		.loc 1 508 0
 1766 11bc 83BD20FF 		cmpl	$0, -224(%rbp)
 1766      FFFF00
 1767 11c3 740F     		je	.L112
 508:main.c        **** 				#ifdef WIN32
 1768              		.loc 1 508 0 is_stmt 0 discriminator 1
 1769 11c5 C78514FF 		movl	$1, -236(%rbp)
 1769      FFFF0100 
 1769      0000
 1770 11cf E9690900 		jmp	.L83
 1770      00
 1771              	.L112:
 517:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 1772              		.loc 1 517 0 is_stmt 1
 1773 11d4 488D45B0 		leaq	-80(%rbp), %rax
 1774 11d8 BE000000 		movl	$0, %esi
 1774      00
 1775 11dd 4889C7   		movq	%rax, %rdi
 1776 11e0 E8000000 		call	gettimeofday
 1776      00
 518:main.c        ****                     out = dataFromFPGA.data[0];
 1777              		.loc 1 518 0
 1778 11e5 488B55D0 		movq	-48(%rbp), %rdx
 1779 11e9 488B45A8 		movq	-88(%rbp), %rax
 1780 11ed 488D0C02 		leaq	(%rdx,%rax), %rcx
 1781 11f1 8B9518FF 		movl	-232(%rbp), %edx
 1781      FFFF
 1782 11f7 8B8530FF 		movl	-208(%rbp), %eax
 1782      FFFF
 1783 11fd 0FB6F0   		movzbl	%al, %esi
 1784 1200 488BBDF8 		movq	-264(%rbp), %rdi
 1784      FEFFFF
 1785 1207 488B8508 		movq	-248(%rbp), %rax
 1785      FFFFFF
 1786 120e 4989F8   		movq	%rdi, %r8
 1787 1211 4889C7   		movq	%rax, %rdi
 1788 1214 E8000000 		call	flReadChannel
 1788      00
 1789 1219 898524FF 		movl	%eax, -220(%rbp)
 1789      FFFF
 519:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1790              		.loc 1 519 0
 1791 121f 488B45D0 		movq	-48(%rbp), %rax
 1792 1223 0FB600   		movzbl	(%rax), %eax
 1793 1226 88050000 		movb	%al, out(%rip)
 1793      0000
 520:main.c        **** 					startTime = tvStart.tv_sec;
 1794              		.loc 1 520 0
 1795 122c 488D45C0 		leaq	-64(%rbp), %rax
 1796 1230 BE000000 		movl	$0, %esi
 1796      00
 1797 1235 4889C7   		movq	%rax, %rdi
 1798 1238 E8000000 		call	gettimeofday
 1798      00
 521:main.c        **** 					startTime *= 1000000;
 1799              		.loc 1 521 0
 1800 123d 488B45B0 		movq	-80(%rbp), %rax
 1801 1241 48894588 		movq	%rax, -120(%rbp)
 522:main.c        **** 					startTime += tvStart.tv_usec;
 1802              		.loc 1 522 0
 1803 1245 488B4588 		movq	-120(%rbp), %rax
 1804 1249 4869C040 		imulq	$1000000, %rax, %rax
 1804      420F00
 1805 1250 48894588 		movq	%rax, -120(%rbp)
 523:main.c        **** 					endTime = tvEnd.tv_sec;
 1806              		.loc 1 523 0
 1807 1254 488B45B8 		movq	-72(%rbp), %rax
 1808 1258 48014588 		addq	%rax, -120(%rbp)
 524:main.c        **** 					endTime *= 1000000;
 1809              		.loc 1 524 0
 1810 125c 488B45C0 		movq	-64(%rbp), %rax
 1811 1260 48894590 		movq	%rax, -112(%rbp)
 525:main.c        **** 					endTime += tvEnd.tv_usec;
 1812              		.loc 1 525 0
 1813 1264 488B4590 		movq	-112(%rbp), %rax
 1814 1268 4869C040 		imulq	$1000000, %rax, %rax
 1814      420F00
 1815 126f 48894590 		movq	%rax, -112(%rbp)
 526:main.c        **** 					totalTime = (double)(endTime - startTime);
 1816              		.loc 1 526 0
 1817 1273 488B45C8 		movq	-56(%rbp), %rax
 1818 1277 48014590 		addq	%rax, -112(%rbp)
 527:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1819              		.loc 1 527 0
 1820 127b 488B4590 		movq	-112(%rbp), %rax
 1821 127f 482B4588 		subq	-120(%rbp), %rax
 1822 1283 660FEFC0 		pxor	%xmm0, %xmm0
 1823 1287 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1823      C0
 1824 128c F20F1145 		movsd	%xmm0, -104(%rbp)
 1824      98
 528:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1825              		.loc 1 528 0
 1826 1291 F20F1045 		movsd	-104(%rbp), %xmm0
 1826      98
 1827 1296 F20F100D 		movsd	.LC3(%rip), %xmm1
 1827      00000000 
 1828 129e F20F5EC1 		divsd	%xmm1, %xmm0
 1829 12a2 F20F1145 		movsd	%xmm0, -104(%rbp)
 1829      98
 529:main.c        **** 				#endif
 1830              		.loc 1 529 0
 1831 12a7 8B8518FF 		movl	-232(%rbp), %eax
 1831      FFFF
 1832 12ad 4885C0   		testq	%rax, %rax
 1833 12b0 780B     		js	.L113
 1834 12b2 660FEFC0 		pxor	%xmm0, %xmm0
 1835 12b6 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1835      C0
 1836 12bb EB19     		jmp	.L114
 1837              	.L113:
 1838 12bd 4889C2   		movq	%rax, %rdx
 1839 12c0 48D1EA   		shrq	%rdx
 1840 12c3 83E001   		andl	$1, %eax
 1841 12c6 4809C2   		orq	%rax, %rdx
 1842 12c9 660FEFC0 		pxor	%xmm0, %xmm0
 1843 12cd F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1843      C2
 1844 12d2 F20F58C0 		addsd	%xmm0, %xmm0
 1845              	.L114:
 1846 12d6 F20F1055 		movsd	-104(%rbp), %xmm2
 1846      98
 1847 12db F20F100D 		movsd	.LC37(%rip), %xmm1
 1847      00000000 
 1848 12e3 F20F59CA 		mulsd	%xmm2, %xmm1
 1849 12e7 F20F5EC1 		divsd	%xmm1, %xmm0
 1850 12eb F20F1145 		movsd	%xmm0, -96(%rbp)
 1850      A0
 531:main.c        **** 					printf(
 1851              		.loc 1 531 0
 1852 12f0 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1852      000000
 1853 12f7 84C0     		testb	%al, %al
 1854 12f9 744F     		je	.L115
 534:main.c        **** 				}
 1855              		.loc 1 534 0
 1856 12fb 8B8518FF 		movl	-232(%rbp), %eax
 1856      FFFF
 1857 1301 488B4DD0 		movq	-48(%rbp), %rcx
 1858 1305 488B55A8 		movq	-88(%rbp), %rdx
 1859 1309 4801CA   		addq	%rcx, %rdx
 1860 130c 4889C6   		movq	%rax, %rsi
 1861 130f 4889D7   		movq	%rdx, %rdi
 1862 1312 E879F2FF 		call	calcChecksum
 1862      FF
 532:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 1863              		.loc 1 532 0
 1864 1317 0FB7D0   		movzwl	%ax, %edx
 1865 131a 488B75A0 		movq	-96(%rbp), %rsi
 1866 131e 8B8D30FF 		movl	-208(%rbp), %ecx
 1866      FFFF
 1867 1324 8B8518FF 		movl	-232(%rbp), %eax
 1867      FFFF
 1868 132a 4889B5F0 		movq	%rsi, -272(%rbp)
 1868      FEFFFF
 1869 1331 F20F1085 		movsd	-272(%rbp), %xmm0
 1869      F0FEFFFF 
 1870 1339 89C6     		movl	%eax, %esi
 1871 133b BF000000 		movl	$.LC38, %edi
 1871      00
 1872 1340 B8010000 		movl	$1, %eax
 1872      00
 1873 1345 E8000000 		call	printf
 1873      00
 1874              	.L115:
 536:main.c        **** 			}
 1875              		.loc 1 536 0
 1876 134a 83BD24FF 		cmpl	$0, -220(%rbp)
 1876      FFFF00
 1877 1351 0F84A107 		je	.L160
 1877      0000
 536:main.c        **** 			}
 1878              		.loc 1 536 0 is_stmt 0 discriminator 1
 1879 1357 C78514FF 		movl	$1, -236(%rbp)
 1879      FFFF0100 
 1879      0000
 1880 1361 90       		nop
 1881 1362 E9D60700 		jmp	.L83
 1881      00
 1882              	.L88:
 1883              	.LBE8:
 1884              	.LBE4:
 1885              	.LBB9:
 539:main.c        **** 		}
 540:main.c        **** 		case 'w':{
 541:main.c        **** 			unsigned long int chan;
 542:main.c        **** 			size_t length = 1, i;
 1886              		.loc 1 542 0 is_stmt 1
 1887 1367 48C78538 		movq	$1, -200(%rbp)
 1887      FFFFFF01 
 1887      000000
 543:main.c        **** 			char *end, ch;
 544:main.c        **** 			const char *p;
 545:main.c        **** 			ptr++;
 1888              		.loc 1 545 0
 1889 1372 488B0500 		movq	ptr(%rip), %rax
 1889      000000
 1890 1379 4883C001 		addq	$1, %rax
 1891 137d 48890500 		movq	%rax, ptr(%rip)
 1891      000000
 546:main.c        **** 			
 547:main.c        **** 			// Get the channel to be written:
 548:main.c        **** 			errno = 0;
 1892              		.loc 1 548 0
 1893 1384 E8000000 		call	__errno_location
 1893      00
 1894 1389 C7000000 		movl	$0, (%rax)
 1894      0000
 549:main.c        **** 			chan = strtoul(ptr, &end, 16);
 1895              		.loc 1 549 0
 1896 138f 488B0500 		movq	ptr(%rip), %rax
 1896      000000
 1897 1396 488D8D40 		leaq	-192(%rbp), %rcx
 1897      FFFFFF
 1898 139d BA100000 		movl	$16, %edx
 1898      00
 1899 13a2 4889CE   		movq	%rcx, %rsi
 1900 13a5 4889C7   		movq	%rax, %rdi
 1901 13a8 E8000000 		call	strtoul
 1901      00
 1902 13ad 48894580 		movq	%rax, -128(%rbp)
 550:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1903              		.loc 1 550 0
 1904 13b1 E8000000 		call	__errno_location
 1904      00
 1905 13b6 8B00     		movl	(%rax), %eax
 1906 13b8 85C0     		testl	%eax, %eax
 1907 13ba 740F     		je	.L117
 1908              		.loc 1 550 0 is_stmt 0 discriminator 1
 1909 13bc C78514FF 		movl	$2, -236(%rbp)
 1909      FFFF0200 
 1909      0000
 1910 13c6 E9720700 		jmp	.L83
 1910      00
 1911              	.L117:
 551:main.c        **** 
 552:main.c        **** 			// Ensure that it's 0-127
 553:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 1912              		.loc 1 553 0 is_stmt 1
 1913 13cb 48837D80 		cmpq	$127, -128(%rbp)
 1913      7F
 1914 13d0 760F     		jbe	.L119
 1915              		.loc 1 553 0 is_stmt 0 discriminator 1
 1916 13d2 C78514FF 		movl	$3, -236(%rbp)
 1916      FFFF0300 
 1916      0000
 1917 13dc E95C0700 		jmp	.L83
 1917      00
 1918              	.L119:
 554:main.c        **** 			ptr = end;
 1919              		.loc 1 554 0 is_stmt 1
 1920 13e1 488B8540 		movq	-192(%rbp), %rax
 1920      FFFFFF
 1921 13e8 48890500 		movq	%rax, ptr(%rip)
 1921      000000
 555:main.c        **** 
 556:main.c        **** 			// There must be a space now:
 557:main.c        **** 			CHECK_STATUS(*ptr != ' ', FLP_ILL_CHAR, cleanup);
 1922              		.loc 1 557 0
 1923 13ef 488B0500 		movq	ptr(%rip), %rax
 1923      000000
 1924 13f6 0FB600   		movzbl	(%rax), %eax
 1925 13f9 3C20     		cmpb	$32, %al
 1926 13fb 740F     		je	.L120
 1927              		.loc 1 557 0 is_stmt 0 discriminator 1
 1928 13fd C78514FF 		movl	$5, -236(%rbp)
 1928      FFFF0500 
 1928      0000
 1929 1407 E9310700 		jmp	.L83
 1929      00
 1930              	.L120:
 558:main.c        **** 
 559:main.c        **** 			// Now either a quote or a hex digit
 560:main.c        **** 		   ch = *++ptr;
 1931              		.loc 1 560 0 is_stmt 1
 1932 140c 488B0500 		movq	ptr(%rip), %rax
 1932      000000
 1933 1413 4883C001 		addq	$1, %rax
 1934 1417 48890500 		movq	%rax, ptr(%rip)
 1934      000000
 1935 141e 488B0500 		movq	ptr(%rip), %rax
 1935      000000
 1936 1425 0FB600   		movzbl	(%rax), %eax
 1937 1428 888510FF 		movb	%al, -240(%rbp)
 1937      FFFF
 561:main.c        **** 			if ( ch == '"' || ch == '\'' ) {
 1938              		.loc 1 561 0
 1939 142e 80BD10FF 		cmpb	$34, -240(%rbp)
 1939      FFFF22
 1940 1435 740D     		je	.L121
 1941              		.loc 1 561 0 is_stmt 0 discriminator 1
 1942 1437 80BD10FF 		cmpb	$39, -240(%rbp)
 1942      FFFF27
 1943 143e 0F851203 		jne	.L122
 1943      0000
 1944              	.L121:
 1945              	.LBB10:
 562:main.c        **** 				uint16 checksum = 0x0000;
 1946              		.loc 1 562 0 is_stmt 1
 1947 1444 66C78512 		movw	$0, -238(%rbp)
 1947      FFFFFF00 
 1947      00
 563:main.c        **** 
 564:main.c        **** 				// Get the file to read bytes from:
 565:main.c        **** 				ptr++;
 1948              		.loc 1 565 0
 1949 144d 488B0500 		movq	ptr(%rip), %rax
 1949      000000
 1950 1454 4883C001 		addq	$1, %rax
 1951 1458 48890500 		movq	%rax, ptr(%rip)
 1951      000000
 566:main.c        **** 				p = ptr;
 1952              		.loc 1 566 0
 1953 145f 488B0500 		movq	ptr(%rip), %rax
 1953      000000
 1954 1466 48898570 		movq	%rax, -144(%rbp)
 1954      FFFFFF
 567:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1955              		.loc 1 567 0
 1956 146d EB08     		jmp	.L123
 1957              	.L125:
 568:main.c        **** 					p++;
 1958              		.loc 1 568 0
 1959 146f 48838570 		addq	$1, -144(%rbp)
 1959      FFFFFF01 
 1960              	.L123:
 567:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1961              		.loc 1 567 0
 1962 1477 488B8570 		movq	-144(%rbp), %rax
 1962      FFFFFF
 1963 147e 0FB600   		movzbl	(%rax), %eax
 1964 1481 3A8510FF 		cmpb	-240(%rbp), %al
 1964      FFFF
 1965 1487 740E     		je	.L124
 567:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1966              		.loc 1 567 0 is_stmt 0 discriminator 1
 1967 1489 488B8570 		movq	-144(%rbp), %rax
 1967      FFFFFF
 1968 1490 0FB600   		movzbl	(%rax), %eax
 1969 1493 84C0     		testb	%al, %al
 1970 1495 75D8     		jne	.L125
 1971              	.L124:
 569:main.c        **** 				}
 570:main.c        **** 				CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 1972              		.loc 1 570 0 is_stmt 1
 1973 1497 488B8570 		movq	-144(%rbp), %rax
 1973      FFFFFF
 1974 149e 0FB600   		movzbl	(%rax), %eax
 1975 14a1 84C0     		testb	%al, %al
 1976 14a3 750F     		jne	.L126
 1977              		.loc 1 570 0 is_stmt 0 discriminator 1
 1978 14a5 C78514FF 		movl	$6, -236(%rbp)
 1978      FFFF0600 
 1978      0000
 1979 14af E9890600 		jmp	.L83
 1979      00
 1980              	.L126:
 571:main.c        **** 				fileName = malloc((size_t)(p - ptr + 1));
 1981              		.loc 1 571 0 is_stmt 1
 1982 14b4 488B8570 		movq	-144(%rbp), %rax
 1982      FFFFFF
 1983 14bb 488B1500 		movq	ptr(%rip), %rdx
 1983      000000
 1984 14c2 4829D0   		subq	%rdx, %rax
 1985 14c5 4883C001 		addq	$1, %rax
 1986 14c9 4889C7   		movq	%rax, %rdi
 1987 14cc E8000000 		call	malloc
 1987      00
 1988 14d1 48898550 		movq	%rax, -176(%rbp)
 1988      FFFFFF
 572:main.c        **** 				CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 1989              		.loc 1 572 0
 1990 14d8 4883BD50 		cmpq	$0, -176(%rbp)
 1990      FFFFFF00 
 1991 14e0 750F     		jne	.L128
 1992              		.loc 1 572 0 is_stmt 0 discriminator 1
 1993 14e2 C78514FF 		movl	$7, -236(%rbp)
 1993      FFFF0700 
 1993      0000
 1994 14ec E9600200 		jmp	.L127
 1994      00
 1995              	.L128:
 573:main.c        **** 				CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 1996              		.loc 1 573 0 is_stmt 1
 1997 14f1 488B8570 		movq	-144(%rbp), %rax
 1997      FFFFFF
 1998 14f8 488B1500 		movq	ptr(%rip), %rdx
 1998      000000
 1999 14ff 4839D0   		cmpq	%rdx, %rax
 2000 1502 750F     		jne	.L129
 2001              		.loc 1 573 0 is_stmt 0 discriminator 1
 2002 1504 C78514FF 		movl	$8, -236(%rbp)
 2002      FFFF0800 
 2002      0000
 2003 150e E93E0200 		jmp	.L127
 2003      00
 2004              	.L129:
 574:main.c        **** 				strncpy(fileName, ptr, (size_t)(p - ptr));
 2005              		.loc 1 574 0 is_stmt 1
 2006 1513 488B8570 		movq	-144(%rbp), %rax
 2006      FFFFFF
 2007 151a 488B1500 		movq	ptr(%rip), %rdx
 2007      000000
 2008 1521 4829D0   		subq	%rdx, %rax
 2009 1524 4889C2   		movq	%rax, %rdx
 2010 1527 488B0D00 		movq	ptr(%rip), %rcx
 2010      000000
 2011 152e 488B8550 		movq	-176(%rbp), %rax
 2011      FFFFFF
 2012 1535 4889CE   		movq	%rcx, %rsi
 2013 1538 4889C7   		movq	%rax, %rdi
 2014 153b E8000000 		call	strncpy
 2014      00
 575:main.c        **** 				fileName[p - ptr] = '\0';
 2015              		.loc 1 575 0
 2016 1540 488B8570 		movq	-144(%rbp), %rax
 2016      FFFFFF
 2017 1547 488B1500 		movq	ptr(%rip), %rdx
 2017      000000
 2018 154e 4829D0   		subq	%rdx, %rax
 2019 1551 4889C2   		movq	%rax, %rdx
 2020 1554 488B8550 		movq	-176(%rbp), %rax
 2020      FFFFFF
 2021 155b 4801D0   		addq	%rdx, %rax
 2022 155e C60000   		movb	$0, (%rax)
 576:main.c        **** 				ptr = p + 1;  // skip over closing quote
 2023              		.loc 1 576 0
 2024 1561 488B8570 		movq	-144(%rbp), %rax
 2024      FFFFFF
 2025 1568 4883C001 		addq	$1, %rax
 2026 156c 48890500 		movq	%rax, ptr(%rip)
 2026      000000
 577:main.c        **** 
 578:main.c        **** 				// Open file for reading
 579:main.c        **** 				file = fopen(fileName, "rb");
 2027              		.loc 1 579 0
 2028 1573 488B8550 		movq	-176(%rbp), %rax
 2028      FFFFFF
 2029 157a BE000000 		movl	$.LC39, %esi
 2029      00
 2030 157f 4889C7   		movq	%rax, %rdi
 2031 1582 E8000000 		call	fopen
 2031      00
 2032 1587 48898558 		movq	%rax, -168(%rbp)
 2032      FFFFFF
 580:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_LOAD, cleanup);
 2033              		.loc 1 580 0
 2034 158e 4883BD58 		cmpq	$0, -168(%rbp)
 2034      FFFFFF00 
 2035 1596 750F     		jne	.L130
 2036              		.loc 1 580 0 is_stmt 0 discriminator 1
 2037 1598 C78514FF 		movl	$10, -236(%rbp)
 2037      FFFF0A00 
 2037      0000
 2038 15a2 E9AA0100 		jmp	.L127
 2038      00
 2039              	.L130:
 581:main.c        **** 				free(fileName);
 2040              		.loc 1 581 0 is_stmt 1
 2041 15a7 488B8550 		movq	-176(%rbp), %rax
 2041      FFFFFF
 2042 15ae 4889C7   		movq	%rax, %rdi
 2043 15b1 E8000000 		call	free
 2043      00
 582:main.c        **** 				fileName = NULL;
 2044              		.loc 1 582 0
 2045 15b6 48C78550 		movq	$0, -176(%rbp)
 2045      FFFFFF00 
 2045      000000
 583:main.c        **** 				
 584:main.c        **** 				#ifdef WIN32
 585:main.c        **** 					QueryPerformanceCounter(&tvStart);
 586:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 587:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 588:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 589:main.c        **** 					totalTime /= freq.QuadPart;
 590:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 591:main.c        **** 				#else
 592:main.c        **** 					gettimeofday(&tvStart, NULL);
 2046              		.loc 1 592 0
 2047 15c1 488D45B0 		leaq	-80(%rbp), %rax
 2048 15c5 BE000000 		movl	$0, %esi
 2048      00
 2049 15ca 4889C7   		movq	%rax, %rdi
 2050 15cd E8000000 		call	gettimeofday
 2050      00
 593:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 2051              		.loc 1 593 0
 2052 15d2 488B4580 		movq	-128(%rbp), %rax
 2053 15d6 0FB6F0   		movzbl	%al, %esi
 2054 15d9 4C8B85F8 		movq	-264(%rbp), %r8
 2054      FEFFFF
 2055 15e0 488DBD12 		leaq	-238(%rbp), %rdi
 2055      FFFFFF
 2056 15e7 488D8D38 		leaq	-200(%rbp), %rcx
 2056      FFFFFF
 2057 15ee 488B9558 		movq	-168(%rbp), %rdx
 2057      FFFFFF
 2058 15f5 488B8508 		movq	-248(%rbp), %rax
 2058      FFFFFF
 2059 15fc 4D89C1   		movq	%r8, %r9
 2060 15ff 4989F8   		movq	%rdi, %r8
 2061 1602 4889C7   		movq	%rax, %rdi
 2062 1605 E896F3FF 		call	doWrite
 2062      FF
 2063 160a 898528FF 		movl	%eax, -216(%rbp)
 2063      FFFF
 594:main.c        **** 					gettimeofday(&tvEnd, NULL);
 2064              		.loc 1 594 0
 2065 1610 488D45C0 		leaq	-64(%rbp), %rax
 2066 1614 BE000000 		movl	$0, %esi
 2066      00
 2067 1619 4889C7   		movq	%rax, %rdi
 2068 161c E8000000 		call	gettimeofday
 2068      00
 595:main.c        **** 					startTime = tvStart.tv_sec;
 2069              		.loc 1 595 0
 2070 1621 488B45B0 		movq	-80(%rbp), %rax
 2071 1625 48894588 		movq	%rax, -120(%rbp)
 596:main.c        **** 					startTime *= 1000000;
 2072              		.loc 1 596 0
 2073 1629 488B4588 		movq	-120(%rbp), %rax
 2074 162d 4869C040 		imulq	$1000000, %rax, %rax
 2074      420F00
 2075 1634 48894588 		movq	%rax, -120(%rbp)
 597:main.c        **** 					startTime += tvStart.tv_usec;
 2076              		.loc 1 597 0
 2077 1638 488B45B8 		movq	-72(%rbp), %rax
 2078 163c 48014588 		addq	%rax, -120(%rbp)
 598:main.c        **** 					endTime = tvEnd.tv_sec;
 2079              		.loc 1 598 0
 2080 1640 488B45C0 		movq	-64(%rbp), %rax
 2081 1644 48894590 		movq	%rax, -112(%rbp)
 599:main.c        **** 					endTime *= 1000000;
 2082              		.loc 1 599 0
 2083 1648 488B4590 		movq	-112(%rbp), %rax
 2084 164c 4869C040 		imulq	$1000000, %rax, %rax
 2084      420F00
 2085 1653 48894590 		movq	%rax, -112(%rbp)
 600:main.c        **** 					endTime += tvEnd.tv_usec;
 2086              		.loc 1 600 0
 2087 1657 488B45C8 		movq	-56(%rbp), %rax
 2088 165b 48014590 		addq	%rax, -112(%rbp)
 601:main.c        **** 					totalTime = (double)(endTime - startTime);
 2089              		.loc 1 601 0
 2090 165f 488B4590 		movq	-112(%rbp), %rax
 2091 1663 482B4588 		subq	-120(%rbp), %rax
 2092 1667 660FEFC0 		pxor	%xmm0, %xmm0
 2093 166b F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2093      C0
 2094 1670 F20F1145 		movsd	%xmm0, -104(%rbp)
 2094      98
 602:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 2095              		.loc 1 602 0
 2096 1675 F20F1045 		movsd	-104(%rbp), %xmm0
 2096      98
 2097 167a F20F100D 		movsd	.LC3(%rip), %xmm1
 2097      00000000 
 2098 1682 F20F5EC1 		divsd	%xmm1, %xmm0
 2099 1686 F20F1145 		movsd	%xmm0, -104(%rbp)
 2099      98
 603:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 2100              		.loc 1 603 0
 2101 168b 488B8538 		movq	-200(%rbp), %rax
 2101      FFFFFF
 2102 1692 4885C0   		testq	%rax, %rax
 2103 1695 780B     		js	.L131
 2104 1697 660FEFC0 		pxor	%xmm0, %xmm0
 2105 169b F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2105      C0
 2106 16a0 EB19     		jmp	.L132
 2107              	.L131:
 2108 16a2 4889C2   		movq	%rax, %rdx
 2109 16a5 48D1EA   		shrq	%rdx
 2110 16a8 83E001   		andl	$1, %eax
 2111 16ab 4809C2   		orq	%rax, %rdx
 2112 16ae 660FEFC0 		pxor	%xmm0, %xmm0
 2113 16b2 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 2113      C2
 2114 16b7 F20F58C0 		addsd	%xmm0, %xmm0
 2115              	.L132:
 2116 16bb F20F1055 		movsd	-104(%rbp), %xmm2
 2116      98
 2117 16c0 F20F100D 		movsd	.LC37(%rip), %xmm1
 2117      00000000 
 2118 16c8 F20F59CA 		mulsd	%xmm2, %xmm1
 2119 16cc F20F5EC1 		divsd	%xmm1, %xmm0
 2120 16d0 F20F1145 		movsd	%xmm0, -96(%rbp)
 2120      A0
 604:main.c        **** 				#endif
 605:main.c        **** 				if ( enableBenchmarking ) {
 2121              		.loc 1 605 0
 2122 16d5 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 2122      000000
 2123 16dc 84C0     		testb	%al, %al
 2124 16de 743A     		je	.L133
 606:main.c        **** 					printf(
 2125              		.loc 1 606 0
 2126 16e0 0FB78512 		movzwl	-238(%rbp), %eax
 2126      FFFFFF
 2127 16e7 0FB7D0   		movzwl	%ax, %edx
 2128 16ea 488B8538 		movq	-200(%rbp), %rax
 2128      FFFFFF
 2129 16f1 488B75A0 		movq	-96(%rbp), %rsi
 2130 16f5 488B4D80 		movq	-128(%rbp), %rcx
 2131 16f9 4889B5F0 		movq	%rsi, -272(%rbp)
 2131      FEFFFF
 2132 1700 F20F1085 		movsd	-272(%rbp), %xmm0
 2132      F0FEFFFF 
 2133 1708 4889C6   		movq	%rax, %rsi
 2134 170b BF000000 		movl	$.LC40, %edi
 2134      00
 2135 1710 B8010000 		movl	$1, %eax
 2135      00
 2136 1715 E8000000 		call	printf
 2136      00
 2137              	.L133:
 607:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 608:main.c        **** 						length, checksum, chan, speed);
 609:main.c        **** 				}
 610:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 2138              		.loc 1 610 0
 2139 171a 83BD28FF 		cmpl	$0, -216(%rbp)
 2139      FFFF00
 2140 1721 740E     		je	.L134
 2141              		.loc 1 610 0 is_stmt 0 discriminator 1
 2142 1723 8B8528FF 		movl	-216(%rbp), %eax
 2142      FFFF
 2143 1729 898514FF 		movl	%eax, -236(%rbp)
 2143      FFFF
 2144 172f EB20     		jmp	.L127
 2145              	.L134:
 611:main.c        **** 
 612:main.c        **** 				// Close the file
 613:main.c        **** 				fclose(file);
 2146              		.loc 1 613 0 is_stmt 1
 2147 1731 488B8558 		movq	-168(%rbp), %rax
 2147      FFFFFF
 2148 1738 4889C7   		movq	%rax, %rdi
 2149 173b E8000000 		call	fclose
 2149      00
 614:main.c        **** 				file = NULL;
 2150              		.loc 1 614 0
 2151 1740 48C78558 		movq	$0, -168(%rbp)
 2151      FFFFFF00 
 2151      000000
 2152              	.LBE10:
 561:main.c        **** 				uint16 checksum = 0x0000;
 2153              		.loc 1 561 0
 2154 174b 90       		nop
 2155 174c E9AB0300 		jmp	.L116
 2155      00
 2156              	.L127:
 550:main.c        **** 
 2157              		.loc 1 550 0 discriminator 2
 2158 1751 E9E70300 		jmp	.L83
 2158      00
 2159              	.L122:
 615:main.c        **** 			} else if ( isHexDigit(ch) ) {
 2160              		.loc 1 615 0
 2161 1756 0FBE8510 		movsbl	-240(%rbp), %eax
 2161      FFFFFF
 2162 175d 89C7     		movl	%eax, %edi
 2163 175f E8EEEDFF 		call	isHexDigit
 2163      FF
 2164 1764 84C0     		testb	%al, %al
 2165 1766 0F848402 		je	.L136
 2165      0000
 2166              	.LBB11:
 616:main.c        **** 				// Read a sequence of hex bytes to write
 617:main.c        **** 				uint8 *dataPtr;
 618:main.c        **** 				p = ptr + 1;
 2167              		.loc 1 618 0
 2168 176c 488B0500 		movq	ptr(%rip), %rax
 2168      000000
 2169 1773 4883C001 		addq	$1, %rax
 2170 1777 48898570 		movq	%rax, -144(%rbp)
 2170      FFFFFF
 619:main.c        **** 				while ( isHexDigit(*p) ) {
 2171              		.loc 1 619 0
 2172 177e EB08     		jmp	.L137
 2173              	.L138:
 620:main.c        **** 					p++;
 2174              		.loc 1 620 0
 2175 1780 48838570 		addq	$1, -144(%rbp)
 2175      FFFFFF01 
 2176              	.L137:
 619:main.c        **** 				while ( isHexDigit(*p) ) {
 2177              		.loc 1 619 0
 2178 1788 488B8570 		movq	-144(%rbp), %rax
 2178      FFFFFF
 2179 178f 0FB600   		movzbl	(%rax), %eax
 2180 1792 0FBEC0   		movsbl	%al, %eax
 2181 1795 89C7     		movl	%eax, %edi
 2182 1797 E8B6EDFF 		call	isHexDigit
 2182      FF
 2183 179c 84C0     		testb	%al, %al
 2184 179e 75E0     		jne	.L138
 621:main.c        **** 				}
 622:main.c        **** 				CHECK_STATUS((p - ptr) & 1, FLP_ODD_DIGITS, cleanup);
 2185              		.loc 1 622 0
 2186 17a0 488B8570 		movq	-144(%rbp), %rax
 2186      FFFFFF
 2187 17a7 488B1500 		movq	ptr(%rip), %rdx
 2187      000000
 2188 17ae 4829D0   		subq	%rdx, %rax
 2189 17b1 83E001   		andl	$1, %eax
 2190 17b4 4885C0   		testq	%rax, %rax
 2191 17b7 740F     		je	.L139
 2192              		.loc 1 622 0 is_stmt 0 discriminator 1
 2193 17b9 C78514FF 		movl	$9, -236(%rbp)
 2193      FFFF0900 
 2193      0000
 2194 17c3 E9750300 		jmp	.L83
 2194      00
 2195              	.L139:
 623:main.c        **** 				length = (size_t)(p - ptr) / 2;
 2196              		.loc 1 623 0 is_stmt 1
 2197 17c8 488B8570 		movq	-144(%rbp), %rax
 2197      FFFFFF
 2198 17cf 488B1500 		movq	ptr(%rip), %rdx
 2198      000000
 2199 17d6 4829D0   		subq	%rdx, %rax
 2200 17d9 48D1E8   		shrq	%rax
 2201 17dc 48898538 		movq	%rax, -200(%rbp)
 2201      FFFFFF
 624:main.c        **** 				data = malloc(length);
 2202              		.loc 1 624 0
 2203 17e3 488B8538 		movq	-200(%rbp), %rax
 2203      FFFFFF
 2204 17ea 4889C7   		movq	%rax, %rdi
 2205 17ed E8000000 		call	malloc
 2205      00
 2206 17f2 48898548 		movq	%rax, -184(%rbp)
 2206      FFFFFF
 625:main.c        **** 				dataPtr = data;
 2207              		.loc 1 625 0
 2208 17f9 488B8548 		movq	-184(%rbp), %rax
 2208      FFFFFF
 2209 1800 48898578 		movq	%rax, -136(%rbp)
 2209      FFFFFF
 626:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2210              		.loc 1 626 0
 2211 1807 48C78568 		movq	$0, -152(%rbp)
 2211      FFFFFF00 
 2211      000000
 2212 1812 EB34     		jmp	.L140
 2213              	.L141:
 627:main.c        **** 					getHexByte(dataPtr++);
 2214              		.loc 1 627 0 discriminator 3
 2215 1814 488B8578 		movq	-136(%rbp), %rax
 2215      FFFFFF
 2216 181b 488D5001 		leaq	1(%rax), %rdx
 2217 181f 48899578 		movq	%rdx, -136(%rbp)
 2217      FFFFFF
 2218 1826 4889C7   		movq	%rax, %rdi
 2219 1829 E817EEFF 		call	getHexByte
 2219      FF
 628:main.c        **** 					ptr += 2;
 2220              		.loc 1 628 0 discriminator 3
 2221 182e 488B0500 		movq	ptr(%rip), %rax
 2221      000000
 2222 1835 4883C002 		addq	$2, %rax
 2223 1839 48890500 		movq	%rax, ptr(%rip)
 2223      000000
 626:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2224              		.loc 1 626 0 discriminator 3
 2225 1840 48838568 		addq	$1, -152(%rbp)
 2225      FFFFFF01 
 2226              	.L140:
 626:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2227              		.loc 1 626 0 is_stmt 0 discriminator 1
 2228 1848 488B8538 		movq	-200(%rbp), %rax
 2228      FFFFFF
 2229 184f 48398568 		cmpq	%rax, -152(%rbp)
 2229      FFFFFF
 2230 1856 72BC     		jb	.L141
 629:main.c        **** 				}
 630:main.c        **** 				#ifdef WIN32
 631:main.c        **** 					QueryPerformanceCounter(&tvStart);
 632:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 633:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 634:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 635:main.c        **** 					totalTime /= freq.QuadPart;
 636:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 637:main.c        **** 				#else
 638:main.c        **** 					gettimeofday(&tvStart, NULL);
 2231              		.loc 1 638 0 is_stmt 1
 2232 1858 488D45B0 		leaq	-80(%rbp), %rax
 2233 185c BE000000 		movl	$0, %esi
 2233      00
 2234 1861 4889C7   		movq	%rax, %rdi
 2235 1864 E8000000 		call	gettimeofday
 2235      00
 639:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 2236              		.loc 1 639 0
 2237 1869 488B9538 		movq	-200(%rbp), %rdx
 2237      FFFFFF
 2238 1870 488B4580 		movq	-128(%rbp), %rax
 2239 1874 0FB6F0   		movzbl	%al, %esi
 2240 1877 488BBDF8 		movq	-264(%rbp), %rdi
 2240      FEFFFF
 2241 187e 488B8D48 		movq	-184(%rbp), %rcx
 2241      FFFFFF
 2242 1885 488B8508 		movq	-248(%rbp), %rax
 2242      FFFFFF
 2243 188c 4989F8   		movq	%rdi, %r8
 2244 188f 4889C7   		movq	%rax, %rdi
 2245 1892 E8000000 		call	flWriteChannel
 2245      00
 2246 1897 898524FF 		movl	%eax, -220(%rbp)
 2246      FFFF
 640:main.c        **** 					gettimeofday(&tvEnd, NULL);
 2247              		.loc 1 640 0
 2248 189d 488D45C0 		leaq	-64(%rbp), %rax
 2249 18a1 BE000000 		movl	$0, %esi
 2249      00
 2250 18a6 4889C7   		movq	%rax, %rdi
 2251 18a9 E8000000 		call	gettimeofday
 2251      00
 641:main.c        **** 					startTime = tvStart.tv_sec;
 2252              		.loc 1 641 0
 2253 18ae 488B45B0 		movq	-80(%rbp), %rax
 2254 18b2 48894588 		movq	%rax, -120(%rbp)
 642:main.c        **** 					startTime *= 1000000;
 2255              		.loc 1 642 0
 2256 18b6 488B4588 		movq	-120(%rbp), %rax
 2257 18ba 4869C040 		imulq	$1000000, %rax, %rax
 2257      420F00
 2258 18c1 48894588 		movq	%rax, -120(%rbp)
 643:main.c        **** 					startTime += tvStart.tv_usec;
 2259              		.loc 1 643 0
 2260 18c5 488B45B8 		movq	-72(%rbp), %rax
 2261 18c9 48014588 		addq	%rax, -120(%rbp)
 644:main.c        **** 					endTime = tvEnd.tv_sec;
 2262              		.loc 1 644 0
 2263 18cd 488B45C0 		movq	-64(%rbp), %rax
 2264 18d1 48894590 		movq	%rax, -112(%rbp)
 645:main.c        **** 					endTime *= 1000000;
 2265              		.loc 1 645 0
 2266 18d5 488B4590 		movq	-112(%rbp), %rax
 2267 18d9 4869C040 		imulq	$1000000, %rax, %rax
 2267      420F00
 2268 18e0 48894590 		movq	%rax, -112(%rbp)
 646:main.c        **** 					endTime += tvEnd.tv_usec;
 2269              		.loc 1 646 0
 2270 18e4 488B45C8 		movq	-56(%rbp), %rax
 2271 18e8 48014590 		addq	%rax, -112(%rbp)
 647:main.c        **** 					totalTime = (double)(endTime - startTime);
 2272              		.loc 1 647 0
 2273 18ec 488B4590 		movq	-112(%rbp), %rax
 2274 18f0 482B4588 		subq	-120(%rbp), %rax
 2275 18f4 660FEFC0 		pxor	%xmm0, %xmm0
 2276 18f8 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2276      C0
 2277 18fd F20F1145 		movsd	%xmm0, -104(%rbp)
 2277      98
 648:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 2278              		.loc 1 648 0
 2279 1902 F20F1045 		movsd	-104(%rbp), %xmm0
 2279      98
 2280 1907 F20F100D 		movsd	.LC3(%rip), %xmm1
 2280      00000000 
 2281 190f F20F5EC1 		divsd	%xmm1, %xmm0
 2282 1913 F20F1145 		movsd	%xmm0, -104(%rbp)
 2282      98
 649:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 2283              		.loc 1 649 0
 2284 1918 488B8538 		movq	-200(%rbp), %rax
 2284      FFFFFF
 2285 191f 4885C0   		testq	%rax, %rax
 2286 1922 780B     		js	.L142
 2287 1924 660FEFC0 		pxor	%xmm0, %xmm0
 2288 1928 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2288      C0
 2289 192d EB19     		jmp	.L143
 2290              	.L142:
 2291 192f 4889C2   		movq	%rax, %rdx
 2292 1932 48D1EA   		shrq	%rdx
 2293 1935 83E001   		andl	$1, %eax
 2294 1938 4809C2   		orq	%rax, %rdx
 2295 193b 660FEFC0 		pxor	%xmm0, %xmm0
 2296 193f F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 2296      C2
 2297 1944 F20F58C0 		addsd	%xmm0, %xmm0
 2298              	.L143:
 2299 1948 F20F1055 		movsd	-104(%rbp), %xmm2
 2299      98
 2300 194d F20F100D 		movsd	.LC37(%rip), %xmm1
 2300      00000000 
 2301 1955 F20F59CA 		mulsd	%xmm2, %xmm1
 2302 1959 F20F5EC1 		divsd	%xmm1, %xmm0
 2303 195d F20F1145 		movsd	%xmm0, -96(%rbp)
 2303      A0
 650:main.c        **** 				#endif
 651:main.c        **** 				if ( enableBenchmarking ) {
 2304              		.loc 1 651 0
 2305 1962 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 2305      000000
 2306 1969 84C0     		testb	%al, %al
 2307 196b 744C     		je	.L144
 652:main.c        **** 					printf(
 653:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 654:main.c        **** 						length, calcChecksum(data, length), chan, speed);
 2308              		.loc 1 654 0
 2309 196d 488B9538 		movq	-200(%rbp), %rdx
 2309      FFFFFF
 2310 1974 488B8548 		movq	-184(%rbp), %rax
 2310      FFFFFF
 2311 197b 4889D6   		movq	%rdx, %rsi
 2312 197e 4889C7   		movq	%rax, %rdi
 2313 1981 E80AECFF 		call	calcChecksum
 2313      FF
 652:main.c        **** 					printf(
 2314              		.loc 1 652 0
 2315 1986 0FB7D0   		movzwl	%ax, %edx
 2316 1989 488B8538 		movq	-200(%rbp), %rax
 2316      FFFFFF
 2317 1990 488B75A0 		movq	-96(%rbp), %rsi
 2318 1994 488B4D80 		movq	-128(%rbp), %rcx
 2319 1998 4889B5F0 		movq	%rsi, -272(%rbp)
 2319      FEFFFF
 2320 199f F20F1085 		movsd	-272(%rbp), %xmm0
 2320      F0FEFFFF 
 2321 19a7 4889C6   		movq	%rax, %rsi
 2322 19aa BF000000 		movl	$.LC40, %edi
 2322      00
 2323 19af B8010000 		movl	$1, %eax
 2323      00
 2324 19b4 E8000000 		call	printf
 2324      00
 2325              	.L144:
 655:main.c        **** 				}
 656:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2326              		.loc 1 656 0
 2327 19b9 83BD24FF 		cmpl	$0, -220(%rbp)
 2327      FFFF00
 2328 19c0 740F     		je	.L145
 2329              		.loc 1 656 0 is_stmt 0 discriminator 1
 2330 19c2 C78514FF 		movl	$1, -236(%rbp)
 2330      FFFF0100 
 2330      0000
 2331 19cc E96C0100 		jmp	.L83
 2331      00
 2332              	.L145:
 657:main.c        **** 				free(data);
 2333              		.loc 1 657 0 is_stmt 1
 2334 19d1 488B8548 		movq	-184(%rbp), %rax
 2334      FFFFFF
 2335 19d8 4889C7   		movq	%rax, %rdi
 2336 19db E8000000 		call	free
 2336      00
 658:main.c        **** 				data = NULL;
 2337              		.loc 1 658 0
 2338 19e0 48C78548 		movq	$0, -184(%rbp)
 2338      FFFFFF00 
 2338      000000
 2339              	.LBE11:
 659:main.c        **** 			} else {
 660:main.c        **** 				FAIL(FLP_ILL_CHAR, cleanup);
 661:main.c        **** 			}
 662:main.c        **** 			break;
 2340              		.loc 1 662 0
 2341 19eb E90C0100 		jmp	.L116
 2341      00
 2342              	.L136:
 660:main.c        **** 			}
 2343              		.loc 1 660 0
 2344 19f0 C78514FF 		movl	$5, -236(%rbp)
 2344      FFFF0500 
 2344      0000
 2345 19fa 90       		nop
 2346 19fb E93D0100 		jmp	.L83
 2346      00
 2347              	.L89:
 2348              	.LBE9:
 2349              	.LBB12:
 663:main.c        **** 		}
 664:main.c        **** 		case '+':{
 665:main.c        **** 			uint32 conduit;
 666:main.c        **** 			char *end;
 667:main.c        **** 			ptr++;
 2350              		.loc 1 667 0
 2351 1a00 488B0500 		movq	ptr(%rip), %rax
 2351      000000
 2352 1a07 4883C001 		addq	$1, %rax
 2353 1a0b 48890500 		movq	%rax, ptr(%rip)
 2353      000000
 668:main.c        **** 
 669:main.c        **** 			// Get the conduit
 670:main.c        **** 			errno = 0;
 2354              		.loc 1 670 0
 2355 1a12 E8000000 		call	__errno_location
 2355      00
 2356 1a17 C7000000 		movl	$0, (%rax)
 2356      0000
 671:main.c        **** 			conduit = (uint32)strtoul(ptr, &end, 16);
 2357              		.loc 1 671 0
 2358 1a1d 488B0500 		movq	ptr(%rip), %rax
 2358      000000
 2359 1a24 488D8D40 		leaq	-192(%rbp), %rcx
 2359      FFFFFF
 2360 1a2b BA100000 		movl	$16, %edx
 2360      00
 2361 1a30 4889CE   		movq	%rcx, %rsi
 2362 1a33 4889C7   		movq	%rax, %rdi
 2363 1a36 E8000000 		call	strtoul
 2363      00
 2364 1a3b 89852CFF 		movl	%eax, -212(%rbp)
 2364      FFFF
 672:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 2365              		.loc 1 672 0
 2366 1a41 E8000000 		call	__errno_location
 2366      00
 2367 1a46 8B00     		movl	(%rax), %eax
 2368 1a48 85C0     		testl	%eax, %eax
 2369 1a4a 740F     		je	.L146
 2370              		.loc 1 672 0 is_stmt 0 discriminator 1
 2371 1a4c C78514FF 		movl	$2, -236(%rbp)
 2371      FFFF0200 
 2371      0000
 2372 1a56 E9E20000 		jmp	.L83
 2372      00
 2373              	.L146:
 673:main.c        **** 
 674:main.c        **** 			// Ensure that it's 0-127
 675:main.c        **** 			CHECK_STATUS(conduit > 255, FLP_CONDUIT_RANGE, cleanup);
 2374              		.loc 1 675 0 is_stmt 1
 2375 1a5b 81BD2CFF 		cmpl	$255, -212(%rbp)
 2375      FFFFFF00 
 2375      0000
 2376 1a65 760F     		jbe	.L148
 2377              		.loc 1 675 0 is_stmt 0 discriminator 1
 2378 1a67 C78514FF 		movl	$4, -236(%rbp)
 2378      FFFF0400 
 2378      0000
 2379 1a71 E9C70000 		jmp	.L83
 2379      00
 2380              	.L148:
 676:main.c        **** 			ptr = end;
 2381              		.loc 1 676 0 is_stmt 1
 2382 1a76 488B8540 		movq	-192(%rbp), %rax
 2382      FFFFFF
 2383 1a7d 48890500 		movq	%rax, ptr(%rip)
 2383      000000
 677:main.c        **** 
 678:main.c        **** 			// Only two valid chars at this point:
 679:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';', FLP_ILL_CHAR, cleanup);
 2384              		.loc 1 679 0
 2385 1a84 488B0500 		movq	ptr(%rip), %rax
 2385      000000
 2386 1a8b 0FB600   		movzbl	(%rax), %eax
 2387 1a8e 84C0     		testb	%al, %al
 2388 1a90 741D     		je	.L149
 2389              		.loc 1 679 0 is_stmt 0 discriminator 1
 2390 1a92 488B0500 		movq	ptr(%rip), %rax
 2390      000000
 2391 1a99 0FB600   		movzbl	(%rax), %eax
 2392 1a9c 3C3B     		cmpb	$59, %al
 2393 1a9e 740F     		je	.L149
 2394              		.loc 1 679 0 discriminator 2
 2395 1aa0 C78514FF 		movl	$5, -236(%rbp)
 2395      FFFF0500 
 2395      0000
 2396 1aaa E98E0000 		jmp	.L83
 2396      00
 2397              	.L149:
 680:main.c        **** 
 681:main.c        **** 			fStatus = flSelectConduit(handle, (uint8)conduit, error);
 2398              		.loc 1 681 0 is_stmt 1
 2399 1aaf 8B852CFF 		movl	-212(%rbp), %eax
 2399      FFFF
 2400 1ab5 0FB6C8   		movzbl	%al, %ecx
 2401 1ab8 488B95F8 		movq	-264(%rbp), %rdx
 2401      FEFFFF
 2402 1abf 488B8508 		movq	-248(%rbp), %rax
 2402      FFFFFF
 2403 1ac6 89CE     		movl	%ecx, %esi
 2404 1ac8 4889C7   		movq	%rax, %rdi
 2405 1acb E8000000 		call	flSelectConduit
 2405      00
 2406 1ad0 898524FF 		movl	%eax, -220(%rbp)
 2406      FFFF
 682:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2407              		.loc 1 682 0
 2408 1ad6 83BD24FF 		cmpl	$0, -220(%rbp)
 2408      FFFF00
 2409 1add 741C     		je	.L161
 2410              		.loc 1 682 0 is_stmt 0 discriminator 1
 2411 1adf C78514FF 		movl	$1, -236(%rbp)
 2411      FFFF0100 
 2411      0000
 2412 1ae9 90       		nop
 2413 1aea EB51     		jmp	.L83
 2414              	.L159:
 2415              	.LBE12:
 683:main.c        **** 			break;
 684:main.c        **** 		}
 685:main.c        **** 		default:
 686:main.c        **** 			FAIL(FLP_ILL_CHAR, cleanup);
 2416              		.loc 1 686 0 is_stmt 1
 2417 1aec C78514FF 		movl	$5, -236(%rbp)
 2417      FFFF0500 
 2417      0000
 2418 1af6 EB45     		jmp	.L83
 2419              	.L160:
 2420              	.LBB13:
 538:main.c        **** 		}
 2421              		.loc 1 538 0
 2422 1af8 90       		nop
 2423 1af9 EB01     		jmp	.L116
 2424              	.L161:
 2425              	.LBE13:
 2426              	.LBB14:
 683:main.c        **** 			break;
 2427              		.loc 1 683 0
 2428 1afb 90       		nop
 2429              	.L116:
 2430              	.LBE14:
 687:main.c        **** 		}
 688:main.c        **** 	} while ( *ptr == ';' );
 2431              		.loc 1 688 0
 2432 1afc 488B0500 		movq	ptr(%rip), %rax
 2432      000000
 2433 1b03 0FB600   		movzbl	(%rax), %eax
 2434 1b06 3C3B     		cmpb	$59, %al
 2435 1b08 0F8460F1 		je	.L84
 2435      FFFF
 689:main.c        **** 	CHECK_STATUS(*ptr != '\0', FLP_ILL_CHAR, cleanup);
 2436              		.loc 1 689 0
 2437 1b0e 488B0500 		movq	ptr(%rip), %rax
 2437      000000
 2438 1b15 0FB600   		movzbl	(%rax), %eax
 2439 1b18 84C0     		testb	%al, %al
 2440 1b1a 740C     		je	.L152
 2441              		.loc 1 689 0 is_stmt 0 discriminator 1
 2442 1b1c C78514FF 		movl	$5, -236(%rbp)
 2442      FFFF0500 
 2442      0000
 2443 1b26 EB15     		jmp	.L83
 2444              	.L152:
 690:main.c        **** 
 691:main.c        **** 	dump(0x00000000, dataFromFPGA.data, dataFromFPGA.length);
 2445              		.loc 1 691 0 is_stmt 1
 2446 1b28 488B55D8 		movq	-40(%rbp), %rdx
 2447 1b2c 488B45D0 		movq	-48(%rbp), %rax
 2448 1b30 4889C6   		movq	%rax, %rsi
 2449 1b33 BF000000 		movl	$0, %edi
 2449      00
 2450 1b38 E8000000 		call	dump
 2450      00
 2451              	.L83:
 692:main.c        **** 
 693:main.c        **** cleanup:
 694:main.c        **** 	bufDestroy(&dataFromFPGA);
 2452              		.loc 1 694 0
 2453 1b3d 488D45D0 		leaq	-48(%rbp), %rax
 2454 1b41 4889C7   		movq	%rax, %rdi
 2455 1b44 E8000000 		call	bufDestroy
 2455      00
 695:main.c        **** 	if ( file ) {
 2456              		.loc 1 695 0
 2457 1b49 4883BD58 		cmpq	$0, -168(%rbp)
 2457      FFFFFF00 
 2458 1b51 740F     		je	.L153
 696:main.c        **** 		fclose(file);
 2459              		.loc 1 696 0
 2460 1b53 488B8558 		movq	-168(%rbp), %rax
 2460      FFFFFF
 2461 1b5a 4889C7   		movq	%rax, %rdi
 2462 1b5d E8000000 		call	fclose
 2462      00
 2463              	.L153:
 697:main.c        **** 	}
 698:main.c        **** 	free(fileName);
 2464              		.loc 1 698 0
 2465 1b62 488B8550 		movq	-176(%rbp), %rax
 2465      FFFFFF
 2466 1b69 4889C7   		movq	%rax, %rdi
 2467 1b6c E8000000 		call	free
 2467      00
 699:main.c        **** 	free(data);
 2468              		.loc 1 699 0
 2469 1b71 488B8548 		movq	-184(%rbp), %rax
 2469      FFFFFF
 2470 1b78 4889C7   		movq	%rax, %rdi
 2471 1b7b E8000000 		call	free
 2471      00
 700:main.c        **** 	if ( retVal > FLP_LIBERR ) {
 2472              		.loc 1 700 0
 2473 1b80 83BD14FF 		cmpl	$1, -236(%rbp)
 2473      FFFF01
 2474 1b87 0F86A700 		jbe	.L154
 2474      0000
 2475              	.LBB15:
 701:main.c        **** 		const int column = (int)(ptr - line);
 2476              		.loc 1 701 0
 2477 1b8d 488B0500 		movq	ptr(%rip), %rax
 2477      000000
 2478 1b94 4889C2   		movq	%rax, %rdx
 2479 1b97 488B8500 		movq	-256(%rbp), %rax
 2479      FFFFFF
 2480 1b9e 4829C2   		subq	%rax, %rdx
 2481 1ba1 4889D0   		movq	%rdx, %rax
 2482 1ba4 898534FF 		movl	%eax, -204(%rbp)
 2482      FFFF
 702:main.c        **** 		int i;
 703:main.c        **** 		fprintf(stderr, "%s at column %d\n  %s\n  ", errMessages[retVal], column, line);
 2483              		.loc 1 703 0
 2484 1baa 8B8514FF 		movl	-236(%rbp), %eax
 2484      FFFF
 2485 1bb0 488B14C5 		movq	errMessages(,%rax,8), %rdx
 2485      00000000 
 2486 1bb8 488B0500 		movq	stderr(%rip), %rax
 2486      000000
 2487 1bbf 488BB500 		movq	-256(%rbp), %rsi
 2487      FFFFFF
 2488 1bc6 8B8D34FF 		movl	-204(%rbp), %ecx
 2488      FFFF
 2489 1bcc 4989F0   		movq	%rsi, %r8
 2490 1bcf BE000000 		movl	$.LC41, %esi
 2490      00
 2491 1bd4 4889C7   		movq	%rax, %rdi
 2492 1bd7 B8000000 		movl	$0, %eax
 2492      00
 2493 1bdc E8000000 		call	fprintf
 2493      00
 704:main.c        **** 		for ( i = 0; i < column; i++ ) {
 2494              		.loc 1 704 0
 2495 1be1 C7851CFF 		movl	$0, -228(%rbp)
 2495      FFFF0000 
 2495      0000
 2496 1beb EB1B     		jmp	.L155
 2497              	.L156:
 705:main.c        **** 			fprintf(stderr, " ");
 2498              		.loc 1 705 0 discriminator 3
 2499 1bed 488B0500 		movq	stderr(%rip), %rax
 2499      000000
 2500 1bf4 4889C6   		movq	%rax, %rsi
 2501 1bf7 BF200000 		movl	$32, %edi
 2501      00
 2502 1bfc E8000000 		call	fputc
 2502      00
 704:main.c        **** 		for ( i = 0; i < column; i++ ) {
 2503              		.loc 1 704 0 discriminator 3
 2504 1c01 83851CFF 		addl	$1, -228(%rbp)
 2504      FFFF01
 2505              	.L155:
 704:main.c        **** 		for ( i = 0; i < column; i++ ) {
 2506              		.loc 1 704 0 is_stmt 0 discriminator 1
 2507 1c08 8B851CFF 		movl	-228(%rbp), %eax
 2507      FFFF
 2508 1c0e 3B8534FF 		cmpl	-204(%rbp), %eax
 2508      FFFF
 2509 1c14 7CD7     		jl	.L156
 706:main.c        **** 		}
 707:main.c        **** 		fprintf(stderr, "^\n");
 2510              		.loc 1 707 0 is_stmt 1
 2511 1c16 488B0500 		movq	stderr(%rip), %rax
 2511      000000
 2512 1c1d 4889C1   		movq	%rax, %rcx
 2513 1c20 BA020000 		movl	$2, %edx
 2513      00
 2514 1c25 BE010000 		movl	$1, %esi
 2514      00
 2515 1c2a BF000000 		movl	$.LC42, %edi
 2515      00
 2516 1c2f E8000000 		call	fwrite
 2516      00
 2517              	.L154:
 2518              	.LBE15:
 708:main.c        **** 	}
 709:main.c        **** 	return retVal;
 2519              		.loc 1 709 0
 2520 1c34 8B8514FF 		movl	-236(%rbp), %eax
 2520      FFFF
 710:main.c        **** }
 2521              		.loc 1 710 0
 2522 1c3a 488B4DF8 		movq	-8(%rbp), %rcx
 2523 1c3e 6448330C 		xorq	%fs:40, %rcx
 2523      25280000 
 2523      00
 2524 1c47 7405     		je	.L158
 2525 1c49 E8000000 		call	__stack_chk_fail
 2525      00
 2526              	.L158:
 2527 1c4e C9       		leave
 2528              		.cfi_def_cfa 7, 8
 2529 1c4f C3       		ret
 2530              		.cfi_endproc
 2531              	.LFE16:
 2533              		.section	.rodata
 2534              	.LC43:
 2535 03b9 30303030 		.string	"0000"
 2535      00
 2536              	.LC44:
 2537 03be 30303031 		.string	"0001"
 2537      00
 2538              	.LC45:
 2539 03c3 30303130 		.string	"0010"
 2539      00
 2540              	.LC46:
 2541 03c8 30303131 		.string	"0011"
 2541      00
 2542              	.LC47:
 2543 03cd 30313030 		.string	"0100"
 2543      00
 2544              	.LC48:
 2545 03d2 30313031 		.string	"0101"
 2545      00
 2546              	.LC49:
 2547 03d7 30313130 		.string	"0110"
 2547      00
 2548              	.LC50:
 2549 03dc 30313131 		.string	"0111"
 2549      00
 2550              	.LC51:
 2551 03e1 31303030 		.string	"1000"
 2551      00
 2552              	.LC52:
 2553 03e6 31303031 		.string	"1001"
 2553      00
 2554              	.LC53:
 2555 03eb 58585858 		.string	"XXXX"
 2555      00
 2556              	.LC54:
 2557 03f0 31303130 		.string	"1010"
 2557      00
 2558              	.LC55:
 2559 03f5 31303131 		.string	"1011"
 2559      00
 2560              	.LC56:
 2561 03fa 31313030 		.string	"1100"
 2561      00
 2562              	.LC57:
 2563 03ff 31313031 		.string	"1101"
 2563      00
 2564              	.LC58:
 2565 0404 31313130 		.string	"1110"
 2565      00
 2566              	.LC59:
 2567 0409 31313131 		.string	"1111"
 2567      00
 2568              		.data
 2569              		.align 32
 2572              	nibbles:
 2573 0020 00000000 		.quad	.LC43
 2573      00000000 
 2574 0028 00000000 		.quad	.LC44
 2574      00000000 
 2575 0030 00000000 		.quad	.LC45
 2575      00000000 
 2576 0038 00000000 		.quad	.LC46
 2576      00000000 
 2577 0040 00000000 		.quad	.LC47
 2577      00000000 
 2578 0048 00000000 		.quad	.LC48
 2578      00000000 
 2579 0050 00000000 		.quad	.LC49
 2579      00000000 
 2580 0058 00000000 		.quad	.LC50
 2580      00000000 
 2581 0060 00000000 		.quad	.LC51
 2581      00000000 
 2582 0068 00000000 		.quad	.LC52
 2582      00000000 
 2583 0070 00000000 		.quad	.LC53
 2583      00000000 
 2584 0078 00000000 		.quad	.LC53
 2584      00000000 
 2585 0080 00000000 		.quad	.LC53
 2585      00000000 
 2586 0088 00000000 		.quad	.LC53
 2586      00000000 
 2587 0090 00000000 		.quad	.LC53
 2587      00000000 
 2588 0098 00000000 		.quad	.LC53
 2588      00000000 
 2589 00a0 00000000 		.quad	.LC53
 2589      00000000 
 2590 00a8 00000000 		.quad	.LC54
 2590      00000000 
 2591 00b0 00000000 		.quad	.LC55
 2591      00000000 
 2592 00b8 00000000 		.quad	.LC56
 2592      00000000 
 2593 00c0 00000000 		.quad	.LC57
 2593      00000000 
 2594 00c8 00000000 		.quad	.LC58
 2594      00000000 
 2595 00d0 00000000 		.quad	.LC59
 2595      00000000 
 2596              		.section	.rodata
 2597              	.LC60:
 2598 040e 474F5420 		.string	"GOT INTO FUNNCTION%s"
 2598      494E544F 
 2598      2046554E 
 2598      4E435449 
 2598      4F4E2573 
 2599              	.LC61:
 2600 0423 7200     		.string	"r"
 2601              		.text
 2602              		.globl	read_table
 2604              	read_table:
 2605              	.LFB17:
 711:main.c        **** 
 712:main.c        **** static const char *nibbles[] = {
 713:main.c        **** 	"0000",  // '0'
 714:main.c        **** 	"0001",  // '1'
 715:main.c        **** 	"0010",  // '2'
 716:main.c        **** 	"0011",  // '3'
 717:main.c        **** 	"0100",  // '4'
 718:main.c        **** 	"0101",  // '5'
 719:main.c        **** 	"0110",  // '6'
 720:main.c        **** 	"0111",  // '7'
 721:main.c        **** 	"1000",  // '8'
 722:main.c        **** 	"1001",  // '9'
 723:main.c        **** 
 724:main.c        **** 	"XXXX",  // ':'
 725:main.c        **** 	"XXXX",  // ';'
 726:main.c        **** 	"XXXX",  // '<'
 727:main.c        **** 	"XXXX",  // '='
 728:main.c        **** 	"XXXX",  // '>'
 729:main.c        **** 	"XXXX",  // '?'
 730:main.c        **** 	"XXXX",  // '@'
 731:main.c        **** 
 732:main.c        **** 	"1010",  // 'A'
 733:main.c        **** 	"1011",  // 'B'
 734:main.c        **** 	"1100",  // 'C'
 735:main.c        **** 	"1101",  // 'D'
 736:main.c        **** 	"1110",  // 'E'
 737:main.c        **** 	"1111"   // 'F'
 738:main.c        **** };
 739:main.c        **** 
 740:main.c        **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 741:main.c        **** // Our own function declarations 
 742:main.c        **** 
 743:main.c        **** 
 744:main.c        **** 
 745:main.c        **** int read_table(const char * addr, int table[][5]) {
 2606              		.loc 1 745 0
 2607              		.cfi_startproc
 2608 1c50 55       		pushq	%rbp
 2609              		.cfi_def_cfa_offset 16
 2610              		.cfi_offset 6, -16
 2611 1c51 4889E5   		movq	%rsp, %rbp
 2612              		.cfi_def_cfa_register 6
 2613 1c54 4883EC30 		subq	$48, %rsp
 2614 1c58 48897DD8 		movq	%rdi, -40(%rbp)
 2615 1c5c 488975D0 		movq	%rsi, -48(%rbp)
 746:main.c        ****         printf("GOT INTO FUNNCTION%s", addr);
 2616              		.loc 1 746 0
 2617 1c60 488B45D8 		movq	-40(%rbp), %rax
 2618 1c64 4889C6   		movq	%rax, %rsi
 2619 1c67 BF000000 		movl	$.LC60, %edi
 2619      00
 2620 1c6c B8000000 		movl	$0, %eax
 2620      00
 2621 1c71 E8000000 		call	printf
 2621      00
 747:main.c        ****         FILE *file;
 748:main.c        ****         file=fopen( addr , "r" );
 2622              		.loc 1 748 0
 2623 1c76 488B45D8 		movq	-40(%rbp), %rax
 2624 1c7a BE000000 		movl	$.LC61, %esi
 2624      00
 2625 1c7f 4889C7   		movq	%rax, %rdi
 2626 1c82 E8000000 		call	fopen
 2626      00
 2627 1c87 488945F8 		movq	%rax, -8(%rbp)
 749:main.c        ****         char c;
 750:main.c        ****         int i=0,j=0;
 2628              		.loc 1 750 0
 2629 1c8b C745EC00 		movl	$0, -20(%rbp)
 2629      000000
 2630 1c92 C745F000 		movl	$0, -16(%rbp)
 2630      000000
 751:main.c        ****         int nl;
 752:main.c        ****         if(file){
 2631              		.loc 1 752 0
 2632 1c99 48837DF8 		cmpq	$0, -8(%rbp)
 2632      00
 2633 1c9e 0F848700 		je	.L163
 2633      0000
 753:main.c        ****                 while( ( c=getc(file))!=EOF){
 2634              		.loc 1 753 0
 2635 1ca4 EB64     		jmp	.L164
 2636              	.L168:
 754:main.c        ****                         if(c == ' ' || c==',') continue;
 2637              		.loc 1 754 0
 2638 1ca6 807DEB20 		cmpb	$32, -21(%rbp)
 2639 1caa 745E     		je	.L164
 2640              		.loc 1 754 0 is_stmt 0 discriminator 2
 2641 1cac 807DEB2C 		cmpb	$44, -21(%rbp)
 2642 1cb0 7502     		jne	.L166
 2643              		.loc 1 754 0 discriminator 3
 2644 1cb2 EB56     		jmp	.L164
 2645              	.L166:
 755:main.c        ****                         else if( c >= '0' && c <= '9') { table[i][j]=c-48;  j++;  nl=i; }
 2646              		.loc 1 755 0 is_stmt 1
 2647 1cb4 807DEB2F 		cmpb	$47, -21(%rbp)
 2648 1cb8 7E3F     		jle	.L167
 2649              		.loc 1 755 0 is_stmt 0 discriminator 1
 2650 1cba 807DEB39 		cmpb	$57, -21(%rbp)
 2651 1cbe 7F39     		jg	.L167
 2652              		.loc 1 755 0 discriminator 2
 2653 1cc0 8B45EC   		movl	-20(%rbp), %eax
 2654 1cc3 4863D0   		movslq	%eax, %rdx
 2655 1cc6 4889D0   		movq	%rdx, %rax
 2656 1cc9 48C1E002 		salq	$2, %rax
 2657 1ccd 4801D0   		addq	%rdx, %rax
 2658 1cd0 48C1E002 		salq	$2, %rax
 2659 1cd4 4889C2   		movq	%rax, %rdx
 2660 1cd7 488B45D0 		movq	-48(%rbp), %rax
 2661 1cdb 4801C2   		addq	%rax, %rdx
 2662 1cde 0FBE45EB 		movsbl	-21(%rbp), %eax
 2663 1ce2 8D48D0   		leal	-48(%rax), %ecx
 2664 1ce5 8B45F0   		movl	-16(%rbp), %eax
 2665 1ce8 4898     		cltq
 2666 1cea 890C82   		movl	%ecx, (%rdx,%rax,4)
 2667 1ced 8345F001 		addl	$1, -16(%rbp)
 2668 1cf1 8B45EC   		movl	-20(%rbp), %eax
 2669 1cf4 8945F4   		movl	%eax, -12(%rbp)
 2670 1cf7 EB11     		jmp	.L164
 2671              	.L167:
 756:main.c        ****                         else if ( c == '\n' ) { i++; j=0; }
 2672              		.loc 1 756 0 is_stmt 1
 2673 1cf9 807DEB0A 		cmpb	$10, -21(%rbp)
 2674 1cfd 750B     		jne	.L164
 2675              		.loc 1 756 0 is_stmt 0 discriminator 1
 2676 1cff 8345EC01 		addl	$1, -20(%rbp)
 2677 1d03 C745F000 		movl	$0, -16(%rbp)
 2677      000000
 2678              	.L164:
 753:main.c        ****                         if(c == ' ' || c==',') continue;
 2679              		.loc 1 753 0 is_stmt 1
 2680 1d0a 488B45F8 		movq	-8(%rbp), %rax
 2681 1d0e 4889C7   		movq	%rax, %rdi
 2682 1d11 E8000000 		call	_IO_getc
 2682      00
 2683 1d16 8845EB   		movb	%al, -21(%rbp)
 2684 1d19 807DEBFF 		cmpb	$-1, -21(%rbp)
 2685 1d1d 7587     		jne	.L168
 757:main.c        ****                 }
 758:main.c        ****                 fclose(file);
 2686              		.loc 1 758 0
 2687 1d1f 488B45F8 		movq	-8(%rbp), %rax
 2688 1d23 4889C7   		movq	%rax, %rdi
 2689 1d26 E8000000 		call	fclose
 2689      00
 2690              	.L163:
 759:main.c        ****         }
 760:main.c        ****         return nl+1;
 2691              		.loc 1 760 0
 2692 1d2b 8B45F4   		movl	-12(%rbp), %eax
 2693 1d2e 83C001   		addl	$1, %eax
 761:main.c        **** }
 2694              		.loc 1 761 0
 2695 1d31 C9       		leave
 2696              		.cfi_def_cfa 7, 8
 2697 1d32 C3       		ret
 2698              		.cfi_endproc
 2699              	.LFE17:
 2701              		.globl	mm
 2702              		.section	.rodata
 2703              	.LC62:
 2704 0425 30313233 		.string	"0123456789abcdef"
 2704      34353637 
 2704      38396162 
 2704      63646566 
 2704      00
 2705              		.data
 2706              		.align 8
 2709              	mm:
 2710 00d8 00000000 		.quad	.LC62
 2710      00000000 
 2711              		.text
 2712              		.globl	boolToHex
 2714              	boolToHex:
 2715              	.LFB18:
 762:main.c        **** char * mm= "0123456789abcdef";
 763:main.c        **** char* boolToHex(char* input) // modify bool to hex , correct it 
 764:main.c        **** {
 2716              		.loc 1 764 0
 2717              		.cfi_startproc
 2718 1d33 55       		pushq	%rbp
 2719              		.cfi_def_cfa_offset 16
 2720              		.cfi_offset 6, -16
 2721 1d34 4889E5   		movq	%rsp, %rbp
 2722              		.cfi_def_cfa_register 6
 2723 1d37 4883EC30 		subq	$48, %rsp
 2724 1d3b 48897DD8 		movq	%rdi, -40(%rbp)
 765:main.c        ****     char * ans=malloc(9); 
 2725              		.loc 1 765 0
 2726 1d3f BF090000 		movl	$9, %edi
 2726      00
 2727 1d44 E8000000 		call	malloc
 2727      00
 2728 1d49 488945F8 		movq	%rax, -8(%rbp)
 766:main.c        ****     int var=(input[0]=='1'); 
 2729              		.loc 1 766 0
 2730 1d4d 488B45D8 		movq	-40(%rbp), %rax
 2731 1d51 0FB600   		movzbl	(%rax), %eax
 2732 1d54 3C31     		cmpb	$49, %al
 2733 1d56 0F94C0   		sete	%al
 2734 1d59 0FB6C0   		movzbl	%al, %eax
 2735 1d5c 8945EC   		movl	%eax, -20(%rbp)
 2736              	.LBB16:
 767:main.c        ****     for(int i=1;i<32;i++){
 2737              		.loc 1 767 0
 2738 1d5f C745F001 		movl	$1, -16(%rbp)
 2738      000000
 2739 1d66 E98A0000 		jmp	.L171
 2739      00
 2740              	.L174:
 768:main.c        ****         if(i%4==0){
 2741              		.loc 1 768 0
 2742 1d6b 8B45F0   		movl	-16(%rbp), %eax
 2743 1d6e 83E003   		andl	$3, %eax
 2744 1d71 85C0     		testl	%eax, %eax
 2745 1d73 754C     		jne	.L172
 769:main.c        ****             ans[i/4-1]=mm[var]; 
 2746              		.loc 1 769 0
 2747 1d75 8B45F0   		movl	-16(%rbp), %eax
 2748 1d78 8D5003   		leal	3(%rax), %edx
 2749 1d7b 85C0     		testl	%eax, %eax
 2750 1d7d 0F48C2   		cmovs	%edx, %eax
 2751 1d80 C1F802   		sarl	$2, %eax
 2752 1d83 4898     		cltq
 2753 1d85 488D50FF 		leaq	-1(%rax), %rdx
 2754 1d89 488B45F8 		movq	-8(%rbp), %rax
 2755 1d8d 4801C2   		addq	%rax, %rdx
 2756 1d90 488B0D00 		movq	mm(%rip), %rcx
 2756      000000
 2757 1d97 8B45EC   		movl	-20(%rbp), %eax
 2758 1d9a 4898     		cltq
 2759 1d9c 4801C8   		addq	%rcx, %rax
 2760 1d9f 0FB600   		movzbl	(%rax), %eax
 2761 1da2 8802     		movb	%al, (%rdx)
 770:main.c        ****             var=(input[i]=='1'); 
 2762              		.loc 1 770 0
 2763 1da4 8B45F0   		movl	-16(%rbp), %eax
 2764 1da7 4863D0   		movslq	%eax, %rdx
 2765 1daa 488B45D8 		movq	-40(%rbp), %rax
 2766 1dae 4801D0   		addq	%rdx, %rax
 2767 1db1 0FB600   		movzbl	(%rax), %eax
 2768 1db4 3C31     		cmpb	$49, %al
 2769 1db6 0F94C0   		sete	%al
 2770 1db9 0FB6C0   		movzbl	%al, %eax
 2771 1dbc 8945EC   		movl	%eax, -20(%rbp)
 2772 1dbf EB30     		jmp	.L173
 2773              	.L172:
 771:main.c        ****         }
 772:main.c        ****         else {
 773:main.c        ****             if(input[i]=='1'){
 2774              		.loc 1 773 0
 2775 1dc1 8B45F0   		movl	-16(%rbp), %eax
 2776 1dc4 4863D0   		movslq	%eax, %rdx
 2777 1dc7 488B45D8 		movq	-40(%rbp), %rax
 2778 1dcb 4801D0   		addq	%rdx, %rax
 2779 1dce 0FB600   		movzbl	(%rax), %eax
 2780 1dd1 3C31     		cmpb	$49, %al
 2781 1dd3 751C     		jne	.L173
 774:main.c        ****                 var+=(1<<(i%4)); 
 2782              		.loc 1 774 0
 2783 1dd5 8B45F0   		movl	-16(%rbp), %eax
 2784 1dd8 99       		cltd
 2785 1dd9 C1EA1E   		shrl	$30, %edx
 2786 1ddc 01D0     		addl	%edx, %eax
 2787 1dde 83E003   		andl	$3, %eax
 2788 1de1 29D0     		subl	%edx, %eax
 2789 1de3 BA010000 		movl	$1, %edx
 2789      00
 2790 1de8 89C1     		movl	%eax, %ecx
 2791 1dea D3E2     		sall	%cl, %edx
 2792 1dec 89D0     		movl	%edx, %eax
 2793 1dee 0145EC   		addl	%eax, -20(%rbp)
 2794              	.L173:
 767:main.c        ****         if(i%4==0){
 2795              		.loc 1 767 0 discriminator 2
 2796 1df1 8345F001 		addl	$1, -16(%rbp)
 2797              	.L171:
 767:main.c        ****         if(i%4==0){
 2798              		.loc 1 767 0 is_stmt 0 discriminator 1
 2799 1df5 837DF01F 		cmpl	$31, -16(%rbp)
 2800 1df9 0F8E6CFF 		jle	.L174
 2800      FFFF
 2801              	.LBE16:
 775:main.c        ****             }
 776:main.c        ****         }
 777:main.c        ****     }
 778:main.c        ****     ans[7]=mm[var]; 
 2802              		.loc 1 778 0 is_stmt 1
 2803 1dff 488B45F8 		movq	-8(%rbp), %rax
 2804 1e03 488D5007 		leaq	7(%rax), %rdx
 2805 1e07 488B0D00 		movq	mm(%rip), %rcx
 2805      000000
 2806 1e0e 8B45EC   		movl	-20(%rbp), %eax
 2807 1e11 4898     		cltq
 2808 1e13 4801C8   		addq	%rcx, %rax
 2809 1e16 0FB600   		movzbl	(%rax), %eax
 2810 1e19 8802     		movb	%al, (%rdx)
 2811              	.LBB17:
 779:main.c        **** 	for(int i=0;i<4;i++){
 2812              		.loc 1 779 0
 2813 1e1b C745F400 		movl	$0, -12(%rbp)
 2813      000000
 2814 1e22 EB57     		jmp	.L175
 2815              	.L176:
 2816              	.LBB18:
 780:main.c        **** 			char temp=ans[2*i]; 
 2817              		.loc 1 780 0 discriminator 3
 2818 1e24 8B45F4   		movl	-12(%rbp), %eax
 2819 1e27 01C0     		addl	%eax, %eax
 2820 1e29 4863D0   		movslq	%eax, %rdx
 2821 1e2c 488B45F8 		movq	-8(%rbp), %rax
 2822 1e30 4801D0   		addq	%rdx, %rax
 2823 1e33 0FB600   		movzbl	(%rax), %eax
 2824 1e36 8845EB   		movb	%al, -21(%rbp)
 781:main.c        **** 			ans[2*i] =ans[2*i+1]; 
 2825              		.loc 1 781 0 discriminator 3
 2826 1e39 8B45F4   		movl	-12(%rbp), %eax
 2827 1e3c 01C0     		addl	%eax, %eax
 2828 1e3e 4863D0   		movslq	%eax, %rdx
 2829 1e41 488B45F8 		movq	-8(%rbp), %rax
 2830 1e45 4801C2   		addq	%rax, %rdx
 2831 1e48 8B45F4   		movl	-12(%rbp), %eax
 2832 1e4b 01C0     		addl	%eax, %eax
 2833 1e4d 4898     		cltq
 2834 1e4f 488D4801 		leaq	1(%rax), %rcx
 2835 1e53 488B45F8 		movq	-8(%rbp), %rax
 2836 1e57 4801C8   		addq	%rcx, %rax
 2837 1e5a 0FB600   		movzbl	(%rax), %eax
 2838 1e5d 8802     		movb	%al, (%rdx)
 782:main.c        **** 			ans[2*i+1]=temp; 
 2839              		.loc 1 782 0 discriminator 3
 2840 1e5f 8B45F4   		movl	-12(%rbp), %eax
 2841 1e62 01C0     		addl	%eax, %eax
 2842 1e64 4898     		cltq
 2843 1e66 488D5001 		leaq	1(%rax), %rdx
 2844 1e6a 488B45F8 		movq	-8(%rbp), %rax
 2845 1e6e 4801C2   		addq	%rax, %rdx
 2846 1e71 0FB645EB 		movzbl	-21(%rbp), %eax
 2847 1e75 8802     		movb	%al, (%rdx)
 2848              	.LBE18:
 779:main.c        **** 			char temp=ans[2*i]; 
 2849              		.loc 1 779 0 discriminator 3
 2850 1e77 8345F401 		addl	$1, -12(%rbp)
 2851              	.L175:
 779:main.c        **** 			char temp=ans[2*i]; 
 2852              		.loc 1 779 0 is_stmt 0 discriminator 1
 2853 1e7b 837DF403 		cmpl	$3, -12(%rbp)
 2854 1e7f 7EA3     		jle	.L176
 2855              	.LBE17:
 783:main.c        **** 	}
 784:main.c        ****     ans[8]='\0'; 
 2856              		.loc 1 784 0 is_stmt 1
 2857 1e81 488B45F8 		movq	-8(%rbp), %rax
 2858 1e85 4883C008 		addq	$8, %rax
 2859 1e89 C60000   		movb	$0, (%rax)
 785:main.c        ****     return ans; 
 2860              		.loc 1 785 0
 2861 1e8c 488B45F8 		movq	-8(%rbp), %rax
 786:main.c        **** }
 2862              		.loc 1 786 0
 2863 1e90 C9       		leave
 2864              		.cfi_def_cfa 7, 8
 2865 1e91 C3       		ret
 2866              		.cfi_endproc
 2867              	.LFE18:
 2869              		.section	.rodata
 2870              	.LC63:
 2871 0436 25642020 		.string	"%d                       %d\n"
 2871      20202020 
 2871      20202020 
 2871      20202020 
 2871      20202020 
 2872              		.text
 2873              		.globl	get_coordinate
 2875              	get_coordinate:
 2876              	.LFB19:
 787:main.c        **** 
 788:main.c        **** void get_coordinate(const char * xy, int *x , int *y){
 2877              		.loc 1 788 0
 2878              		.cfi_startproc
 2879 1e92 55       		pushq	%rbp
 2880              		.cfi_def_cfa_offset 16
 2881              		.cfi_offset 6, -16
 2882 1e93 4889E5   		movq	%rsp, %rbp
 2883              		.cfi_def_cfa_register 6
 2884 1e96 4883EC30 		subq	$48, %rsp
 2885 1e9a 48897DE8 		movq	%rdi, -24(%rbp)
 2886 1e9e 488975E0 		movq	%rsi, -32(%rbp)
 2887 1ea2 488955D8 		movq	%rdx, -40(%rbp)
 789:main.c        ****         *x=0; *y=0; 
 2888              		.loc 1 789 0
 2889 1ea6 488B45E0 		movq	-32(%rbp), %rax
 2890 1eaa C7000000 		movl	$0, (%rax)
 2890      0000
 2891 1eb0 488B45D8 		movq	-40(%rbp), %rax
 2892 1eb4 C7000000 		movl	$0, (%rax)
 2892      0000
 2893              	.LBB19:
 790:main.c        **** 		for(int i=0;i<4;i++){
 2894              		.loc 1 790 0
 2895 1eba C745F800 		movl	$0, -8(%rbp)
 2895      000000
 2896 1ec1 EB34     		jmp	.L179
 2897              	.L181:
 791:main.c        **** 				if(xy[i]=='1') { *x+=(1<<i); }
 2898              		.loc 1 791 0
 2899 1ec3 8B45F8   		movl	-8(%rbp), %eax
 2900 1ec6 4863D0   		movslq	%eax, %rdx
 2901 1ec9 488B45E8 		movq	-24(%rbp), %rax
 2902 1ecd 4801D0   		addq	%rdx, %rax
 2903 1ed0 0FB600   		movzbl	(%rax), %eax
 2904 1ed3 3C31     		cmpb	$49, %al
 2905 1ed5 751C     		jne	.L180
 2906              		.loc 1 791 0 is_stmt 0 discriminator 1
 2907 1ed7 488B45E0 		movq	-32(%rbp), %rax
 2908 1edb 8B10     		movl	(%rax), %edx
 2909 1edd 8B45F8   		movl	-8(%rbp), %eax
 2910 1ee0 BE010000 		movl	$1, %esi
 2910      00
 2911 1ee5 89C1     		movl	%eax, %ecx
 2912 1ee7 D3E6     		sall	%cl, %esi
 2913 1ee9 89F0     		movl	%esi, %eax
 2914 1eeb 01C2     		addl	%eax, %edx
 2915 1eed 488B45E0 		movq	-32(%rbp), %rax
 2916 1ef1 8910     		movl	%edx, (%rax)
 2917              	.L180:
 790:main.c        **** 		for(int i=0;i<4;i++){
 2918              		.loc 1 790 0 is_stmt 1 discriminator 2
 2919 1ef3 8345F801 		addl	$1, -8(%rbp)
 2920              	.L179:
 790:main.c        **** 		for(int i=0;i<4;i++){
 2921              		.loc 1 790 0 is_stmt 0 discriminator 1
 2922 1ef7 837DF803 		cmpl	$3, -8(%rbp)
 2923 1efb 7EC6     		jle	.L181
 2924              	.LBE19:
 2925              	.LBB20:
 792:main.c        **** 		}
 793:main.c        **** 		for(int i=4;i<8;i++){
 2926              		.loc 1 793 0 is_stmt 1
 2927 1efd C745FC04 		movl	$4, -4(%rbp)
 2927      000000
 2928 1f04 EB37     		jmp	.L182
 2929              	.L184:
 794:main.c        **** 				if(xy[i]=='1') { *y+=(1<<(i-4)); }
 2930              		.loc 1 794 0
 2931 1f06 8B45FC   		movl	-4(%rbp), %eax
 2932 1f09 4863D0   		movslq	%eax, %rdx
 2933 1f0c 488B45E8 		movq	-24(%rbp), %rax
 2934 1f10 4801D0   		addq	%rdx, %rax
 2935 1f13 0FB600   		movzbl	(%rax), %eax
 2936 1f16 3C31     		cmpb	$49, %al
 2937 1f18 751F     		jne	.L183
 2938              		.loc 1 794 0 is_stmt 0 discriminator 1
 2939 1f1a 488B45D8 		movq	-40(%rbp), %rax
 2940 1f1e 8B00     		movl	(%rax), %eax
 2941 1f20 8B55FC   		movl	-4(%rbp), %edx
 2942 1f23 83EA04   		subl	$4, %edx
 2943 1f26 BE010000 		movl	$1, %esi
 2943      00
 2944 1f2b 89D1     		movl	%edx, %ecx
 2945 1f2d D3E6     		sall	%cl, %esi
 2946 1f2f 89F2     		movl	%esi, %edx
 2947 1f31 01C2     		addl	%eax, %edx
 2948 1f33 488B45D8 		movq	-40(%rbp), %rax
 2949 1f37 8910     		movl	%edx, (%rax)
 2950              	.L183:
 793:main.c        **** 				if(xy[i]=='1') { *y+=(1<<(i-4)); }
 2951              		.loc 1 793 0 is_stmt 1 discriminator 2
 2952 1f39 8345FC01 		addl	$1, -4(%rbp)
 2953              	.L182:
 793:main.c        **** 				if(xy[i]=='1') { *y+=(1<<(i-4)); }
 2954              		.loc 1 793 0 is_stmt 0 discriminator 1
 2955 1f3d 837DFC07 		cmpl	$7, -4(%rbp)
 2956 1f41 7EC3     		jle	.L184
 2957              	.LBE20:
 795:main.c        **** 		}
 796:main.c        ****         printf("%d                       %d\n",*x,*y); 
 2958              		.loc 1 796 0 is_stmt 1
 2959 1f43 488B45D8 		movq	-40(%rbp), %rax
 2960 1f47 8B10     		movl	(%rax), %edx
 2961 1f49 488B45E0 		movq	-32(%rbp), %rax
 2962 1f4d 8B00     		movl	(%rax), %eax
 2963 1f4f 89C6     		movl	%eax, %esi
 2964 1f51 BF000000 		movl	$.LC63, %edi
 2964      00
 2965 1f56 B8000000 		movl	$0, %eax
 2965      00
 2966 1f5b E8000000 		call	printf
 2966      00
 797:main.c        **** }
 2967              		.loc 1 797 0
 2968 1f60 90       		nop
 2969 1f61 C9       		leave
 2970              		.cfi_def_cfa 7, 8
 2971 1f62 C3       		ret
 2972              		.cfi_endproc
 2973              	.LFE19:
 2975              		.globl	func
 2977              	func:
 2978              	.LFB20:
 798:main.c        **** 
 799:main.c        **** char* func(int x, int y,  int table[][5], int rows){
 2979              		.loc 1 799 0
 2980              		.cfi_startproc
 2981 1f63 55       		pushq	%rbp
 2982              		.cfi_def_cfa_offset 16
 2983              		.cfi_offset 6, -16
 2984 1f64 4889E5   		movq	%rsp, %rbp
 2985              		.cfi_def_cfa_register 6
 2986 1f67 4883EC50 		subq	$80, %rsp
 2987 1f6b 897DCC   		movl	%edi, -52(%rbp)
 2988 1f6e 8975C8   		movl	%esi, -56(%rbp)
 2989 1f71 488955C0 		movq	%rdx, -64(%rbp)
 2990 1f75 894DBC   		movl	%ecx, -68(%rbp)
 800:main.c        **** 
 801:main.c        **** 	char *ret = malloc(65);
 2991              		.loc 1 801 0
 2992 1f78 BF410000 		movl	$65, %edi
 2992      00
 2993 1f7d E8000000 		call	malloc
 2993      00
 2994 1f82 488945F0 		movq	%rax, -16(%rbp)
 802:main.c        **** 
 803:main.c        **** 	bool *seen = malloc(8) ;
 2995              		.loc 1 803 0
 2996 1f86 BF080000 		movl	$8, %edi
 2996      00
 2997 1f8b E8000000 		call	malloc
 2997      00
 2998 1f90 488945F8 		movq	%rax, -8(%rbp)
 2999              	.LBB21:
 804:main.c        **** 
 805:main.c        **** 	for (int i=0;i<8;i++) seen[i] = false ;
 3000              		.loc 1 805 0
 3001 1f94 C745D400 		movl	$0, -44(%rbp)
 3001      000000
 3002 1f9b EB14     		jmp	.L186
 3003              	.L187:
 3004              		.loc 1 805 0 is_stmt 0 discriminator 3
 3005 1f9d 8B45D4   		movl	-44(%rbp), %eax
 3006 1fa0 4863D0   		movslq	%eax, %rdx
 3007 1fa3 488B45F8 		movq	-8(%rbp), %rax
 3008 1fa7 4801D0   		addq	%rdx, %rax
 3009 1faa C60000   		movb	$0, (%rax)
 3010 1fad 8345D401 		addl	$1, -44(%rbp)
 3011              	.L186:
 3012              		.loc 1 805 0 discriminator 1
 3013 1fb1 837DD407 		cmpl	$7, -44(%rbp)
 3014 1fb5 7EE6     		jle	.L187
 3015              	.LBE21:
 3016              	.LBB22:
 806:main.c        **** 
 807:main.c        ****   	for (int i=0; i<rows; i++){
 3017              		.loc 1 807 0 is_stmt 1
 3018 1fb7 C745D800 		movl	$0, -40(%rbp)
 3018      000000
 3019 1fbe E97D0200 		jmp	.L188
 3019      00
 3020              	.L204:
 808:main.c        ****    		if (table[i][0] == x && table[i][1] == y) {
 3021              		.loc 1 808 0
 3022 1fc3 8B45D8   		movl	-40(%rbp), %eax
 3023 1fc6 4863D0   		movslq	%eax, %rdx
 3024 1fc9 4889D0   		movq	%rdx, %rax
 3025 1fcc 48C1E002 		salq	$2, %rax
 3026 1fd0 4801D0   		addq	%rdx, %rax
 3027 1fd3 48C1E002 		salq	$2, %rax
 3028 1fd7 4889C2   		movq	%rax, %rdx
 3029 1fda 488B45C0 		movq	-64(%rbp), %rax
 3030 1fde 4801D0   		addq	%rdx, %rax
 3031 1fe1 8B00     		movl	(%rax), %eax
 3032 1fe3 3B45CC   		cmpl	-52(%rbp), %eax
 3033 1fe6 0F855002 		jne	.L189
 3033      0000
 3034              		.loc 1 808 0 is_stmt 0 discriminator 1
 3035 1fec 8B45D8   		movl	-40(%rbp), %eax
 3036 1fef 4863D0   		movslq	%eax, %rdx
 3037 1ff2 4889D0   		movq	%rdx, %rax
 3038 1ff5 48C1E002 		salq	$2, %rax
 3039 1ff9 4801D0   		addq	%rdx, %rax
 3040 1ffc 48C1E002 		salq	$2, %rax
 3041 2000 4889C2   		movq	%rax, %rdx
 3042 2003 488B45C0 		movq	-64(%rbp), %rax
 3043 2007 4801D0   		addq	%rdx, %rax
 3044 200a 8B4004   		movl	4(%rax), %eax
 3045 200d 3B45C8   		cmpl	-56(%rbp), %eax
 3046 2010 0F852602 		jne	.L189
 3046      0000
 3047              	.LBB23:
 809:main.c        ****    			int dir =  table[i][2] ;
 3048              		.loc 1 809 0 is_stmt 1
 3049 2016 8B45D8   		movl	-40(%rbp), %eax
 3050 2019 4863D0   		movslq	%eax, %rdx
 3051 201c 4889D0   		movq	%rdx, %rax
 3052 201f 48C1E002 		salq	$2, %rax
 3053 2023 4801D0   		addq	%rdx, %rax
 3054 2026 48C1E002 		salq	$2, %rax
 3055 202a 4889C2   		movq	%rax, %rdx
 3056 202d 488B45C0 		movq	-64(%rbp), %rax
 3057 2031 4801D0   		addq	%rdx, %rax
 3058 2034 8B4008   		movl	8(%rax), %eax
 3059 2037 8945E0   		movl	%eax, -32(%rbp)
 810:main.c        ****    			int ns = table[i][4] ;
 3060              		.loc 1 810 0
 3061 203a 8B45D8   		movl	-40(%rbp), %eax
 3062 203d 4863D0   		movslq	%eax, %rdx
 3063 2040 4889D0   		movq	%rdx, %rax
 3064 2043 48C1E002 		salq	$2, %rax
 3065 2047 4801D0   		addq	%rdx, %rax
 3066 204a 48C1E002 		salq	$2, %rax
 3067 204e 4889C2   		movq	%rax, %rdx
 3068 2051 488B45C0 		movq	-64(%rbp), %rax
 3069 2055 4801D0   		addq	%rdx, %rax
 3070 2058 8B4010   		movl	16(%rax), %eax
 3071 205b 8945E4   		movl	%eax, -28(%rbp)
 811:main.c        ****    			int j = 8*dir ;
 3072              		.loc 1 811 0
 3073 205e 8B45E0   		movl	-32(%rbp), %eax
 3074 2061 C1E003   		sall	$3, %eax
 3075 2064 8945E8   		movl	%eax, -24(%rbp)
 812:main.c        ****    			ret [j+2] = ((dir/4)%2 == 1) ? '1' : '0'  ;
 3076              		.loc 1 812 0
 3077 2067 8B45E8   		movl	-24(%rbp), %eax
 3078 206a 4898     		cltq
 3079 206c 488D5002 		leaq	2(%rax), %rdx
 3080 2070 488B45F0 		movq	-16(%rbp), %rax
 3081 2074 4801C2   		addq	%rax, %rdx
 3082 2077 8B45E0   		movl	-32(%rbp), %eax
 3083 207a 8D4803   		leal	3(%rax), %ecx
 3084 207d 85C0     		testl	%eax, %eax
 3085 207f 0F48C1   		cmovs	%ecx, %eax
 3086 2082 C1F802   		sarl	$2, %eax
 3087 2085 89C1     		movl	%eax, %ecx
 3088 2087 89C8     		movl	%ecx, %eax
 3089 2089 C1F81F   		sarl	$31, %eax
 3090 208c C1E81F   		shrl	$31, %eax
 3091 208f 01C1     		addl	%eax, %ecx
 3092 2091 83E101   		andl	$1, %ecx
 3093 2094 29C1     		subl	%eax, %ecx
 3094 2096 89C8     		movl	%ecx, %eax
 3095 2098 83F801   		cmpl	$1, %eax
 3096 209b 7507     		jne	.L190
 3097              		.loc 1 812 0 is_stmt 0 discriminator 1
 3098 209d B8310000 		movl	$49, %eax
 3098      00
 3099 20a2 EB05     		jmp	.L191
 3100              	.L190:
 3101              		.loc 1 812 0 discriminator 2
 3102 20a4 B8300000 		movl	$48, %eax
 3102      00
 3103              	.L191:
 3104              		.loc 1 812 0 discriminator 4
 3105 20a9 8802     		movb	%al, (%rdx)
 813:main.c        ****    			ret [j+3] = ((dir/2)%2 == 1) ? '1' : '0' ;
 3106              		.loc 1 813 0 is_stmt 1 discriminator 4
 3107 20ab 8B45E8   		movl	-24(%rbp), %eax
 3108 20ae 4898     		cltq
 3109 20b0 488D5003 		leaq	3(%rax), %rdx
 3110 20b4 488B45F0 		movq	-16(%rbp), %rax
 3111 20b8 4801C2   		addq	%rax, %rdx
 3112 20bb 8B45E0   		movl	-32(%rbp), %eax
 3113 20be 89C1     		movl	%eax, %ecx
 3114 20c0 C1E91F   		shrl	$31, %ecx
 3115 20c3 01C8     		addl	%ecx, %eax
 3116 20c5 D1F8     		sarl	%eax
 3117 20c7 89C1     		movl	%eax, %ecx
 3118 20c9 89C8     		movl	%ecx, %eax
 3119 20cb C1F81F   		sarl	$31, %eax
 3120 20ce C1E81F   		shrl	$31, %eax
 3121 20d1 01C1     		addl	%eax, %ecx
 3122 20d3 83E101   		andl	$1, %ecx
 3123 20d6 29C1     		subl	%eax, %ecx
 3124 20d8 89C8     		movl	%ecx, %eax
 3125 20da 83F801   		cmpl	$1, %eax
 3126 20dd 7507     		jne	.L192
 3127              		.loc 1 813 0 is_stmt 0 discriminator 1
 3128 20df B8310000 		movl	$49, %eax
 3128      00
 3129 20e4 EB05     		jmp	.L193
 3130              	.L192:
 3131              		.loc 1 813 0 discriminator 2
 3132 20e6 B8300000 		movl	$48, %eax
 3132      00
 3133              	.L193:
 3134              		.loc 1 813 0 discriminator 4
 3135 20eb 8802     		movb	%al, (%rdx)
 814:main.c        ****    			ret [j+4] = (dir%2 == 1) ? '1' : '0' ;
 3136              		.loc 1 814 0 is_stmt 1 discriminator 4
 3137 20ed 8B45E8   		movl	-24(%rbp), %eax
 3138 20f0 4898     		cltq
 3139 20f2 488D5004 		leaq	4(%rax), %rdx
 3140 20f6 488B45F0 		movq	-16(%rbp), %rax
 3141 20fa 488D0C02 		leaq	(%rdx,%rax), %rcx
 3142 20fe 8B45E0   		movl	-32(%rbp), %eax
 3143 2101 99       		cltd
 3144 2102 C1EA1F   		shrl	$31, %edx
 3145 2105 01D0     		addl	%edx, %eax
 3146 2107 83E001   		andl	$1, %eax
 3147 210a 29D0     		subl	%edx, %eax
 3148 210c 83F801   		cmpl	$1, %eax
 3149 210f 7507     		jne	.L194
 3150              		.loc 1 814 0 is_stmt 0 discriminator 1
 3151 2111 B8310000 		movl	$49, %eax
 3151      00
 3152 2116 EB05     		jmp	.L195
 3153              	.L194:
 3154              		.loc 1 814 0 discriminator 2
 3155 2118 B8300000 		movl	$48, %eax
 3155      00
 3156              	.L195:
 3157              		.loc 1 814 0 discriminator 4
 3158 211d 8801     		movb	%al, (%rcx)
 815:main.c        ****    			ret [j] = '1' ;
 3159              		.loc 1 815 0 is_stmt 1 discriminator 4
 3160 211f 8B45E8   		movl	-24(%rbp), %eax
 3161 2122 4863D0   		movslq	%eax, %rdx
 3162 2125 488B45F0 		movq	-16(%rbp), %rax
 3163 2129 4801D0   		addq	%rdx, %rax
 3164 212c C60031   		movb	$49, (%rax)
 816:main.c        ****    			ret [j+1] = (table[i][3] == 1) ? '1' : '0' ;
 3165              		.loc 1 816 0 discriminator 4
 3166 212f 8B45E8   		movl	-24(%rbp), %eax
 3167 2132 4898     		cltq
 3168 2134 488D5001 		leaq	1(%rax), %rdx
 3169 2138 488B45F0 		movq	-16(%rbp), %rax
 3170 213c 488D0C02 		leaq	(%rdx,%rax), %rcx
 3171 2140 8B45D8   		movl	-40(%rbp), %eax
 3172 2143 4863D0   		movslq	%eax, %rdx
 3173 2146 4889D0   		movq	%rdx, %rax
 3174 2149 48C1E002 		salq	$2, %rax
 3175 214d 4801D0   		addq	%rdx, %rax
 3176 2150 48C1E002 		salq	$2, %rax
 3177 2154 4889C2   		movq	%rax, %rdx
 3178 2157 488B45C0 		movq	-64(%rbp), %rax
 3179 215b 4801D0   		addq	%rdx, %rax
 3180 215e 8B400C   		movl	12(%rax), %eax
 3181 2161 83F801   		cmpl	$1, %eax
 3182 2164 7507     		jne	.L196
 3183              		.loc 1 816 0 is_stmt 0 discriminator 1
 3184 2166 B8310000 		movl	$49, %eax
 3184      00
 3185 216b EB05     		jmp	.L197
 3186              	.L196:
 3187              		.loc 1 816 0 discriminator 2
 3188 216d B8300000 		movl	$48, %eax
 3188      00
 3189              	.L197:
 3190              		.loc 1 816 0 discriminator 4
 3191 2172 8801     		movb	%al, (%rcx)
 817:main.c        ****    			ret [j+5] = ((ns/4)%2 == 1) ? '1' : '0' ;
 3192              		.loc 1 817 0 is_stmt 1 discriminator 4
 3193 2174 8B45E8   		movl	-24(%rbp), %eax
 3194 2177 4898     		cltq
 3195 2179 488D5005 		leaq	5(%rax), %rdx
 3196 217d 488B45F0 		movq	-16(%rbp), %rax
 3197 2181 4801C2   		addq	%rax, %rdx
 3198 2184 8B45E4   		movl	-28(%rbp), %eax
 3199 2187 8D4803   		leal	3(%rax), %ecx
 3200 218a 85C0     		testl	%eax, %eax
 3201 218c 0F48C1   		cmovs	%ecx, %eax
 3202 218f C1F802   		sarl	$2, %eax
 3203 2192 89C1     		movl	%eax, %ecx
 3204 2194 89C8     		movl	%ecx, %eax
 3205 2196 C1F81F   		sarl	$31, %eax
 3206 2199 C1E81F   		shrl	$31, %eax
 3207 219c 01C1     		addl	%eax, %ecx
 3208 219e 83E101   		andl	$1, %ecx
 3209 21a1 29C1     		subl	%eax, %ecx
 3210 21a3 89C8     		movl	%ecx, %eax
 3211 21a5 83F801   		cmpl	$1, %eax
 3212 21a8 7507     		jne	.L198
 3213              		.loc 1 817 0 is_stmt 0 discriminator 1
 3214 21aa B8310000 		movl	$49, %eax
 3214      00
 3215 21af EB05     		jmp	.L199
 3216              	.L198:
 3217              		.loc 1 817 0 discriminator 2
 3218 21b1 B8300000 		movl	$48, %eax
 3218      00
 3219              	.L199:
 3220              		.loc 1 817 0 discriminator 4
 3221 21b6 8802     		movb	%al, (%rdx)
 818:main.c        ****    			ret [j+6] = ((ns/2)%2 == 1) ? '1' : '0' ;
 3222              		.loc 1 818 0 is_stmt 1 discriminator 4
 3223 21b8 8B45E8   		movl	-24(%rbp), %eax
 3224 21bb 4898     		cltq
 3225 21bd 488D5006 		leaq	6(%rax), %rdx
 3226 21c1 488B45F0 		movq	-16(%rbp), %rax
 3227 21c5 4801C2   		addq	%rax, %rdx
 3228 21c8 8B45E4   		movl	-28(%rbp), %eax
 3229 21cb 89C1     		movl	%eax, %ecx
 3230 21cd C1E91F   		shrl	$31, %ecx
 3231 21d0 01C8     		addl	%ecx, %eax
 3232 21d2 D1F8     		sarl	%eax
 3233 21d4 89C1     		movl	%eax, %ecx
 3234 21d6 89C8     		movl	%ecx, %eax
 3235 21d8 C1F81F   		sarl	$31, %eax
 3236 21db C1E81F   		shrl	$31, %eax
 3237 21de 01C1     		addl	%eax, %ecx
 3238 21e0 83E101   		andl	$1, %ecx
 3239 21e3 29C1     		subl	%eax, %ecx
 3240 21e5 89C8     		movl	%ecx, %eax
 3241 21e7 83F801   		cmpl	$1, %eax
 3242 21ea 7507     		jne	.L200
 3243              		.loc 1 818 0 is_stmt 0 discriminator 1
 3244 21ec B8310000 		movl	$49, %eax
 3244      00
 3245 21f1 EB05     		jmp	.L201
 3246              	.L200:
 3247              		.loc 1 818 0 discriminator 2
 3248 21f3 B8300000 		movl	$48, %eax
 3248      00
 3249              	.L201:
 3250              		.loc 1 818 0 discriminator 4
 3251 21f8 8802     		movb	%al, (%rdx)
 819:main.c        ****    			ret [j+7] = (ns%2 == 1) ? '1' : '0' ;
 3252              		.loc 1 819 0 is_stmt 1 discriminator 4
 3253 21fa 8B45E8   		movl	-24(%rbp), %eax
 3254 21fd 4898     		cltq
 3255 21ff 488D5007 		leaq	7(%rax), %rdx
 3256 2203 488B45F0 		movq	-16(%rbp), %rax
 3257 2207 488D0C02 		leaq	(%rdx,%rax), %rcx
 3258 220b 8B45E4   		movl	-28(%rbp), %eax
 3259 220e 99       		cltd
 3260 220f C1EA1F   		shrl	$31, %edx
 3261 2212 01D0     		addl	%edx, %eax
 3262 2214 83E001   		andl	$1, %eax
 3263 2217 29D0     		subl	%edx, %eax
 3264 2219 83F801   		cmpl	$1, %eax
 3265 221c 7507     		jne	.L202
 3266              		.loc 1 819 0 is_stmt 0 discriminator 1
 3267 221e B8310000 		movl	$49, %eax
 3267      00
 3268 2223 EB05     		jmp	.L203
 3269              	.L202:
 3270              		.loc 1 819 0 discriminator 2
 3271 2225 B8300000 		movl	$48, %eax
 3271      00
 3272              	.L203:
 3273              		.loc 1 819 0 discriminator 4
 3274 222a 8801     		movb	%al, (%rcx)
 820:main.c        ****    			seen[dir] = true ;
 3275              		.loc 1 820 0 is_stmt 1 discriminator 4
 3276 222c 8B45E0   		movl	-32(%rbp), %eax
 3277 222f 4863D0   		movslq	%eax, %rdx
 3278 2232 488B45F8 		movq	-8(%rbp), %rax
 3279 2236 4801D0   		addq	%rdx, %rax
 3280 2239 C60001   		movb	$1, (%rax)
 3281              	.L189:
 3282              	.LBE23:
 807:main.c        ****    		if (table[i][0] == x && table[i][1] == y) {
 3283              		.loc 1 807 0 discriminator 2
 3284 223c 8345D801 		addl	$1, -40(%rbp)
 3285              	.L188:
 807:main.c        ****    		if (table[i][0] == x && table[i][1] == y) {
 3286              		.loc 1 807 0 is_stmt 0 discriminator 1
 3287 2240 8B45D8   		movl	-40(%rbp), %eax
 3288 2243 3B45BC   		cmpl	-68(%rbp), %eax
 3289 2246 0F8C77FD 		jl	.L204
 3289      FFFF
 3290              	.LBE22:
 3291              	.LBB24:
 821:main.c        ****    		}
 822:main.c        ****    	}
 823:main.c        **** 
 824:main.c        ****    	for (int i=0;i<8;i++){
 3292              		.loc 1 824 0 is_stmt 1
 3293 224c C745DC00 		movl	$0, -36(%rbp)
 3293      000000
 3294 2253 E93C0100 		jmp	.L205
 3294      00
 3295              	.L213:
 825:main.c        ****    		if (!(seen[i])) {
 3296              		.loc 1 825 0
 3297 2258 8B45DC   		movl	-36(%rbp), %eax
 3298 225b 4863D0   		movslq	%eax, %rdx
 3299 225e 488B45F8 		movq	-8(%rbp), %rax
 3300 2262 4801D0   		addq	%rdx, %rax
 3301 2265 0FB600   		movzbl	(%rax), %eax
 3302 2268 83F001   		xorl	$1, %eax
 3303 226b 84C0     		testb	%al, %al
 3304 226d 0F841D01 		je	.L206
 3304      0000
 3305              	.LBB25:
 826:main.c        ****    			int j = 8*i ;
 3306              		.loc 1 826 0
 3307 2273 8B45DC   		movl	-36(%rbp), %eax
 3308 2276 C1E003   		sall	$3, %eax
 3309 2279 8945EC   		movl	%eax, -20(%rbp)
 827:main.c        ****    			ret [j+2] = ((i/4)%2 == 1) ? '1' : '0'  ;
 3310              		.loc 1 827 0
 3311 227c 8B45EC   		movl	-20(%rbp), %eax
 3312 227f 4898     		cltq
 3313 2281 488D5002 		leaq	2(%rax), %rdx
 3314 2285 488B45F0 		movq	-16(%rbp), %rax
 3315 2289 4801C2   		addq	%rax, %rdx
 3316 228c 8B45DC   		movl	-36(%rbp), %eax
 3317 228f 8D4803   		leal	3(%rax), %ecx
 3318 2292 85C0     		testl	%eax, %eax
 3319 2294 0F48C1   		cmovs	%ecx, %eax
 3320 2297 C1F802   		sarl	$2, %eax
 3321 229a 89C1     		movl	%eax, %ecx
 3322 229c 89C8     		movl	%ecx, %eax
 3323 229e C1F81F   		sarl	$31, %eax
 3324 22a1 C1E81F   		shrl	$31, %eax
 3325 22a4 01C1     		addl	%eax, %ecx
 3326 22a6 83E101   		andl	$1, %ecx
 3327 22a9 29C1     		subl	%eax, %ecx
 3328 22ab 89C8     		movl	%ecx, %eax
 3329 22ad 83F801   		cmpl	$1, %eax
 3330 22b0 7507     		jne	.L207
 3331              		.loc 1 827 0 is_stmt 0 discriminator 1
 3332 22b2 B8310000 		movl	$49, %eax
 3332      00
 3333 22b7 EB05     		jmp	.L208
 3334              	.L207:
 3335              		.loc 1 827 0 discriminator 2
 3336 22b9 B8300000 		movl	$48, %eax
 3336      00
 3337              	.L208:
 3338              		.loc 1 827 0 discriminator 4
 3339 22be 8802     		movb	%al, (%rdx)
 828:main.c        ****    			ret [j+3] = ((i/2)%2 == 1) ? '1' : '0' ;
 3340              		.loc 1 828 0 is_stmt 1 discriminator 4
 3341 22c0 8B45EC   		movl	-20(%rbp), %eax
 3342 22c3 4898     		cltq
 3343 22c5 488D5003 		leaq	3(%rax), %rdx
 3344 22c9 488B45F0 		movq	-16(%rbp), %rax
 3345 22cd 4801C2   		addq	%rax, %rdx
 3346 22d0 8B45DC   		movl	-36(%rbp), %eax
 3347 22d3 89C1     		movl	%eax, %ecx
 3348 22d5 C1E91F   		shrl	$31, %ecx
 3349 22d8 01C8     		addl	%ecx, %eax
 3350 22da D1F8     		sarl	%eax
 3351 22dc 89C1     		movl	%eax, %ecx
 3352 22de 89C8     		movl	%ecx, %eax
 3353 22e0 C1F81F   		sarl	$31, %eax
 3354 22e3 C1E81F   		shrl	$31, %eax
 3355 22e6 01C1     		addl	%eax, %ecx
 3356 22e8 83E101   		andl	$1, %ecx
 3357 22eb 29C1     		subl	%eax, %ecx
 3358 22ed 89C8     		movl	%ecx, %eax
 3359 22ef 83F801   		cmpl	$1, %eax
 3360 22f2 7507     		jne	.L209
 3361              		.loc 1 828 0 is_stmt 0 discriminator 1
 3362 22f4 B8310000 		movl	$49, %eax
 3362      00
 3363 22f9 EB05     		jmp	.L210
 3364              	.L209:
 3365              		.loc 1 828 0 discriminator 2
 3366 22fb B8300000 		movl	$48, %eax
 3366      00
 3367              	.L210:
 3368              		.loc 1 828 0 discriminator 4
 3369 2300 8802     		movb	%al, (%rdx)
 829:main.c        ****    			ret [j+4] = (i%2 == 1) ? '1' : '0' ;
 3370              		.loc 1 829 0 is_stmt 1 discriminator 4
 3371 2302 8B45EC   		movl	-20(%rbp), %eax
 3372 2305 4898     		cltq
 3373 2307 488D5004 		leaq	4(%rax), %rdx
 3374 230b 488B45F0 		movq	-16(%rbp), %rax
 3375 230f 488D0C02 		leaq	(%rdx,%rax), %rcx
 3376 2313 8B45DC   		movl	-36(%rbp), %eax
 3377 2316 99       		cltd
 3378 2317 C1EA1F   		shrl	$31, %edx
 3379 231a 01D0     		addl	%edx, %eax
 3380 231c 83E001   		andl	$1, %eax
 3381 231f 29D0     		subl	%edx, %eax
 3382 2321 83F801   		cmpl	$1, %eax
 3383 2324 7507     		jne	.L211
 3384              		.loc 1 829 0 is_stmt 0 discriminator 1
 3385 2326 B8310000 		movl	$49, %eax
 3385      00
 3386 232b EB05     		jmp	.L212
 3387              	.L211:
 3388              		.loc 1 829 0 discriminator 2
 3389 232d B8300000 		movl	$48, %eax
 3389      00
 3390              	.L212:
 3391              		.loc 1 829 0 discriminator 4
 3392 2332 8801     		movb	%al, (%rcx)
 830:main.c        ****    			ret [j] = '0' ;
 3393              		.loc 1 830 0 is_stmt 1 discriminator 4
 3394 2334 8B45EC   		movl	-20(%rbp), %eax
 3395 2337 4863D0   		movslq	%eax, %rdx
 3396 233a 488B45F0 		movq	-16(%rbp), %rax
 3397 233e 4801D0   		addq	%rdx, %rax
 3398 2341 C60030   		movb	$48, (%rax)
 831:main.c        ****    			ret [j+1] = '0' ;
 3399              		.loc 1 831 0 discriminator 4
 3400 2344 8B45EC   		movl	-20(%rbp), %eax
 3401 2347 4898     		cltq
 3402 2349 488D5001 		leaq	1(%rax), %rdx
 3403 234d 488B45F0 		movq	-16(%rbp), %rax
 3404 2351 4801D0   		addq	%rdx, %rax
 3405 2354 C60030   		movb	$48, (%rax)
 832:main.c        ****    			ret [j+5] = '0' ;
 3406              		.loc 1 832 0 discriminator 4
 3407 2357 8B45EC   		movl	-20(%rbp), %eax
 3408 235a 4898     		cltq
 3409 235c 488D5005 		leaq	5(%rax), %rdx
 3410 2360 488B45F0 		movq	-16(%rbp), %rax
 3411 2364 4801D0   		addq	%rdx, %rax
 3412 2367 C60030   		movb	$48, (%rax)
 833:main.c        ****    			ret [j+6] = '0' ;
 3413              		.loc 1 833 0 discriminator 4
 3414 236a 8B45EC   		movl	-20(%rbp), %eax
 3415 236d 4898     		cltq
 3416 236f 488D5006 		leaq	6(%rax), %rdx
 3417 2373 488B45F0 		movq	-16(%rbp), %rax
 3418 2377 4801D0   		addq	%rdx, %rax
 3419 237a C60030   		movb	$48, (%rax)
 834:main.c        ****    			ret [j+7] = '0' ;
 3420              		.loc 1 834 0 discriminator 4
 3421 237d 8B45EC   		movl	-20(%rbp), %eax
 3422 2380 4898     		cltq
 3423 2382 488D5007 		leaq	7(%rax), %rdx
 3424 2386 488B45F0 		movq	-16(%rbp), %rax
 3425 238a 4801D0   		addq	%rdx, %rax
 3426 238d C60030   		movb	$48, (%rax)
 3427              	.L206:
 3428              	.LBE25:
 824:main.c        ****    		if (!(seen[i])) {
 3429              		.loc 1 824 0 discriminator 2
 3430 2390 8345DC01 		addl	$1, -36(%rbp)
 3431              	.L205:
 824:main.c        ****    		if (!(seen[i])) {
 3432              		.loc 1 824 0 is_stmt 0 discriminator 1
 3433 2394 837DDC07 		cmpl	$7, -36(%rbp)
 3434 2398 0F8EBAFE 		jle	.L213
 3434      FFFF
 3435              	.LBE24:
 835:main.c        ****    		}
 836:main.c        ****    	}
 837:main.c        ****     ret[64] = '\0';
 3436              		.loc 1 837 0 is_stmt 1
 3437 239e 488B45F0 		movq	-16(%rbp), %rax
 3438 23a2 4883C040 		addq	$64, %rax
 3439 23a6 C60000   		movb	$0, (%rax)
 838:main.c        ****    	return ret ;
 3440              		.loc 1 838 0
 3441 23a9 488B45F0 		movq	-16(%rbp), %rax
 839:main.c        **** 
 840:main.c        **** }
 3442              		.loc 1 840 0
 3443 23ad C9       		leave
 3444              		.cfi_def_cfa 7, 8
 3445 23ae C3       		ret
 3446              		.cfi_endproc
 3447              	.LFE20:
 3449              		.globl	xor
 3451              	xor:
 3452              	.LFB21:
 841:main.c        **** 
 842:main.c        **** char xor(char a, char b){
 3453              		.loc 1 842 0
 3454              		.cfi_startproc
 3455 23af 55       		pushq	%rbp
 3456              		.cfi_def_cfa_offset 16
 3457              		.cfi_offset 6, -16
 3458 23b0 4889E5   		movq	%rsp, %rbp
 3459              		.cfi_def_cfa_register 6
 3460 23b3 89FA     		movl	%edi, %edx
 3461 23b5 89F0     		movl	%esi, %eax
 3462 23b7 8855FC   		movb	%dl, -4(%rbp)
 3463 23ba 8845F8   		movb	%al, -8(%rbp)
 843:main.c        **** 	if (a==b) return '0';
 3464              		.loc 1 843 0
 3465 23bd 0FB645FC 		movzbl	-4(%rbp), %eax
 3466 23c1 3A45F8   		cmpb	-8(%rbp), %al
 3467 23c4 7507     		jne	.L216
 3468              		.loc 1 843 0 is_stmt 0 discriminator 1
 3469 23c6 B8300000 		movl	$48, %eax
 3469      00
 3470 23cb EB05     		jmp	.L217
 3471              	.L216:
 844:main.c        **** 	else return '1';
 3472              		.loc 1 844 0 is_stmt 1
 3473 23cd B8310000 		movl	$49, %eax
 3473      00
 3474              	.L217:
 845:main.c        **** }
 3475              		.loc 1 845 0
 3476 23d2 5D       		popq	%rbp
 3477              		.cfi_def_cfa 7, 8
 3478 23d3 C3       		ret
 3479              		.cfi_endproc
 3480              	.LFE21:
 3482              		.globl	and
 3484              	and:
 3485              	.LFB22:
 846:main.c        **** 
 847:main.c        **** char and(char a, char b){
 3486              		.loc 1 847 0
 3487              		.cfi_startproc
 3488 23d4 55       		pushq	%rbp
 3489              		.cfi_def_cfa_offset 16
 3490              		.cfi_offset 6, -16
 3491 23d5 4889E5   		movq	%rsp, %rbp
 3492              		.cfi_def_cfa_register 6
 3493 23d8 89FA     		movl	%edi, %edx
 3494 23da 89F0     		movl	%esi, %eax
 3495 23dc 8855FC   		movb	%dl, -4(%rbp)
 3496 23df 8845F8   		movb	%al, -8(%rbp)
 848:main.c        **** 	if (a=='1' && b=='1') return '1';
 3497              		.loc 1 848 0
 3498 23e2 807DFC31 		cmpb	$49, -4(%rbp)
 3499 23e6 750D     		jne	.L219
 3500              		.loc 1 848 0 is_stmt 0 discriminator 1
 3501 23e8 807DF831 		cmpb	$49, -8(%rbp)
 3502 23ec 7507     		jne	.L219
 3503              		.loc 1 848 0 discriminator 2
 3504 23ee B8310000 		movl	$49, %eax
 3504      00
 3505 23f3 EB05     		jmp	.L220
 3506              	.L219:
 849:main.c        **** 	else return '0';
 3507              		.loc 1 849 0 is_stmt 1
 3508 23f5 B8300000 		movl	$48, %eax
 3508      00
 3509              	.L220:
 850:main.c        **** }
 3510              		.loc 1 850 0
 3511 23fa 5D       		popq	%rbp
 3512              		.cfi_def_cfa 7, 8
 3513 23fb C3       		ret
 3514              		.cfi_endproc
 3515              	.LFE22:
 3517              		.globl	decrypt
 3519              	decrypt:
 3520              	.LFB23:
 851:main.c        **** 
 852:main.c        **** char* decrypt(char C[32], char K[32]){
 3521              		.loc 1 852 0
 3522              		.cfi_startproc
 3523 23fc 55       		pushq	%rbp
 3524              		.cfi_def_cfa_offset 16
 3525              		.cfi_offset 6, -16
 3526 23fd 4889E5   		movq	%rsp, %rbp
 3527              		.cfi_def_cfa_register 6
 3528 2400 4154     		pushq	%r12
 3529 2402 53       		pushq	%rbx
 3530 2403 4883EC70 		subq	$112, %rsp
 3531              		.cfi_offset 12, -24
 3532              		.cfi_offset 3, -32
 3533 2407 48897D88 		movq	%rdi, -120(%rbp)
 3534 240b 48897580 		movq	%rsi, -128(%rbp)
 853:main.c        **** 	char* P = malloc(33);
 3535              		.loc 1 853 0
 3536 240f BF210000 		movl	$33, %edi
 3536      00
 3537 2414 E8000000 		call	malloc
 3537      00
 3538 2419 488945C0 		movq	%rax, -64(%rbp)
 854:main.c        **** 	int N0=0;
 3539              		.loc 1 854 0
 3540 241d C7459400 		movl	$0, -108(%rbp)
 3540      000000
 3541              	.LBB26:
 855:main.c        **** 	for (int i=0;i<32;i++){if (K[i]=='0') N0++;}
 3542              		.loc 1 855 0
 3543 2424 C7459800 		movl	$0, -104(%rbp)
 3543      000000
 3544 242b EB1C     		jmp	.L222
 3545              	.L224:
 3546              		.loc 1 855 0 is_stmt 0 discriminator 6
 3547 242d 8B4598   		movl	-104(%rbp), %eax
 3548 2430 4863D0   		movslq	%eax, %rdx
 3549 2433 488B4580 		movq	-128(%rbp), %rax
 3550 2437 4801D0   		addq	%rdx, %rax
 3551 243a 0FB600   		movzbl	(%rax), %eax
 3552 243d 3C30     		cmpb	$48, %al
 3553 243f 7504     		jne	.L223
 3554              		.loc 1 855 0 discriminator 2
 3555 2441 83459401 		addl	$1, -108(%rbp)
 3556              	.L223:
 3557              		.loc 1 855 0 discriminator 4
 3558 2445 83459801 		addl	$1, -104(%rbp)
 3559              	.L222:
 3560              		.loc 1 855 0 discriminator 5
 3561 2449 837D981F 		cmpl	$31, -104(%rbp)
 3562 244d 7EDE     		jle	.L224
 3563              	.LBE26:
 3564              	.LBB27:
 856:main.c        **** 	for (int i=0;i<32;i++) P[i]=C[i];
 3565              		.loc 1 856 0 is_stmt 1
 3566 244f C7459C00 		movl	$0, -100(%rbp)
 3566      000000
 3567 2456 EB23     		jmp	.L225
 3568              	.L226:
 3569              		.loc 1 856 0 is_stmt 0 discriminator 3
 3570 2458 8B459C   		movl	-100(%rbp), %eax
 3571 245b 4863D0   		movslq	%eax, %rdx
 3572 245e 488B45C0 		movq	-64(%rbp), %rax
 3573 2462 4801C2   		addq	%rax, %rdx
 3574 2465 8B459C   		movl	-100(%rbp), %eax
 3575 2468 4863C8   		movslq	%eax, %rcx
 3576 246b 488B4588 		movq	-120(%rbp), %rax
 3577 246f 4801C8   		addq	%rcx, %rax
 3578 2472 0FB600   		movzbl	(%rax), %eax
 3579 2475 8802     		movb	%al, (%rdx)
 3580 2477 83459C01 		addl	$1, -100(%rbp)
 3581              	.L225:
 3582              		.loc 1 856 0 discriminator 1
 3583 247b 837D9C1F 		cmpl	$31, -100(%rbp)
 3584 247f 7ED7     		jle	.L226
 3585              	.LBE27:
 857:main.c        **** 	P[32]='\0';
 3586              		.loc 1 857 0 is_stmt 1
 3587 2481 488B45C0 		movq	-64(%rbp), %rax
 3588 2485 4883C020 		addq	$32, %rax
 3589 2489 C60000   		movb	$0, (%rax)
 858:main.c        **** 
 859:main.c        **** 	char* T = malloc(5) ;
 3590              		.loc 1 859 0
 3591 248c BF050000 		movl	$5, %edi
 3591      00
 3592 2491 E8000000 		call	malloc
 3592      00
 3593 2496 488945C8 		movq	%rax, -56(%rbp)
 860:main.c        **** 	T[4]='\0';
 3594              		.loc 1 860 0
 3595 249a 488B45C8 		movq	-56(%rbp), %rax
 3596 249e 4883C004 		addq	$4, %rax
 3597 24a2 C60000   		movb	$0, (%rax)
 861:main.c        **** 	T[3] = xor(K[31],xor(K[27],xor(K[23],xor(K[19],xor(K[15],xor(K[11],xor(K[7],K[3])))))));
 3598              		.loc 1 861 0
 3599 24a5 488B45C8 		movq	-56(%rbp), %rax
 3600 24a9 488D5803 		leaq	3(%rax), %rbx
 3601 24ad 488B4580 		movq	-128(%rbp), %rax
 3602 24b1 4883C003 		addq	$3, %rax
 3603 24b5 0FB600   		movzbl	(%rax), %eax
 3604 24b8 0FBED0   		movsbl	%al, %edx
 3605 24bb 488B4580 		movq	-128(%rbp), %rax
 3606 24bf 4883C007 		addq	$7, %rax
 3607 24c3 0FB600   		movzbl	(%rax), %eax
 3608 24c6 0FBEC0   		movsbl	%al, %eax
 3609 24c9 89D6     		movl	%edx, %esi
 3610 24cb 89C7     		movl	%eax, %edi
 3611 24cd E8000000 		call	xor
 3611      00
 3612 24d2 0FBED0   		movsbl	%al, %edx
 3613 24d5 488B4580 		movq	-128(%rbp), %rax
 3614 24d9 4883C00B 		addq	$11, %rax
 3615 24dd 0FB600   		movzbl	(%rax), %eax
 3616 24e0 0FBEC0   		movsbl	%al, %eax
 3617 24e3 89D6     		movl	%edx, %esi
 3618 24e5 89C7     		movl	%eax, %edi
 3619 24e7 E8000000 		call	xor
 3619      00
 3620 24ec 0FBED0   		movsbl	%al, %edx
 3621 24ef 488B4580 		movq	-128(%rbp), %rax
 3622 24f3 4883C00F 		addq	$15, %rax
 3623 24f7 0FB600   		movzbl	(%rax), %eax
 3624 24fa 0FBEC0   		movsbl	%al, %eax
 3625 24fd 89D6     		movl	%edx, %esi
 3626 24ff 89C7     		movl	%eax, %edi
 3627 2501 E8000000 		call	xor
 3627      00
 3628 2506 0FBED0   		movsbl	%al, %edx
 3629 2509 488B4580 		movq	-128(%rbp), %rax
 3630 250d 4883C013 		addq	$19, %rax
 3631 2511 0FB600   		movzbl	(%rax), %eax
 3632 2514 0FBEC0   		movsbl	%al, %eax
 3633 2517 89D6     		movl	%edx, %esi
 3634 2519 89C7     		movl	%eax, %edi
 3635 251b E8000000 		call	xor
 3635      00
 3636 2520 0FBED0   		movsbl	%al, %edx
 3637 2523 488B4580 		movq	-128(%rbp), %rax
 3638 2527 4883C017 		addq	$23, %rax
 3639 252b 0FB600   		movzbl	(%rax), %eax
 3640 252e 0FBEC0   		movsbl	%al, %eax
 3641 2531 89D6     		movl	%edx, %esi
 3642 2533 89C7     		movl	%eax, %edi
 3643 2535 E8000000 		call	xor
 3643      00
 3644 253a 0FBED0   		movsbl	%al, %edx
 3645 253d 488B4580 		movq	-128(%rbp), %rax
 3646 2541 4883C01B 		addq	$27, %rax
 3647 2545 0FB600   		movzbl	(%rax), %eax
 3648 2548 0FBEC0   		movsbl	%al, %eax
 3649 254b 89D6     		movl	%edx, %esi
 3650 254d 89C7     		movl	%eax, %edi
 3651 254f E8000000 		call	xor
 3651      00
 3652 2554 0FBED0   		movsbl	%al, %edx
 3653 2557 488B4580 		movq	-128(%rbp), %rax
 3654 255b 4883C01F 		addq	$31, %rax
 3655 255f 0FB600   		movzbl	(%rax), %eax
 3656 2562 0FBEC0   		movsbl	%al, %eax
 3657 2565 89D6     		movl	%edx, %esi
 3658 2567 89C7     		movl	%eax, %edi
 3659 2569 E8000000 		call	xor
 3659      00
 3660 256e 8803     		movb	%al, (%rbx)
 862:main.c        **** 	T[2] = xor(K[30],xor(K[26],xor(K[22],xor(K[18],xor(K[14],xor(K[10],xor(K[6],K[2])))))));
 3661              		.loc 1 862 0
 3662 2570 488B45C8 		movq	-56(%rbp), %rax
 3663 2574 488D5802 		leaq	2(%rax), %rbx
 3664 2578 488B4580 		movq	-128(%rbp), %rax
 3665 257c 4883C002 		addq	$2, %rax
 3666 2580 0FB600   		movzbl	(%rax), %eax
 3667 2583 0FBED0   		movsbl	%al, %edx
 3668 2586 488B4580 		movq	-128(%rbp), %rax
 3669 258a 4883C006 		addq	$6, %rax
 3670 258e 0FB600   		movzbl	(%rax), %eax
 3671 2591 0FBEC0   		movsbl	%al, %eax
 3672 2594 89D6     		movl	%edx, %esi
 3673 2596 89C7     		movl	%eax, %edi
 3674 2598 E8000000 		call	xor
 3674      00
 3675 259d 0FBED0   		movsbl	%al, %edx
 3676 25a0 488B4580 		movq	-128(%rbp), %rax
 3677 25a4 4883C00A 		addq	$10, %rax
 3678 25a8 0FB600   		movzbl	(%rax), %eax
 3679 25ab 0FBEC0   		movsbl	%al, %eax
 3680 25ae 89D6     		movl	%edx, %esi
 3681 25b0 89C7     		movl	%eax, %edi
 3682 25b2 E8000000 		call	xor
 3682      00
 3683 25b7 0FBED0   		movsbl	%al, %edx
 3684 25ba 488B4580 		movq	-128(%rbp), %rax
 3685 25be 4883C00E 		addq	$14, %rax
 3686 25c2 0FB600   		movzbl	(%rax), %eax
 3687 25c5 0FBEC0   		movsbl	%al, %eax
 3688 25c8 89D6     		movl	%edx, %esi
 3689 25ca 89C7     		movl	%eax, %edi
 3690 25cc E8000000 		call	xor
 3690      00
 3691 25d1 0FBED0   		movsbl	%al, %edx
 3692 25d4 488B4580 		movq	-128(%rbp), %rax
 3693 25d8 4883C012 		addq	$18, %rax
 3694 25dc 0FB600   		movzbl	(%rax), %eax
 3695 25df 0FBEC0   		movsbl	%al, %eax
 3696 25e2 89D6     		movl	%edx, %esi
 3697 25e4 89C7     		movl	%eax, %edi
 3698 25e6 E8000000 		call	xor
 3698      00
 3699 25eb 0FBED0   		movsbl	%al, %edx
 3700 25ee 488B4580 		movq	-128(%rbp), %rax
 3701 25f2 4883C016 		addq	$22, %rax
 3702 25f6 0FB600   		movzbl	(%rax), %eax
 3703 25f9 0FBEC0   		movsbl	%al, %eax
 3704 25fc 89D6     		movl	%edx, %esi
 3705 25fe 89C7     		movl	%eax, %edi
 3706 2600 E8000000 		call	xor
 3706      00
 3707 2605 0FBED0   		movsbl	%al, %edx
 3708 2608 488B4580 		movq	-128(%rbp), %rax
 3709 260c 4883C01A 		addq	$26, %rax
 3710 2610 0FB600   		movzbl	(%rax), %eax
 3711 2613 0FBEC0   		movsbl	%al, %eax
 3712 2616 89D6     		movl	%edx, %esi
 3713 2618 89C7     		movl	%eax, %edi
 3714 261a E8000000 		call	xor
 3714      00
 3715 261f 0FBED0   		movsbl	%al, %edx
 3716 2622 488B4580 		movq	-128(%rbp), %rax
 3717 2626 4883C01E 		addq	$30, %rax
 3718 262a 0FB600   		movzbl	(%rax), %eax
 3719 262d 0FBEC0   		movsbl	%al, %eax
 3720 2630 89D6     		movl	%edx, %esi
 3721 2632 89C7     		movl	%eax, %edi
 3722 2634 E8000000 		call	xor
 3722      00
 3723 2639 8803     		movb	%al, (%rbx)
 863:main.c        **** 	T[1] = xor(K[29],xor(K[25],xor(K[21],xor(K[17],xor(K[13],xor(K[9],xor(K[5],K[1])))))));
 3724              		.loc 1 863 0
 3725 263b 488B45C8 		movq	-56(%rbp), %rax
 3726 263f 488D5801 		leaq	1(%rax), %rbx
 3727 2643 488B4580 		movq	-128(%rbp), %rax
 3728 2647 4883C001 		addq	$1, %rax
 3729 264b 0FB600   		movzbl	(%rax), %eax
 3730 264e 0FBED0   		movsbl	%al, %edx
 3731 2651 488B4580 		movq	-128(%rbp), %rax
 3732 2655 4883C005 		addq	$5, %rax
 3733 2659 0FB600   		movzbl	(%rax), %eax
 3734 265c 0FBEC0   		movsbl	%al, %eax
 3735 265f 89D6     		movl	%edx, %esi
 3736 2661 89C7     		movl	%eax, %edi
 3737 2663 E8000000 		call	xor
 3737      00
 3738 2668 0FBED0   		movsbl	%al, %edx
 3739 266b 488B4580 		movq	-128(%rbp), %rax
 3740 266f 4883C009 		addq	$9, %rax
 3741 2673 0FB600   		movzbl	(%rax), %eax
 3742 2676 0FBEC0   		movsbl	%al, %eax
 3743 2679 89D6     		movl	%edx, %esi
 3744 267b 89C7     		movl	%eax, %edi
 3745 267d E8000000 		call	xor
 3745      00
 3746 2682 0FBED0   		movsbl	%al, %edx
 3747 2685 488B4580 		movq	-128(%rbp), %rax
 3748 2689 4883C00D 		addq	$13, %rax
 3749 268d 0FB600   		movzbl	(%rax), %eax
 3750 2690 0FBEC0   		movsbl	%al, %eax
 3751 2693 89D6     		movl	%edx, %esi
 3752 2695 89C7     		movl	%eax, %edi
 3753 2697 E8000000 		call	xor
 3753      00
 3754 269c 0FBED0   		movsbl	%al, %edx
 3755 269f 488B4580 		movq	-128(%rbp), %rax
 3756 26a3 4883C011 		addq	$17, %rax
 3757 26a7 0FB600   		movzbl	(%rax), %eax
 3758 26aa 0FBEC0   		movsbl	%al, %eax
 3759 26ad 89D6     		movl	%edx, %esi
 3760 26af 89C7     		movl	%eax, %edi
 3761 26b1 E8000000 		call	xor
 3761      00
 3762 26b6 0FBED0   		movsbl	%al, %edx
 3763 26b9 488B4580 		movq	-128(%rbp), %rax
 3764 26bd 4883C015 		addq	$21, %rax
 3765 26c1 0FB600   		movzbl	(%rax), %eax
 3766 26c4 0FBEC0   		movsbl	%al, %eax
 3767 26c7 89D6     		movl	%edx, %esi
 3768 26c9 89C7     		movl	%eax, %edi
 3769 26cb E8000000 		call	xor
 3769      00
 3770 26d0 0FBED0   		movsbl	%al, %edx
 3771 26d3 488B4580 		movq	-128(%rbp), %rax
 3772 26d7 4883C019 		addq	$25, %rax
 3773 26db 0FB600   		movzbl	(%rax), %eax
 3774 26de 0FBEC0   		movsbl	%al, %eax
 3775 26e1 89D6     		movl	%edx, %esi
 3776 26e3 89C7     		movl	%eax, %edi
 3777 26e5 E8000000 		call	xor
 3777      00
 3778 26ea 0FBED0   		movsbl	%al, %edx
 3779 26ed 488B4580 		movq	-128(%rbp), %rax
 3780 26f1 4883C01D 		addq	$29, %rax
 3781 26f5 0FB600   		movzbl	(%rax), %eax
 3782 26f8 0FBEC0   		movsbl	%al, %eax
 3783 26fb 89D6     		movl	%edx, %esi
 3784 26fd 89C7     		movl	%eax, %edi
 3785 26ff E8000000 		call	xor
 3785      00
 3786 2704 8803     		movb	%al, (%rbx)
 864:main.c        **** 	T[0] = xor(K[28],xor(K[24],xor(K[20],xor(K[16],xor(K[12],xor(K[8],xor(K[4],K[0])))))));
 3787              		.loc 1 864 0
 3788 2706 488B4580 		movq	-128(%rbp), %rax
 3789 270a 0FB600   		movzbl	(%rax), %eax
 3790 270d 0FBED0   		movsbl	%al, %edx
 3791 2710 488B4580 		movq	-128(%rbp), %rax
 3792 2714 4883C004 		addq	$4, %rax
 3793 2718 0FB600   		movzbl	(%rax), %eax
 3794 271b 0FBEC0   		movsbl	%al, %eax
 3795 271e 89D6     		movl	%edx, %esi
 3796 2720 89C7     		movl	%eax, %edi
 3797 2722 E8000000 		call	xor
 3797      00
 3798 2727 0FBED0   		movsbl	%al, %edx
 3799 272a 488B4580 		movq	-128(%rbp), %rax
 3800 272e 4883C008 		addq	$8, %rax
 3801 2732 0FB600   		movzbl	(%rax), %eax
 3802 2735 0FBEC0   		movsbl	%al, %eax
 3803 2738 89D6     		movl	%edx, %esi
 3804 273a 89C7     		movl	%eax, %edi
 3805 273c E8000000 		call	xor
 3805      00
 3806 2741 0FBED0   		movsbl	%al, %edx
 3807 2744 488B4580 		movq	-128(%rbp), %rax
 3808 2748 4883C00C 		addq	$12, %rax
 3809 274c 0FB600   		movzbl	(%rax), %eax
 3810 274f 0FBEC0   		movsbl	%al, %eax
 3811 2752 89D6     		movl	%edx, %esi
 3812 2754 89C7     		movl	%eax, %edi
 3813 2756 E8000000 		call	xor
 3813      00
 3814 275b 0FBED0   		movsbl	%al, %edx
 3815 275e 488B4580 		movq	-128(%rbp), %rax
 3816 2762 4883C010 		addq	$16, %rax
 3817 2766 0FB600   		movzbl	(%rax), %eax
 3818 2769 0FBEC0   		movsbl	%al, %eax
 3819 276c 89D6     		movl	%edx, %esi
 3820 276e 89C7     		movl	%eax, %edi
 3821 2770 E8000000 		call	xor
 3821      00
 3822 2775 0FBED0   		movsbl	%al, %edx
 3823 2778 488B4580 		movq	-128(%rbp), %rax
 3824 277c 4883C014 		addq	$20, %rax
 3825 2780 0FB600   		movzbl	(%rax), %eax
 3826 2783 0FBEC0   		movsbl	%al, %eax
 3827 2786 89D6     		movl	%edx, %esi
 3828 2788 89C7     		movl	%eax, %edi
 3829 278a E8000000 		call	xor
 3829      00
 3830 278f 0FBED0   		movsbl	%al, %edx
 3831 2792 488B4580 		movq	-128(%rbp), %rax
 3832 2796 4883C018 		addq	$24, %rax
 3833 279a 0FB600   		movzbl	(%rax), %eax
 3834 279d 0FBEC0   		movsbl	%al, %eax
 3835 27a0 89D6     		movl	%edx, %esi
 3836 27a2 89C7     		movl	%eax, %edi
 3837 27a4 E8000000 		call	xor
 3837      00
 3838 27a9 0FBED0   		movsbl	%al, %edx
 3839 27ac 488B4580 		movq	-128(%rbp), %rax
 3840 27b0 4883C01C 		addq	$28, %rax
 3841 27b4 0FB600   		movzbl	(%rax), %eax
 3842 27b7 0FBEC0   		movsbl	%al, %eax
 3843 27ba 89D6     		movl	%edx, %esi
 3844 27bc 89C7     		movl	%eax, %edi
 3845 27be E8000000 		call	xor
 3845      00
 3846 27c3 89C2     		movl	%eax, %edx
 3847 27c5 488B45C8 		movq	-56(%rbp), %rax
 3848 27c9 8810     		movb	%dl, (%rax)
 865:main.c        **** 
 866:main.c        **** 	// char* T8 = malloc(32);
 867:main.c        **** 
 868:main.c        **** 	// T = T+15
 869:main.c        **** 	char* Carry = malloc(4);
 3849              		.loc 1 869 0
 3850 27cb BF040000 		movl	$4, %edi
 3850      00
 3851 27d0 E8000000 		call	malloc
 3851      00
 3852 27d5 488945D0 		movq	%rax, -48(%rbp)
 870:main.c        **** 	char* Sum = malloc(4);
 3853              		.loc 1 870 0
 3854 27d9 BF040000 		movl	$4, %edi
 3854      00
 3855 27de E8000000 		call	malloc
 3855      00
 3856 27e3 488945D8 		movq	%rax, -40(%rbp)
 3857              	.LBB28:
 871:main.c        **** 	for (int l=0;l<4;l++) Carry[l]='0';
 3858              		.loc 1 871 0
 3859 27e7 C745A000 		movl	$0, -96(%rbp)
 3859      000000
 3860 27ee EB14     		jmp	.L227
 3861              	.L228:
 3862              		.loc 1 871 0 is_stmt 0 discriminator 3
 3863 27f0 8B45A0   		movl	-96(%rbp), %eax
 3864 27f3 4863D0   		movslq	%eax, %rdx
 3865 27f6 488B45D0 		movq	-48(%rbp), %rax
 3866 27fa 4801D0   		addq	%rdx, %rax
 3867 27fd C60030   		movb	$48, (%rax)
 3868 2800 8345A001 		addl	$1, -96(%rbp)
 3869              	.L227:
 3870              		.loc 1 871 0 discriminator 1
 3871 2804 837DA003 		cmpl	$3, -96(%rbp)
 3872 2808 7EE6     		jle	.L228
 3873              	.LBE28:
 872:main.c        **** 	Sum[0] = xor(T[0],'1');
 3874              		.loc 1 872 0 is_stmt 1
 3875 280a 488B45C8 		movq	-56(%rbp), %rax
 3876 280e 0FB600   		movzbl	(%rax), %eax
 3877 2811 0FBEC0   		movsbl	%al, %eax
 3878 2814 BE310000 		movl	$49, %esi
 3878      00
 3879 2819 89C7     		movl	%eax, %edi
 3880 281b E8000000 		call	xor
 3880      00
 3881 2820 89C2     		movl	%eax, %edx
 3882 2822 488B45D8 		movq	-40(%rbp), %rax
 3883 2826 8810     		movb	%dl, (%rax)
 873:main.c        **** 	Carry[0] = and(T[0],'1');
 3884              		.loc 1 873 0
 3885 2828 488B45C8 		movq	-56(%rbp), %rax
 3886 282c 0FB600   		movzbl	(%rax), %eax
 3887 282f 0FBEC0   		movsbl	%al, %eax
 3888 2832 BE310000 		movl	$49, %esi
 3888      00
 3889 2837 89C7     		movl	%eax, %edi
 3890 2839 E8000000 		call	and
 3890      00
 3891 283e 89C2     		movl	%eax, %edx
 3892 2840 488B45D0 		movq	-48(%rbp), %rax
 3893 2844 8810     		movb	%dl, (%rax)
 3894              	.LBB29:
 874:main.c        **** 	for (int c=1;c<4;c++){
 3895              		.loc 1 874 0
 3896 2846 C745A401 		movl	$1, -92(%rbp)
 3896      000000
 3897 284d E9F80000 		jmp	.L229
 3897      00
 3898              	.L230:
 875:main.c        **** 		Sum[c] = xor(T[c],xor(Carry[c-1],'1'));
 3899              		.loc 1 875 0 discriminator 3
 3900 2852 8B45A4   		movl	-92(%rbp), %eax
 3901 2855 4863D0   		movslq	%eax, %rdx
 3902 2858 488B45D8 		movq	-40(%rbp), %rax
 3903 285c 488D1C02 		leaq	(%rdx,%rax), %rbx
 3904 2860 8B45A4   		movl	-92(%rbp), %eax
 3905 2863 4898     		cltq
 3906 2865 488D50FF 		leaq	-1(%rax), %rdx
 3907 2869 488B45D0 		movq	-48(%rbp), %rax
 3908 286d 4801D0   		addq	%rdx, %rax
 3909 2870 0FB600   		movzbl	(%rax), %eax
 3910 2873 0FBEC0   		movsbl	%al, %eax
 3911 2876 BE310000 		movl	$49, %esi
 3911      00
 3912 287b 89C7     		movl	%eax, %edi
 3913 287d E8000000 		call	xor
 3913      00
 3914 2882 0FBED0   		movsbl	%al, %edx
 3915 2885 8B45A4   		movl	-92(%rbp), %eax
 3916 2888 4863C8   		movslq	%eax, %rcx
 3917 288b 488B45C8 		movq	-56(%rbp), %rax
 3918 288f 4801C8   		addq	%rcx, %rax
 3919 2892 0FB600   		movzbl	(%rax), %eax
 3920 2895 0FBEC0   		movsbl	%al, %eax
 3921 2898 89D6     		movl	%edx, %esi
 3922 289a 89C7     		movl	%eax, %edi
 3923 289c E8000000 		call	xor
 3923      00
 3924 28a1 8803     		movb	%al, (%rbx)
 876:main.c        **** 		Carry[c] = xor(and(Carry[c-1],T[c]),xor(and(Carry[c-1],'1'),and(T[c],'1')));
 3925              		.loc 1 876 0 discriminator 3
 3926 28a3 8B45A4   		movl	-92(%rbp), %eax
 3927 28a6 4863D0   		movslq	%eax, %rdx
 3928 28a9 488B45D0 		movq	-48(%rbp), %rax
 3929 28ad 4C8D2402 		leaq	(%rdx,%rax), %r12
 3930 28b1 8B45A4   		movl	-92(%rbp), %eax
 3931 28b4 4863D0   		movslq	%eax, %rdx
 3932 28b7 488B45C8 		movq	-56(%rbp), %rax
 3933 28bb 4801D0   		addq	%rdx, %rax
 3934 28be 0FB600   		movzbl	(%rax), %eax
 3935 28c1 0FBEC0   		movsbl	%al, %eax
 3936 28c4 BE310000 		movl	$49, %esi
 3936      00
 3937 28c9 89C7     		movl	%eax, %edi
 3938 28cb E8000000 		call	and
 3938      00
 3939 28d0 0FBED8   		movsbl	%al, %ebx
 3940 28d3 8B45A4   		movl	-92(%rbp), %eax
 3941 28d6 4898     		cltq
 3942 28d8 488D50FF 		leaq	-1(%rax), %rdx
 3943 28dc 488B45D0 		movq	-48(%rbp), %rax
 3944 28e0 4801D0   		addq	%rdx, %rax
 3945 28e3 0FB600   		movzbl	(%rax), %eax
 3946 28e6 0FBEC0   		movsbl	%al, %eax
 3947 28e9 BE310000 		movl	$49, %esi
 3947      00
 3948 28ee 89C7     		movl	%eax, %edi
 3949 28f0 E8000000 		call	and
 3949      00
 3950 28f5 0FBEC0   		movsbl	%al, %eax
 3951 28f8 89DE     		movl	%ebx, %esi
 3952 28fa 89C7     		movl	%eax, %edi
 3953 28fc E8000000 		call	xor
 3953      00
 3954 2901 0FBED8   		movsbl	%al, %ebx
 3955 2904 8B45A4   		movl	-92(%rbp), %eax
 3956 2907 4863D0   		movslq	%eax, %rdx
 3957 290a 488B45C8 		movq	-56(%rbp), %rax
 3958 290e 4801D0   		addq	%rdx, %rax
 3959 2911 0FB600   		movzbl	(%rax), %eax
 3960 2914 0FBED0   		movsbl	%al, %edx
 3961 2917 8B45A4   		movl	-92(%rbp), %eax
 3962 291a 4898     		cltq
 3963 291c 488D48FF 		leaq	-1(%rax), %rcx
 3964 2920 488B45D0 		movq	-48(%rbp), %rax
 3965 2924 4801C8   		addq	%rcx, %rax
 3966 2927 0FB600   		movzbl	(%rax), %eax
 3967 292a 0FBEC0   		movsbl	%al, %eax
 3968 292d 89D6     		movl	%edx, %esi
 3969 292f 89C7     		movl	%eax, %edi
 3970 2931 E8000000 		call	and
 3970      00
 3971 2936 0FBEC0   		movsbl	%al, %eax
 3972 2939 89DE     		movl	%ebx, %esi
 3973 293b 89C7     		movl	%eax, %edi
 3974 293d E8000000 		call	xor
 3974      00
 3975 2942 41880424 		movb	%al, (%r12)
 874:main.c        **** 	for (int c=1;c<4;c++){
 3976              		.loc 1 874 0 discriminator 3
 3977 2946 8345A401 		addl	$1, -92(%rbp)
 3978              	.L229:
 874:main.c        **** 	for (int c=1;c<4;c++){
 3979              		.loc 1 874 0 is_stmt 0 discriminator 1
 3980 294a 837DA403 		cmpl	$3, -92(%rbp)
 3981 294e 0F8EFEFE 		jle	.L230
 3981      FFFF
 3982              	.LBE29:
 3983              	.LBB30:
 877:main.c        **** 	}
 878:main.c        **** 
 879:main.c        **** 	for (int k=0;k<4;k++) T[k]=Sum[k];
 3984              		.loc 1 879 0 is_stmt 1
 3985 2954 C745A800 		movl	$0, -88(%rbp)
 3985      000000
 3986 295b EB23     		jmp	.L231
 3987              	.L232:
 3988              		.loc 1 879 0 is_stmt 0 discriminator 3
 3989 295d 8B45A8   		movl	-88(%rbp), %eax
 3990 2960 4863D0   		movslq	%eax, %rdx
 3991 2963 488B45C8 		movq	-56(%rbp), %rax
 3992 2967 4801C2   		addq	%rax, %rdx
 3993 296a 8B45A8   		movl	-88(%rbp), %eax
 3994 296d 4863C8   		movslq	%eax, %rcx
 3995 2970 488B45D8 		movq	-40(%rbp), %rax
 3996 2974 4801C8   		addq	%rcx, %rax
 3997 2977 0FB600   		movzbl	(%rax), %eax
 3998 297a 8802     		movb	%al, (%rdx)
 3999 297c 8345A801 		addl	$1, -88(%rbp)
 4000              	.L231:
 4001              		.loc 1 879 0 discriminator 1
 4002 2980 837DA803 		cmpl	$3, -88(%rbp)
 4003 2984 7ED7     		jle	.L232
 4004              	.LBE30:
 4005              	.LBB31:
 880:main.c        **** 
 881:main.c        **** ///
 882:main.c        **** 	for (int i=0;i<N0;i++){
 4006              		.loc 1 882 0 is_stmt 1
 4007 2986 C745AC00 		movl	$0, -84(%rbp)
 4007      000000
 4008 298d E91C0200 		jmp	.L233
 4008      00
 4009              	.L242:
 4010              	.LBB32:
 4011              	.LBB33:
 883:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 884:main.c        **** 		for (int j=0;j<32;j++){P[j]=xor(P[j],T[j%4]);}
 4012              		.loc 1 884 0
 4013 2992 C745B000 		movl	$0, -80(%rbp)
 4013      000000
 4014 2999 EB4E     		jmp	.L234
 4015              	.L235:
 4016              		.loc 1 884 0 is_stmt 0 discriminator 3
 4017 299b 8B45B0   		movl	-80(%rbp), %eax
 4018 299e 4863D0   		movslq	%eax, %rdx
 4019 29a1 488B45C0 		movq	-64(%rbp), %rax
 4020 29a5 488D1C02 		leaq	(%rdx,%rax), %rbx
 4021 29a9 8B45B0   		movl	-80(%rbp), %eax
 4022 29ac 99       		cltd
 4023 29ad C1EA1E   		shrl	$30, %edx
 4024 29b0 01D0     		addl	%edx, %eax
 4025 29b2 83E003   		andl	$3, %eax
 4026 29b5 29D0     		subl	%edx, %eax
 4027 29b7 4863D0   		movslq	%eax, %rdx
 4028 29ba 488B45C8 		movq	-56(%rbp), %rax
 4029 29be 4801D0   		addq	%rdx, %rax
 4030 29c1 0FB600   		movzbl	(%rax), %eax
 4031 29c4 0FBED0   		movsbl	%al, %edx
 4032 29c7 8B45B0   		movl	-80(%rbp), %eax
 4033 29ca 4863C8   		movslq	%eax, %rcx
 4034 29cd 488B45C0 		movq	-64(%rbp), %rax
 4035 29d1 4801C8   		addq	%rcx, %rax
 4036 29d4 0FB600   		movzbl	(%rax), %eax
 4037 29d7 0FBEC0   		movsbl	%al, %eax
 4038 29da 89D6     		movl	%edx, %esi
 4039 29dc 89C7     		movl	%eax, %edi
 4040 29de E8000000 		call	xor
 4040      00
 4041 29e3 8803     		movb	%al, (%rbx)
 4042 29e5 8345B001 		addl	$1, -80(%rbp)
 4043              	.L234:
 4044              		.loc 1 884 0 discriminator 1
 4045 29e9 837DB01F 		cmpl	$31, -80(%rbp)
 4046 29ed 7EAC     		jle	.L235
 4047              	.LBE33:
 885:main.c        **** 
 886:main.c        **** 		char* Carry = malloc(5);
 4048              		.loc 1 886 0 is_stmt 1
 4049 29ef BF050000 		movl	$5, %edi
 4049      00
 4050 29f4 E8000000 		call	malloc
 4050      00
 4051 29f9 488945E0 		movq	%rax, -32(%rbp)
 887:main.c        **** 		char* Sum = malloc(5);
 4052              		.loc 1 887 0
 4053 29fd BF050000 		movl	$5, %edi
 4053      00
 4054 2a02 E8000000 		call	malloc
 4054      00
 4055 2a07 488945E8 		movq	%rax, -24(%rbp)
 4056              	.LBB34:
 888:main.c        **** 		for (int l=0;l<4;l++) Carry[l]='0';
 4057              		.loc 1 888 0
 4058 2a0b C745B400 		movl	$0, -76(%rbp)
 4058      000000
 4059 2a12 EB14     		jmp	.L236
 4060              	.L237:
 4061              		.loc 1 888 0 is_stmt 0 discriminator 3
 4062 2a14 8B45B4   		movl	-76(%rbp), %eax
 4063 2a17 4863D0   		movslq	%eax, %rdx
 4064 2a1a 488B45E0 		movq	-32(%rbp), %rax
 4065 2a1e 4801D0   		addq	%rdx, %rax
 4066 2a21 C60030   		movb	$48, (%rax)
 4067 2a24 8345B401 		addl	$1, -76(%rbp)
 4068              	.L236:
 4069              		.loc 1 888 0 discriminator 1
 4070 2a28 837DB403 		cmpl	$3, -76(%rbp)
 4071 2a2c 7EE6     		jle	.L237
 4072              	.LBE34:
 889:main.c        **** 		Sum[0] = xor(T[0],'1');
 4073              		.loc 1 889 0 is_stmt 1
 4074 2a2e 488B45C8 		movq	-56(%rbp), %rax
 4075 2a32 0FB600   		movzbl	(%rax), %eax
 4076 2a35 0FBEC0   		movsbl	%al, %eax
 4077 2a38 BE310000 		movl	$49, %esi
 4077      00
 4078 2a3d 89C7     		movl	%eax, %edi
 4079 2a3f E8000000 		call	xor
 4079      00
 4080 2a44 89C2     		movl	%eax, %edx
 4081 2a46 488B45E8 		movq	-24(%rbp), %rax
 4082 2a4a 8810     		movb	%dl, (%rax)
 890:main.c        **** 		Carry[0] = and(T[0],'1');
 4083              		.loc 1 890 0
 4084 2a4c 488B45C8 		movq	-56(%rbp), %rax
 4085 2a50 0FB600   		movzbl	(%rax), %eax
 4086 2a53 0FBEC0   		movsbl	%al, %eax
 4087 2a56 BE310000 		movl	$49, %esi
 4087      00
 4088 2a5b 89C7     		movl	%eax, %edi
 4089 2a5d E8000000 		call	and
 4089      00
 4090 2a62 89C2     		movl	%eax, %edx
 4091 2a64 488B45E0 		movq	-32(%rbp), %rax
 4092 2a68 8810     		movb	%dl, (%rax)
 4093              	.LBB35:
 891:main.c        **** 		for (int c=1;c<4;c++){
 4094              		.loc 1 891 0
 4095 2a6a C745B801 		movl	$1, -72(%rbp)
 4095      000000
 4096 2a71 E9F80000 		jmp	.L238
 4096      00
 4097              	.L239:
 892:main.c        **** 			Sum[c] = xor(T[c],xor(Carry[c-1],'1'));
 4098              		.loc 1 892 0 discriminator 3
 4099 2a76 8B45B8   		movl	-72(%rbp), %eax
 4100 2a79 4863D0   		movslq	%eax, %rdx
 4101 2a7c 488B45E8 		movq	-24(%rbp), %rax
 4102 2a80 488D1C02 		leaq	(%rdx,%rax), %rbx
 4103 2a84 8B45B8   		movl	-72(%rbp), %eax
 4104 2a87 4898     		cltq
 4105 2a89 488D50FF 		leaq	-1(%rax), %rdx
 4106 2a8d 488B45E0 		movq	-32(%rbp), %rax
 4107 2a91 4801D0   		addq	%rdx, %rax
 4108 2a94 0FB600   		movzbl	(%rax), %eax
 4109 2a97 0FBEC0   		movsbl	%al, %eax
 4110 2a9a BE310000 		movl	$49, %esi
 4110      00
 4111 2a9f 89C7     		movl	%eax, %edi
 4112 2aa1 E8000000 		call	xor
 4112      00
 4113 2aa6 0FBED0   		movsbl	%al, %edx
 4114 2aa9 8B45B8   		movl	-72(%rbp), %eax
 4115 2aac 4863C8   		movslq	%eax, %rcx
 4116 2aaf 488B45C8 		movq	-56(%rbp), %rax
 4117 2ab3 4801C8   		addq	%rcx, %rax
 4118 2ab6 0FB600   		movzbl	(%rax), %eax
 4119 2ab9 0FBEC0   		movsbl	%al, %eax
 4120 2abc 89D6     		movl	%edx, %esi
 4121 2abe 89C7     		movl	%eax, %edi
 4122 2ac0 E8000000 		call	xor
 4122      00
 4123 2ac5 8803     		movb	%al, (%rbx)
 893:main.c        **** 			Carry[c] = xor(and(Carry[c-1],T[c]),xor(and(Carry[c-1],'1'),and(T[c],'1')));
 4124              		.loc 1 893 0 discriminator 3
 4125 2ac7 8B45B8   		movl	-72(%rbp), %eax
 4126 2aca 4863D0   		movslq	%eax, %rdx
 4127 2acd 488B45E0 		movq	-32(%rbp), %rax
 4128 2ad1 4C8D2402 		leaq	(%rdx,%rax), %r12
 4129 2ad5 8B45B8   		movl	-72(%rbp), %eax
 4130 2ad8 4863D0   		movslq	%eax, %rdx
 4131 2adb 488B45C8 		movq	-56(%rbp), %rax
 4132 2adf 4801D0   		addq	%rdx, %rax
 4133 2ae2 0FB600   		movzbl	(%rax), %eax
 4134 2ae5 0FBEC0   		movsbl	%al, %eax
 4135 2ae8 BE310000 		movl	$49, %esi
 4135      00
 4136 2aed 89C7     		movl	%eax, %edi
 4137 2aef E8000000 		call	and
 4137      00
 4138 2af4 0FBED8   		movsbl	%al, %ebx
 4139 2af7 8B45B8   		movl	-72(%rbp), %eax
 4140 2afa 4898     		cltq
 4141 2afc 488D50FF 		leaq	-1(%rax), %rdx
 4142 2b00 488B45E0 		movq	-32(%rbp), %rax
 4143 2b04 4801D0   		addq	%rdx, %rax
 4144 2b07 0FB600   		movzbl	(%rax), %eax
 4145 2b0a 0FBEC0   		movsbl	%al, %eax
 4146 2b0d BE310000 		movl	$49, %esi
 4146      00
 4147 2b12 89C7     		movl	%eax, %edi
 4148 2b14 E8000000 		call	and
 4148      00
 4149 2b19 0FBEC0   		movsbl	%al, %eax
 4150 2b1c 89DE     		movl	%ebx, %esi
 4151 2b1e 89C7     		movl	%eax, %edi
 4152 2b20 E8000000 		call	xor
 4152      00
 4153 2b25 0FBED8   		movsbl	%al, %ebx
 4154 2b28 8B45B8   		movl	-72(%rbp), %eax
 4155 2b2b 4863D0   		movslq	%eax, %rdx
 4156 2b2e 488B45C8 		movq	-56(%rbp), %rax
 4157 2b32 4801D0   		addq	%rdx, %rax
 4158 2b35 0FB600   		movzbl	(%rax), %eax
 4159 2b38 0FBED0   		movsbl	%al, %edx
 4160 2b3b 8B45B8   		movl	-72(%rbp), %eax
 4161 2b3e 4898     		cltq
 4162 2b40 488D48FF 		leaq	-1(%rax), %rcx
 4163 2b44 488B45E0 		movq	-32(%rbp), %rax
 4164 2b48 4801C8   		addq	%rcx, %rax
 4165 2b4b 0FB600   		movzbl	(%rax), %eax
 4166 2b4e 0FBEC0   		movsbl	%al, %eax
 4167 2b51 89D6     		movl	%edx, %esi
 4168 2b53 89C7     		movl	%eax, %edi
 4169 2b55 E8000000 		call	and
 4169      00
 4170 2b5a 0FBEC0   		movsbl	%al, %eax
 4171 2b5d 89DE     		movl	%ebx, %esi
 4172 2b5f 89C7     		movl	%eax, %edi
 4173 2b61 E8000000 		call	xor
 4173      00
 4174 2b66 41880424 		movb	%al, (%r12)
 891:main.c        **** 		for (int c=1;c<4;c++){
 4175              		.loc 1 891 0 discriminator 3
 4176 2b6a 8345B801 		addl	$1, -72(%rbp)
 4177              	.L238:
 891:main.c        **** 		for (int c=1;c<4;c++){
 4178              		.loc 1 891 0 is_stmt 0 discriminator 1
 4179 2b6e 837DB803 		cmpl	$3, -72(%rbp)
 4180 2b72 0F8EFEFE 		jle	.L239
 4180      FFFF
 4181              	.LBE35:
 4182              	.LBB36:
 894:main.c        **** 		}
 895:main.c        **** 		for (int k=0;k<4;k++) T[k]=Sum[k];
 4183              		.loc 1 895 0 is_stmt 1
 4184 2b78 C745BC00 		movl	$0, -68(%rbp)
 4184      000000
 4185 2b7f EB23     		jmp	.L240
 4186              	.L241:
 4187              		.loc 1 895 0 is_stmt 0 discriminator 3
 4188 2b81 8B45BC   		movl	-68(%rbp), %eax
 4189 2b84 4863D0   		movslq	%eax, %rdx
 4190 2b87 488B45C8 		movq	-56(%rbp), %rax
 4191 2b8b 4801C2   		addq	%rax, %rdx
 4192 2b8e 8B45BC   		movl	-68(%rbp), %eax
 4193 2b91 4863C8   		movslq	%eax, %rcx
 4194 2b94 488B45E8 		movq	-24(%rbp), %rax
 4195 2b98 4801C8   		addq	%rcx, %rax
 4196 2b9b 0FB600   		movzbl	(%rax), %eax
 4197 2b9e 8802     		movb	%al, (%rdx)
 4198 2ba0 8345BC01 		addl	$1, -68(%rbp)
 4199              	.L240:
 4200              		.loc 1 895 0 discriminator 1
 4201 2ba4 837DBC03 		cmpl	$3, -68(%rbp)
 4202 2ba8 7ED7     		jle	.L241
 4203              	.LBE36:
 4204              	.LBE32:
 882:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 4205              		.loc 1 882 0 is_stmt 1 discriminator 2
 4206 2baa 8345AC01 		addl	$1, -84(%rbp)
 4207              	.L233:
 882:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 4208              		.loc 1 882 0 is_stmt 0 discriminator 1
 4209 2bae 8B45AC   		movl	-84(%rbp), %eax
 4210 2bb1 3B4594   		cmpl	-108(%rbp), %eax
 4211 2bb4 0F8CD8FD 		jl	.L242
 4211      FFFF
 4212              	.LBE31:
 896:main.c        **** 
 897:main.c        **** 	}
 898:main.c        **** 	return P;
 4213              		.loc 1 898 0 is_stmt 1
 4214 2bba 488B45C0 		movq	-64(%rbp), %rax
 899:main.c        **** }
 4215              		.loc 1 899 0
 4216 2bbe 4883C470 		addq	$112, %rsp
 4217 2bc2 5B       		popq	%rbx
 4218 2bc3 415C     		popq	%r12
 4219 2bc5 5D       		popq	%rbp
 4220              		.cfi_def_cfa 7, 8
 4221 2bc6 C3       		ret
 4222              		.cfi_endproc
 4223              	.LFE23:
 4225              		.globl	encrypt
 4227              	encrypt:
 4228              	.LFB24:
 900:main.c        **** 
 901:main.c        **** char* encrypt(char P[32], char K[32]){
 4229              		.loc 1 901 0
 4230              		.cfi_startproc
 4231 2bc7 55       		pushq	%rbp
 4232              		.cfi_def_cfa_offset 16
 4233              		.cfi_offset 6, -16
 4234 2bc8 4889E5   		movq	%rsp, %rbp
 4235              		.cfi_def_cfa_register 6
 4236 2bcb 53       		pushq	%rbx
 4237 2bcc 4883EC58 		subq	$88, %rsp
 4238              		.cfi_offset 3, -24
 4239 2bd0 48897DA8 		movq	%rdi, -88(%rbp)
 4240 2bd4 488975A0 		movq	%rsi, -96(%rbp)
 902:main.c        **** 	char* C = malloc(33);
 4241              		.loc 1 902 0
 4242 2bd8 BF210000 		movl	$33, %edi
 4242      00
 4243 2bdd E8000000 		call	malloc
 4243      00
 4244 2be2 488945D8 		movq	%rax, -40(%rbp)
 903:main.c        **** 	int N1=0;
 4245              		.loc 1 903 0
 4246 2be6 C745B000 		movl	$0, -80(%rbp)
 4246      000000
 4247              	.LBB37:
 904:main.c        **** 	for (int i=0;i<32;i++){if (K[i]=='1') N1++;}
 4248              		.loc 1 904 0
 4249 2bed C745B400 		movl	$0, -76(%rbp)
 4249      000000
 4250 2bf4 EB1C     		jmp	.L245
 4251              	.L247:
 4252              		.loc 1 904 0 is_stmt 0 discriminator 6
 4253 2bf6 8B45B4   		movl	-76(%rbp), %eax
 4254 2bf9 4863D0   		movslq	%eax, %rdx
 4255 2bfc 488B45A0 		movq	-96(%rbp), %rax
 4256 2c00 4801D0   		addq	%rdx, %rax
 4257 2c03 0FB600   		movzbl	(%rax), %eax
 4258 2c06 3C31     		cmpb	$49, %al
 4259 2c08 7504     		jne	.L246
 4260              		.loc 1 904 0 discriminator 2
 4261 2c0a 8345B001 		addl	$1, -80(%rbp)
 4262              	.L246:
 4263              		.loc 1 904 0 discriminator 4
 4264 2c0e 8345B401 		addl	$1, -76(%rbp)
 4265              	.L245:
 4266              		.loc 1 904 0 discriminator 5
 4267 2c12 837DB41F 		cmpl	$31, -76(%rbp)
 4268 2c16 7EDE     		jle	.L247
 4269              	.LBE37:
 4270              	.LBB38:
 905:main.c        **** 	for (int i=0;i<32;i++){C[i]=P[i];}
 4271              		.loc 1 905 0 is_stmt 1
 4272 2c18 C745B800 		movl	$0, -72(%rbp)
 4272      000000
 4273 2c1f EB23     		jmp	.L248
 4274              	.L249:
 4275              		.loc 1 905 0 is_stmt 0 discriminator 3
 4276 2c21 8B45B8   		movl	-72(%rbp), %eax
 4277 2c24 4863D0   		movslq	%eax, %rdx
 4278 2c27 488B45D8 		movq	-40(%rbp), %rax
 4279 2c2b 4801C2   		addq	%rax, %rdx
 4280 2c2e 8B45B8   		movl	-72(%rbp), %eax
 4281 2c31 4863C8   		movslq	%eax, %rcx
 4282 2c34 488B45A8 		movq	-88(%rbp), %rax
 4283 2c38 4801C8   		addq	%rcx, %rax
 4284 2c3b 0FB600   		movzbl	(%rax), %eax
 4285 2c3e 8802     		movb	%al, (%rdx)
 4286 2c40 8345B801 		addl	$1, -72(%rbp)
 4287              	.L248:
 4288              		.loc 1 905 0 discriminator 1
 4289 2c44 837DB81F 		cmpl	$31, -72(%rbp)
 4290 2c48 7ED7     		jle	.L249
 4291              	.LBE38:
 906:main.c        **** 	char* T = malloc(5) ;
 4292              		.loc 1 906 0 is_stmt 1
 4293 2c4a BF050000 		movl	$5, %edi
 4293      00
 4294 2c4f E8000000 		call	malloc
 4294      00
 4295 2c54 488945D0 		movq	%rax, -48(%rbp)
 907:main.c        **** 	C[32]='\0'; T[4]='\0';
 4296              		.loc 1 907 0
 4297 2c58 488B45D8 		movq	-40(%rbp), %rax
 4298 2c5c 4883C020 		addq	$32, %rax
 4299 2c60 C60000   		movb	$0, (%rax)
 4300 2c63 488B45D0 		movq	-48(%rbp), %rax
 4301 2c67 4883C004 		addq	$4, %rax
 4302 2c6b C60000   		movb	$0, (%rax)
 908:main.c        **** 	T[3] = xor(K[31],xor(K[27],xor(K[23],xor(K[19],xor(K[15],xor(K[11],xor(K[7],K[3])))))));
 4303              		.loc 1 908 0
 4304 2c6e 488B45D0 		movq	-48(%rbp), %rax
 4305 2c72 488D5803 		leaq	3(%rax), %rbx
 4306 2c76 488B45A0 		movq	-96(%rbp), %rax
 4307 2c7a 4883C003 		addq	$3, %rax
 4308 2c7e 0FB600   		movzbl	(%rax), %eax
 4309 2c81 0FBED0   		movsbl	%al, %edx
 4310 2c84 488B45A0 		movq	-96(%rbp), %rax
 4311 2c88 4883C007 		addq	$7, %rax
 4312 2c8c 0FB600   		movzbl	(%rax), %eax
 4313 2c8f 0FBEC0   		movsbl	%al, %eax
 4314 2c92 89D6     		movl	%edx, %esi
 4315 2c94 89C7     		movl	%eax, %edi
 4316 2c96 E8000000 		call	xor
 4316      00
 4317 2c9b 0FBED0   		movsbl	%al, %edx
 4318 2c9e 488B45A0 		movq	-96(%rbp), %rax
 4319 2ca2 4883C00B 		addq	$11, %rax
 4320 2ca6 0FB600   		movzbl	(%rax), %eax
 4321 2ca9 0FBEC0   		movsbl	%al, %eax
 4322 2cac 89D6     		movl	%edx, %esi
 4323 2cae 89C7     		movl	%eax, %edi
 4324 2cb0 E8000000 		call	xor
 4324      00
 4325 2cb5 0FBED0   		movsbl	%al, %edx
 4326 2cb8 488B45A0 		movq	-96(%rbp), %rax
 4327 2cbc 4883C00F 		addq	$15, %rax
 4328 2cc0 0FB600   		movzbl	(%rax), %eax
 4329 2cc3 0FBEC0   		movsbl	%al, %eax
 4330 2cc6 89D6     		movl	%edx, %esi
 4331 2cc8 89C7     		movl	%eax, %edi
 4332 2cca E8000000 		call	xor
 4332      00
 4333 2ccf 0FBED0   		movsbl	%al, %edx
 4334 2cd2 488B45A0 		movq	-96(%rbp), %rax
 4335 2cd6 4883C013 		addq	$19, %rax
 4336 2cda 0FB600   		movzbl	(%rax), %eax
 4337 2cdd 0FBEC0   		movsbl	%al, %eax
 4338 2ce0 89D6     		movl	%edx, %esi
 4339 2ce2 89C7     		movl	%eax, %edi
 4340 2ce4 E8000000 		call	xor
 4340      00
 4341 2ce9 0FBED0   		movsbl	%al, %edx
 4342 2cec 488B45A0 		movq	-96(%rbp), %rax
 4343 2cf0 4883C017 		addq	$23, %rax
 4344 2cf4 0FB600   		movzbl	(%rax), %eax
 4345 2cf7 0FBEC0   		movsbl	%al, %eax
 4346 2cfa 89D6     		movl	%edx, %esi
 4347 2cfc 89C7     		movl	%eax, %edi
 4348 2cfe E8000000 		call	xor
 4348      00
 4349 2d03 0FBED0   		movsbl	%al, %edx
 4350 2d06 488B45A0 		movq	-96(%rbp), %rax
 4351 2d0a 4883C01B 		addq	$27, %rax
 4352 2d0e 0FB600   		movzbl	(%rax), %eax
 4353 2d11 0FBEC0   		movsbl	%al, %eax
 4354 2d14 89D6     		movl	%edx, %esi
 4355 2d16 89C7     		movl	%eax, %edi
 4356 2d18 E8000000 		call	xor
 4356      00
 4357 2d1d 0FBED0   		movsbl	%al, %edx
 4358 2d20 488B45A0 		movq	-96(%rbp), %rax
 4359 2d24 4883C01F 		addq	$31, %rax
 4360 2d28 0FB600   		movzbl	(%rax), %eax
 4361 2d2b 0FBEC0   		movsbl	%al, %eax
 4362 2d2e 89D6     		movl	%edx, %esi
 4363 2d30 89C7     		movl	%eax, %edi
 4364 2d32 E8000000 		call	xor
 4364      00
 4365 2d37 8803     		movb	%al, (%rbx)
 909:main.c        **** 	T[2] = xor(K[30],xor(K[26],xor(K[22],xor(K[18],xor(K[14],xor(K[10],xor(K[6],K[2])))))));
 4366              		.loc 1 909 0
 4367 2d39 488B45D0 		movq	-48(%rbp), %rax
 4368 2d3d 488D5802 		leaq	2(%rax), %rbx
 4369 2d41 488B45A0 		movq	-96(%rbp), %rax
 4370 2d45 4883C002 		addq	$2, %rax
 4371 2d49 0FB600   		movzbl	(%rax), %eax
 4372 2d4c 0FBED0   		movsbl	%al, %edx
 4373 2d4f 488B45A0 		movq	-96(%rbp), %rax
 4374 2d53 4883C006 		addq	$6, %rax
 4375 2d57 0FB600   		movzbl	(%rax), %eax
 4376 2d5a 0FBEC0   		movsbl	%al, %eax
 4377 2d5d 89D6     		movl	%edx, %esi
 4378 2d5f 89C7     		movl	%eax, %edi
 4379 2d61 E8000000 		call	xor
 4379      00
 4380 2d66 0FBED0   		movsbl	%al, %edx
 4381 2d69 488B45A0 		movq	-96(%rbp), %rax
 4382 2d6d 4883C00A 		addq	$10, %rax
 4383 2d71 0FB600   		movzbl	(%rax), %eax
 4384 2d74 0FBEC0   		movsbl	%al, %eax
 4385 2d77 89D6     		movl	%edx, %esi
 4386 2d79 89C7     		movl	%eax, %edi
 4387 2d7b E8000000 		call	xor
 4387      00
 4388 2d80 0FBED0   		movsbl	%al, %edx
 4389 2d83 488B45A0 		movq	-96(%rbp), %rax
 4390 2d87 4883C00E 		addq	$14, %rax
 4391 2d8b 0FB600   		movzbl	(%rax), %eax
 4392 2d8e 0FBEC0   		movsbl	%al, %eax
 4393 2d91 89D6     		movl	%edx, %esi
 4394 2d93 89C7     		movl	%eax, %edi
 4395 2d95 E8000000 		call	xor
 4395      00
 4396 2d9a 0FBED0   		movsbl	%al, %edx
 4397 2d9d 488B45A0 		movq	-96(%rbp), %rax
 4398 2da1 4883C012 		addq	$18, %rax
 4399 2da5 0FB600   		movzbl	(%rax), %eax
 4400 2da8 0FBEC0   		movsbl	%al, %eax
 4401 2dab 89D6     		movl	%edx, %esi
 4402 2dad 89C7     		movl	%eax, %edi
 4403 2daf E8000000 		call	xor
 4403      00
 4404 2db4 0FBED0   		movsbl	%al, %edx
 4405 2db7 488B45A0 		movq	-96(%rbp), %rax
 4406 2dbb 4883C016 		addq	$22, %rax
 4407 2dbf 0FB600   		movzbl	(%rax), %eax
 4408 2dc2 0FBEC0   		movsbl	%al, %eax
 4409 2dc5 89D6     		movl	%edx, %esi
 4410 2dc7 89C7     		movl	%eax, %edi
 4411 2dc9 E8000000 		call	xor
 4411      00
 4412 2dce 0FBED0   		movsbl	%al, %edx
 4413 2dd1 488B45A0 		movq	-96(%rbp), %rax
 4414 2dd5 4883C01A 		addq	$26, %rax
 4415 2dd9 0FB600   		movzbl	(%rax), %eax
 4416 2ddc 0FBEC0   		movsbl	%al, %eax
 4417 2ddf 89D6     		movl	%edx, %esi
 4418 2de1 89C7     		movl	%eax, %edi
 4419 2de3 E8000000 		call	xor
 4419      00
 4420 2de8 0FBED0   		movsbl	%al, %edx
 4421 2deb 488B45A0 		movq	-96(%rbp), %rax
 4422 2def 4883C01E 		addq	$30, %rax
 4423 2df3 0FB600   		movzbl	(%rax), %eax
 4424 2df6 0FBEC0   		movsbl	%al, %eax
 4425 2df9 89D6     		movl	%edx, %esi
 4426 2dfb 89C7     		movl	%eax, %edi
 4427 2dfd E8000000 		call	xor
 4427      00
 4428 2e02 8803     		movb	%al, (%rbx)
 910:main.c        **** 	T[1] = xor(K[29],xor(K[25],xor(K[21],xor(K[17],xor(K[13],xor(K[9],xor(K[5],K[1])))))));
 4429              		.loc 1 910 0
 4430 2e04 488B45D0 		movq	-48(%rbp), %rax
 4431 2e08 488D5801 		leaq	1(%rax), %rbx
 4432 2e0c 488B45A0 		movq	-96(%rbp), %rax
 4433 2e10 4883C001 		addq	$1, %rax
 4434 2e14 0FB600   		movzbl	(%rax), %eax
 4435 2e17 0FBED0   		movsbl	%al, %edx
 4436 2e1a 488B45A0 		movq	-96(%rbp), %rax
 4437 2e1e 4883C005 		addq	$5, %rax
 4438 2e22 0FB600   		movzbl	(%rax), %eax
 4439 2e25 0FBEC0   		movsbl	%al, %eax
 4440 2e28 89D6     		movl	%edx, %esi
 4441 2e2a 89C7     		movl	%eax, %edi
 4442 2e2c E8000000 		call	xor
 4442      00
 4443 2e31 0FBED0   		movsbl	%al, %edx
 4444 2e34 488B45A0 		movq	-96(%rbp), %rax
 4445 2e38 4883C009 		addq	$9, %rax
 4446 2e3c 0FB600   		movzbl	(%rax), %eax
 4447 2e3f 0FBEC0   		movsbl	%al, %eax
 4448 2e42 89D6     		movl	%edx, %esi
 4449 2e44 89C7     		movl	%eax, %edi
 4450 2e46 E8000000 		call	xor
 4450      00
 4451 2e4b 0FBED0   		movsbl	%al, %edx
 4452 2e4e 488B45A0 		movq	-96(%rbp), %rax
 4453 2e52 4883C00D 		addq	$13, %rax
 4454 2e56 0FB600   		movzbl	(%rax), %eax
 4455 2e59 0FBEC0   		movsbl	%al, %eax
 4456 2e5c 89D6     		movl	%edx, %esi
 4457 2e5e 89C7     		movl	%eax, %edi
 4458 2e60 E8000000 		call	xor
 4458      00
 4459 2e65 0FBED0   		movsbl	%al, %edx
 4460 2e68 488B45A0 		movq	-96(%rbp), %rax
 4461 2e6c 4883C011 		addq	$17, %rax
 4462 2e70 0FB600   		movzbl	(%rax), %eax
 4463 2e73 0FBEC0   		movsbl	%al, %eax
 4464 2e76 89D6     		movl	%edx, %esi
 4465 2e78 89C7     		movl	%eax, %edi
 4466 2e7a E8000000 		call	xor
 4466      00
 4467 2e7f 0FBED0   		movsbl	%al, %edx
 4468 2e82 488B45A0 		movq	-96(%rbp), %rax
 4469 2e86 4883C015 		addq	$21, %rax
 4470 2e8a 0FB600   		movzbl	(%rax), %eax
 4471 2e8d 0FBEC0   		movsbl	%al, %eax
 4472 2e90 89D6     		movl	%edx, %esi
 4473 2e92 89C7     		movl	%eax, %edi
 4474 2e94 E8000000 		call	xor
 4474      00
 4475 2e99 0FBED0   		movsbl	%al, %edx
 4476 2e9c 488B45A0 		movq	-96(%rbp), %rax
 4477 2ea0 4883C019 		addq	$25, %rax
 4478 2ea4 0FB600   		movzbl	(%rax), %eax
 4479 2ea7 0FBEC0   		movsbl	%al, %eax
 4480 2eaa 89D6     		movl	%edx, %esi
 4481 2eac 89C7     		movl	%eax, %edi
 4482 2eae E8000000 		call	xor
 4482      00
 4483 2eb3 0FBED0   		movsbl	%al, %edx
 4484 2eb6 488B45A0 		movq	-96(%rbp), %rax
 4485 2eba 4883C01D 		addq	$29, %rax
 4486 2ebe 0FB600   		movzbl	(%rax), %eax
 4487 2ec1 0FBEC0   		movsbl	%al, %eax
 4488 2ec4 89D6     		movl	%edx, %esi
 4489 2ec6 89C7     		movl	%eax, %edi
 4490 2ec8 E8000000 		call	xor
 4490      00
 4491 2ecd 8803     		movb	%al, (%rbx)
 911:main.c        **** 	T[0] = xor(K[28],xor(K[24],xor(K[20],xor(K[16],xor(K[12],xor(K[8],xor(K[4],K[0])))))));
 4492              		.loc 1 911 0
 4493 2ecf 488B45A0 		movq	-96(%rbp), %rax
 4494 2ed3 0FB600   		movzbl	(%rax), %eax
 4495 2ed6 0FBED0   		movsbl	%al, %edx
 4496 2ed9 488B45A0 		movq	-96(%rbp), %rax
 4497 2edd 4883C004 		addq	$4, %rax
 4498 2ee1 0FB600   		movzbl	(%rax), %eax
 4499 2ee4 0FBEC0   		movsbl	%al, %eax
 4500 2ee7 89D6     		movl	%edx, %esi
 4501 2ee9 89C7     		movl	%eax, %edi
 4502 2eeb E8000000 		call	xor
 4502      00
 4503 2ef0 0FBED0   		movsbl	%al, %edx
 4504 2ef3 488B45A0 		movq	-96(%rbp), %rax
 4505 2ef7 4883C008 		addq	$8, %rax
 4506 2efb 0FB600   		movzbl	(%rax), %eax
 4507 2efe 0FBEC0   		movsbl	%al, %eax
 4508 2f01 89D6     		movl	%edx, %esi
 4509 2f03 89C7     		movl	%eax, %edi
 4510 2f05 E8000000 		call	xor
 4510      00
 4511 2f0a 0FBED0   		movsbl	%al, %edx
 4512 2f0d 488B45A0 		movq	-96(%rbp), %rax
 4513 2f11 4883C00C 		addq	$12, %rax
 4514 2f15 0FB600   		movzbl	(%rax), %eax
 4515 2f18 0FBEC0   		movsbl	%al, %eax
 4516 2f1b 89D6     		movl	%edx, %esi
 4517 2f1d 89C7     		movl	%eax, %edi
 4518 2f1f E8000000 		call	xor
 4518      00
 4519 2f24 0FBED0   		movsbl	%al, %edx
 4520 2f27 488B45A0 		movq	-96(%rbp), %rax
 4521 2f2b 4883C010 		addq	$16, %rax
 4522 2f2f 0FB600   		movzbl	(%rax), %eax
 4523 2f32 0FBEC0   		movsbl	%al, %eax
 4524 2f35 89D6     		movl	%edx, %esi
 4525 2f37 89C7     		movl	%eax, %edi
 4526 2f39 E8000000 		call	xor
 4526      00
 4527 2f3e 0FBED0   		movsbl	%al, %edx
 4528 2f41 488B45A0 		movq	-96(%rbp), %rax
 4529 2f45 4883C014 		addq	$20, %rax
 4530 2f49 0FB600   		movzbl	(%rax), %eax
 4531 2f4c 0FBEC0   		movsbl	%al, %eax
 4532 2f4f 89D6     		movl	%edx, %esi
 4533 2f51 89C7     		movl	%eax, %edi
 4534 2f53 E8000000 		call	xor
 4534      00
 4535 2f58 0FBED0   		movsbl	%al, %edx
 4536 2f5b 488B45A0 		movq	-96(%rbp), %rax
 4537 2f5f 4883C018 		addq	$24, %rax
 4538 2f63 0FB600   		movzbl	(%rax), %eax
 4539 2f66 0FBEC0   		movsbl	%al, %eax
 4540 2f69 89D6     		movl	%edx, %esi
 4541 2f6b 89C7     		movl	%eax, %edi
 4542 2f6d E8000000 		call	xor
 4542      00
 4543 2f72 0FBED0   		movsbl	%al, %edx
 4544 2f75 488B45A0 		movq	-96(%rbp), %rax
 4545 2f79 4883C01C 		addq	$28, %rax
 4546 2f7d 0FB600   		movzbl	(%rax), %eax
 4547 2f80 0FBEC0   		movsbl	%al, %eax
 4548 2f83 89D6     		movl	%edx, %esi
 4549 2f85 89C7     		movl	%eax, %edi
 4550 2f87 E8000000 		call	xor
 4550      00
 4551 2f8c 89C2     		movl	%eax, %edx
 4552 2f8e 488B45D0 		movq	-48(%rbp), %rax
 4553 2f92 8810     		movb	%dl, (%rax)
 4554              	.LBB39:
 912:main.c        **** 
 913:main.c        **** 	// char* T8 = malloc(33);
 914:main.c        **** 
 915:main.c        **** 	for (int i=0;i<N1;i++){
 4555              		.loc 1 915 0
 4556 2f94 C745BC00 		movl	$0, -68(%rbp)
 4556      000000
 4557 2f9b E9CF0100 		jmp	.L250
 4557      00
 4558              	.L261:
 4559              	.LBB40:
 916:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 917:main.c        **** 		for (int j=0;j<32;j++){C[j]=xor(C[j],T[j%4]);}
 4560              		.loc 1 917 0
 4561 2fa0 C745C000 		movl	$0, -64(%rbp)
 4561      000000
 4562 2fa7 EB4E     		jmp	.L251
 4563              	.L252:
 4564              		.loc 1 917 0 is_stmt 0 discriminator 3
 4565 2fa9 8B45C0   		movl	-64(%rbp), %eax
 4566 2fac 4863D0   		movslq	%eax, %rdx
 4567 2faf 488B45D8 		movq	-40(%rbp), %rax
 4568 2fb3 488D1C02 		leaq	(%rdx,%rax), %rbx
 4569 2fb7 8B45C0   		movl	-64(%rbp), %eax
 4570 2fba 99       		cltd
 4571 2fbb C1EA1E   		shrl	$30, %edx
 4572 2fbe 01D0     		addl	%edx, %eax
 4573 2fc0 83E003   		andl	$3, %eax
 4574 2fc3 29D0     		subl	%edx, %eax
 4575 2fc5 4863D0   		movslq	%eax, %rdx
 4576 2fc8 488B45D0 		movq	-48(%rbp), %rax
 4577 2fcc 4801D0   		addq	%rdx, %rax
 4578 2fcf 0FB600   		movzbl	(%rax), %eax
 4579 2fd2 0FBED0   		movsbl	%al, %edx
 4580 2fd5 8B45C0   		movl	-64(%rbp), %eax
 4581 2fd8 4863C8   		movslq	%eax, %rcx
 4582 2fdb 488B45D8 		movq	-40(%rbp), %rax
 4583 2fdf 4801C8   		addq	%rcx, %rax
 4584 2fe2 0FB600   		movzbl	(%rax), %eax
 4585 2fe5 0FBEC0   		movsbl	%al, %eax
 4586 2fe8 89D6     		movl	%edx, %esi
 4587 2fea 89C7     		movl	%eax, %edi
 4588 2fec E8000000 		call	xor
 4588      00
 4589 2ff1 8803     		movb	%al, (%rbx)
 4590 2ff3 8345C001 		addl	$1, -64(%rbp)
 4591              	.L251:
 4592              		.loc 1 917 0 discriminator 1
 4593 2ff7 837DC01F 		cmpl	$31, -64(%rbp)
 4594 2ffb 7EAC     		jle	.L252
 4595              	.LBE40:
 918:main.c        **** 		if(strcmp(T,"1111") == 1) T="0000";
 4596              		.loc 1 918 0 is_stmt 1
 4597 2ffd 488B45D0 		movq	-48(%rbp), %rax
 4598 3001 BE000000 		movl	$.LC59, %esi
 4598      00
 4599 3006 4889C7   		movq	%rax, %rdi
 4600 3009 E8000000 		call	strcmp
 4600      00
 4601 300e 83F801   		cmpl	$1, %eax
 4602 3011 750D     		jne	.L253
 4603              		.loc 1 918 0 is_stmt 0 discriminator 1
 4604 3013 48C745D0 		movq	$.LC43, -48(%rbp)
 4604      00000000 
 4605 301b E94B0100 		jmp	.L254
 4605      00
 4606              	.L253:
 4607              	.LBB41:
 919:main.c        **** 		else {
 920:main.c        **** 			char* Carry = malloc(4);
 4608              		.loc 1 920 0 is_stmt 1
 4609 3020 BF040000 		movl	$4, %edi
 4609      00
 4610 3025 E8000000 		call	malloc
 4610      00
 4611 302a 488945E0 		movq	%rax, -32(%rbp)
 921:main.c        **** 			char* Sum = malloc(4);
 4612              		.loc 1 921 0
 4613 302e BF040000 		movl	$4, %edi
 4613      00
 4614 3033 E8000000 		call	malloc
 4614      00
 4615 3038 488945E8 		movq	%rax, -24(%rbp)
 4616              	.LBB42:
 922:main.c        **** 			for (int l=0;l<4;l++) Carry[l]='0';
 4617              		.loc 1 922 0
 4618 303c C745C400 		movl	$0, -60(%rbp)
 4618      000000
 4619 3043 EB14     		jmp	.L255
 4620              	.L256:
 4621              		.loc 1 922 0 is_stmt 0 discriminator 3
 4622 3045 8B45C4   		movl	-60(%rbp), %eax
 4623 3048 4863D0   		movslq	%eax, %rdx
 4624 304b 488B45E0 		movq	-32(%rbp), %rax
 4625 304f 4801D0   		addq	%rdx, %rax
 4626 3052 C60030   		movb	$48, (%rax)
 4627 3055 8345C401 		addl	$1, -60(%rbp)
 4628              	.L255:
 4629              		.loc 1 922 0 discriminator 1
 4630 3059 837DC403 		cmpl	$3, -60(%rbp)
 4631 305d 7EE6     		jle	.L256
 4632              	.LBE42:
 923:main.c        **** 			Sum[0] = xor(T[0],'1');
 4633              		.loc 1 923 0 is_stmt 1
 4634 305f 488B45D0 		movq	-48(%rbp), %rax
 4635 3063 0FB600   		movzbl	(%rax), %eax
 4636 3066 0FBEC0   		movsbl	%al, %eax
 4637 3069 BE310000 		movl	$49, %esi
 4637      00
 4638 306e 89C7     		movl	%eax, %edi
 4639 3070 E8000000 		call	xor
 4639      00
 4640 3075 89C2     		movl	%eax, %edx
 4641 3077 488B45E8 		movq	-24(%rbp), %rax
 4642 307b 8810     		movb	%dl, (%rax)
 924:main.c        **** 			Carry[0] = and(T[0],'1');
 4643              		.loc 1 924 0
 4644 307d 488B45D0 		movq	-48(%rbp), %rax
 4645 3081 0FB600   		movzbl	(%rax), %eax
 4646 3084 0FBEC0   		movsbl	%al, %eax
 4647 3087 BE310000 		movl	$49, %esi
 4647      00
 4648 308c 89C7     		movl	%eax, %edi
 4649 308e E8000000 		call	and
 4649      00
 4650 3093 89C2     		movl	%eax, %edx
 4651 3095 488B45E0 		movq	-32(%rbp), %rax
 4652 3099 8810     		movb	%dl, (%rax)
 4653              	.LBB43:
 925:main.c        **** 			for (int c=1;c<4;c++){
 4654              		.loc 1 925 0
 4655 309b C745C801 		movl	$1, -56(%rbp)
 4655      000000
 4656 30a2 E9880000 		jmp	.L257
 4656      00
 4657              	.L258:
 926:main.c        **** 				Sum[c] = xor(T[c],Carry[c-1]);
 4658              		.loc 1 926 0 discriminator 3
 4659 30a7 8B45C8   		movl	-56(%rbp), %eax
 4660 30aa 4863D0   		movslq	%eax, %rdx
 4661 30ad 488B45E8 		movq	-24(%rbp), %rax
 4662 30b1 488D1C02 		leaq	(%rdx,%rax), %rbx
 4663 30b5 8B45C8   		movl	-56(%rbp), %eax
 4664 30b8 4898     		cltq
 4665 30ba 488D50FF 		leaq	-1(%rax), %rdx
 4666 30be 488B45E0 		movq	-32(%rbp), %rax
 4667 30c2 4801D0   		addq	%rdx, %rax
 4668 30c5 0FB600   		movzbl	(%rax), %eax
 4669 30c8 0FBED0   		movsbl	%al, %edx
 4670 30cb 8B45C8   		movl	-56(%rbp), %eax
 4671 30ce 4863C8   		movslq	%eax, %rcx
 4672 30d1 488B45D0 		movq	-48(%rbp), %rax
 4673 30d5 4801C8   		addq	%rcx, %rax
 4674 30d8 0FB600   		movzbl	(%rax), %eax
 4675 30db 0FBEC0   		movsbl	%al, %eax
 4676 30de 89D6     		movl	%edx, %esi
 4677 30e0 89C7     		movl	%eax, %edi
 4678 30e2 E8000000 		call	xor
 4678      00
 4679 30e7 8803     		movb	%al, (%rbx)
 927:main.c        **** 				Carry[c] = and(Carry[c-1],T[c]);
 4680              		.loc 1 927 0 discriminator 3
 4681 30e9 8B45C8   		movl	-56(%rbp), %eax
 4682 30ec 4863D0   		movslq	%eax, %rdx
 4683 30ef 488B45E0 		movq	-32(%rbp), %rax
 4684 30f3 488D1C02 		leaq	(%rdx,%rax), %rbx
 4685 30f7 8B45C8   		movl	-56(%rbp), %eax
 4686 30fa 4863D0   		movslq	%eax, %rdx
 4687 30fd 488B45D0 		movq	-48(%rbp), %rax
 4688 3101 4801D0   		addq	%rdx, %rax
 4689 3104 0FB600   		movzbl	(%rax), %eax
 4690 3107 0FBED0   		movsbl	%al, %edx
 4691 310a 8B45C8   		movl	-56(%rbp), %eax
 4692 310d 4898     		cltq
 4693 310f 488D48FF 		leaq	-1(%rax), %rcx
 4694 3113 488B45E0 		movq	-32(%rbp), %rax
 4695 3117 4801C8   		addq	%rcx, %rax
 4696 311a 0FB600   		movzbl	(%rax), %eax
 4697 311d 0FBEC0   		movsbl	%al, %eax
 4698 3120 89D6     		movl	%edx, %esi
 4699 3122 89C7     		movl	%eax, %edi
 4700 3124 E8000000 		call	and
 4700      00
 4701 3129 8803     		movb	%al, (%rbx)
 925:main.c        **** 			for (int c=1;c<4;c++){
 4702              		.loc 1 925 0 discriminator 3
 4703 312b 8345C801 		addl	$1, -56(%rbp)
 4704              	.L257:
 925:main.c        **** 			for (int c=1;c<4;c++){
 4705              		.loc 1 925 0 is_stmt 0 discriminator 1
 4706 312f 837DC803 		cmpl	$3, -56(%rbp)
 4707 3133 0F8E6EFF 		jle	.L258
 4707      FFFF
 4708              	.LBE43:
 4709              	.LBB44:
 928:main.c        **** 			}
 929:main.c        **** 			for(int k=0;k<4;k++) T[k]=Sum[k];
 4710              		.loc 1 929 0 is_stmt 1
 4711 3139 C745CC00 		movl	$0, -52(%rbp)
 4711      000000
 4712 3140 EB23     		jmp	.L259
 4713              	.L260:
 4714              		.loc 1 929 0 is_stmt 0 discriminator 3
 4715 3142 8B45CC   		movl	-52(%rbp), %eax
 4716 3145 4863D0   		movslq	%eax, %rdx
 4717 3148 488B45D0 		movq	-48(%rbp), %rax
 4718 314c 4801C2   		addq	%rax, %rdx
 4719 314f 8B45CC   		movl	-52(%rbp), %eax
 4720 3152 4863C8   		movslq	%eax, %rcx
 4721 3155 488B45E8 		movq	-24(%rbp), %rax
 4722 3159 4801C8   		addq	%rcx, %rax
 4723 315c 0FB600   		movzbl	(%rax), %eax
 4724 315f 8802     		movb	%al, (%rdx)
 4725 3161 8345CC01 		addl	$1, -52(%rbp)
 4726              	.L259:
 4727              		.loc 1 929 0 discriminator 1
 4728 3165 837DCC03 		cmpl	$3, -52(%rbp)
 4729 3169 7ED7     		jle	.L260
 4730              	.L254:
 4731              	.LBE44:
 4732              	.LBE41:
 915:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 4733              		.loc 1 915 0 is_stmt 1 discriminator 2
 4734 316b 8345BC01 		addl	$1, -68(%rbp)
 4735              	.L250:
 915:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 4736              		.loc 1 915 0 is_stmt 0 discriminator 1
 4737 316f 8B45BC   		movl	-68(%rbp), %eax
 4738 3172 3B45B0   		cmpl	-80(%rbp), %eax
 4739 3175 0F8C25FE 		jl	.L261
 4739      FFFF
 4740              	.LBE39:
 930:main.c        **** 
 931:main.c        **** 		}
 932:main.c        **** 	}
 933:main.c        **** 	return C;
 4741              		.loc 1 933 0 is_stmt 1
 4742 317b 488B45D8 		movq	-40(%rbp), %rax
 934:main.c        **** }
 4743              		.loc 1 934 0
 4744 317f 4883C458 		addq	$88, %rsp
 4745 3183 5B       		popq	%rbx
 4746 3184 5D       		popq	%rbp
 4747              		.cfi_def_cfa 7, 8
 4748 3185 C3       		ret
 4749              		.cfi_endproc
 4750              	.LFE24:
 4752              		.globl	read_byte
 4754              	read_byte:
 4755              	.LFB25:
 935:main.c        **** 
 936:main.c        **** char * read_byte(uint8 a){
 4756              		.loc 1 936 0
 4757              		.cfi_startproc
 4758 3186 55       		pushq	%rbp
 4759              		.cfi_def_cfa_offset 16
 4760              		.cfi_offset 6, -16
 4761 3187 4889E5   		movq	%rsp, %rbp
 4762              		.cfi_def_cfa_register 6
 4763 318a 4883EC20 		subq	$32, %rsp
 4764 318e 89F8     		movl	%edi, %eax
 4765 3190 8845EC   		movb	%al, -20(%rbp)
 937:main.c        **** 		char* ans=malloc(9); 
 4766              		.loc 1 937 0
 4767 3193 BF090000 		movl	$9, %edi
 4767      00
 4768 3198 E8000000 		call	malloc
 4768      00
 4769 319d 488945F8 		movq	%rax, -8(%rbp)
 4770              	.LBB45:
 938:main.c        **** 		for(int i=0;i<8;i++) {
 4771              		.loc 1 938 0
 4772 31a1 C745F400 		movl	$0, -12(%rbp)
 4772      000000
 4773 31a8 EB3A     		jmp	.L264
 4774              	.L267:
 939:main.c        **** 				if(a%2==0) { ans[i]= '0'; }
 4775              		.loc 1 939 0
 4776 31aa 0FB645EC 		movzbl	-20(%rbp), %eax
 4777 31ae 83E001   		andl	$1, %eax
 4778 31b1 84C0     		testb	%al, %al
 4779 31b3 7512     		jne	.L265
 4780              		.loc 1 939 0 is_stmt 0 discriminator 1
 4781 31b5 8B45F4   		movl	-12(%rbp), %eax
 4782 31b8 4863D0   		movslq	%eax, %rdx
 4783 31bb 488B45F8 		movq	-8(%rbp), %rax
 4784 31bf 4801D0   		addq	%rdx, %rax
 4785 31c2 C60030   		movb	$48, (%rax)
 4786 31c5 EB10     		jmp	.L266
 4787              	.L265:
 940:main.c        **** 				else { ans[i]='1'; }
 4788              		.loc 1 940 0 is_stmt 1
 4789 31c7 8B45F4   		movl	-12(%rbp), %eax
 4790 31ca 4863D0   		movslq	%eax, %rdx
 4791 31cd 488B45F8 		movq	-8(%rbp), %rax
 4792 31d1 4801D0   		addq	%rdx, %rax
 4793 31d4 C60031   		movb	$49, (%rax)
 4794              	.L266:
 941:main.c        **** 				a/=2; 
 4795              		.loc 1 941 0 discriminator 2
 4796 31d7 0FB645EC 		movzbl	-20(%rbp), %eax
 4797 31db D0E8     		shrb	%al
 4798 31dd 8845EC   		movb	%al, -20(%rbp)
 938:main.c        **** 				if(a%2==0) { ans[i]= '0'; }
 4799              		.loc 1 938 0 discriminator 2
 4800 31e0 8345F401 		addl	$1, -12(%rbp)
 4801              	.L264:
 938:main.c        **** 				if(a%2==0) { ans[i]= '0'; }
 4802              		.loc 1 938 0 is_stmt 0 discriminator 1
 4803 31e4 837DF407 		cmpl	$7, -12(%rbp)
 4804 31e8 7EC0     		jle	.L267
 4805              	.LBE45:
 942:main.c        **** 		}
 943:main.c        **** 		ans[8]='\0'; 
 4806              		.loc 1 943 0 is_stmt 1
 4807 31ea 488B45F8 		movq	-8(%rbp), %rax
 4808 31ee 4883C008 		addq	$8, %rax
 4809 31f2 C60000   		movb	$0, (%rax)
 944:main.c        **** 		return ans; 
 4810              		.loc 1 944 0
 4811 31f5 488B45F8 		movq	-8(%rbp), %rax
 945:main.c        **** }
 4812              		.loc 1 945 0
 4813 31f9 C9       		leave
 4814              		.cfi_def_cfa 7, 8
 4815 31fa C3       		ret
 4816              		.cfi_endproc
 4817              	.LFE25:
 4819              		.globl	write_4byte_to_board
 4821              	write_4byte_to_board:
 4822              	.LFB26:
 946:main.c        **** 
 947:main.c        **** char write_4byte_to_board(int chan, const char * data, struct FLContext *handle, const char * error
 4823              		.loc 1 947 0
 4824              		.cfi_startproc
 4825 31fb 55       		pushq	%rbp
 4826              		.cfi_def_cfa_offset 16
 4827              		.cfi_offset 6, -16
 4828 31fc 4889E5   		movq	%rsp, %rbp
 4829              		.cfi_def_cfa_register 6
 4830 31ff 4883EC60 		subq	$96, %rsp
 4831 3203 897DBC   		movl	%edi, -68(%rbp)
 4832 3206 488975B0 		movq	%rsi, -80(%rbp)
 4833 320a 488955A8 		movq	%rdx, -88(%rbp)
 4834 320e 48894DA0 		movq	%rcx, -96(%rbp)
 4835 3212 448945B8 		movl	%r8d, -72(%rbp)
 4836              		.loc 1 947 0
 4837 3216 64488B04 		movq	%fs:40, %rax
 4837      25280000 
 4837      00
 4838 321f 488945F8 		movq	%rax, -8(%rbp)
 4839 3223 31C0     		xorl	%eax, %eax
 948:main.c        ****         char* to_enc = malloc(33);
 4840              		.loc 1 948 0
 4841 3225 BF210000 		movl	$33, %edi
 4841      00
 4842 322a E8000000 		call	malloc
 4842      00
 4843 322f 488945E0 		movq	%rax, -32(%rbp)
 4844              	.LBB46:
 949:main.c        ****         for(int i=0; i< 4; i++)
 4845              		.loc 1 949 0
 4846 3233 C745CC00 		movl	$0, -52(%rbp)
 4846      000000
 4847 323a EB4B     		jmp	.L270
 4848              	.L273:
 4849              	.LBB47:
 950:main.c        ****             for(int j= 0; j<8; j++)
 4850              		.loc 1 950 0
 4851 323c C745D000 		movl	$0, -48(%rbp)
 4851      000000
 4852 3243 EB38     		jmp	.L271
 4853              	.L272:
 951:main.c        ****                 to_enc[i*8 +j] = data[i*8 + 7 - j];
 4854              		.loc 1 951 0 discriminator 3
 4855 3245 8B45CC   		movl	-52(%rbp), %eax
 4856 3248 8D14C500 		leal	0(,%rax,8), %edx
 4856      000000
 4857 324f 8B45D0   		movl	-48(%rbp), %eax
 4858 3252 01D0     		addl	%edx, %eax
 4859 3254 4863D0   		movslq	%eax, %rdx
 4860 3257 488B45E0 		movq	-32(%rbp), %rax
 4861 325b 4801C2   		addq	%rax, %rdx
 4862 325e 8B45CC   		movl	-52(%rbp), %eax
 4863 3261 C1E003   		sall	$3, %eax
 4864 3264 83C007   		addl	$7, %eax
 4865 3267 2B45D0   		subl	-48(%rbp), %eax
 4866 326a 4863C8   		movslq	%eax, %rcx
 4867 326d 488B45B0 		movq	-80(%rbp), %rax
 4868 3271 4801C8   		addq	%rcx, %rax
 4869 3274 0FB600   		movzbl	(%rax), %eax
 4870 3277 8802     		movb	%al, (%rdx)
 950:main.c        ****             for(int j= 0; j<8; j++)
 4871              		.loc 1 950 0 discriminator 3
 4872 3279 8345D001 		addl	$1, -48(%rbp)
 4873              	.L271:
 950:main.c        ****             for(int j= 0; j<8; j++)
 4874              		.loc 1 950 0 is_stmt 0 discriminator 1
 4875 327d 837DD007 		cmpl	$7, -48(%rbp)
 4876 3281 7EC2     		jle	.L272
 4877              	.LBE47:
 949:main.c        ****         for(int i=0; i< 4; i++)
 4878              		.loc 1 949 0 is_stmt 1 discriminator 2
 4879 3283 8345CC01 		addl	$1, -52(%rbp)
 4880              	.L270:
 949:main.c        ****         for(int i=0; i< 4; i++)
 4881              		.loc 1 949 0 is_stmt 0 discriminator 1
 4882 3287 837DCC03 		cmpl	$3, -52(%rbp)
 4883 328b 7EAF     		jle	.L273
 4884              	.LBE46:
 952:main.c        ****         to_enc[32] = '\0';
 4885              		.loc 1 952 0 is_stmt 1
 4886 328d 488B45E0 		movq	-32(%rbp), %rax
 4887 3291 4883C020 		addq	$32, %rax
 4888 3295 C60000   		movb	$0, (%rax)
 953:main.c        **** 		char *enc_data=encrypt(to_enc,key); 
 4889              		.loc 1 953 0
 4890 3298 488B1500 		movq	key(%rip), %rdx
 4890      000000
 4891 329f 488B45E0 		movq	-32(%rbp), %rax
 4892 32a3 4889D6   		movq	%rdx, %rsi
 4893 32a6 4889C7   		movq	%rax, %rdi
 4894 32a9 E8000000 		call	encrypt
 4894      00
 4895 32ae 488945E8 		movq	%rax, -24(%rbp)
 954:main.c        **** 		uint8 buf[5]; 
 955:main.c        **** 		uint8 temp=0; 
 4896              		.loc 1 955 0
 4897 32b2 C645CB00 		movb	$0, -53(%rbp)
 4898              	.LBB48:
 956:main.c        **** 		for(int i=0;i<4;i++){
 4899              		.loc 1 956 0
 4900 32b6 C745D400 		movl	$0, -44(%rbp)
 4900      000000
 4901 32bd EB63     		jmp	.L274
 4902              	.L278:
 957:main.c        **** 				temp=0; 
 4903              		.loc 1 957 0
 4904 32bf C645CB00 		movb	$0, -53(%rbp)
 4905              	.LBB49:
 958:main.c        **** 				for(int j=i<<3; j<(i<<3)+8; j++){ if(enc_data[j]=='1') { temp+=(1<<(j-(i<<3))); } }
 4906              		.loc 1 958 0
 4907 32c3 8B45D4   		movl	-44(%rbp), %eax
 4908 32c6 C1E003   		sall	$3, %eax
 4909 32c9 8945D8   		movl	%eax, -40(%rbp)
 4910 32cc EB35     		jmp	.L275
 4911              	.L277:
 4912              		.loc 1 958 0 is_stmt 0 discriminator 6
 4913 32ce 8B45D8   		movl	-40(%rbp), %eax
 4914 32d1 4863D0   		movslq	%eax, %rdx
 4915 32d4 488B45E8 		movq	-24(%rbp), %rax
 4916 32d8 4801D0   		addq	%rdx, %rax
 4917 32db 0FB600   		movzbl	(%rax), %eax
 4918 32de 3C31     		cmpb	$49, %al
 4919 32e0 751D     		jne	.L276
 4920              		.loc 1 958 0 discriminator 2
 4921 32e2 8B45D4   		movl	-44(%rbp), %eax
 4922 32e5 8D14C500 		leal	0(,%rax,8), %edx
 4922      000000
 4923 32ec 8B45D8   		movl	-40(%rbp), %eax
 4924 32ef 29D0     		subl	%edx, %eax
 4925 32f1 BA010000 		movl	$1, %edx
 4925      00
 4926 32f6 89C1     		movl	%eax, %ecx
 4927 32f8 D3E2     		sall	%cl, %edx
 4928 32fa 89D0     		movl	%edx, %eax
 4929 32fc 0045CB   		addb	%al, -53(%rbp)
 4930              	.L276:
 4931              		.loc 1 958 0 discriminator 4
 4932 32ff 8345D801 		addl	$1, -40(%rbp)
 4933              	.L275:
 4934              		.loc 1 958 0 discriminator 5
 4935 3303 8B45D4   		movl	-44(%rbp), %eax
 4936 3306 C1E003   		sall	$3, %eax
 4937 3309 83C008   		addl	$8, %eax
 4938 330c 3B45D8   		cmpl	-40(%rbp), %eax
 4939 330f 7FBD     		jg	.L277
 4940              	.LBE49:
 959:main.c        **** 				buf[i]=temp; 
 4941              		.loc 1 959 0 is_stmt 1 discriminator 2
 4942 3311 8B45D4   		movl	-44(%rbp), %eax
 4943 3314 4898     		cltq
 4944 3316 0FB655CB 		movzbl	-53(%rbp), %edx
 4945 331a 885405F0 		movb	%dl, -16(%rbp,%rax)
 956:main.c        **** 				temp=0; 
 4946              		.loc 1 956 0 discriminator 2
 4947 331e 8345D401 		addl	$1, -44(%rbp)
 4948              	.L274:
 956:main.c        **** 				temp=0; 
 4949              		.loc 1 956 0 is_stmt 0 discriminator 1
 4950 3322 837DD403 		cmpl	$3, -44(%rbp)
 4951 3326 7E97     		jle	.L278
 4952              	.LBE48:
 960:main.c        **** 		}
 961:main.c        **** 		FLStatus fStatus=flWriteChannel(handle,chan,4,buf,error); 
 4953              		.loc 1 961 0 is_stmt 1
 4954 3328 8B45BC   		movl	-68(%rbp), %eax
 4955 332b 0FB6F0   		movzbl	%al, %esi
 4956 332e 488B4DA0 		movq	-96(%rbp), %rcx
 4957 3332 488D55F0 		leaq	-16(%rbp), %rdx
 4958 3336 488B45A8 		movq	-88(%rbp), %rax
 4959 333a 4989C8   		movq	%rcx, %r8
 4960 333d 4889D1   		movq	%rdx, %rcx
 4961 3340 BA040000 		movl	$4, %edx
 4961      00
 4962 3345 4889C7   		movq	%rax, %rdi
 4963 3348 E8000000 		call	flWriteChannel
 4963      00
 4964 334d 8945DC   		movl	%eax, -36(%rbp)
 962:main.c        **** 		if(fStatus!=FLP_SUCCESS) { 
 4965              		.loc 1 962 0
 4966 3350 837DDC00 		cmpl	$0, -36(%rbp)
 4967 3354 7407     		je	.L279
 963:main.c        **** 				return 'f'; 
 4968              		.loc 1 963 0
 4969 3356 B8660000 		movl	$102, %eax
 4969      00
 4970 335b EB05     		jmp	.L281
 4971              	.L279:
 964:main.c        **** 		}
 965:main.c        **** 		else return 's'; 
 4972              		.loc 1 965 0
 4973 335d B8730000 		movl	$115, %eax
 4973      00
 4974              	.L281:
 966:main.c        **** //
 967:main.c        **** //		char *data_to_write=boolToHex(enc_data); 
 968:main.c        **** //		strcpy(line1,"w1 "); 
 969:main.c        **** //       // printf("%s\n",data_to_write); 
 970:main.c        **** //		char *dd=malloc(3);  dd[2]='\0'; 
 971:main.c        **** //		for(int i=0;i<4;i++){
 972:main.c        **** //				dd[0]=data_to_write[i*2]; 
 973:main.c        **** //				dd[1]=data_to_write[i*2+1]; 
 974:main.c        **** //                strcpy(line1,"w1 "); 
 975:main.c        **** //                strcat(line1,dd); 
 976:main.c        **** //				pStatus = parseLine(handle, line1 , &error);
 977:main.c        **** //				if(pStatus != FLP_SUCCESS) i--; 
 978:main.c        **** //		}
 979:main.c        **** //        wtt(); 
 980:main.c        **** 		
 981:main.c        **** }
 4975              		.loc 1 981 0 discriminator 1
 4976 3362 488B7DF8 		movq	-8(%rbp), %rdi
 4977 3366 6448333C 		xorq	%fs:40, %rdi
 4977      25280000 
 4977      00
 4978 336f 7405     		je	.L282
 4979              		.loc 1 981 0 is_stmt 0
 4980 3371 E8000000 		call	__stack_chk_fail
 4980      00
 4981              	.L282:
 4982 3376 C9       		leave
 4983              		.cfi_def_cfa 7, 8
 4984 3377 C3       		ret
 4985              		.cfi_endproc
 4986              	.LFE26:
 4988              		.globl	read_4byte_from_fpga
 4990              	read_4byte_from_fpga:
 4991              	.LFB27:
 982:main.c        **** char * read_4byte_from_fpga(int chan, struct FLContext *handle, const char * error, int timeout ){
 4992              		.loc 1 982 0 is_stmt 1
 4993              		.cfi_startproc
 4994 3378 55       		pushq	%rbp
 4995              		.cfi_def_cfa_offset 16
 4996              		.cfi_offset 6, -16
 4997 3379 4889E5   		movq	%rsp, %rbp
 4998              		.cfi_def_cfa_register 6
 4999 337c 4883EC50 		subq	$80, %rsp
 5000 3380 897DCC   		movl	%edi, -52(%rbp)
 5001 3383 488975C0 		movq	%rsi, -64(%rbp)
 5002 3387 488955B8 		movq	%rdx, -72(%rbp)
 5003 338b 894DC8   		movl	%ecx, -56(%rbp)
 5004              		.loc 1 982 0
 5005 338e 64488B04 		movq	%fs:40, %rax
 5005      25280000 
 5005      00
 5006 3397 488945F8 		movq	%rax, -8(%rbp)
 5007 339b 31C0     		xorl	%eax, %eax
 983:main.c        **** 		char* data_red_from_fpga = malloc(33); 
 5008              		.loc 1 983 0
 5009 339d BF210000 		movl	$33, %edi
 5009      00
 5010 33a2 E8000000 		call	malloc
 5010      00
 5011 33a7 488945E0 		movq	%rax, -32(%rbp)
 984:main.c        **** 		uint8 buf[5]; 
 985:main.c        **** 		FLStatus fstatus=flReadChannel(handle, chan, 2, buf, error); 
 5012              		.loc 1 985 0
 5013 33ab 8B45CC   		movl	-52(%rbp), %eax
 5014 33ae 0FB6F0   		movzbl	%al, %esi
 5015 33b1 488B4DB8 		movq	-72(%rbp), %rcx
 5016 33b5 488D55F0 		leaq	-16(%rbp), %rdx
 5017 33b9 488B45C0 		movq	-64(%rbp), %rax
 5018 33bd 4989C8   		movq	%rcx, %r8
 5019 33c0 4889D1   		movq	%rdx, %rcx
 5020 33c3 BA020000 		movl	$2, %edx
 5020      00
 5021 33c8 4889C7   		movq	%rax, %rdi
 5022 33cb E8000000 		call	flReadChannel
 5022      00
 5023 33d0 8945DC   		movl	%eax, -36(%rbp)
 986:main.c        ****     	fstatus=flReadChannel(handle, chan, 4, buf, error); 
 5024              		.loc 1 986 0
 5025 33d3 8B45CC   		movl	-52(%rbp), %eax
 5026 33d6 0FB6F0   		movzbl	%al, %esi
 5027 33d9 488B4DB8 		movq	-72(%rbp), %rcx
 5028 33dd 488D55F0 		leaq	-16(%rbp), %rdx
 5029 33e1 488B45C0 		movq	-64(%rbp), %rax
 5030 33e5 4989C8   		movq	%rcx, %r8
 5031 33e8 4889D1   		movq	%rdx, %rcx
 5032 33eb BA040000 		movl	$4, %edx
 5032      00
 5033 33f0 4889C7   		movq	%rax, %rdi
 5034 33f3 E8000000 		call	flReadChannel
 5034      00
 5035 33f8 8945DC   		movl	%eax, -36(%rbp)
 987:main.c        **** 		if(fstatus!=FL_SUCCESS) { data_red_from_fpga[0]='f'; return data_red_from_fpga; }
 5036              		.loc 1 987 0
 5037 33fb 837DDC00 		cmpl	$0, -36(%rbp)
 5038 33ff 7410     		je	.L284
 5039              		.loc 1 987 0 is_stmt 0 discriminator 1
 5040 3401 488B45E0 		movq	-32(%rbp), %rax
 5041 3405 C60066   		movb	$102, (%rax)
 5042 3408 488B45E0 		movq	-32(%rbp), %rax
 5043 340c E99F0000 		jmp	.L292
 5043      00
 5044              	.L284:
 5045              	.LBB50:
 988:main.c        **** 		for(int i=0;i<4;i++){
 5046              		.loc 1 988 0 is_stmt 1
 5047 3411 C745D400 		movl	$0, -44(%rbp)
 5047      000000
 5048 3418 EB72     		jmp	.L286
 5049              	.L291:
 5050              	.LBB51:
 989:main.c        **** 				for(int j=0;j<8;j++){
 5051              		.loc 1 989 0
 5052 341a C745D800 		movl	$0, -40(%rbp)
 5052      000000
 5053 3421 EB5F     		jmp	.L287
 5054              	.L290:
 990:main.c        **** 						if((buf[i]&(1<<j)) > 0) { data_red_from_fpga[8*i+j]='1'; }
 5055              		.loc 1 990 0
 5056 3423 8B45D4   		movl	-44(%rbp), %eax
 5057 3426 4898     		cltq
 5058 3428 0FB64405 		movzbl	-16(%rbp,%rax), %eax
 5058      F0
 5059 342d 0FB6D0   		movzbl	%al, %edx
 5060 3430 8B45D8   		movl	-40(%rbp), %eax
 5061 3433 BE010000 		movl	$1, %esi
 5061      00
 5062 3438 89C1     		movl	%eax, %ecx
 5063 343a D3E6     		sall	%cl, %esi
 5064 343c 89F0     		movl	%esi, %eax
 5065 343e 21D0     		andl	%edx, %eax
 5066 3440 85C0     		testl	%eax, %eax
 5067 3442 7E1E     		jle	.L288
 5068              		.loc 1 990 0 is_stmt 0 discriminator 1
 5069 3444 8B45D4   		movl	-44(%rbp), %eax
 5070 3447 8D14C500 		leal	0(,%rax,8), %edx
 5070      000000
 5071 344e 8B45D8   		movl	-40(%rbp), %eax
 5072 3451 01D0     		addl	%edx, %eax
 5073 3453 4863D0   		movslq	%eax, %rdx
 5074 3456 488B45E0 		movq	-32(%rbp), %rax
 5075 345a 4801D0   		addq	%rdx, %rax
 5076 345d C60031   		movb	$49, (%rax)
 5077 3460 EB1C     		jmp	.L289
 5078              	.L288:
 991:main.c        **** 						else { data_red_from_fpga[8*i+j]='0'; }
 5079              		.loc 1 991 0 is_stmt 1
 5080 3462 8B45D4   		movl	-44(%rbp), %eax
 5081 3465 8D14C500 		leal	0(,%rax,8), %edx
 5081      000000
 5082 346c 8B45D8   		movl	-40(%rbp), %eax
 5083 346f 01D0     		addl	%edx, %eax
 5084 3471 4863D0   		movslq	%eax, %rdx
 5085 3474 488B45E0 		movq	-32(%rbp), %rax
 5086 3478 4801D0   		addq	%rdx, %rax
 5087 347b C60030   		movb	$48, (%rax)
 5088              	.L289:
 989:main.c        **** 				for(int j=0;j<8;j++){
 5089              		.loc 1 989 0 discriminator 2
 5090 347e 8345D801 		addl	$1, -40(%rbp)
 5091              	.L287:
 989:main.c        **** 				for(int j=0;j<8;j++){
 5092              		.loc 1 989 0 is_stmt 0 discriminator 1
 5093 3482 837DD807 		cmpl	$7, -40(%rbp)
 5094 3486 7E9B     		jle	.L290
 5095              	.LBE51:
 988:main.c        **** 				for(int j=0;j<8;j++){
 5096              		.loc 1 988 0 is_stmt 1 discriminator 2
 5097 3488 8345D401 		addl	$1, -44(%rbp)
 5098              	.L286:
 988:main.c        **** 				for(int j=0;j<8;j++){
 5099              		.loc 1 988 0 is_stmt 0 discriminator 1
 5100 348c 837DD403 		cmpl	$3, -44(%rbp)
 5101 3490 7E88     		jle	.L291
 5102              	.LBE50:
 992:main.c        **** 				}
 993:main.c        **** 		}
 994:main.c        **** 		char* dec_data_from_fpga=decrypt(data_red_from_fpga,key); 
 5103              		.loc 1 994 0 is_stmt 1
 5104 3492 488B1500 		movq	key(%rip), %rdx
 5104      000000
 5105 3499 488B45E0 		movq	-32(%rbp), %rax
 5106 349d 4889D6   		movq	%rdx, %rsi
 5107 34a0 4889C7   		movq	%rax, %rdi
 5108 34a3 E8000000 		call	decrypt
 5108      00
 5109 34a8 488945E8 		movq	%rax, -24(%rbp)
 995:main.c        **** 		return dec_data_from_fpga; 
 5110              		.loc 1 995 0
 5111 34ac 488B45E8 		movq	-24(%rbp), %rax
 5112              	.L292:
 996:main.c        ****    //     return data_red_from_fpga; 
 997:main.c        **** 
 998:main.c        **** 
 999:main.c        **** //		char* line1="r0 1"; 
1000:main.c        **** //		data_red_from_fpga[0]='\0'; 
1001:main.c        **** //			   for(int i=0;i<4;i++){
1002:main.c        **** //					   pStatus = parseLine(handle, line1, &error);
1003:main.c        **** //					   if(pStatus == FLP_SUCCESS){
1004:main.c        **** //                            //printf("read  %d th byte \n",i); 
1005:main.c        **** //							   char *red_byte=read_byte(out); 
1006:main.c        **** //							   strcat(data_red_from_fpga,red_byte); 
1007:main.c        **** //					   }
1008:main.c        **** //					   else {
1009:main.c        **** //							   i--; 
1010:main.c        **** //					   }
1011:main.c        **** //			   }
1012:main.c        **** //		data_red_from_fpga[32]='\0'; 
1013:main.c        **** ////		char* key=malloc(33); 
1014:main.c        **** ////
1015:main.c        **** ////        printf("%s\n", data_red_from_fpga); 
1016:main.c        **** //        wtt(); 
1017:main.c        **** //		return dec_data_from_fpga; 
1018:main.c        **** 
1019:main.c        **** }
 5113              		.loc 1 1019 0 discriminator 1
 5114 34b0 488B7DF8 		movq	-8(%rbp), %rdi
 5115 34b4 6448333C 		xorq	%fs:40, %rdi
 5115      25280000 
 5115      00
 5116 34bd 7405     		je	.L293
 5117              		.loc 1 1019 0 is_stmt 0
 5118 34bf E8000000 		call	__stack_chk_fail
 5118      00
 5119              	.L293:
 5120 34c4 C9       		leave
 5121              		.cfi_def_cfa 7, 8
 5122 34c5 C3       		ret
 5123              		.cfi_endproc
 5124              	.LFE27:
 5126              		.globl	read_1byte_from_fpgalink
 5128              	read_1byte_from_fpgalink:
 5129              	.LFB28:
1020:main.c        **** char * read_1byte_from_fpgalink(int chan, struct FLContext *handle, const char * error, int timeout
 5130              		.loc 1 1020 0 is_stmt 1
 5131              		.cfi_startproc
 5132 34c6 55       		pushq	%rbp
 5133              		.cfi_def_cfa_offset 16
 5134              		.cfi_offset 6, -16
 5135 34c7 4889E5   		movq	%rsp, %rbp
 5136              		.cfi_def_cfa_register 6
 5137 34ca 4883EC50 		subq	$80, %rsp
 5138 34ce 897DCC   		movl	%edi, -52(%rbp)
 5139 34d1 488975C0 		movq	%rsi, -64(%rbp)
 5140 34d5 488955B8 		movq	%rdx, -72(%rbp)
 5141 34d9 894DC8   		movl	%ecx, -56(%rbp)
 5142              		.loc 1 1020 0
 5143 34dc 64488B04 		movq	%fs:40, %rax
 5143      25280000 
 5143      00
 5144 34e5 488945F8 		movq	%rax, -8(%rbp)
 5145 34e9 31C0     		xorl	%eax, %eax
1021:main.c        **** 		char* data_red_from_fpga = malloc(33); 
 5146              		.loc 1 1021 0
 5147 34eb BF210000 		movl	$33, %edi
 5147      00
 5148 34f0 E8000000 		call	malloc
 5148      00
 5149 34f5 488945E0 		movq	%rax, -32(%rbp)
1022:main.c        **** 		uint8 buf[5];
1023:main.c        ****         bool data_is_there=0; 
 5150              		.loc 1 1023 0
 5151 34f9 C645D300 		movb	$0, -45(%rbp)
1024:main.c        ****         while(timeout>0){
 5152              		.loc 1 1024 0
 5153 34fd EB6D     		jmp	.L295
 5154              	.L297:
 5155              	.LBB52:
1025:main.c        ****        //     printf("timeout in reverse order -- %d\n" , timeout); 
1026:main.c        ****             sleep(0.05);
 5156              		.loc 1 1026 0
 5157 34ff BF000000 		movl	$0, %edi
 5157      00
 5158 3504 E8000000 		call	sleep
 5158      00
1027:main.c        ****             timeout--;
 5159              		.loc 1 1027 0
 5160 3509 836DC801 		subl	$1, -56(%rbp)
1028:main.c        ****             FLStatus fstatus = flReadChannel(handle,chan,1,buf,error); 
 5161              		.loc 1 1028 0
 5162 350d 8B45CC   		movl	-52(%rbp), %eax
 5163 3510 0FB6F0   		movzbl	%al, %esi
 5164 3513 488B4DB8 		movq	-72(%rbp), %rcx
 5165 3517 488D55F0 		leaq	-16(%rbp), %rdx
 5166 351b 488B45C0 		movq	-64(%rbp), %rax
 5167 351f 4989C8   		movq	%rcx, %r8
 5168 3522 4889D1   		movq	%rdx, %rcx
 5169 3525 BA010000 		movl	$1, %edx
 5169      00
 5170 352a 4889C7   		movq	%rax, %rdi
 5171 352d E8000000 		call	flReadChannel
 5171      00
 5172 3532 8945DC   		movl	%eax, -36(%rbp)
1029:main.c        ****             if(buf[0]!=0) {
 5173              		.loc 1 1029 0
 5174 3535 0FB645F0 		movzbl	-16(%rbp), %eax
 5175 3539 84C0     		testb	%al, %al
 5176 353b 742F     		je	.L295
1030:main.c        ****                 data_is_there=1; 
 5177              		.loc 1 1030 0
 5178 353d C645D301 		movb	$1, -45(%rbp)
1031:main.c        ****                 fstatus = flReadChannel(handle,chan,3,buf+1,error); 
 5179              		.loc 1 1031 0
 5180 3541 488D45F0 		leaq	-16(%rbp), %rax
 5181 3545 4883C001 		addq	$1, %rax
 5182 3549 8B55CC   		movl	-52(%rbp), %edx
 5183 354c 0FB6F2   		movzbl	%dl, %esi
 5184 354f 488B55B8 		movq	-72(%rbp), %rdx
 5185 3553 488B7DC0 		movq	-64(%rbp), %rdi
 5186 3557 4989D0   		movq	%rdx, %r8
 5187 355a 4889C1   		movq	%rax, %rcx
 5188 355d BA030000 		movl	$3, %edx
 5188      00
 5189 3562 E8000000 		call	flReadChannel
 5189      00
 5190 3567 8945DC   		movl	%eax, -36(%rbp)
1032:main.c        ****                 break; 
 5191              		.loc 1 1032 0
 5192 356a EB06     		jmp	.L296
 5193              	.L295:
 5194              	.LBE52:
1024:main.c        ****        //     printf("timeout in reverse order -- %d\n" , timeout); 
 5195              		.loc 1 1024 0
 5196 356c 837DC800 		cmpl	$0, -56(%rbp)
 5197 3570 7F8D     		jg	.L297
 5198              	.L296:
1033:main.c        ****             }
1034:main.c        ****         }
1035:main.c        ****         if(!data_is_there) { data_red_from_fpga[0]='f';  return data_red_from_fpga; }
 5199              		.loc 1 1035 0
 5200 3572 0FB645D3 		movzbl	-45(%rbp), %eax
 5201 3576 83F001   		xorl	$1, %eax
 5202 3579 84C0     		testb	%al, %al
 5203 357b 7410     		je	.L298
 5204              		.loc 1 1035 0 is_stmt 0 discriminator 1
 5205 357d 488B45E0 		movq	-32(%rbp), %rax
 5206 3581 C60066   		movb	$102, (%rax)
 5207 3584 488B45E0 		movq	-32(%rbp), %rax
 5208 3588 E99F0000 		jmp	.L306
 5208      00
 5209              	.L298:
 5210              	.LBB53:
1036:main.c        **** 		for(int i=0;i<4;i++){
 5211              		.loc 1 1036 0 is_stmt 1
 5212 358d C745D400 		movl	$0, -44(%rbp)
 5212      000000
 5213 3594 EB72     		jmp	.L300
 5214              	.L305:
 5215              	.LBB54:
1037:main.c        **** 				for(int j=0;j<8;j++){
 5216              		.loc 1 1037 0
 5217 3596 C745D800 		movl	$0, -40(%rbp)
 5217      000000
 5218 359d EB5F     		jmp	.L301
 5219              	.L304:
1038:main.c        **** 						if((buf[i]&(1<<j)) > 0) { data_red_from_fpga[8*i+j]='1'; }
 5220              		.loc 1 1038 0
 5221 359f 8B45D4   		movl	-44(%rbp), %eax
 5222 35a2 4898     		cltq
 5223 35a4 0FB64405 		movzbl	-16(%rbp,%rax), %eax
 5223      F0
 5224 35a9 0FB6D0   		movzbl	%al, %edx
 5225 35ac 8B45D8   		movl	-40(%rbp), %eax
 5226 35af BE010000 		movl	$1, %esi
 5226      00
 5227 35b4 89C1     		movl	%eax, %ecx
 5228 35b6 D3E6     		sall	%cl, %esi
 5229 35b8 89F0     		movl	%esi, %eax
 5230 35ba 21D0     		andl	%edx, %eax
 5231 35bc 85C0     		testl	%eax, %eax
 5232 35be 7E1E     		jle	.L302
 5233              		.loc 1 1038 0 is_stmt 0 discriminator 1
 5234 35c0 8B45D4   		movl	-44(%rbp), %eax
 5235 35c3 8D14C500 		leal	0(,%rax,8), %edx
 5235      000000
 5236 35ca 8B45D8   		movl	-40(%rbp), %eax
 5237 35cd 01D0     		addl	%edx, %eax
 5238 35cf 4863D0   		movslq	%eax, %rdx
 5239 35d2 488B45E0 		movq	-32(%rbp), %rax
 5240 35d6 4801D0   		addq	%rdx, %rax
 5241 35d9 C60031   		movb	$49, (%rax)
 5242 35dc EB1C     		jmp	.L303
 5243              	.L302:
1039:main.c        **** 						else { data_red_from_fpga[8*i+j]='0'; }
 5244              		.loc 1 1039 0 is_stmt 1
 5245 35de 8B45D4   		movl	-44(%rbp), %eax
 5246 35e1 8D14C500 		leal	0(,%rax,8), %edx
 5246      000000
 5247 35e8 8B45D8   		movl	-40(%rbp), %eax
 5248 35eb 01D0     		addl	%edx, %eax
 5249 35ed 4863D0   		movslq	%eax, %rdx
 5250 35f0 488B45E0 		movq	-32(%rbp), %rax
 5251 35f4 4801D0   		addq	%rdx, %rax
 5252 35f7 C60030   		movb	$48, (%rax)
 5253              	.L303:
1037:main.c        **** 				for(int j=0;j<8;j++){
 5254              		.loc 1 1037 0 discriminator 2
 5255 35fa 8345D801 		addl	$1, -40(%rbp)
 5256              	.L301:
1037:main.c        **** 				for(int j=0;j<8;j++){
 5257              		.loc 1 1037 0 is_stmt 0 discriminator 1
 5258 35fe 837DD807 		cmpl	$7, -40(%rbp)
 5259 3602 7E9B     		jle	.L304
 5260              	.LBE54:
1036:main.c        **** 				for(int j=0;j<8;j++){
 5261              		.loc 1 1036 0 is_stmt 1 discriminator 2
 5262 3604 8345D401 		addl	$1, -44(%rbp)
 5263              	.L300:
1036:main.c        **** 				for(int j=0;j<8;j++){
 5264              		.loc 1 1036 0 is_stmt 0 discriminator 1
 5265 3608 837DD403 		cmpl	$3, -44(%rbp)
 5266 360c 7E88     		jle	.L305
 5267              	.LBE53:
1040:main.c        **** 				}
1041:main.c        **** 		}
1042:main.c        **** 		char* dec_data_from_fpga=decrypt(data_red_from_fpga,key); 
 5268              		.loc 1 1042 0 is_stmt 1
 5269 360e 488B1500 		movq	key(%rip), %rdx
 5269      000000
 5270 3615 488B45E0 		movq	-32(%rbp), %rax
 5271 3619 4889D6   		movq	%rdx, %rsi
 5272 361c 4889C7   		movq	%rax, %rdi
 5273 361f E8000000 		call	decrypt
 5273      00
 5274 3624 488945E8 		movq	%rax, -24(%rbp)
1043:main.c        **** 		return dec_data_from_fpga; 
 5275              		.loc 1 1043 0
 5276 3628 488B45E8 		movq	-24(%rbp), %rax
 5277              	.L306:
1044:main.c        ****  
1045:main.c        **** }
 5278              		.loc 1 1045 0 discriminator 1
 5279 362c 488B4DF8 		movq	-8(%rbp), %rcx
 5280 3630 6448330C 		xorq	%fs:40, %rcx
 5280      25280000 
 5280      00
 5281 3639 7405     		je	.L307
 5282              		.loc 1 1045 0 is_stmt 0
 5283 363b E8000000 		call	__stack_chk_fail
 5283      00
 5284              	.L307:
 5285 3640 C9       		leave
 5286              		.cfi_def_cfa 7, 8
 5287 3641 C3       		ret
 5288              		.cfi_endproc
 5289              	.LFE28:
 5291              		.section	.rodata
 5292              	.LC64:
 5293 0453 72656365 		.string	"received ack is %s\n"
 5293      69766564 
 5293      2061636B 
 5293      20697320 
 5293      25730A00 
 5294              		.text
 5295              		.globl	receive_ack
 5297              	receive_ack:
 5298              	.LFB29:
1046:main.c        **** 
1047:main.c        **** 
1048:main.c        **** char* receive_ack(int chan, struct FLContext *handle, const char * error, int timeout) {
 5299              		.loc 1 1048 0 is_stmt 1
 5300              		.cfi_startproc
 5301 3642 55       		pushq	%rbp
 5302              		.cfi_def_cfa_offset 16
 5303              		.cfi_offset 6, -16
 5304 3643 4889E5   		movq	%rsp, %rbp
 5305              		.cfi_def_cfa_register 6
 5306 3646 4883EC30 		subq	$48, %rsp
 5307 364a 897DEC   		movl	%edi, -20(%rbp)
 5308 364d 488975E0 		movq	%rsi, -32(%rbp)
 5309 3651 488955D8 		movq	%rdx, -40(%rbp)
 5310 3655 894DE8   		movl	%ecx, -24(%rbp)
1049:main.c        **** 			char * data_red_from_fpga=read_4byte_from_fpga(chan,handle , error,timeout); 
 5311              		.loc 1 1049 0
 5312 3658 8B4DE8   		movl	-24(%rbp), %ecx
 5313 365b 488B55D8 		movq	-40(%rbp), %rdx
 5314 365f 488B75E0 		movq	-32(%rbp), %rsi
 5315 3663 8B45EC   		movl	-20(%rbp), %eax
 5316 3666 89C7     		movl	%eax, %edi
 5317 3668 E8000000 		call	read_4byte_from_fpga
 5317      00
 5318 366d 488945F8 		movq	%rax, -8(%rbp)
1050:main.c        ****             printf("received ack is %s\n",data_red_from_fpga);  
 5319              		.loc 1 1050 0
 5320 3671 488B45F8 		movq	-8(%rbp), %rax
 5321 3675 4889C6   		movq	%rax, %rsi
 5322 3678 BF000000 		movl	$.LC64, %edi
 5322      00
 5323 367d B8000000 		movl	$0, %eax
 5323      00
 5324 3682 E8000000 		call	printf
 5324      00
1051:main.c        **** 			if(data_red_from_fpga[0]=='f') return data_red_from_fpga; 
 5325              		.loc 1 1051 0
 5326 3687 488B45F8 		movq	-8(%rbp), %rax
 5327 368b 0FB600   		movzbl	(%rax), %eax
 5328 368e 3C66     		cmpb	$102, %al
 5329 3690 7506     		jne	.L309
 5330              		.loc 1 1051 0 is_stmt 0 discriminator 1
 5331 3692 488B45F8 		movq	-8(%rbp), %rax
 5332 3696 EB4A     		jmp	.L310
 5333              	.L309:
 5334              	.LBB55:
1052:main.c        **** 			for(int i=0;i<32;i++){
 5335              		.loc 1 1052 0 is_stmt 1
 5336 3698 C745F400 		movl	$0, -12(%rbp)
 5336      000000
 5337 369f EB37     		jmp	.L311
 5338              	.L313:
1053:main.c        **** 					if(data_red_from_fpga[i]!=ack1[i]) { data_red_from_fpga[0]='f';  return data_red_from_fpga; }
 5339              		.loc 1 1053 0
 5340 36a1 8B45F4   		movl	-12(%rbp), %eax
 5341 36a4 4863D0   		movslq	%eax, %rdx
 5342 36a7 488B45F8 		movq	-8(%rbp), %rax
 5343 36ab 4801D0   		addq	%rdx, %rax
 5344 36ae 0FB610   		movzbl	(%rax), %edx
 5345 36b1 488B0D00 		movq	ack1(%rip), %rcx
 5345      000000
 5346 36b8 8B45F4   		movl	-12(%rbp), %eax
 5347 36bb 4898     		cltq
 5348 36bd 4801C8   		addq	%rcx, %rax
 5349 36c0 0FB600   		movzbl	(%rax), %eax
 5350 36c3 38C2     		cmpb	%al, %dl
 5351 36c5 740D     		je	.L312
 5352              		.loc 1 1053 0 is_stmt 0 discriminator 1
 5353 36c7 488B45F8 		movq	-8(%rbp), %rax
 5354 36cb C60066   		movb	$102, (%rax)
 5355 36ce 488B45F8 		movq	-8(%rbp), %rax
 5356 36d2 EB0E     		jmp	.L310
 5357              	.L312:
1052:main.c        **** 			for(int i=0;i<32;i++){
 5358              		.loc 1 1052 0 is_stmt 1 discriminator 2
 5359 36d4 8345F401 		addl	$1, -12(%rbp)
 5360              	.L311:
1052:main.c        **** 			for(int i=0;i<32;i++){
 5361              		.loc 1 1052 0 is_stmt 0 discriminator 1
 5362 36d8 837DF41F 		cmpl	$31, -12(%rbp)
 5363 36dc 7EC3     		jle	.L313
 5364              	.LBE55:
1054:main.c        **** 			}
1055:main.c        ****             return data_red_from_fpga; 
 5365              		.loc 1 1055 0 is_stmt 1
 5366 36de 488B45F8 		movq	-8(%rbp), %rax
 5367              	.L310:
1056:main.c        **** 
1057:main.c        **** }
 5368              		.loc 1 1057 0
 5369 36e2 C9       		leave
 5370              		.cfi_def_cfa 7, 8
 5371 36e3 C3       		ret
 5372              		.cfi_endproc
 5373              	.LFE29:
 5375              		.globl	send_ack
 5377              	send_ack:
 5378              	.LFB30:
1058:main.c        **** 
1059:main.c        **** char send_ack(int chan, struct FLContext *handle, const char * error, int timeout){
 5379              		.loc 1 1059 0
 5380              		.cfi_startproc
 5381 36e4 55       		pushq	%rbp
 5382              		.cfi_def_cfa_offset 16
 5383              		.cfi_offset 6, -16
 5384 36e5 4889E5   		movq	%rsp, %rbp
 5385              		.cfi_def_cfa_register 6
 5386 36e8 4883EC40 		subq	$64, %rsp
 5387 36ec 897DDC   		movl	%edi, -36(%rbp)
 5388 36ef 488975D0 		movq	%rsi, -48(%rbp)
 5389 36f3 488955C8 		movq	%rdx, -56(%rbp)
 5390 36f7 894DD8   		movl	%ecx, -40(%rbp)
1060:main.c        **** 		char* byte_reversed = malloc(33);
 5391              		.loc 1 1060 0
 5392 36fa BF210000 		movl	$33, %edi
 5392      00
 5393 36ff E8000000 		call	malloc
 5393      00
 5394 3704 488945F8 		movq	%rax, -8(%rbp)
 5395              	.LBB56:
1061:main.c        ****         for(int i=0; i< 4; i++)
 5396              		.loc 1 1061 0
 5397 3708 C745F000 		movl	$0, -16(%rbp)
 5397      000000
 5398 370f EB4D     		jmp	.L315
 5399              	.L318:
 5400              	.LBB57:
1062:main.c        ****             for(int j= 0; j<8; j++)
 5401              		.loc 1 1062 0
 5402 3711 C745F400 		movl	$0, -12(%rbp)
 5402      000000
 5403 3718 EB3A     		jmp	.L316
 5404              	.L317:
1063:main.c        ****                 byte_reversed[i*8 +j] = ack2[i*8 + 7 - j];
 5405              		.loc 1 1063 0 discriminator 3
 5406 371a 8B45F0   		movl	-16(%rbp), %eax
 5407 371d 8D14C500 		leal	0(,%rax,8), %edx
 5407      000000
 5408 3724 8B45F4   		movl	-12(%rbp), %eax
 5409 3727 01D0     		addl	%edx, %eax
 5410 3729 4863D0   		movslq	%eax, %rdx
 5411 372c 488B45F8 		movq	-8(%rbp), %rax
 5412 3730 4801C2   		addq	%rax, %rdx
 5413 3733 488B0D00 		movq	ack2(%rip), %rcx
 5413      000000
 5414 373a 8B45F0   		movl	-16(%rbp), %eax
 5415 373d C1E003   		sall	$3, %eax
 5416 3740 83C007   		addl	$7, %eax
 5417 3743 2B45F4   		subl	-12(%rbp), %eax
 5418 3746 4898     		cltq
 5419 3748 4801C8   		addq	%rcx, %rax
 5420 374b 0FB600   		movzbl	(%rax), %eax
 5421 374e 8802     		movb	%al, (%rdx)
1062:main.c        ****             for(int j= 0; j<8; j++)
 5422              		.loc 1 1062 0 discriminator 3
 5423 3750 8345F401 		addl	$1, -12(%rbp)
 5424              	.L316:
1062:main.c        ****             for(int j= 0; j<8; j++)
 5425              		.loc 1 1062 0 is_stmt 0 discriminator 1
 5426 3754 837DF407 		cmpl	$7, -12(%rbp)
 5427 3758 7EC0     		jle	.L317
 5428              	.LBE57:
1061:main.c        ****         for(int i=0; i< 4; i++)
 5429              		.loc 1 1061 0 is_stmt 1 discriminator 2
 5430 375a 8345F001 		addl	$1, -16(%rbp)
 5431              	.L315:
1061:main.c        ****         for(int i=0; i< 4; i++)
 5432              		.loc 1 1061 0 is_stmt 0 discriminator 1
 5433 375e 837DF003 		cmpl	$3, -16(%rbp)
 5434 3762 7EAD     		jle	.L318
 5435              	.LBE56:
1064:main.c        ****         byte_reversed[32] = '\0';
 5436              		.loc 1 1064 0 is_stmt 1
 5437 3764 488B45F8 		movq	-8(%rbp), %rax
 5438 3768 4883C020 		addq	$32, %rax
 5439 376c C60000   		movb	$0, (%rax)
1065:main.c        **** 		char write_status=write_4byte_to_board(chan,byte_reversed,handle,error,timeout); 
 5440              		.loc 1 1065 0
 5441 376f 8B7DD8   		movl	-40(%rbp), %edi
 5442 3772 488B4DC8 		movq	-56(%rbp), %rcx
 5443 3776 488B55D0 		movq	-48(%rbp), %rdx
 5444 377a 488B75F8 		movq	-8(%rbp), %rsi
 5445 377e 8B45DC   		movl	-36(%rbp), %eax
 5446 3781 4189F8   		movl	%edi, %r8d
 5447 3784 89C7     		movl	%eax, %edi
 5448 3786 E8000000 		call	write_4byte_to_board
 5448      00
 5449 378b 8845EF   		movb	%al, -17(%rbp)
1066:main.c        **** 		return write_status; 
 5450              		.loc 1 1066 0
 5451 378e 0FB645EF 		movzbl	-17(%rbp), %eax
1067:main.c        **** 
1068:main.c        **** }
 5452              		.loc 1 1068 0
 5453 3792 C9       		leave
 5454              		.cfi_def_cfa 7, 8
 5455 3793 C3       		ret
 5456              		.cfi_endproc
 5457              	.LFE30:
 5459              		.globl	wtt
 5461              	wtt:
 5462              	.LFB31:
1069:main.c        **** 
1070:main.c        **** 		
1071:main.c        **** 
1072:main.c        **** void wtt(){
 5463              		.loc 1 1072 0
 5464              		.cfi_startproc
 5465 3794 55       		pushq	%rbp
 5466              		.cfi_def_cfa_offset 16
 5467              		.cfi_offset 6, -16
 5468 3795 4889E5   		movq	%rsp, %rbp
 5469              		.cfi_def_cfa_register 6
1073:main.c        **** //    int n=1000000000; 
1074:main.c        **** //    int yyy=0; 
1075:main.c        **** //    for(int i=0; i<n; i++) yyy++; 
1076:main.c        **** //    for(int i=0; i<n; i++) yyy++; 
1077:main.c        **** //    for(int i=0; i<n; i++) yyy++; 
1078:main.c        **** //    for(int i=0; i<n; i++) yyy++; 
1079:main.c        ****     usleep(100000); 
 5470              		.loc 1 1079 0
 5471 3798 BFA08601 		movl	$100000, %edi
 5471      00
 5472 379d B8000000 		movl	$0, %eax
 5472      00
 5473 37a2 E8000000 		call	usleep
 5473      00
1080:main.c        **** }
 5474              		.loc 1 1080 0
 5475 37a7 90       		nop
 5476 37a8 5D       		popq	%rbp
 5477              		.cfi_def_cfa 7, 8
 5478 37a9 C3       		ret
 5479              		.cfi_endproc
 5480              	.LFE31:
 5482              		.section	.rodata
 5483 0467 00       		.align 8
 5484              	.LC65:
 5485 0468 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 5485      20202020 
 5485      20202020 
 5485      76656E64 
 5485      6F722049 
 5486              	.LC66:
 5487 049d 3C564944 		.string	"<VID:PID>"
 5487      3A504944 
 5487      3E00
 5488              	.LC67:
 5489 04a7 69767000 		.string	"ivp"
 5490              	.LC68:
 5491 04ab 6900     		.string	"i"
 5492 04ad 000000   		.align 8
 5493              	.LC69:
 5494 04b0 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 5494      20202056 
 5494      49442C20 
 5494      50494420 
 5494      616E6420 
 5495              	.LC70:
 5496 04e5 3C564944 		.string	"<VID:PID[:DID]>"
 5496      3A504944 
 5496      5B3A4449 
 5496      445D3E00 
 5497              	.LC71:
 5498 04f5 767000   		.string	"vp"
 5499              	.LC72:
 5500 04f8 7600     		.string	"v"
 5501 04fa 00000000 		.align 8
 5501      0000
 5502              	.LC73:
 5503 0500 20202020 		.string	"       For running the program and giving the input file address"
 5503      20202046 
 5503      6F722072 
 5503      756E6E69 
 5503      6E672074 
 5504              	.LC74:
 5505 0541 3C46696C 		.string	"<File>"
 5505      653E00
 5506              	.LC75:
 5507 0548 727000   		.string	"rp"
 5508 054b 00000000 		.align 8
 5508      00
 5509              	.LC76:
 5510 0550 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 5510      20202020 
 5510      6669726D 
 5510      77617265 
 5510      20746F20 
 5511              	.LC77:
 5512 057d 3C666972 		.string	"<firmware.hex>"
 5512      6D776172 
 5512      652E6865 
 5512      783E00
 5513              	.LC78:
 5514 058c 667700   		.string	"fw"
 5515              	.LC79:
 5516 058f 6600     		.string	"f"
 5517 0591 00000000 		.align 8
 5517      000000
 5518              	.LC80:
 5519 0598 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 5519      642F7772 
 5519      69746520 
 5519      64696769 
 5519      74616C20 
 5520              	.LC81:
 5521 05c5 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 5521      4366675B 
 5521      2C626974 
 5521      4366675D 
 5521      2A3E00
 5522              	.LC82:
 5523 05d8 706F7274 		.string	"ports"
 5523      7300
 5524              	.LC83:
 5525 05de 6400     		.string	"d"
 5526              	.LC84:
 5527 05e0 20202020 		.string	"         query the JTAG chain"
 5527      20202020 
 5527      20717565 
 5527      72792074 
 5527      6865204A 
 5528              	.LC85:
 5529 05fe 3C6A7461 		.string	"<jtagBits>"
 5529      67426974 
 5529      733E00
 5530              	.LC86:
 5531 0609 71756572 		.string	"query"
 5531      7900
 5532              	.LC87:
 5533 060f 7100     		.string	"q"
 5534              	.LC88:
 5535 0611 20202020 		.string	"         program a device"
 5535      20202020 
 5535      2070726F 
 5535      6772616D 
 5535      20612064 
 5536              	.LC89:
 5537 062b 3C636F6E 		.string	"<config>"
 5537      6669673E 
 5537      00
 5538              	.LC90:
 5539 0634 70726F67 		.string	"program"
 5539      72616D00 
 5540              	.LC91:
 5541 063c 7000     		.string	"p"
 5542 063e 0000     		.align 8
 5543              	.LC92:
 5544 0640 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 5544      20202020 
 5544      77686963 
 5544      6820636F 
 5544      6D6D2063 
 5545              	.LC93:
 5546 0674 3C636F6E 		.string	"<conduit>"
 5546      64756974 
 5546      3E00
 5547              	.LC94:
 5548 067e 636F6E64 		.string	"conduit"
 5548      75697400 
 5549              	.LC95:
 5550 0686 6300     		.string	"c"
 5551              		.align 8
 5552              	.LC96:
 5553 0688 20202020 		.string	"    a series of CommFPGA actions"
 5553      61207365 
 5553      72696573 
 5553      206F6620 
 5553      436F6D6D 
 5554              	.LC97:
 5555 06a9 3C616374 		.string	"<actionString>"
 5555      696F6E53 
 5555      7472696E 
 5555      673E00
 5556              	.LC98:
 5557 06b8 61637469 		.string	"action"
 5557      6F6E00
 5558              	.LC99:
 5559 06bf 6100     		.string	"a"
 5560 06c1 00000000 		.align 8
 5560      000000
 5561              	.LC100:
 5562 06c8 20202020 		.string	"                    start up an interactive CommFPGA session"
 5562      20202020 
 5562      20202020 
 5562      20202020 
 5562      20202020 
 5563              	.LC101:
 5564 0705 7368656C 		.string	"shell"
 5564      6C00
 5565              	.LC102:
 5566 070b 7300     		.string	"s"
 5567 070d 000000   		.align 8
 5568              	.LC103:
 5569 0710 20202020 		.string	"                enable benchmarking & checksumming"
 5569      20202020 
 5569      20202020 
 5569      20202020 
 5569      656E6162 
 5570              	.LC104:
 5571 0743 62656E63 		.string	"benchmark"
 5571      686D6172 
 5571      6B00
 5572              	.LC105:
 5573 074d 6200     		.string	"b"
 5574 074f 00       		.align 8
 5575              	.LC106:
 5576 0750 20202020 		.string	"                    reset the bulk endpoints"
 5576      20202020 
 5576      20202020 
 5576      20202020 
 5576      20202020 
 5577              	.LC107:
 5578 077d 72657365 		.string	"reset"
 5578      7400
 5579 0783 00000000 		.align 8
 5579      00
 5580              	.LC108:
 5581 0788 20202077 		.string	"   write data from channel ch to file"
 5581      72697465 
 5581      20646174 
 5581      61206672 
 5581      6F6D2063 
 5582              	.LC109:
 5583 07ae 3C63683A 		.string	"<ch:file.bin>"
 5583      66696C65 
 5583      2E62696E 
 5583      3E00
 5584              	.LC110:
 5585 07bc 64756D70 		.string	"dumploop"
 5585      6C6F6F70 
 5585      00
 5586              	.LC111:
 5587 07c5 6C00     		.string	"l"
 5588 07c7 00       		.align 8
 5589              	.LC112:
 5590 07c8 20202020 		.string	"                     print this help and exit"
 5590      20202020 
 5590      20202020 
 5590      20202020 
 5590      20202020 
 5591              	.LC113:
 5592 07f6 68656C70 		.string	"help"
 5592      00
 5593              	.LC114:
 5594 07fb 6800     		.string	"h"
 5595 07fd 000000   		.align 8
 5596              	.LC115:
 5597 0800 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 5597      72697465 
 5597      20666972 
 5597      6D776172 
 5597      6520746F 
 5598              	.LC116:
 5599 0827 3C737464 		.string	"<std|fw.hex|fw.iic>"
 5599      7C66772E 
 5599      6865787C 
 5599      66772E69 
 5599      69633E00 
 5600              	.LC117:
 5601 083b 65657072 		.string	"eeprom"
 5601      6F6D00
 5602 0842 00000000 		.align 8
 5602      0000
 5603              	.LC118:
 5604 0848 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 5604      20626163 
 5604      6B757020 
 5604      46583227 
 5604      73204545 
 5605              	.LC119:
 5606 0873 3C6B6269 		.string	"<kbitSize:fw.iic>"
 5606      7453697A 
 5606      653A6677 
 5606      2E696963 
 5606      3E00
 5607              	.LC120:
 5608 0885 6261636B 		.string	"backup"
 5608      757000
 5609              	.LC121:
 5610 088c 666C636C 		.string	"flcli"
 5610      6900
 5611              	.LC122:
 5612 0892 25733A20 		.string	"%s: insufficient memory\n"
 5612      696E7375 
 5612      66666963 
 5612      69656E74 
 5612      206D656D 
 5613 08ab 00000000 		.align 8
 5613      00
 5614              	.LC123:
 5615 08b0 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 5615      4C696E6B 
 5615      20436F6D 
 5615      6D616E64 
 5615      2D4C696E 
 5616              	.LC124:
 5617 0904 0A00     		.string	"\n"
 5618 0906 0000     		.align 8
 5619              	.LC125:
 5620 0908 0A496E74 		.string	"\nInteract with an FPGALink device.\n"
 5620      65726163 
 5620      74207769 
 5620      74682061 
 5620      6E204650 
 5621              	.LC126:
 5622 092c 2020252D 		.string	"  %-10s %s\n"
 5622      31307320 
 5622      25730A00 
 5623              		.align 8
 5624              	.LC127:
 5625 0938 54727920 		.string	"Try '%s --help' for more information.\n"
 5625      27257320 
 5625      2D2D6865 
 5625      6C702720 
 5625      666F7220 
 5626 095f 00       		.align 8
 5627              	.LC128:
 5628 0960 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 5628      6D707469 
 5628      6E672074 
 5628      6F206F70 
 5628      656E2063 
 5629              	.LC129:
 5630 0998 4C6F6164 		.string	"Loading firmware into %s...\n"
 5630      696E6720 
 5630      6669726D 
 5630      77617265 
 5630      20696E74 
 5631              	.LC130:
 5632 09b5 41776169 		.string	"Awaiting renumeration"
 5632      74696E67 
 5632      2072656E 
 5632      756D6572 
 5632      6174696F 
 5633 09cb 00000000 		.align 8
 5633      00
 5634              	.LC131:
 5635 09d0 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 5635      4C696E6B 
 5635      20646576 
 5635      69636520 
 5635      64696420 
 5636 0a03 00000000 		.align 8
 5636      00
 5637              	.LC132:
 5638 0a08 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 5638      6D707469 
 5638      6E672074 
 5638      6F206F70 
 5638      656E2063 
 5639 0a45 000000   		.align 8
 5640              	.LC133:
 5641 0a48 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 5641      64206E6F 
 5641      74206F70 
 5641      656E2046 
 5641      5047414C 
 5642 0a92 00000000 		.align 8
 5642      0000
 5643              	.LC134:
 5644 0a98 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 5644      65637465 
 5644      6420746F 
 5644      20465047 
 5644      414C696E 
 5645              	.LC135:
 5646 0ae7 73746400 		.string	"std"
 5647 0aeb 00000000 		.align 8
 5647      00
 5648              	.LC136:
 5649 0af0 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM..."
 5649      696E6720 
 5649      74686520 
 5649      7374616E 
 5649      64617264 
 5650 0b2e 0000     		.align 8
 5651              	.LC137:
 5652 0b30 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 5652      696E6720 
 5652      63757374 
 5652      6F6D2046 
 5652      5047414C 
 5653 0b71 00000000 		.align 8
 5653      000000
 5654              	.LC138:
 5655 0b78 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 5655      696E7661 
 5655      6C696420 
 5655      61726775 
 5655      6D656E74 
 5656 0bb3 00000000 		.align 8
 5656      00
 5657              	.LC139:
 5658 0bb8 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 5658      6E672061 
 5658      20626163 
 5658      6B757020 
 5658      6F662025 
 5659              	.LC140:
 5660 0bf3 436F6E66 		.string	"Configuring ports..."
 5660      69677572 
 5660      696E6720 
 5660      706F7274 
 5660      732E2E2E 
 5661              	.LC141:
 5662 0c08 25303858 		.string	"%08X"
 5662      00
 5663 0c0d 000000   		.align 8
 5664              	.LC142:
 5665 0c10 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 5665      6261636B 
 5665      3A202020 
 5665      32382020 
 5665      20323420 
 5666              	.LC143:
 5667 0c50 20257300 		.string	" %s"
 5668              	.LC144:
 5669 0c54 20202573 		.string	"  %s"
 5669      00
 5670              	.LC145:
 5671 0c59 2025730A 		.string	" %s\n"
 5671      00
 5672 0c5e 0000     		.align 8
 5673              	.LC146:
 5674 0c60 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 5674      46504741 
 5674      4C696E6B 
 5674      20646576 
 5674      69636520 
 5675              	.LC147:
 5676 0c9d 20203078 		.string	"  0x%08X\n"
 5676      25303858 
 5676      0A00
 5677 0ca7 00       		.align 8
 5678              	.LC148:
 5679 0ca8 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 5679      46504741 
 5679      4C696E6B 
 5679      20646576 
 5679      69636520 
 5680              		.align 8
 5681              	.LC149:
 5682 0d00 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 5682      20636861 
 5682      696E2073 
 5682      63616E20 
 5682      72657175 
 5683              	.LC150:
 5684 0d4f 50726F67 		.string	"Programming device..."
 5684      72616D6D 
 5684      696E6720 
 5684      64657669 
 5684      63652E2E 
 5685 0d65 000000   		.align 8
 5686              	.LC151:
 5687 0d68 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 5687      72616D20 
 5687      6F706572 
 5687      6174696F 
 5687      6E207265 
 5688              		.align 8
 5689              	.LC152:
 5690 0db0 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 5690      7574696E 
 5690      6720436F 
 5690      6D6D4650 
 5690      47412061 
 5691 0de5 000000   		.align 8
 5692              	.LC153:
 5693 0de8 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 5693      46504741 
 5693      4C696E6B 
 5693      20646576 
 5693      69636520 
 5694 0e34 00000000 		.align 8
 5695              	.LC154:
 5696 0e38 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 5696      6F6E2072 
 5696      65717565 
 5696      73746564 
 5696      20627574 
 5697 0e75 000000   		.align 8
 5698              	.LC155:
 5699 0e78 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 5699      696E7661 
 5699      6C696420 
 5699      61726775 
 5699      6D656E74 
 5700 0eb4 00000000 		.align 8
 5701              	.LC156:
 5702 0eb8 436F7079 		.string	"Copying from channel %lu to %s"
 5702      696E6720 
 5702      66726F6D 
 5702      20636861 
 5702      6E6E656C 
 5703              	.LC157:
 5704 0ed7 0A436175 		.string	"\nCaught SIGINT, quitting..."
 5704      67687420 
 5704      53494749 
 5704      4E542C20 
 5704      71756974 
 5705              	.LC158:
 5706 0ef3 25642C20 		.string	"%d, %d, %d, %d, %d\n"
 5706      25642C20 
 5706      25642C20 
 5706      25642C20 
 5706      25640A00 
 5707 0f07 00       		.align 8
 5708              	.LC159:
 5709 0f08 61747465 		.string	"attempting to read coordinates from  channel %d\n"
 5709      6D707469 
 5709      6E672074 
 5709      6F207265 
 5709      61642063 
 5710 0f39 00000000 		.align 8
 5710      000000
 5711              	.LC160:
 5712 0f40 72656420 		.string	"red coordinates %s from channel %d\n"
 5712      636F6F72 
 5712      64696E61 
 5712      74657320 
 5712      25732066 
 5713              	.LC161:
 5714 0f64 6661696C 		.string	"failed to coordinates"
 5714      65642074 
 5714      6F20636F 
 5714      6F726469 
 5714      6E617465 
 5715 0f7a 00000000 		.align 8
 5715      0000
 5716              	.LC162:
 5717 0f80 61747465 		.string	"attempting to write coordinates at channel %d\n"
 5717      6D707469 
 5717      6E672074 
 5717      6F207772 
 5717      69746520 
 5718 0faf 00       		.align 8
 5719              	.LC163:
 5720 0fb0 77726974 		.string	"write failed , continuing for next channel"
 5720      65206661 
 5720      696C6564 
 5720      202C2063 
 5720      6F6E7469 
 5721              	.LC164:
 5722 0fdb 61747465 		.string	"attempting to receive ack"
 5722      6D707469 
 5722      6E672074 
 5722      6F207265 
 5722      63656976 
 5723 0ff5 000000   		.align 8
 5724              	.LC165:
 5725 0ff8 66697273 		.string	"first ack was incorrect , attempting after 5 seconds"
 5725      74206163 
 5725      6B207761 
 5725      7320696E 
 5725      636F7272 
 5726 102d 000000   		.align 8
 5727              	.LC166:
 5728 1030 61747465 		.string	"attempting to receive ack for second time"
 5728      6D707469 
 5728      6E672074 
 5728      6F207265 
 5728      63656976 
 5729              	.LC167:
 5730 105a 7365636F 		.string	"second ack was also incorect"
 5730      6E642061 
 5730      636B2077 
 5730      61732061 
 5730      6C736F20 
 5731 1077 00       		.align 8
 5732              	.LC168:
 5733 1078 72656365 		.string	"received coordinates correctly and now breaking out of this for loop "
 5733      69766564 
 5733      20636F6F 
 5733      7264696E 
 5733      61746573 
 5734 10be 0000     		.align 8
 5735              	.LC169:
 5736 10c0 7820636F 		.string	"x coordinate is %d and y coordinate is %d\n"
 5736      6F726469 
 5736      6E617465 
 5736      20697320 
 5736      25642061 
 5737              	.LC170:
 5738 10eb 74726163 		.string	"track data is %s\n"
 5738      6B206461 
 5738      74612069 
 5738      73202573 
 5738      0A00
 5739              	.LC172:
 5740 10fd 252E3966 		.string	"%.9f sec\n"
 5740      20736563 
 5740      0A00
 5741              	.LC173:
 5742 1107 252E3866 		.string	"%.8f sec\n"
 5742      20736563 
 5742      0A00
 5743              	.LC174:
 5744 1111 72656420 		.string	"red track data update -- %s"
 5744      74726163 
 5744      6B206461 
 5744      74612075 
 5744      70646174 
 5745 112d 000000   		.align 8
 5746              	.LC175:
 5747 1130 4368616E 		.string	"Changed the entry to the table"
 5747      67656420 
 5747      74686520 
 5747      656E7472 
 5747      7920746F 
 5748              	.LC176:
 5749 114f 53617665 		.string	"Saved the table to the file"
 5749      64207468 
 5749      65207461 
 5749      626C6520 
 5749      746F2074 
 5750              	.LC177:
 5751 116b 44617461 		.string	"Data received from UART : %s\n"
 5751      20726563 
 5751      65697665 
 5751      64206672 
 5751      6F6D2055 
 5752 1189 00000000 		.align 8
 5752      000000
 5753              	.LC178:
 5754 1190 0A456E74 		.string	"\nEntering CommFPGA command-line mode:"
 5754      6572696E 
 5754      6720436F 
 5754      6D6D4650 
 5754      47412063 
 5755              	.LC179:
 5756 11b6 3E2000   		.string	"> "
 5757 11b9 00000000 		.align 8
 5757      000000
 5758              	.LC180:
 5759 11c0 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 5759      46504741 
 5759      4C696E6B 
 5759      20646576 
 5759      69636520 
 5760 1209 00000000 		.align 8
 5760      000000
 5761              	.LC181:
 5762 1210 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 5762      6C207265 
 5762      71756573 
 5762      74656420 
 5762      62757420 
 5763              	.LC182:
 5764 124c 25730A00 		.string	"%s\n"
 5765              		.text
 5766              		.globl	main
 5768              	main:
 5769              	.LFB32:
1081:main.c        **** ///////////////////////////////////////////////////////////////////////////////////////////////////
1082:main.c        **** 	
1083:main.c        **** int main(int argc, char *argv[]) {
 5770              		.loc 1 1083 0
 5771              		.cfi_startproc
 5772 37aa 55       		pushq	%rbp
 5773              		.cfi_def_cfa_offset 16
 5774              		.cfi_offset 6, -16
 5775 37ab 4889E5   		movq	%rsp, %rbp
 5776              		.cfi_def_cfa_register 6
 5777 37ae 53       		pushq	%rbx
 5778 37af 4881ECC8 		subq	$14024, %rsp
 5778      360000
 5779              		.cfi_offset 3, -24
 5780 37b6 89BD3CC9 		movl	%edi, -14020(%rbp)
 5780      FFFF
 5781 37bc 4889B530 		movq	%rsi, -14032(%rbp)
 5781      C9FFFF
 5782              		.loc 1 1083 0
 5783 37c3 64488B04 		movq	%fs:40, %rax
 5783      25280000 
 5783      00
 5784 37cc 488945E8 		movq	%rax, -24(%rbp)
 5785 37d0 31C0     		xorl	%eax, %eax
1084:main.c        ****     
1085:main.c        ****     fd = open (portname, O_RDWR | O_NOCTTY | O_SYNC);
 5786              		.loc 1 1085 0
 5787 37d2 488B0500 		movq	portname(%rip), %rax
 5787      000000
 5788 37d9 BE021110 		movl	$1052930, %esi
 5788      00
 5789 37de 4889C7   		movq	%rax, %rdi
 5790 37e1 B8000000 		movl	$0, %eax
 5790      00
 5791 37e6 E8000000 		call	open
 5791      00
 5792 37eb 89050000 		movl	%eax, fd(%rip)
 5792      0000
1086:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, pStatus;
 5793              		.loc 1 1086 0
 5794 37f1 C78558C9 		movl	$0, -13992(%rbp)
 5794      FFFF0000 
 5794      0000
1087:main.c        **** 	struct arg_str *ivpOpt = arg_str0("i", "ivp", "<VID:PID>", "            vendor ID and product ID (
 5795              		.loc 1 1087 0
 5796 37fb B9000000 		movl	$.LC65, %ecx
 5796      00
 5797 3800 BA000000 		movl	$.LC66, %edx
 5797      00
 5798 3805 BE000000 		movl	$.LC67, %esi
 5798      00
 5799 380a BF000000 		movl	$.LC68, %edi
 5799      00
 5800 380f E8000000 		call	arg_str0
 5800      00
 5801 3814 488985E8 		movq	%rax, -13848(%rbp)
 5801      C9FFFF
1088:main.c        **** 	struct arg_str *vpOpt = arg_str1("v", "vp", "<VID:PID[:DID]>", "       VID, PID and opt. dev ID (e
 5802              		.loc 1 1088 0
 5803 381b B9000000 		movl	$.LC69, %ecx
 5803      00
 5804 3820 BA000000 		movl	$.LC70, %edx
 5804      00
 5805 3825 BE000000 		movl	$.LC71, %esi
 5805      00
 5806 382a BF000000 		movl	$.LC72, %edi
 5806      00
 5807 382f E8000000 		call	arg_str1
 5807      00
 5808 3834 488985F0 		movq	%rax, -13840(%rbp)
 5808      C9FFFF
1089:main.c        **** 	struct arg_str *rpOpt = arg_str0("r", "rp", "<File>", "       For running the program and giving t
 5809              		.loc 1 1089 0
 5810 383b B9000000 		movl	$.LC73, %ecx
 5810      00
 5811 3840 BA000000 		movl	$.LC74, %edx
 5811      00
 5812 3845 BE000000 		movl	$.LC75, %esi
 5812      00
 5813 384a BF000000 		movl	$.LC61, %edi
 5813      00
 5814 384f E8000000 		call	arg_str0
 5814      00
 5815 3854 488985F8 		movq	%rax, -13832(%rbp)
 5815      C9FFFF
1090:main.c        **** 	struct arg_str *fwOpt = arg_str0("f", "fw", "<firmware.hex>", "        firmware to RAM-load (or us
 5816              		.loc 1 1090 0
 5817 385b B9000000 		movl	$.LC76, %ecx
 5817      00
 5818 3860 BA000000 		movl	$.LC77, %edx
 5818      00
 5819 3865 BE000000 		movl	$.LC78, %esi
 5819      00
 5820 386a BF000000 		movl	$.LC79, %edi
 5820      00
 5821 386f E8000000 		call	arg_str0
 5821      00
 5822 3874 48898500 		movq	%rax, -13824(%rbp)
 5822      CAFFFF
1091:main.c        **** 	struct arg_str *portOpt = arg_str0("d", "ports", "<bitCfg[,bitCfg]*>", " read/write digital ports 
 5823              		.loc 1 1091 0
 5824 387b B9000000 		movl	$.LC80, %ecx
 5824      00
 5825 3880 BA000000 		movl	$.LC81, %edx
 5825      00
 5826 3885 BE000000 		movl	$.LC82, %esi
 5826      00
 5827 388a BF000000 		movl	$.LC83, %edi
 5827      00
 5828 388f E8000000 		call	arg_str0
 5828      00
 5829 3894 48898508 		movq	%rax, -13816(%rbp)
 5829      CAFFFF
1092:main.c        **** 	struct arg_str *queryOpt = arg_str0("q", "query", "<jtagBits>", "         query the JTAG chain");
 5830              		.loc 1 1092 0
 5831 389b B9000000 		movl	$.LC84, %ecx
 5831      00
 5832 38a0 BA000000 		movl	$.LC85, %edx
 5832      00
 5833 38a5 BE000000 		movl	$.LC86, %esi
 5833      00
 5834 38aa BF000000 		movl	$.LC87, %edi
 5834      00
 5835 38af E8000000 		call	arg_str0
 5835      00
 5836 38b4 48898510 		movq	%rax, -13808(%rbp)
 5836      CAFFFF
1093:main.c        **** 	struct arg_str *progOpt = arg_str0("p", "program", "<config>", "         program a device");
 5837              		.loc 1 1093 0
 5838 38bb B9000000 		movl	$.LC88, %ecx
 5838      00
 5839 38c0 BA000000 		movl	$.LC89, %edx
 5839      00
 5840 38c5 BE000000 		movl	$.LC90, %esi
 5840      00
 5841 38ca BF000000 		movl	$.LC91, %edi
 5841      00
 5842 38cf E8000000 		call	arg_str0
 5842      00
 5843 38d4 48898518 		movq	%rax, -13800(%rbp)
 5843      CAFFFF
1094:main.c        **** 	struct arg_uint *conOpt = arg_uint0("c", "conduit", "<conduit>", "        which comm conduit to ch
 5844              		.loc 1 1094 0
 5845 38db B9000000 		movl	$.LC92, %ecx
 5845      00
 5846 38e0 BA000000 		movl	$.LC93, %edx
 5846      00
 5847 38e5 BE000000 		movl	$.LC94, %esi
 5847      00
 5848 38ea BF000000 		movl	$.LC95, %edi
 5848      00
 5849 38ef E8000000 		call	arg_uint0
 5849      00
 5850 38f4 48898520 		movq	%rax, -13792(%rbp)
 5850      CAFFFF
1095:main.c        **** 	struct arg_str *actOpt = arg_str0("a", "action", "<actionString>", "    a series of CommFPGA actio
 5851              		.loc 1 1095 0
 5852 38fb B9000000 		movl	$.LC96, %ecx
 5852      00
 5853 3900 BA000000 		movl	$.LC97, %edx
 5853      00
 5854 3905 BE000000 		movl	$.LC98, %esi
 5854      00
 5855 390a BF000000 		movl	$.LC99, %edi
 5855      00
 5856 390f E8000000 		call	arg_str0
 5856      00
 5857 3914 48898528 		movq	%rax, -13784(%rbp)
 5857      CAFFFF
1096:main.c        **** 	struct arg_lit *shellOpt  = arg_lit0("s", "shell", "                    start up an interactive Co
 5858              		.loc 1 1096 0
 5859 391b BA000000 		movl	$.LC100, %edx
 5859      00
 5860 3920 BE000000 		movl	$.LC101, %esi
 5860      00
 5861 3925 BF000000 		movl	$.LC102, %edi
 5861      00
 5862 392a E8000000 		call	arg_lit0
 5862      00
 5863 392f 48898530 		movq	%rax, -13776(%rbp)
 5863      CAFFFF
1097:main.c        **** 	struct arg_lit *benOpt  = arg_lit0("b", "benchmark", "                enable benchmarking & checks
 5864              		.loc 1 1097 0
 5865 3936 BA000000 		movl	$.LC103, %edx
 5865      00
 5866 393b BE000000 		movl	$.LC104, %esi
 5866      00
 5867 3940 BF000000 		movl	$.LC105, %edi
 5867      00
 5868 3945 E8000000 		call	arg_lit0
 5868      00
 5869 394a 48898538 		movq	%rax, -13768(%rbp)
 5869      CAFFFF
1098:main.c        **** 	struct arg_lit *rstOpt  = arg_lit0("r", "reset", "                    reset the bulk endpoints");
 5870              		.loc 1 1098 0
 5871 3951 BA000000 		movl	$.LC106, %edx
 5871      00
 5872 3956 BE000000 		movl	$.LC107, %esi
 5872      00
 5873 395b BF000000 		movl	$.LC61, %edi
 5873      00
 5874 3960 E8000000 		call	arg_lit0
 5874      00
 5875 3965 48898540 		movq	%rax, -13760(%rbp)
 5875      CAFFFF
1099:main.c        **** 	struct arg_str *dumpOpt = arg_str0("l", "dumploop", "<ch:file.bin>", "   write data from channel c
 5876              		.loc 1 1099 0
 5877 396c B9000000 		movl	$.LC108, %ecx
 5877      00
 5878 3971 BA000000 		movl	$.LC109, %edx
 5878      00
 5879 3976 BE000000 		movl	$.LC110, %esi
 5879      00
 5880 397b BF000000 		movl	$.LC111, %edi
 5880      00
 5881 3980 E8000000 		call	arg_str0
 5881      00
 5882 3985 48898548 		movq	%rax, -13752(%rbp)
 5882      CAFFFF
1100:main.c        **** 	struct arg_lit *helpOpt  = arg_lit0("h", "help", "                     print this help and exit");
 5883              		.loc 1 1100 0
 5884 398c BA000000 		movl	$.LC112, %edx
 5884      00
 5885 3991 BE000000 		movl	$.LC113, %esi
 5885      00
 5886 3996 BF000000 		movl	$.LC114, %edi
 5886      00
 5887 399b E8000000 		call	arg_lit0
 5887      00
 5888 39a0 48898550 		movq	%rax, -13744(%rbp)
 5888      CAFFFF
1101:main.c        **** 	struct arg_str *eepromOpt  = arg_str0(NULL, "eeprom", "<std|fw.hex|fw.iic>", "   write firmware to
 5889              		.loc 1 1101 0
 5890 39a7 B9000000 		movl	$.LC115, %ecx
 5890      00
 5891 39ac BA000000 		movl	$.LC116, %edx
 5891      00
 5892 39b1 BE000000 		movl	$.LC117, %esi
 5892      00
 5893 39b6 BF000000 		movl	$0, %edi
 5893      00
 5894 39bb E8000000 		call	arg_str0
 5894      00
 5895 39c0 48898558 		movq	%rax, -13736(%rbp)
 5895      CAFFFF
1102:main.c        **** 	struct arg_str *backupOpt  = arg_str0(NULL, "backup", "<kbitSize:fw.iic>", "     backup FX2's EEPR
 5896              		.loc 1 1102 0
 5897 39c7 B9000000 		movl	$.LC118, %ecx
 5897      00
 5898 39cc BA000000 		movl	$.LC119, %edx
 5898      00
 5899 39d1 BE000000 		movl	$.LC120, %esi
 5899      00
 5900 39d6 BF000000 		movl	$0, %edi
 5900      00
 5901 39db E8000000 		call	arg_str0
 5901      00
 5902 39e0 48898560 		movq	%rax, -13728(%rbp)
 5902      CAFFFF
1103:main.c        **** 	struct arg_end *endOpt   = arg_end(20);
 5903              		.loc 1 1103 0
 5904 39e7 BF140000 		movl	$20, %edi
 5904      00
 5905 39ec E8000000 		call	arg_end
 5905      00
 5906 39f1 48898568 		movq	%rax, -13720(%rbp)
 5906      CAFFFF
1104:main.c        **** 	void *argTable[] = {
 5907              		.loc 1 1104 0
 5908 39f8 488B85E8 		movq	-13848(%rbp), %rax
 5908      C9FFFF
 5909 39ff 48898520 		movq	%rax, -13536(%rbp)
 5909      CBFFFF
 5910 3a06 488B85F0 		movq	-13840(%rbp), %rax
 5910      C9FFFF
 5911 3a0d 48898528 		movq	%rax, -13528(%rbp)
 5911      CBFFFF
 5912 3a14 488B85F8 		movq	-13832(%rbp), %rax
 5912      C9FFFF
 5913 3a1b 48898530 		movq	%rax, -13520(%rbp)
 5913      CBFFFF
 5914 3a22 488B8500 		movq	-13824(%rbp), %rax
 5914      CAFFFF
 5915 3a29 48898538 		movq	%rax, -13512(%rbp)
 5915      CBFFFF
 5916 3a30 488B8508 		movq	-13816(%rbp), %rax
 5916      CAFFFF
 5917 3a37 48898540 		movq	%rax, -13504(%rbp)
 5917      CBFFFF
 5918 3a3e 488B8510 		movq	-13808(%rbp), %rax
 5918      CAFFFF
 5919 3a45 48898548 		movq	%rax, -13496(%rbp)
 5919      CBFFFF
 5920 3a4c 488B8518 		movq	-13800(%rbp), %rax
 5920      CAFFFF
 5921 3a53 48898550 		movq	%rax, -13488(%rbp)
 5921      CBFFFF
 5922 3a5a 488B8520 		movq	-13792(%rbp), %rax
 5922      CAFFFF
 5923 3a61 48898558 		movq	%rax, -13480(%rbp)
 5923      CBFFFF
 5924 3a68 488B8528 		movq	-13784(%rbp), %rax
 5924      CAFFFF
 5925 3a6f 48898560 		movq	%rax, -13472(%rbp)
 5925      CBFFFF
 5926 3a76 488B8530 		movq	-13776(%rbp), %rax
 5926      CAFFFF
 5927 3a7d 48898568 		movq	%rax, -13464(%rbp)
 5927      CBFFFF
 5928 3a84 488B8538 		movq	-13768(%rbp), %rax
 5928      CAFFFF
 5929 3a8b 48898570 		movq	%rax, -13456(%rbp)
 5929      CBFFFF
 5930 3a92 488B8540 		movq	-13760(%rbp), %rax
 5930      CAFFFF
 5931 3a99 48898578 		movq	%rax, -13448(%rbp)
 5931      CBFFFF
 5932 3aa0 488B8548 		movq	-13752(%rbp), %rax
 5932      CAFFFF
 5933 3aa7 48898580 		movq	%rax, -13440(%rbp)
 5933      CBFFFF
 5934 3aae 488B8550 		movq	-13744(%rbp), %rax
 5934      CAFFFF
 5935 3ab5 48898588 		movq	%rax, -13432(%rbp)
 5935      CBFFFF
 5936 3abc 488B8558 		movq	-13736(%rbp), %rax
 5936      CAFFFF
 5937 3ac3 48898590 		movq	%rax, -13424(%rbp)
 5937      CBFFFF
 5938 3aca 488B8560 		movq	-13728(%rbp), %rax
 5938      CAFFFF
 5939 3ad1 48898598 		movq	%rax, -13416(%rbp)
 5939      CBFFFF
 5940 3ad8 488B8568 		movq	-13720(%rbp), %rax
 5940      CAFFFF
 5941 3adf 488985A0 		movq	%rax, -13408(%rbp)
 5941      CBFFFF
1105:main.c        **** 		ivpOpt, vpOpt, rpOpt, fwOpt, portOpt, queryOpt, progOpt, conOpt, actOpt,
1106:main.c        **** 		shellOpt, benOpt, rstOpt, dumpOpt, helpOpt, eepromOpt, backupOpt, endOpt
1107:main.c        **** 	};
1108:main.c        **** 	const char *progName = "flcli";
 5942              		.loc 1 1108 0
 5943 3ae6 48C78570 		movq	$.LC121, -13712(%rbp)
 5943      CAFFFF00 
 5943      000000
1109:main.c        **** 	int numErrors;
1110:main.c        **** 	struct FLContext *handle = NULL;
 5944              		.loc 1 1110 0
 5945 3af1 48C785C0 		movq	$0, -13888(%rbp)
 5945      C9FFFF00 
 5945      000000
1111:main.c        **** 	FLStatus fStatus;
1112:main.c        **** 	const char *error = NULL;
 5946              		.loc 1 1112 0
 5947 3afc 48C785C8 		movq	$0, -13880(%rbp)
 5947      C9FFFF00 
 5947      000000
1113:main.c        **** 	const char *ivp = NULL;
 5948              		.loc 1 1113 0
 5949 3b07 48C78578 		movq	$0, -13704(%rbp)
 5949      CAFFFF00 
 5949      000000
1114:main.c        **** 	const char *vp = NULL;
 5950              		.loc 1 1114 0
 5951 3b12 48C78580 		movq	$0, -13696(%rbp)
 5951      CAFFFF00 
 5951      000000
1115:main.c        **** 	bool isNeroCapable, isCommCapable;
1116:main.c        **** 	uint32 numDevices, scanChain[16], i;
1117:main.c        **** 	const char *line = NULL;
 5952              		.loc 1 1117 0
 5953 3b1d 48C785E0 		movq	$0, -13856(%rbp)
 5953      C9FFFF00 
 5953      000000
1118:main.c        **** 	uint8 conduit = 0x01;
 5954              		.loc 1 1118 0
 5955 3b28 C6854CC9 		movb	$1, -14004(%rbp)
 5955      FFFF01
1119:main.c        **** 
1120:main.c        **** 	if ( arg_nullcheck(argTable) != 0 ) {
 5956              		.loc 1 1120 0
 5957 3b2f 488D8520 		leaq	-13536(%rbp), %rax
 5957      CBFFFF
 5958 3b36 4889C7   		movq	%rax, %rdi
 5959 3b39 E8000000 		call	arg_nullcheck
 5959      00
 5960 3b3e 85C0     		testl	%eax, %eax
 5961 3b40 742F     		je	.L322
1121:main.c        **** 		fprintf(stderr, "%s: insufficient memory\n", progName);
 5962              		.loc 1 1121 0
 5963 3b42 488B0500 		movq	stderr(%rip), %rax
 5963      000000
 5964 3b49 488B9570 		movq	-13712(%rbp), %rdx
 5964      CAFFFF
 5965 3b50 BE000000 		movl	$.LC122, %esi
 5965      00
 5966 3b55 4889C7   		movq	%rax, %rdi
 5967 3b58 B8000000 		movl	$0, %eax
 5967      00
 5968 3b5d E8000000 		call	fprintf
 5968      00
1122:main.c        **** 		FAIL(1, cleanup);
 5969              		.loc 1 1122 0
 5970 3b62 C78558C9 		movl	$1, -13992(%rbp)
 5970      FFFF0100 
 5970      0000
 5971 3b6c E9101B00 		jmp	.L323
 5971      00
 5972              	.L322:
1123:main.c        **** 	}
1124:main.c        **** 
1125:main.c        **** 	numErrors = arg_parse(argc, argv, argTable);
 5973              		.loc 1 1125 0
 5974 3b71 488D9520 		leaq	-13536(%rbp), %rdx
 5974      CBFFFF
 5975 3b78 488B8D30 		movq	-14032(%rbp), %rcx
 5975      C9FFFF
 5976 3b7f 8B853CC9 		movl	-14020(%rbp), %eax
 5976      FFFF
 5977 3b85 4889CE   		movq	%rcx, %rsi
 5978 3b88 89C7     		movl	%eax, %edi
 5979 3b8a E8000000 		call	arg_parse
 5979      00
 5980 3b8f 89858CC9 		movl	%eax, -13940(%rbp)
 5980      FFFF
1126:main.c        **** /*
1127:main.c        ****     if( rpOpt->count )
1128:main.c        ****     {
1129:main.c        ****         printf("Got the file %s\n", rpOpt->sval[0]);
1130:main.c        **** 		FAIL(FLP_SUCCESS, cleanup);
1131:main.c        ****     }*/
1132:main.c        **** 
1133:main.c        **** 	if ( helpOpt->count > 0 ) {
 5981              		.loc 1 1133 0
 5982 3b95 488B8550 		movq	-13744(%rbp), %rax
 5982      CAFFFF
 5983 3b9c 8B4060   		movl	96(%rax), %eax
 5984 3b9f 85C0     		testl	%eax, %eax
 5985 3ba1 7E6E     		jle	.L324
1134:main.c        **** 		printf("FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s", p
 5986              		.loc 1 1134 0
 5987 3ba3 488B8570 		movq	-13712(%rbp), %rax
 5987      CAFFFF
 5988 3baa 4889C6   		movq	%rax, %rsi
 5989 3bad BF000000 		movl	$.LC123, %edi
 5989      00
 5990 3bb2 B8000000 		movl	$0, %eax
 5990      00
 5991 3bb7 E8000000 		call	printf
 5991      00
1135:main.c        **** 		arg_print_syntax(stdout, argTable, "\n");
 5992              		.loc 1 1135 0
 5993 3bbc 488B0500 		movq	stdout(%rip), %rax
 5993      000000
 5994 3bc3 488D8D20 		leaq	-13536(%rbp), %rcx
 5994      CBFFFF
 5995 3bca BA000000 		movl	$.LC124, %edx
 5995      00
 5996 3bcf 4889CE   		movq	%rcx, %rsi
 5997 3bd2 4889C7   		movq	%rax, %rdi
 5998 3bd5 E8000000 		call	arg_print_syntax
 5998      00
1136:main.c        **** 		printf("\nInteract with an FPGALink device.\n\n");
 5999              		.loc 1 1136 0
 6000 3bda BF000000 		movl	$.LC125, %edi
 6000      00
 6001 3bdf E8000000 		call	puts
 6001      00
1137:main.c        **** 		arg_print_glossary(stdout, argTable,"  %-10s %s\n");
 6002              		.loc 1 1137 0
 6003 3be4 488B0500 		movq	stdout(%rip), %rax
 6003      000000
 6004 3beb 488D8D20 		leaq	-13536(%rbp), %rcx
 6004      CBFFFF
 6005 3bf2 BA000000 		movl	$.LC126, %edx
 6005      00
 6006 3bf7 4889CE   		movq	%rcx, %rsi
 6007 3bfa 4889C7   		movq	%rax, %rdi
 6008 3bfd E8000000 		call	arg_print_glossary
 6008      00
1138:main.c        **** 		FAIL(FLP_SUCCESS, cleanup);
 6009              		.loc 1 1138 0
 6010 3c02 C78558C9 		movl	$0, -13992(%rbp)
 6010      FFFF0000 
 6010      0000
 6011 3c0c E9701A00 		jmp	.L323
 6011      00
 6012              	.L324:
1139:main.c        **** 	}
1140:main.c        **** 
1141:main.c        **** 	if ( numErrors > 0 ) {
 6013              		.loc 1 1141 0
 6014 3c11 83BD8CC9 		cmpl	$0, -13940(%rbp)
 6014      FFFF00
 6015 3c18 7E4F     		jle	.L325
1142:main.c        **** 		arg_print_errors(stdout, endOpt, progName);
 6016              		.loc 1 1142 0
 6017 3c1a 488B0500 		movq	stdout(%rip), %rax
 6017      000000
 6018 3c21 488B9570 		movq	-13712(%rbp), %rdx
 6018      CAFFFF
 6019 3c28 488B8D68 		movq	-13720(%rbp), %rcx
 6019      CAFFFF
 6020 3c2f 4889CE   		movq	%rcx, %rsi
 6021 3c32 4889C7   		movq	%rax, %rdi
 6022 3c35 E8000000 		call	arg_print_errors
 6022      00
1143:main.c        **** 		fprintf(stderr, "Try '%s --help' for more information.\n", progName);
 6023              		.loc 1 1143 0
 6024 3c3a 488B0500 		movq	stderr(%rip), %rax
 6024      000000
 6025 3c41 488B9570 		movq	-13712(%rbp), %rdx
 6025      CAFFFF
 6026 3c48 BE000000 		movl	$.LC127, %esi
 6026      00
 6027 3c4d 4889C7   		movq	%rax, %rdi
 6028 3c50 B8000000 		movl	$0, %eax
 6028      00
 6029 3c55 E8000000 		call	fprintf
 6029      00
1144:main.c        **** 		FAIL(FLP_ARGS, cleanup);
 6030              		.loc 1 1144 0
 6031 3c5a C78558C9 		movl	$12, -13992(%rbp)
 6031      FFFF0C00 
 6031      0000
 6032 3c64 E9181A00 		jmp	.L323
 6032      00
 6033              	.L325:
1145:main.c        **** 	}
1146:main.c        **** 
1147:main.c        **** 	fStatus = flInitialise(0, &error);
 6034              		.loc 1 1147 0
 6035 3c69 488D85C8 		leaq	-13880(%rbp), %rax
 6035      C9FFFF
 6036 3c70 4889C6   		movq	%rax, %rsi
 6037 3c73 BF000000 		movl	$0, %edi
 6037      00
 6038 3c78 E8000000 		call	flInitialise
 6038      00
 6039 3c7d 89855CC9 		movl	%eax, -13988(%rbp)
 6039      FFFF
1148:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6040              		.loc 1 1148 0
 6041 3c83 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6041      FFFF00
 6042 3c8a 740F     		je	.L326
 6043              		.loc 1 1148 0 is_stmt 0 discriminator 1
 6044 3c8c C78558C9 		movl	$1, -13992(%rbp)
 6044      FFFF0100 
 6044      0000
 6045 3c96 E9E61900 		jmp	.L323
 6045      00
 6046              	.L326:
1149:main.c        **** 
1150:main.c        **** 	vp = vpOpt->sval[0];
 6047              		.loc 1 1150 0 is_stmt 1
 6048 3c9b 488B85F0 		movq	-13840(%rbp), %rax
 6048      C9FFFF
 6049 3ca2 488B4068 		movq	104(%rax), %rax
 6050 3ca6 488B00   		movq	(%rax), %rax
 6051 3ca9 48898580 		movq	%rax, -13696(%rbp)
 6051      CAFFFF
1151:main.c        **** 
1152:main.c        **** 	printf("Attempting to open connection to FPGALink device %s...\n", vp);
 6052              		.loc 1 1152 0
 6053 3cb0 488B8580 		movq	-13696(%rbp), %rax
 6053      CAFFFF
 6054 3cb7 4889C6   		movq	%rax, %rsi
 6055 3cba BF000000 		movl	$.LC128, %edi
 6055      00
 6056 3cbf B8000000 		movl	$0, %eax
 6056      00
 6057 3cc4 E8000000 		call	printf
 6057      00
1153:main.c        **** 	fStatus = flOpen(vp, &handle, NULL);
 6058              		.loc 1 1153 0
 6059 3cc9 488D8DC0 		leaq	-13888(%rbp), %rcx
 6059      C9FFFF
 6060 3cd0 488B8580 		movq	-13696(%rbp), %rax
 6060      CAFFFF
 6061 3cd7 BA000000 		movl	$0, %edx
 6061      00
 6062 3cdc 4889CE   		movq	%rcx, %rsi
 6063 3cdf 4889C7   		movq	%rax, %rdi
 6064 3ce2 E8000000 		call	flOpen
 6064      00
 6065 3ce7 89855CC9 		movl	%eax, -13988(%rbp)
 6065      FFFF
1154:main.c        **** 	if ( fStatus ) {
 6066              		.loc 1 1154 0
 6067 3ced 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6067      FFFF00
 6068 3cf4 0F842502 		je	.L327
 6068      0000
1155:main.c        **** 		if ( ivpOpt->count ) {
 6069              		.loc 1 1155 0
 6070 3cfa 488B85E8 		movq	-13848(%rbp), %rax
 6070      C9FFFF
 6071 3d01 8B4060   		movl	96(%rax), %eax
 6072 3d04 85C0     		testl	%eax, %eax
 6073 3d06 0F84E401 		je	.L328
 6073      0000
 6074              	.LBB58:
1156:main.c        **** 			int count = 60;
 6075              		.loc 1 1156 0
 6076 3d0c C78564C9 		movl	$60, -13980(%rbp)
 6076      FFFF3C00 
 6076      0000
1157:main.c        **** 			uint8 flag;
1158:main.c        **** 			ivp = ivpOpt->sval[0];
 6077              		.loc 1 1158 0
 6078 3d16 488B85E8 		movq	-13848(%rbp), %rax
 6078      C9FFFF
 6079 3d1d 488B4068 		movq	104(%rax), %rax
 6080 3d21 488B00   		movq	(%rax), %rax
 6081 3d24 48898578 		movq	%rax, -13704(%rbp)
 6081      CAFFFF
1159:main.c        **** 			printf("Loading firmware into %s...\n", ivp);
 6082              		.loc 1 1159 0
 6083 3d2b 488B8578 		movq	-13704(%rbp), %rax
 6083      CAFFFF
 6084 3d32 4889C6   		movq	%rax, %rsi
 6085 3d35 BF000000 		movl	$.LC129, %edi
 6085      00
 6086 3d3a B8000000 		movl	$0, %eax
 6086      00
 6087 3d3f E8000000 		call	printf
 6087      00
1160:main.c        **** 			if ( fwOpt->count ) {
 6088              		.loc 1 1160 0
 6089 3d44 488B8500 		movq	-13824(%rbp), %rax
 6089      CAFFFF
 6090 3d4b 8B4060   		movl	96(%rax), %eax
 6091 3d4e 85C0     		testl	%eax, %eax
 6092 3d50 742F     		je	.L329
1161:main.c        **** 				fStatus = flLoadCustomFirmware(ivp, fwOpt->sval[0], &error);
 6093              		.loc 1 1161 0
 6094 3d52 488B8500 		movq	-13824(%rbp), %rax
 6094      CAFFFF
 6095 3d59 488B4068 		movq	104(%rax), %rax
 6096 3d5d 488B08   		movq	(%rax), %rcx
 6097 3d60 488D95C8 		leaq	-13880(%rbp), %rdx
 6097      C9FFFF
 6098 3d67 488B8578 		movq	-13704(%rbp), %rax
 6098      CAFFFF
 6099 3d6e 4889CE   		movq	%rcx, %rsi
 6100 3d71 4889C7   		movq	%rax, %rdi
 6101 3d74 E8000000 		call	flLoadCustomFirmware
 6101      00
 6102 3d79 89855CC9 		movl	%eax, -13988(%rbp)
 6102      FFFF
 6103 3d7f EB26     		jmp	.L330
 6104              	.L329:
1162:main.c        **** 			} else {
1163:main.c        **** 				fStatus = flLoadStandardFirmware(ivp, vp, &error);
 6105              		.loc 1 1163 0
 6106 3d81 488D95C8 		leaq	-13880(%rbp), %rdx
 6106      C9FFFF
 6107 3d88 488B8D80 		movq	-13696(%rbp), %rcx
 6107      CAFFFF
 6108 3d8f 488B8578 		movq	-13704(%rbp), %rax
 6108      CAFFFF
 6109 3d96 4889CE   		movq	%rcx, %rsi
 6110 3d99 4889C7   		movq	%rax, %rdi
 6111 3d9c E8000000 		call	flLoadStandardFirmware
 6111      00
 6112 3da1 89855CC9 		movl	%eax, -13988(%rbp)
 6112      FFFF
 6113              	.L330:
1164:main.c        **** 			}
1165:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6114              		.loc 1 1165 0
 6115 3da7 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6115      FFFF00
 6116 3dae 740F     		je	.L331
 6117              		.loc 1 1165 0 is_stmt 0 discriminator 1
 6118 3db0 C78558C9 		movl	$1, -13992(%rbp)
 6118      FFFF0100 
 6118      0000
 6119 3dba E9C21800 		jmp	.L323
 6119      00
 6120              	.L331:
1166:main.c        **** 			
1167:main.c        **** 			printf("Awaiting renumeration");
 6121              		.loc 1 1167 0 is_stmt 1
 6122 3dbf BF000000 		movl	$.LC130, %edi
 6122      00
 6123 3dc4 B8000000 		movl	$0, %eax
 6123      00
 6124 3dc9 E8000000 		call	printf
 6124      00
1168:main.c        **** 			flSleep(1000);
 6125              		.loc 1 1168 0
 6126 3dce BFE80300 		movl	$1000, %edi
 6126      00
 6127 3dd3 E8000000 		call	flSleep
 6127      00
 6128              	.L335:
1169:main.c        **** 			do {
1170:main.c        **** 				printf(".");
 6129              		.loc 1 1170 0
 6130 3dd8 BF2E0000 		movl	$46, %edi
 6130      00
 6131 3ddd E8000000 		call	putchar
 6131      00
1171:main.c        **** 				fflush(stdout);
 6132              		.loc 1 1171 0
 6133 3de2 488B0500 		movq	stdout(%rip), %rax
 6133      000000
 6134 3de9 4889C7   		movq	%rax, %rdi
 6135 3dec E8000000 		call	fflush
 6135      00
1172:main.c        **** 				fStatus = flIsDeviceAvailable(vp, &flag, &error);
 6136              		.loc 1 1172 0
 6137 3df1 488D95C8 		leaq	-13880(%rbp), %rdx
 6137      C9FFFF
 6138 3df8 488D8DD8 		leaq	-13864(%rbp), %rcx
 6138      C9FFFF
 6139 3dff 488B8580 		movq	-13696(%rbp), %rax
 6139      CAFFFF
 6140 3e06 4889CE   		movq	%rcx, %rsi
 6141 3e09 4889C7   		movq	%rax, %rdi
 6142 3e0c E8000000 		call	flIsDeviceAvailable
 6142      00
 6143 3e11 89855CC9 		movl	%eax, -13988(%rbp)
 6143      FFFF
1173:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6144              		.loc 1 1173 0
 6145 3e17 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6145      FFFF00
 6146 3e1e 740F     		je	.L333
 6147              		.loc 1 1173 0 is_stmt 0 discriminator 1
 6148 3e20 C78558C9 		movl	$1, -13992(%rbp)
 6148      FFFF0100 
 6148      0000
 6149 3e2a E9521800 		jmp	.L323
 6149      00
 6150              	.L333:
1174:main.c        **** 				flSleep(250);
 6151              		.loc 1 1174 0 is_stmt 1
 6152 3e2f BFFA0000 		movl	$250, %edi
 6152      00
 6153 3e34 E8000000 		call	flSleep
 6153      00
1175:main.c        **** 				count--;
 6154              		.loc 1 1175 0
 6155 3e39 83AD64C9 		subl	$1, -13980(%rbp)
 6155      FFFF01
1176:main.c        **** 			} while ( !flag && count );
 6156              		.loc 1 1176 0
 6157 3e40 0FB685D8 		movzbl	-13864(%rbp), %eax
 6157      C9FFFF
 6158 3e47 84C0     		testb	%al, %al
 6159 3e49 7509     		jne	.L334
 6160              		.loc 1 1176 0 is_stmt 0 discriminator 1
 6161 3e4b 83BD64C9 		cmpl	$0, -13980(%rbp)
 6161      FFFF00
 6162 3e52 7584     		jne	.L335
 6163              	.L334:
1177:main.c        **** 			printf("\n");
 6164              		.loc 1 1177 0 is_stmt 1
 6165 3e54 BF0A0000 		movl	$10, %edi
 6165      00
 6166 3e59 E8000000 		call	putchar
 6166      00
1178:main.c        **** 			if ( !flag ) {
 6167              		.loc 1 1178 0
 6168 3e5e 0FB685D8 		movzbl	-13864(%rbp), %eax
 6168      C9FFFF
 6169 3e65 84C0     		testb	%al, %al
 6170 3e67 752F     		jne	.L336
1179:main.c        **** 				fprintf(stderr, "FPGALink device did not renumerate properly as %s\n", vp);
 6171              		.loc 1 1179 0
 6172 3e69 488B0500 		movq	stderr(%rip), %rax
 6172      000000
 6173 3e70 488B9580 		movq	-13696(%rbp), %rdx
 6173      CAFFFF
 6174 3e77 BE000000 		movl	$.LC131, %esi
 6174      00
 6175 3e7c 4889C7   		movq	%rax, %rdi
 6176 3e7f B8000000 		movl	$0, %eax
 6176      00
 6177 3e84 E8000000 		call	fprintf
 6177      00
1180:main.c        **** 				FAIL(FLP_LIBERR, cleanup);
 6178              		.loc 1 1180 0
 6179 3e89 C78558C9 		movl	$1, -13992(%rbp)
 6179      FFFF0100 
 6179      0000
 6180 3e93 E9E91700 		jmp	.L323
 6180      00
 6181              	.L336:
1181:main.c        **** 			}
1182:main.c        **** 
1183:main.c        **** 			printf("Attempting to open connection to FPGLink device %s again...\n", vp);
 6182              		.loc 1 1183 0
 6183 3e98 488B8580 		movq	-13696(%rbp), %rax
 6183      CAFFFF
 6184 3e9f 4889C6   		movq	%rax, %rsi
 6185 3ea2 BF000000 		movl	$.LC132, %edi
 6185      00
 6186 3ea7 B8000000 		movl	$0, %eax
 6186      00
 6187 3eac E8000000 		call	printf
 6187      00
1184:main.c        **** 			fStatus = flOpen(vp, &handle, &error);
 6188              		.loc 1 1184 0
 6189 3eb1 488D95C8 		leaq	-13880(%rbp), %rdx
 6189      C9FFFF
 6190 3eb8 488D8DC0 		leaq	-13888(%rbp), %rcx
 6190      C9FFFF
 6191 3ebf 488B8580 		movq	-13696(%rbp), %rax
 6191      CAFFFF
 6192 3ec6 4889CE   		movq	%rcx, %rsi
 6193 3ec9 4889C7   		movq	%rax, %rdi
 6194 3ecc E8000000 		call	flOpen
 6194      00
 6195 3ed1 89855CC9 		movl	%eax, -13988(%rbp)
 6195      FFFF
1185:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6196              		.loc 1 1185 0
 6197 3ed7 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6197      FFFF00
 6198 3ede 743F     		je	.L327
 6199              		.loc 1 1185 0 is_stmt 0 discriminator 1
 6200 3ee0 C78558C9 		movl	$1, -13992(%rbp)
 6200      FFFF0100 
 6200      0000
 6201 3eea 90       		nop
 6202 3eeb E9911700 		jmp	.L323
 6202      00
 6203              	.L328:
 6204              	.LBE58:
1186:main.c        **** 		} else {
1187:main.c        **** 			fprintf(stderr, "Could not open FPGALink device at %s and no initial VID:PID was supplied\n", vp
 6205              		.loc 1 1187 0 is_stmt 1
 6206 3ef0 488B0500 		movq	stderr(%rip), %rax
 6206      000000
 6207 3ef7 488B9580 		movq	-13696(%rbp), %rdx
 6207      CAFFFF
 6208 3efe BE000000 		movl	$.LC133, %esi
 6208      00
 6209 3f03 4889C7   		movq	%rax, %rdi
 6210 3f06 B8000000 		movl	$0, %eax
 6210      00
 6211 3f0b E8000000 		call	fprintf
 6211      00
1188:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6212              		.loc 1 1188 0
 6213 3f10 C78558C9 		movl	$12, -13992(%rbp)
 6213      FFFF0C00 
 6213      0000
 6214 3f1a E9621700 		jmp	.L323
 6214      00
 6215              	.L327:
1189:main.c        **** 		}
1190:main.c        **** 	}
1191:main.c        **** 
1192:main.c        **** 	printf(
 6216              		.loc 1 1192 0
 6217 3f1f 488B85C0 		movq	-13888(%rbp), %rax
 6217      C9FFFF
 6218 3f26 4889C7   		movq	%rax, %rdi
 6219 3f29 E8000000 		call	flGetFirmwareVersion
 6219      00
 6220 3f2e 89C3     		movl	%eax, %ebx
1193:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
1194:main.c        **** 		vp, flGetFirmwareID(handle), flGetFirmwareVersion(handle)
 6221              		.loc 1 1194 0
 6222 3f30 488B85C0 		movq	-13888(%rbp), %rax
 6222      C9FFFF
 6223 3f37 4889C7   		movq	%rax, %rdi
 6224 3f3a E8000000 		call	flGetFirmwareID
 6224      00
1192:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 6225              		.loc 1 1192 0
 6226 3f3f 0FB7D0   		movzwl	%ax, %edx
 6227 3f42 488B8580 		movq	-13696(%rbp), %rax
 6227      CAFFFF
 6228 3f49 89D9     		movl	%ebx, %ecx
 6229 3f4b 4889C6   		movq	%rax, %rsi
 6230 3f4e BF000000 		movl	$.LC134, %edi
 6230      00
 6231 3f53 B8000000 		movl	$0, %eax
 6231      00
 6232 3f58 E8000000 		call	printf
 6232      00
1195:main.c        **** 	);
1196:main.c        **** 
1197:main.c        **** 	if ( eepromOpt->count ) {
 6233              		.loc 1 1197 0
 6234 3f5d 488B8558 		movq	-13736(%rbp), %rax
 6234      CAFFFF
 6235 3f64 8B4060   		movl	96(%rax), %eax
 6236 3f67 85C0     		testl	%eax, %eax
 6237 3f69 0F84B600 		je	.L338
 6237      0000
1198:main.c        **** 		if ( !strcmp("std", eepromOpt->sval[0]) ) {
 6238              		.loc 1 1198 0
 6239 3f6f 488B8558 		movq	-13736(%rbp), %rax
 6239      CAFFFF
 6240 3f76 488B4068 		movq	104(%rax), %rax
 6241 3f7a 488B00   		movq	(%rax), %rax
 6242 3f7d 4889C6   		movq	%rax, %rsi
 6243 3f80 BF000000 		movl	$.LC135, %edi
 6243      00
 6244 3f85 E8000000 		call	strcmp
 6244      00
 6245 3f8a 85C0     		testl	%eax, %eax
 6246 3f8c 7532     		jne	.L339
1199:main.c        **** 			printf("Writing the standard FPGALink firmware to the FX2's EEPROM...\n");
 6247              		.loc 1 1199 0
 6248 3f8e BF000000 		movl	$.LC136, %edi
 6248      00
 6249 3f93 E8000000 		call	puts
 6249      00
1200:main.c        **** 			fStatus = flFlashStandardFirmware(handle, vp, &error);
 6250              		.loc 1 1200 0
 6251 3f98 488B85C0 		movq	-13888(%rbp), %rax
 6251      C9FFFF
 6252 3f9f 488D95C8 		leaq	-13880(%rbp), %rdx
 6252      C9FFFF
 6253 3fa6 488B8D80 		movq	-13696(%rbp), %rcx
 6253      CAFFFF
 6254 3fad 4889CE   		movq	%rcx, %rsi
 6255 3fb0 4889C7   		movq	%rax, %rdi
 6256 3fb3 E8000000 		call	flFlashStandardFirmware
 6256      00
 6257 3fb8 89855CC9 		movl	%eax, -13988(%rbp)
 6257      FFFF
 6258 3fbe EB4D     		jmp	.L340
 6259              	.L339:
1201:main.c        **** 		} else {
1202:main.c        **** 			printf("Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n", eepromOpt->sval[0]);
 6260              		.loc 1 1202 0
 6261 3fc0 488B8558 		movq	-13736(%rbp), %rax
 6261      CAFFFF
 6262 3fc7 488B4068 		movq	104(%rax), %rax
 6263 3fcb 488B00   		movq	(%rax), %rax
 6264 3fce 4889C6   		movq	%rax, %rsi
 6265 3fd1 BF000000 		movl	$.LC137, %edi
 6265      00
 6266 3fd6 B8000000 		movl	$0, %eax
 6266      00
 6267 3fdb E8000000 		call	printf
 6267      00
1203:main.c        **** 			fStatus = flFlashCustomFirmware(handle, eepromOpt->sval[0], &error);
 6268              		.loc 1 1203 0
 6269 3fe0 488B8558 		movq	-13736(%rbp), %rax
 6269      CAFFFF
 6270 3fe7 488B4068 		movq	104(%rax), %rax
 6271 3feb 488B08   		movq	(%rax), %rcx
 6272 3fee 488B85C0 		movq	-13888(%rbp), %rax
 6272      C9FFFF
 6273 3ff5 488D95C8 		leaq	-13880(%rbp), %rdx
 6273      C9FFFF
 6274 3ffc 4889CE   		movq	%rcx, %rsi
 6275 3fff 4889C7   		movq	%rax, %rdi
 6276 4002 E8000000 		call	flFlashCustomFirmware
 6276      00
 6277 4007 89855CC9 		movl	%eax, -13988(%rbp)
 6277      FFFF
 6278              	.L340:
1204:main.c        **** 		}
1205:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6279              		.loc 1 1205 0
 6280 400d 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6280      FFFF00
 6281 4014 740F     		je	.L338
 6282              		.loc 1 1205 0 is_stmt 0 discriminator 1
 6283 4016 C78558C9 		movl	$1, -13992(%rbp)
 6283      FFFF0100 
 6283      0000
 6284 4020 E95C1600 		jmp	.L323
 6284      00
 6285              	.L338:
1206:main.c        **** 	}
1207:main.c        **** 
1208:main.c        **** 	if ( backupOpt->count ) {
 6286              		.loc 1 1208 0 is_stmt 1
 6287 4025 488B8560 		movq	-13728(%rbp), %rax
 6287      CAFFFF
 6288 402c 8B4060   		movl	96(%rax), %eax
 6289 402f 85C0     		testl	%eax, %eax
 6290 4031 0F84DA00 		je	.L341
 6290      0000
 6291              	.LBB59:
1209:main.c        **** 		const char *fileName;
1210:main.c        **** 		const uint32 kbitSize = strtoul(backupOpt->sval[0], (char**)&fileName, 0);
 6292              		.loc 1 1210 0
 6293 4037 488B8560 		movq	-13728(%rbp), %rax
 6293      CAFFFF
 6294 403e 488B4068 		movq	104(%rax), %rax
 6295 4042 488B00   		movq	(%rax), %rax
 6296 4045 488D8DD8 		leaq	-13864(%rbp), %rcx
 6296      C9FFFF
 6297 404c BA000000 		movl	$0, %edx
 6297      00
 6298 4051 4889CE   		movq	%rcx, %rsi
 6299 4054 4889C7   		movq	%rax, %rdi
 6300 4057 E8000000 		call	strtoul
 6300      00
 6301 405c 898590C9 		movl	%eax, -13936(%rbp)
 6301      FFFF
1211:main.c        **** 		if ( *fileName != ':' ) {
 6302              		.loc 1 1211 0
 6303 4062 488B85D8 		movq	-13864(%rbp), %rax
 6303      C9FFFF
 6304 4069 0FB600   		movzbl	(%rax), %eax
 6305 406c 3C3A     		cmpb	$58, %al
 6306 406e 742F     		je	.L342
1212:main.c        **** 			fprintf(stderr, "%s: invalid argument to option --backup=<kbitSize:fw.iic>\n", progName);
 6307              		.loc 1 1212 0
 6308 4070 488B0500 		movq	stderr(%rip), %rax
 6308      000000
 6309 4077 488B9570 		movq	-13712(%rbp), %rdx
 6309      CAFFFF
 6310 407e BE000000 		movl	$.LC138, %esi
 6310      00
 6311 4083 4889C7   		movq	%rax, %rdi
 6312 4086 B8000000 		movl	$0, %eax
 6312      00
 6313 408b E8000000 		call	fprintf
 6313      00
1213:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6314              		.loc 1 1213 0
 6315 4090 C78558C9 		movl	$12, -13992(%rbp)
 6315      FFFF0C00 
 6315      0000
 6316 409a E9E21500 		jmp	.L323
 6316      00
 6317              	.L342:
1214:main.c        **** 		}
1215:main.c        **** 		fileName++;
 6318              		.loc 1 1215 0
 6319 409f 488B85D8 		movq	-13864(%rbp), %rax
 6319      C9FFFF
 6320 40a6 4883C001 		addq	$1, %rax
 6321 40aa 488985D8 		movq	%rax, -13864(%rbp)
 6321      C9FFFF
1216:main.c        **** 		printf("Saving a backup of %d kbit from the FX2's EEPROM to %s...\n", kbitSize, fileName);
 6322              		.loc 1 1216 0
 6323 40b1 488B95D8 		movq	-13864(%rbp), %rdx
 6323      C9FFFF
 6324 40b8 8B8590C9 		movl	-13936(%rbp), %eax
 6324      FFFF
 6325 40be 89C6     		movl	%eax, %esi
 6326 40c0 BF000000 		movl	$.LC139, %edi
 6326      00
 6327 40c5 B8000000 		movl	$0, %eax
 6327      00
 6328 40ca E8000000 		call	printf
 6328      00
1217:main.c        **** 		fStatus = flSaveFirmware(handle, kbitSize, fileName, &error);
 6329              		.loc 1 1217 0
 6330 40cf 488B95D8 		movq	-13864(%rbp), %rdx
 6330      C9FFFF
 6331 40d6 488B85C0 		movq	-13888(%rbp), %rax
 6331      C9FFFF
 6332 40dd 488D8DC8 		leaq	-13880(%rbp), %rcx
 6332      C9FFFF
 6333 40e4 8BB590C9 		movl	-13936(%rbp), %esi
 6333      FFFF
 6334 40ea 4889C7   		movq	%rax, %rdi
 6335 40ed E8000000 		call	flSaveFirmware
 6335      00
 6336 40f2 89855CC9 		movl	%eax, -13988(%rbp)
 6336      FFFF
1218:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6337              		.loc 1 1218 0
 6338 40f8 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6338      FFFF00
 6339 40ff 7410     		je	.L341
 6340              		.loc 1 1218 0 is_stmt 0 discriminator 1
 6341 4101 C78558C9 		movl	$1, -13992(%rbp)
 6341      FFFF0100 
 6341      0000
 6342 410b 90       		nop
 6343 410c E9701500 		jmp	.L323
 6343      00
 6344              	.L341:
 6345              	.LBE59:
1219:main.c        **** 	}
1220:main.c        **** 
1221:main.c        **** 	if ( rstOpt->count ) {
 6346              		.loc 1 1221 0 is_stmt 1
 6347 4111 488B8540 		movq	-13760(%rbp), %rax
 6347      CAFFFF
 6348 4118 8B4060   		movl	96(%rax), %eax
 6349 411b 85C0     		testl	%eax, %eax
 6350 411d 7437     		je	.L345
1222:main.c        **** 		// Reset the bulk endpoints (only needed in some virtualised environments)
1223:main.c        **** 		fStatus = flResetToggle(handle, &error);
 6351              		.loc 1 1223 0
 6352 411f 488B85C0 		movq	-13888(%rbp), %rax
 6352      C9FFFF
 6353 4126 488D95C8 		leaq	-13880(%rbp), %rdx
 6353      C9FFFF
 6354 412d 4889D6   		movq	%rdx, %rsi
 6355 4130 4889C7   		movq	%rax, %rdi
 6356 4133 E8000000 		call	flResetToggle
 6356      00
 6357 4138 89855CC9 		movl	%eax, -13988(%rbp)
 6357      FFFF
1224:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6358              		.loc 1 1224 0
 6359 413e 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6359      FFFF00
 6360 4145 740F     		je	.L345
 6361              		.loc 1 1224 0 is_stmt 0 discriminator 1
 6362 4147 C78558C9 		movl	$1, -13992(%rbp)
 6362      FFFF0100 
 6362      0000
 6363 4151 E92B1500 		jmp	.L323
 6363      00
 6364              	.L345:
1225:main.c        **** 	}
1226:main.c        **** 
1227:main.c        **** 	if ( conOpt->count ) {
 6365              		.loc 1 1227 0 is_stmt 1
 6366 4156 488B8520 		movq	-13792(%rbp), %rax
 6366      CAFFFF
 6367 415d 8B4060   		movl	96(%rax), %eax
 6368 4160 85C0     		testl	%eax, %eax
 6369 4162 7413     		je	.L346
1228:main.c        **** 		conduit = (uint8)conOpt->ival[0];
 6370              		.loc 1 1228 0
 6371 4164 488B8520 		movq	-13792(%rbp), %rax
 6371      CAFFFF
 6372 416b 488B4068 		movq	104(%rax), %rax
 6373 416f 8B00     		movl	(%rax), %eax
 6374 4171 88854CC9 		movb	%al, -14004(%rbp)
 6374      FFFF
 6375              	.L346:
1229:main.c        **** 	}
1230:main.c        **** 
1231:main.c        **** 	isNeroCapable = flIsNeroCapable(handle);
 6376              		.loc 1 1231 0
 6377 4177 488B85C0 		movq	-13888(%rbp), %rax
 6377      C9FFFF
 6378 417e 4889C7   		movq	%rax, %rdi
 6379 4181 E8000000 		call	flIsNeroCapable
 6379      00
 6380 4186 84C0     		testb	%al, %al
 6381 4188 0F95C0   		setne	%al
 6382 418b 88854DC9 		movb	%al, -14003(%rbp)
 6382      FFFF
1232:main.c        **** 	isCommCapable = flIsCommCapable(handle, conduit);
 6383              		.loc 1 1232 0
 6384 4191 0FB6954C 		movzbl	-14004(%rbp), %edx
 6384      C9FFFF
 6385 4198 488B85C0 		movq	-13888(%rbp), %rax
 6385      C9FFFF
 6386 419f 89D6     		movl	%edx, %esi
 6387 41a1 4889C7   		movq	%rax, %rdi
 6388 41a4 E8000000 		call	flIsCommCapable
 6388      00
 6389 41a9 84C0     		testb	%al, %al
 6390 41ab 0F95C0   		setne	%al
 6391 41ae 88854EC9 		movb	%al, -14002(%rbp)
 6391      FFFF
1233:main.c        **** 
1234:main.c        **** 	if ( portOpt->count ) {
 6392              		.loc 1 1234 0
 6393 41b4 488B8508 		movq	-13816(%rbp), %rax
 6393      CAFFFF
 6394 41bb 8B4060   		movl	96(%rax), %eax
 6395 41be 85C0     		testl	%eax, %eax
 6396 41c0 0F843C02 		je	.L347
 6396      0000
 6397              	.LBB60:
1235:main.c        **** 		uint32 readState;
1236:main.c        **** 		char hex[9];
1237:main.c        **** 		const uint8 *p = (const uint8 *)hex;
 6398              		.loc 1 1237 0
 6399 41c6 488D45D0 		leaq	-48(%rbp), %rax
 6400 41ca 48898588 		movq	%rax, -13688(%rbp)
 6400      CAFFFF
1238:main.c        **** 		printf("Configuring ports...\n");
 6401              		.loc 1 1238 0
 6402 41d1 BF000000 		movl	$.LC140, %edi
 6402      00
 6403 41d6 E8000000 		call	puts
 6403      00
1239:main.c        **** 		fStatus = flMultiBitPortAccess(handle, portOpt->sval[0], &readState, &error);
 6404              		.loc 1 1239 0
 6405 41db 488B8508 		movq	-13816(%rbp), %rax
 6405      CAFFFF
 6406 41e2 488B4068 		movq	104(%rax), %rax
 6407 41e6 488B30   		movq	(%rax), %rsi
 6408 41e9 488B85C0 		movq	-13888(%rbp), %rax
 6408      C9FFFF
 6409 41f0 488D8DC8 		leaq	-13880(%rbp), %rcx
 6409      C9FFFF
 6410 41f7 488D95D8 		leaq	-13864(%rbp), %rdx
 6410      C9FFFF
 6411 41fe 4889C7   		movq	%rax, %rdi
 6412 4201 E8000000 		call	flMultiBitPortAccess
 6412      00
 6413 4206 89855CC9 		movl	%eax, -13988(%rbp)
 6413      FFFF
1240:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6414              		.loc 1 1240 0
 6415 420c 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6415      FFFF00
 6416 4213 740F     		je	.L348
 6417              		.loc 1 1240 0 is_stmt 0 discriminator 1
 6418 4215 C78558C9 		movl	$1, -13992(%rbp)
 6418      FFFF0100 
 6418      0000
 6419 421f E95D1400 		jmp	.L323
 6419      00
 6420              	.L348:
1241:main.c        **** 		sprintf(hex, "%08X", readState);
 6421              		.loc 1 1241 0 is_stmt 1
 6422 4224 8B95D8C9 		movl	-13864(%rbp), %edx
 6422      FFFF
 6423 422a 488D45D0 		leaq	-48(%rbp), %rax
 6424 422e BE000000 		movl	$.LC141, %esi
 6424      00
 6425 4233 4889C7   		movq	%rax, %rdi
 6426 4236 B8000000 		movl	$0, %eax
 6426      00
 6427 423b E8000000 		call	sprintf
 6427      00
1242:main.c        **** 		printf("Readback:   28   24   20   16    12    8    4    0\n          %s", nibbles[*p++ - '0']);
 6428              		.loc 1 1242 0
 6429 4240 488B8588 		movq	-13688(%rbp), %rax
 6429      CAFFFF
 6430 4247 488D5001 		leaq	1(%rax), %rdx
 6431 424b 48899588 		movq	%rdx, -13688(%rbp)
 6431      CAFFFF
 6432 4252 0FB600   		movzbl	(%rax), %eax
 6433 4255 0FB6C0   		movzbl	%al, %eax
 6434 4258 83E830   		subl	$48, %eax
 6435 425b 4898     		cltq
 6436 425d 488B04C5 		movq	nibbles(,%rax,8), %rax
 6436      00000000 
 6437 4265 4889C6   		movq	%rax, %rsi
 6438 4268 BF000000 		movl	$.LC142, %edi
 6438      00
 6439 426d B8000000 		movl	$0, %eax
 6439      00
 6440 4272 E8000000 		call	printf
 6440      00
1243:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 6441              		.loc 1 1243 0
 6442 4277 488B8588 		movq	-13688(%rbp), %rax
 6442      CAFFFF
 6443 427e 488D5001 		leaq	1(%rax), %rdx
 6444 4282 48899588 		movq	%rdx, -13688(%rbp)
 6444      CAFFFF
 6445 4289 0FB600   		movzbl	(%rax), %eax
 6446 428c 0FB6C0   		movzbl	%al, %eax
 6447 428f 83E830   		subl	$48, %eax
 6448 4292 4898     		cltq
 6449 4294 488B04C5 		movq	nibbles(,%rax,8), %rax
 6449      00000000 
 6450 429c 4889C6   		movq	%rax, %rsi
 6451 429f BF000000 		movl	$.LC143, %edi
 6451      00
 6452 42a4 B8000000 		movl	$0, %eax
 6452      00
 6453 42a9 E8000000 		call	printf
 6453      00
1244:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 6454              		.loc 1 1244 0
 6455 42ae 488B8588 		movq	-13688(%rbp), %rax
 6455      CAFFFF
 6456 42b5 488D5001 		leaq	1(%rax), %rdx
 6457 42b9 48899588 		movq	%rdx, -13688(%rbp)
 6457      CAFFFF
 6458 42c0 0FB600   		movzbl	(%rax), %eax
 6459 42c3 0FB6C0   		movzbl	%al, %eax
 6460 42c6 83E830   		subl	$48, %eax
 6461 42c9 4898     		cltq
 6462 42cb 488B04C5 		movq	nibbles(,%rax,8), %rax
 6462      00000000 
 6463 42d3 4889C6   		movq	%rax, %rsi
 6464 42d6 BF000000 		movl	$.LC143, %edi
 6464      00
 6465 42db B8000000 		movl	$0, %eax
 6465      00
 6466 42e0 E8000000 		call	printf
 6466      00
1245:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 6467              		.loc 1 1245 0
 6468 42e5 488B8588 		movq	-13688(%rbp), %rax
 6468      CAFFFF
 6469 42ec 488D5001 		leaq	1(%rax), %rdx
 6470 42f0 48899588 		movq	%rdx, -13688(%rbp)
 6470      CAFFFF
 6471 42f7 0FB600   		movzbl	(%rax), %eax
 6472 42fa 0FB6C0   		movzbl	%al, %eax
 6473 42fd 83E830   		subl	$48, %eax
 6474 4300 4898     		cltq
 6475 4302 488B04C5 		movq	nibbles(,%rax,8), %rax
 6475      00000000 
 6476 430a 4889C6   		movq	%rax, %rsi
 6477 430d BF000000 		movl	$.LC143, %edi
 6477      00
 6478 4312 B8000000 		movl	$0, %eax
 6478      00
 6479 4317 E8000000 		call	printf
 6479      00
1246:main.c        **** 		printf("  %s", nibbles[*p++ - '0']);
 6480              		.loc 1 1246 0
 6481 431c 488B8588 		movq	-13688(%rbp), %rax
 6481      CAFFFF
 6482 4323 488D5001 		leaq	1(%rax), %rdx
 6483 4327 48899588 		movq	%rdx, -13688(%rbp)
 6483      CAFFFF
 6484 432e 0FB600   		movzbl	(%rax), %eax
 6485 4331 0FB6C0   		movzbl	%al, %eax
 6486 4334 83E830   		subl	$48, %eax
 6487 4337 4898     		cltq
 6488 4339 488B04C5 		movq	nibbles(,%rax,8), %rax
 6488      00000000 
 6489 4341 4889C6   		movq	%rax, %rsi
 6490 4344 BF000000 		movl	$.LC144, %edi
 6490      00
 6491 4349 B8000000 		movl	$0, %eax
 6491      00
 6492 434e E8000000 		call	printf
 6492      00
1247:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 6493              		.loc 1 1247 0
 6494 4353 488B8588 		movq	-13688(%rbp), %rax
 6494      CAFFFF
 6495 435a 488D5001 		leaq	1(%rax), %rdx
 6496 435e 48899588 		movq	%rdx, -13688(%rbp)
 6496      CAFFFF
 6497 4365 0FB600   		movzbl	(%rax), %eax
 6498 4368 0FB6C0   		movzbl	%al, %eax
 6499 436b 83E830   		subl	$48, %eax
 6500 436e 4898     		cltq
 6501 4370 488B04C5 		movq	nibbles(,%rax,8), %rax
 6501      00000000 
 6502 4378 4889C6   		movq	%rax, %rsi
 6503 437b BF000000 		movl	$.LC143, %edi
 6503      00
 6504 4380 B8000000 		movl	$0, %eax
 6504      00
 6505 4385 E8000000 		call	printf
 6505      00
1248:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 6506              		.loc 1 1248 0
 6507 438a 488B8588 		movq	-13688(%rbp), %rax
 6507      CAFFFF
 6508 4391 488D5001 		leaq	1(%rax), %rdx
 6509 4395 48899588 		movq	%rdx, -13688(%rbp)
 6509      CAFFFF
 6510 439c 0FB600   		movzbl	(%rax), %eax
 6511 439f 0FB6C0   		movzbl	%al, %eax
 6512 43a2 83E830   		subl	$48, %eax
 6513 43a5 4898     		cltq
 6514 43a7 488B04C5 		movq	nibbles(,%rax,8), %rax
 6514      00000000 
 6515 43af 4889C6   		movq	%rax, %rsi
 6516 43b2 BF000000 		movl	$.LC143, %edi
 6516      00
 6517 43b7 B8000000 		movl	$0, %eax
 6517      00
 6518 43bc E8000000 		call	printf
 6518      00
1249:main.c        **** 		printf(" %s\n", nibbles[*p++ - '0']);
 6519              		.loc 1 1249 0
 6520 43c1 488B8588 		movq	-13688(%rbp), %rax
 6520      CAFFFF
 6521 43c8 488D5001 		leaq	1(%rax), %rdx
 6522 43cc 48899588 		movq	%rdx, -13688(%rbp)
 6522      CAFFFF
 6523 43d3 0FB600   		movzbl	(%rax), %eax
 6524 43d6 0FB6C0   		movzbl	%al, %eax
 6525 43d9 83E830   		subl	$48, %eax
 6526 43dc 4898     		cltq
 6527 43de 488B04C5 		movq	nibbles(,%rax,8), %rax
 6527      00000000 
 6528 43e6 4889C6   		movq	%rax, %rsi
 6529 43e9 BF000000 		movl	$.LC145, %edi
 6529      00
 6530 43ee B8000000 		movl	$0, %eax
 6530      00
 6531 43f3 E8000000 		call	printf
 6531      00
1250:main.c        **** 		flSleep(100);
 6532              		.loc 1 1250 0
 6533 43f8 BF640000 		movl	$100, %edi
 6533      00
 6534 43fd E8000000 		call	flSleep
 6534      00
 6535              	.L347:
 6536              	.LBE60:
1251:main.c        **** 	}
1252:main.c        **** 
1253:main.c        **** 	if ( queryOpt->count ) {
 6537              		.loc 1 1253 0
 6538 4402 488B8510 		movq	-13808(%rbp), %rax
 6538      CAFFFF
 6539 4409 8B4060   		movl	96(%rax), %eax
 6540 440c 85C0     		testl	%eax, %eax
 6541 440e 0F844D01 		je	.L349
 6541      0000
1254:main.c        **** 		if ( isNeroCapable ) {
 6542              		.loc 1 1254 0
 6543 4414 80BD4DC9 		cmpb	$0, -14003(%rbp)
 6543      FFFF00
 6544 441b 0F841101 		je	.L350
 6544      0000
1255:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 6545              		.loc 1 1255 0
 6546 4421 488B85C0 		movq	-13888(%rbp), %rax
 6546      C9FFFF
 6547 4428 488D95C8 		leaq	-13880(%rbp), %rdx
 6547      C9FFFF
 6548 442f BE000000 		movl	$0, %esi
 6548      00
 6549 4434 4889C7   		movq	%rax, %rdi
 6550 4437 E8000000 		call	flSelectConduit
 6550      00
 6551 443c 89855CC9 		movl	%eax, -13988(%rbp)
 6551      FFFF
1256:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6552              		.loc 1 1256 0
 6553 4442 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6553      FFFF00
 6554 4449 740F     		je	.L351
 6555              		.loc 1 1256 0 is_stmt 0 discriminator 1
 6556 444b C78558C9 		movl	$1, -13992(%rbp)
 6556      FFFF0100 
 6556      0000
 6557 4455 E9271200 		jmp	.L323
 6557      00
 6558              	.L351:
1257:main.c        **** 			fStatus = jtagScanChain(handle, queryOpt->sval[0], &numDevices, scanChain, 16, &error);
 6559              		.loc 1 1257 0 is_stmt 1
 6560 445a 488B8510 		movq	-13808(%rbp), %rax
 6560      CAFFFF
 6561 4461 488B4068 		movq	104(%rax), %rax
 6562 4465 488B30   		movq	(%rax), %rsi
 6563 4468 488B85C0 		movq	-13888(%rbp), %rax
 6563      C9FFFF
 6564 446f 488DBDC8 		leaq	-13880(%rbp), %rdi
 6564      C9FFFF
 6565 4476 488D8DE0 		leaq	-13600(%rbp), %rcx
 6565      CAFFFF
 6566 447d 488D9550 		leaq	-14000(%rbp), %rdx
 6566      C9FFFF
 6567 4484 4989F9   		movq	%rdi, %r9
 6568 4487 41B81000 		movl	$16, %r8d
 6568      0000
 6569 448d 4889C7   		movq	%rax, %rdi
 6570 4490 E8000000 		call	jtagScanChain
 6570      00
 6571 4495 89855CC9 		movl	%eax, -13988(%rbp)
 6571      FFFF
1258:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6572              		.loc 1 1258 0
 6573 449b 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6573      FFFF00
 6574 44a2 740F     		je	.L352
 6575              		.loc 1 1258 0 is_stmt 0 discriminator 1
 6576 44a4 C78558C9 		movl	$1, -13992(%rbp)
 6576      FFFF0100 
 6576      0000
 6577 44ae E9CE1100 		jmp	.L323
 6577      00
 6578              	.L352:
1259:main.c        **** 			if ( numDevices ) {
 6579              		.loc 1 1259 0 is_stmt 1
 6580 44b3 8B8550C9 		movl	-14000(%rbp), %eax
 6580      FFFF
 6581 44b9 85C0     		testl	%eax, %eax
 6582 44bb 745A     		je	.L353
1260:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain, yielding:\n", vp);
 6583              		.loc 1 1260 0
 6584 44bd 488B8580 		movq	-13696(%rbp), %rax
 6584      CAFFFF
 6585 44c4 4889C6   		movq	%rax, %rsi
 6586 44c7 BF000000 		movl	$.LC146, %edi
 6586      00
 6587 44cc B8000000 		movl	$0, %eax
 6587      00
 6588 44d1 E8000000 		call	printf
 6588      00
1261:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 6589              		.loc 1 1261 0
 6590 44d6 C78560C9 		movl	$0, -13984(%rbp)
 6590      FFFF0000 
 6590      0000
 6591 44e0 EB25     		jmp	.L354
 6592              	.L355:
1262:main.c        **** 					printf("  0x%08X\n", scanChain[i]);
 6593              		.loc 1 1262 0 discriminator 3
 6594 44e2 8B8560C9 		movl	-13984(%rbp), %eax
 6594      FFFF
 6595 44e8 8B8485E0 		movl	-13600(%rbp,%rax,4), %eax
 6595      CAFFFF
 6596 44ef 89C6     		movl	%eax, %esi
 6597 44f1 BF000000 		movl	$.LC147, %edi
 6597      00
 6598 44f6 B8000000 		movl	$0, %eax
 6598      00
 6599 44fb E8000000 		call	printf
 6599      00
1261:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 6600              		.loc 1 1261 0 discriminator 3
 6601 4500 838560C9 		addl	$1, -13984(%rbp)
 6601      FFFF01
 6602              	.L354:
1261:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 6603              		.loc 1 1261 0 is_stmt 0 discriminator 1
 6604 4507 8B8550C9 		movl	-14000(%rbp), %eax
 6604      FFFF
 6605 450d 398560C9 		cmpl	%eax, -13984(%rbp)
 6605      FFFF
 6606 4513 72CD     		jb	.L355
 6607 4515 EB4A     		jmp	.L349
 6608              	.L353:
1263:main.c        **** 				}
1264:main.c        **** 			} else {
1265:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\
 6609              		.loc 1 1265 0 is_stmt 1
 6610 4517 488B8580 		movq	-13696(%rbp), %rax
 6610      CAFFFF
 6611 451e 4889C6   		movq	%rax, %rsi
 6612 4521 BF000000 		movl	$.LC148, %edi
 6612      00
 6613 4526 B8000000 		movl	$0, %eax
 6613      00
 6614 452b E8000000 		call	printf
 6614      00
 6615 4530 EB2F     		jmp	.L349
 6616              	.L350:
1266:main.c        **** 			}
1267:main.c        **** 		} else {
1268:main.c        **** 			fprintf(stderr, "JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n
 6617              		.loc 1 1268 0
 6618 4532 488B0500 		movq	stderr(%rip), %rax
 6618      000000
 6619 4539 488B9580 		movq	-13696(%rbp), %rdx
 6619      CAFFFF
 6620 4540 BE000000 		movl	$.LC149, %esi
 6620      00
 6621 4545 4889C7   		movq	%rax, %rdi
 6622 4548 B8000000 		movl	$0, %eax
 6622      00
 6623 454d E8000000 		call	fprintf
 6623      00
1269:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6624              		.loc 1 1269 0
 6625 4552 C78558C9 		movl	$12, -13992(%rbp)
 6625      FFFF0C00 
 6625      0000
 6626 455c E9201100 		jmp	.L323
 6626      00
 6627              	.L349:
1270:main.c        **** 		}
1271:main.c        **** 	}
1272:main.c        **** 
1273:main.c        **** 	if ( progOpt->count ) {
 6628              		.loc 1 1273 0
 6629 4561 488B8518 		movq	-13800(%rbp), %rax
 6629      CAFFFF
 6630 4568 8B4060   		movl	96(%rax), %eax
 6631 456b 85C0     		testl	%eax, %eax
 6632 456d 0F84C900 		je	.L357
 6632      0000
1274:main.c        **** 		printf("Programming device...\n");
 6633              		.loc 1 1274 0
 6634 4573 BF000000 		movl	$.LC150, %edi
 6634      00
 6635 4578 E8000000 		call	puts
 6635      00
1275:main.c        **** 		if ( isNeroCapable ) {
 6636              		.loc 1 1275 0
 6637 457d 80BD4DC9 		cmpb	$0, -14003(%rbp)
 6637      FFFF00
 6638 4584 0F848300 		je	.L358
 6638      0000
1276:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 6639              		.loc 1 1276 0
 6640 458a 488B85C0 		movq	-13888(%rbp), %rax
 6640      C9FFFF
 6641 4591 488D95C8 		leaq	-13880(%rbp), %rdx
 6641      C9FFFF
 6642 4598 BE000000 		movl	$0, %esi
 6642      00
 6643 459d 4889C7   		movq	%rax, %rdi
 6644 45a0 E8000000 		call	flSelectConduit
 6644      00
 6645 45a5 89855CC9 		movl	%eax, -13988(%rbp)
 6645      FFFF
1277:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6646              		.loc 1 1277 0
 6647 45ab 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6647      FFFF00
 6648 45b2 740F     		je	.L359
 6649              		.loc 1 1277 0 is_stmt 0 discriminator 1
 6650 45b4 C78558C9 		movl	$1, -13992(%rbp)
 6650      FFFF0100 
 6650      0000
 6651 45be E9BE1000 		jmp	.L323
 6651      00
 6652              	.L359:
1278:main.c        **** 			fStatus = flProgram(handle, progOpt->sval[0], NULL, &error);
 6653              		.loc 1 1278 0 is_stmt 1
 6654 45c3 488B8518 		movq	-13800(%rbp), %rax
 6654      CAFFFF
 6655 45ca 488B4068 		movq	104(%rax), %rax
 6656 45ce 488B30   		movq	(%rax), %rsi
 6657 45d1 488B85C0 		movq	-13888(%rbp), %rax
 6657      C9FFFF
 6658 45d8 488D95C8 		leaq	-13880(%rbp), %rdx
 6658      C9FFFF
 6659 45df 4889D1   		movq	%rdx, %rcx
 6660 45e2 BA000000 		movl	$0, %edx
 6660      00
 6661 45e7 4889C7   		movq	%rax, %rdi
 6662 45ea E8000000 		call	flProgram
 6662      00
 6663 45ef 89855CC9 		movl	%eax, -13988(%rbp)
 6663      FFFF
1279:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6664              		.loc 1 1279 0
 6665 45f5 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6665      FFFF00
 6666 45fc 743E     		je	.L357
 6667              		.loc 1 1279 0 is_stmt 0 discriminator 1
 6668 45fe C78558C9 		movl	$1, -13992(%rbp)
 6668      FFFF0100 
 6668      0000
 6669 4608 E9741000 		jmp	.L323
 6669      00
 6670              	.L358:
1280:main.c        **** 		} else {
1281:main.c        **** 			fprintf(stderr, "Program operation requested but device at %s does not support NeroProg\n", vp);
 6671              		.loc 1 1281 0 is_stmt 1
 6672 460d 488B0500 		movq	stderr(%rip), %rax
 6672      000000
 6673 4614 488B9580 		movq	-13696(%rbp), %rdx
 6673      CAFFFF
 6674 461b BE000000 		movl	$.LC151, %esi
 6674      00
 6675 4620 4889C7   		movq	%rax, %rdi
 6676 4623 B8000000 		movl	$0, %eax
 6676      00
 6677 4628 E8000000 		call	fprintf
 6677      00
1282:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6678              		.loc 1 1282 0
 6679 462d C78558C9 		movl	$12, -13992(%rbp)
 6679      FFFF0C00 
 6679      0000
 6680 4637 E9451000 		jmp	.L323
 6680      00
 6681              	.L357:
1283:main.c        **** 		}
1284:main.c        **** 	}
1285:main.c        **** 
1286:main.c        **** 	if ( benOpt->count ) {
 6682              		.loc 1 1286 0
 6683 463c 488B8538 		movq	-13768(%rbp), %rax
 6683      CAFFFF
 6684 4643 8B4060   		movl	96(%rax), %eax
 6685 4646 85C0     		testl	%eax, %eax
 6686 4648 7407     		je	.L360
1287:main.c        **** 		enableBenchmarking = true;
 6687              		.loc 1 1287 0
 6688 464a C6050000 		movb	$1, enableBenchmarking(%rip)
 6688      000001
 6689              	.L360:
1288:main.c        **** 	}
1289:main.c        **** 	
1290:main.c        **** 	if ( actOpt->count ) {
 6690              		.loc 1 1290 0
 6691 4651 488B8528 		movq	-13784(%rbp), %rax
 6691      CAFFFF
 6692 4658 8B4060   		movl	96(%rax), %eax
 6693 465b 85C0     		testl	%eax, %eax
 6694 465d 0F845201 		je	.L361
 6694      0000
1291:main.c        **** 		printf("Executing CommFPGA actions on FPGALink device %s...\n", vp);
 6695              		.loc 1 1291 0
 6696 4663 488B8580 		movq	-13696(%rbp), %rax
 6696      CAFFFF
 6697 466a 4889C6   		movq	%rax, %rsi
 6698 466d BF000000 		movl	$.LC152, %edi
 6698      00
 6699 4672 B8000000 		movl	$0, %eax
 6699      00
 6700 4677 E8000000 		call	printf
 6700      00
1292:main.c        **** 		if ( isCommCapable ) {
 6701              		.loc 1 1292 0
 6702 467c 80BD4EC9 		cmpb	$0, -14002(%rbp)
 6702      FFFF00
 6703 4683 0F84FD00 		je	.L362
 6703      0000
 6704              	.LBB61:
1293:main.c        **** 			uint8 isRunning;
1294:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 6705              		.loc 1 1294 0
 6706 4689 0FB68D4C 		movzbl	-14004(%rbp), %ecx
 6706      C9FFFF
 6707 4690 488B85C0 		movq	-13888(%rbp), %rax
 6707      C9FFFF
 6708 4697 488D95C8 		leaq	-13880(%rbp), %rdx
 6708      C9FFFF
 6709 469e 89CE     		movl	%ecx, %esi
 6710 46a0 4889C7   		movq	%rax, %rdi
 6711 46a3 E8000000 		call	flSelectConduit
 6711      00
 6712 46a8 89855CC9 		movl	%eax, -13988(%rbp)
 6712      FFFF
1295:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6713              		.loc 1 1295 0
 6714 46ae 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6714      FFFF00
 6715 46b5 740F     		je	.L363
 6716              		.loc 1 1295 0 is_stmt 0 discriminator 1
 6717 46b7 C78558C9 		movl	$1, -13992(%rbp)
 6717      FFFF0100 
 6717      0000
 6718 46c1 E9BB0F00 		jmp	.L323
 6718      00
 6719              	.L363:
1296:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 6720              		.loc 1 1296 0 is_stmt 1
 6721 46c6 488B85C0 		movq	-13888(%rbp), %rax
 6721      C9FFFF
 6722 46cd 488D95C8 		leaq	-13880(%rbp), %rdx
 6722      C9FFFF
 6723 46d4 488D8DD8 		leaq	-13864(%rbp), %rcx
 6723      C9FFFF
 6724 46db 4889CE   		movq	%rcx, %rsi
 6725 46de 4889C7   		movq	%rax, %rdi
 6726 46e1 E8000000 		call	flIsFPGARunning
 6726      00
 6727 46e6 89855CC9 		movl	%eax, -13988(%rbp)
 6727      FFFF
1297:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6728              		.loc 1 1297 0
 6729 46ec 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6729      FFFF00
 6730 46f3 740F     		je	.L365
 6731              		.loc 1 1297 0 is_stmt 0 discriminator 1
 6732 46f5 C78558C9 		movl	$1, -13992(%rbp)
 6732      FFFF0100 
 6732      0000
 6733 46ff E97D0F00 		jmp	.L323
 6733      00
 6734              	.L365:
1298:main.c        **** 			if ( isRunning ) {
 6735              		.loc 1 1298 0 is_stmt 1
 6736 4704 0FB685D8 		movzbl	-13864(%rbp), %eax
 6736      C9FFFF
 6737 470b 84C0     		testb	%al, %al
 6738 470d 7447     		je	.L366
1299:main.c        **** 				pStatus = parseLine(handle, actOpt->sval[0], &error);
 6739              		.loc 1 1299 0
 6740 470f 488B8528 		movq	-13784(%rbp), %rax
 6740      CAFFFF
 6741 4716 488B4068 		movq	104(%rax), %rax
 6742 471a 488B08   		movq	(%rax), %rcx
 6743 471d 488B85C0 		movq	-13888(%rbp), %rax
 6743      C9FFFF
 6744 4724 488D95C8 		leaq	-13880(%rbp), %rdx
 6744      C9FFFF
 6745 472b 4889CE   		movq	%rcx, %rsi
 6746 472e 4889C7   		movq	%rax, %rdi
 6747 4731 E85EC4FF 		call	parseLine
 6747      FF
 6748 4736 898594C9 		movl	%eax, -13932(%rbp)
 6748      FFFF
1300:main.c        **** 				CHECK_STATUS(pStatus, pStatus, cleanup);
 6749              		.loc 1 1300 0
 6750 473c 83BD94C9 		cmpl	$0, -13932(%rbp)
 6750      FFFF00
 6751 4743 7470     		je	.L361
 6752              		.loc 1 1300 0 is_stmt 0 discriminator 1
 6753 4745 8B8594C9 		movl	-13932(%rbp), %eax
 6753      FFFF
 6754 474b 898558C9 		movl	%eax, -13992(%rbp)
 6754      FFFF
 6755 4751 E92B0F00 		jmp	.L323
 6755      00
 6756              	.L366:
1301:main.c        **** 			} else {
1302:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 6757              		.loc 1 1302 0 is_stmt 1
 6758 4756 488B0500 		movq	stderr(%rip), %rax
 6758      000000
 6759 475d 488B9580 		movq	-13696(%rbp), %rdx
 6759      CAFFFF
 6760 4764 BE000000 		movl	$.LC153, %esi
 6760      00
 6761 4769 4889C7   		movq	%rax, %rdi
 6762 476c B8000000 		movl	$0, %eax
 6762      00
 6763 4771 E8000000 		call	fprintf
 6763      00
1303:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 6764              		.loc 1 1303 0
 6765 4776 C78558C9 		movl	$12, -13992(%rbp)
 6765      FFFF0C00 
 6765      0000
 6766 4780 90       		nop
 6767 4781 E9FB0E00 		jmp	.L323
 6767      00
 6768              	.L362:
 6769              	.LBE61:
1304:main.c        **** 			}
1305:main.c        **** 		} else {
1306:main.c        **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 6770              		.loc 1 1306 0
 6771 4786 488B0500 		movq	stderr(%rip), %rax
 6771      000000
 6772 478d 488B9580 		movq	-13696(%rbp), %rdx
 6772      CAFFFF
 6773 4794 BE000000 		movl	$.LC154, %esi
 6773      00
 6774 4799 4889C7   		movq	%rax, %rdi
 6775 479c B8000000 		movl	$0, %eax
 6775      00
 6776 47a1 E8000000 		call	fprintf
 6776      00
1307:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6777              		.loc 1 1307 0
 6778 47a6 C78558C9 		movl	$12, -13992(%rbp)
 6778      FFFF0C00 
 6778      0000
 6779 47b0 E9CC0E00 		jmp	.L323
 6779      00
 6780              	.L361:
1308:main.c        **** 		}
1309:main.c        **** 	}
1310:main.c        **** 
1311:main.c        **** 	if ( dumpOpt->count ) {
 6781              		.loc 1 1311 0
 6782 47b5 488B8548 		movq	-13752(%rbp), %rax
 6782      CAFFFF
 6783 47bc 8B4060   		movl	96(%rax), %eax
 6784 47bf 85C0     		testl	%eax, %eax
 6785 47c1 0F84D002 		je	.L368
 6785      0000
 6786              	.LBB62:
1312:main.c        **** 		const char *fileName;
1313:main.c        **** 		unsigned long chan = strtoul(dumpOpt->sval[0], (char**)&fileName, 10);
 6787              		.loc 1 1313 0
 6788 47c7 488B8548 		movq	-13752(%rbp), %rax
 6788      CAFFFF
 6789 47ce 488B4068 		movq	104(%rax), %rax
 6790 47d2 488B00   		movq	(%rax), %rax
 6791 47d5 488D8DD0 		leaq	-13872(%rbp), %rcx
 6791      C9FFFF
 6792 47dc BA0A0000 		movl	$10, %edx
 6792      00
 6793 47e1 4889CE   		movq	%rcx, %rsi
 6794 47e4 4889C7   		movq	%rax, %rdi
 6795 47e7 E8000000 		call	strtoul
 6795      00
 6796 47ec 48898590 		movq	%rax, -13680(%rbp)
 6796      CAFFFF
1314:main.c        **** 		FILE *file = NULL;
 6797              		.loc 1 1314 0
 6798 47f3 48C78598 		movq	$0, -13672(%rbp)
 6798      CAFFFF00 
 6798      000000
1315:main.c        **** 		const uint8 *recvData;
1316:main.c        **** 		uint32 actualLength;
1317:main.c        **** 		if ( *fileName != ':' ) {
 6799              		.loc 1 1317 0
 6800 47fe 488B85D0 		movq	-13872(%rbp), %rax
 6800      C9FFFF
 6801 4805 0FB600   		movzbl	(%rax), %eax
 6802 4808 3C3A     		cmpb	$58, %al
 6803 480a 742F     		je	.L369
1318:main.c        **** 			fprintf(stderr, "%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n", progName);
 6804              		.loc 1 1318 0
 6805 480c 488B0500 		movq	stderr(%rip), %rax
 6805      000000
 6806 4813 488B9570 		movq	-13712(%rbp), %rdx
 6806      CAFFFF
 6807 481a BE000000 		movl	$.LC155, %esi
 6807      00
 6808 481f 4889C7   		movq	%rax, %rdi
 6809 4822 B8000000 		movl	$0, %eax
 6809      00
 6810 4827 E8000000 		call	fprintf
 6810      00
1319:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6811              		.loc 1 1319 0
 6812 482c C78558C9 		movl	$12, -13992(%rbp)
 6812      FFFF0C00 
 6812      0000
 6813 4836 E9460E00 		jmp	.L323
 6813      00
 6814              	.L369:
1320:main.c        **** 		}
1321:main.c        **** 		fileName++;
 6815              		.loc 1 1321 0
 6816 483b 488B85D0 		movq	-13872(%rbp), %rax
 6816      C9FFFF
 6817 4842 4883C001 		addq	$1, %rax
 6818 4846 488985D0 		movq	%rax, -13872(%rbp)
 6818      C9FFFF
1322:main.c        **** 		printf("Copying from channel %lu to %s", chan, fileName);
 6819              		.loc 1 1322 0
 6820 484d 488B95D0 		movq	-13872(%rbp), %rdx
 6820      C9FFFF
 6821 4854 488B8590 		movq	-13680(%rbp), %rax
 6821      CAFFFF
 6822 485b 4889C6   		movq	%rax, %rsi
 6823 485e BF000000 		movl	$.LC156, %edi
 6823      00
 6824 4863 B8000000 		movl	$0, %eax
 6824      00
 6825 4868 E8000000 		call	printf
 6825      00
1323:main.c        **** 		file = fopen(fileName, "wb");
 6826              		.loc 1 1323 0
 6827 486d 488B85D0 		movq	-13872(%rbp), %rax
 6827      C9FFFF
 6828 4874 BE000000 		movl	$.LC36, %esi
 6828      00
 6829 4879 4889C7   		movq	%rax, %rdi
 6830 487c E8000000 		call	fopen
 6830      00
 6831 4881 48898598 		movq	%rax, -13672(%rbp)
 6831      CAFFFF
1324:main.c        **** 		CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 6832              		.loc 1 1324 0
 6833 4888 4883BD98 		cmpq	$0, -13672(%rbp)
 6833      CAFFFF00 
 6834 4890 750F     		jne	.L371
 6835              		.loc 1 1324 0 is_stmt 0 discriminator 1
 6836 4892 C78558C9 		movl	$11, -13992(%rbp)
 6836      FFFF0B00 
 6836      0000
 6837 489c E9E00D00 		jmp	.L323
 6837      00
 6838              	.L371:
1325:main.c        **** 		sigRegisterHandler();
 6839              		.loc 1 1325 0 is_stmt 1
 6840 48a1 E8000000 		call	sigRegisterHandler
 6840      00
1326:main.c        **** 		fStatus = flSelectConduit(handle, conduit, &error);
 6841              		.loc 1 1326 0
 6842 48a6 0FB68D4C 		movzbl	-14004(%rbp), %ecx
 6842      C9FFFF
 6843 48ad 488B85C0 		movq	-13888(%rbp), %rax
 6843      C9FFFF
 6844 48b4 488D95C8 		leaq	-13880(%rbp), %rdx
 6844      C9FFFF
 6845 48bb 89CE     		movl	%ecx, %esi
 6846 48bd 4889C7   		movq	%rax, %rdi
 6847 48c0 E8000000 		call	flSelectConduit
 6847      00
 6848 48c5 89855CC9 		movl	%eax, -13988(%rbp)
 6848      FFFF
1327:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6849              		.loc 1 1327 0
 6850 48cb 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6850      FFFF00
 6851 48d2 740F     		je	.L372
 6852              		.loc 1 1327 0 is_stmt 0 discriminator 1
 6853 48d4 C78558C9 		movl	$1, -13992(%rbp)
 6853      FFFF0100 
 6853      0000
 6854 48de E99E0D00 		jmp	.L323
 6854      00
 6855              	.L372:
1328:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 6856              		.loc 1 1328 0 is_stmt 1
 6857 48e3 488B8590 		movq	-13680(%rbp), %rax
 6857      CAFFFF
 6858 48ea 0FB6F0   		movzbl	%al, %esi
 6859 48ed 488B85C0 		movq	-13888(%rbp), %rax
 6859      C9FFFF
 6860 48f4 488D95C8 		leaq	-13880(%rbp), %rdx
 6860      C9FFFF
 6861 48fb 4989D0   		movq	%rdx, %r8
 6862 48fe B9000000 		movl	$0, %ecx
 6862      00
 6863 4903 BA005800 		movl	$22528, %edx
 6863      00
 6864 4908 4889C7   		movq	%rax, %rdi
 6865 490b E8000000 		call	flReadChannelAsyncSubmit
 6865      00
 6866 4910 89855CC9 		movl	%eax, -13988(%rbp)
 6866      FFFF
1329:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6867              		.loc 1 1329 0
 6868 4916 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6868      FFFF00
 6869 491d 740F     		je	.L373
 6870              		.loc 1 1329 0 is_stmt 0 discriminator 1
 6871 491f C78558C9 		movl	$1, -13992(%rbp)
 6871      FFFF0100 
 6871      0000
 6872 4929 E9530D00 		jmp	.L323
 6872      00
 6873              	.L373:
1330:main.c        **** 		do {
1331:main.c        **** 			fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 6874              		.loc 1 1331 0 is_stmt 1
 6875 492e 488B8590 		movq	-13680(%rbp), %rax
 6875      CAFFFF
 6876 4935 0FB6F0   		movzbl	%al, %esi
 6877 4938 488B85C0 		movq	-13888(%rbp), %rax
 6877      C9FFFF
 6878 493f 488D95C8 		leaq	-13880(%rbp), %rdx
 6878      C9FFFF
 6879 4946 4989D0   		movq	%rdx, %r8
 6880 4949 B9000000 		movl	$0, %ecx
 6880      00
 6881 494e BA005800 		movl	$22528, %edx
 6881      00
 6882 4953 4889C7   		movq	%rax, %rdi
 6883 4956 E8000000 		call	flReadChannelAsyncSubmit
 6883      00
 6884 495b 89855CC9 		movl	%eax, -13988(%rbp)
 6884      FFFF
1332:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6885              		.loc 1 1332 0
 6886 4961 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6886      FFFF00
 6887 4968 740F     		je	.L374
 6888              		.loc 1 1332 0 is_stmt 0 discriminator 1
 6889 496a C78558C9 		movl	$1, -13992(%rbp)
 6889      FFFF0100 
 6889      0000
 6890 4974 E9080D00 		jmp	.L323
 6890      00
 6891              	.L374:
1333:main.c        **** 			fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6892              		.loc 1 1333 0 is_stmt 1
 6893 4979 488B85C0 		movq	-13888(%rbp), %rax
 6893      C9FFFF
 6894 4980 488DBDC8 		leaq	-13880(%rbp), %rdi
 6894      C9FFFF
 6895 4987 488D8D54 		leaq	-13996(%rbp), %rcx
 6895      C9FFFF
 6896 498e 488D9554 		leaq	-13996(%rbp), %rdx
 6896      C9FFFF
 6897 4995 488DB5D8 		leaq	-13864(%rbp), %rsi
 6897      C9FFFF
 6898 499c 4989F8   		movq	%rdi, %r8
 6899 499f 4889C7   		movq	%rax, %rdi
 6900 49a2 E8000000 		call	flReadChannelAsyncAwait
 6900      00
 6901 49a7 89855CC9 		movl	%eax, -13988(%rbp)
 6901      FFFF
1334:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6902              		.loc 1 1334 0
 6903 49ad 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6903      FFFF00
 6904 49b4 740F     		je	.L375
 6905              		.loc 1 1334 0 is_stmt 0 discriminator 1
 6906 49b6 C78558C9 		movl	$1, -13992(%rbp)
 6906      FFFF0100 
 6906      0000
 6907 49c0 E9BC0C00 		jmp	.L323
 6907      00
 6908              	.L375:
1335:main.c        **** 			fwrite(recvData, 1, actualLength, file);
 6909              		.loc 1 1335 0 is_stmt 1
 6910 49c5 8B8554C9 		movl	-13996(%rbp), %eax
 6910      FFFF
 6911 49cb 89C6     		movl	%eax, %esi
 6912 49cd 488B85D8 		movq	-13864(%rbp), %rax
 6912      C9FFFF
 6913 49d4 488B9598 		movq	-13672(%rbp), %rdx
 6913      CAFFFF
 6914 49db 4889D1   		movq	%rdx, %rcx
 6915 49de 4889F2   		movq	%rsi, %rdx
 6916 49e1 BE010000 		movl	$1, %esi
 6916      00
 6917 49e6 4889C7   		movq	%rax, %rdi
 6918 49e9 E8000000 		call	fwrite
 6918      00
1336:main.c        **** 			printf(".");
 6919              		.loc 1 1336 0
 6920 49ee BF2E0000 		movl	$46, %edi
 6920      00
 6921 49f3 E8000000 		call	putchar
 6921      00
1337:main.c        **** 		} while ( !sigIsRaised() );
 6922              		.loc 1 1337 0
 6923 49f8 E8000000 		call	sigIsRaised
 6923      00
 6924 49fd 83F001   		xorl	$1, %eax
 6925 4a00 84C0     		testb	%al, %al
 6926 4a02 0F8526FF 		jne	.L373
 6926      FFFF
1338:main.c        **** 		printf("\nCaught SIGINT, quitting...\n");
 6927              		.loc 1 1338 0
 6928 4a08 BF000000 		movl	$.LC157, %edi
 6928      00
 6929 4a0d E8000000 		call	puts
 6929      00
1339:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6930              		.loc 1 1339 0
 6931 4a12 488B85C0 		movq	-13888(%rbp), %rax
 6931      C9FFFF
 6932 4a19 488DBDC8 		leaq	-13880(%rbp), %rdi
 6932      C9FFFF
 6933 4a20 488D8D54 		leaq	-13996(%rbp), %rcx
 6933      C9FFFF
 6934 4a27 488D9554 		leaq	-13996(%rbp), %rdx
 6934      C9FFFF
 6935 4a2e 488DB5D8 		leaq	-13864(%rbp), %rsi
 6935      C9FFFF
 6936 4a35 4989F8   		movq	%rdi, %r8
 6937 4a38 4889C7   		movq	%rax, %rdi
 6938 4a3b E8000000 		call	flReadChannelAsyncAwait
 6938      00
 6939 4a40 89855CC9 		movl	%eax, -13988(%rbp)
 6939      FFFF
1340:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6940              		.loc 1 1340 0
 6941 4a46 83BD5CC9 		cmpl	$0, -13988(%rbp)
 6941      FFFF00
 6942 4a4d 7410     		je	.L376
 6943              		.loc 1 1340 0 is_stmt 0 discriminator 1
 6944 4a4f C78558C9 		movl	$1, -13992(%rbp)
 6944      FFFF0100 
 6944      0000
 6945 4a59 90       		nop
 6946 4a5a E9220C00 		jmp	.L323
 6946      00
 6947              	.L376:
1341:main.c        **** 		fwrite(recvData, 1, actualLength, file);
 6948              		.loc 1 1341 0 is_stmt 1
 6949 4a5f 8B8554C9 		movl	-13996(%rbp), %eax
 6949      FFFF
 6950 4a65 89C6     		movl	%eax, %esi
 6951 4a67 488B85D8 		movq	-13864(%rbp), %rax
 6951      C9FFFF
 6952 4a6e 488B9598 		movq	-13672(%rbp), %rdx
 6952      CAFFFF
 6953 4a75 4889D1   		movq	%rdx, %rcx
 6954 4a78 4889F2   		movq	%rsi, %rdx
 6955 4a7b BE010000 		movl	$1, %esi
 6955      00
 6956 4a80 4889C7   		movq	%rax, %rdi
 6957 4a83 E8000000 		call	fwrite
 6957      00
1342:main.c        **** 		fclose(file);
 6958              		.loc 1 1342 0
 6959 4a88 488B8598 		movq	-13672(%rbp), %rax
 6959      CAFFFF
 6960 4a8f 4889C7   		movq	%rax, %rdi
 6961 4a92 E8000000 		call	fclose
 6961      00
 6962              	.L368:
 6963              	.LBE62:
1343:main.c        **** 	}
1344:main.c        **** //   cccccccccccccccccccccccccccccc
1345:main.c        ****     if( rpOpt->count )
 6964              		.loc 1 1345 0
 6965 4a97 488B85F8 		movq	-13832(%rbp), %rax
 6965      C9FFFF
 6966 4a9e 8B4060   		movl	96(%rax), %eax
 6967 4aa1 85C0     		testl	%eax, %eax
 6968 4aa3 0F84020A 		je	.L377
 6968      0000
 6969              	.LBB63:
1346:main.c        ****     {
1347:main.c        ****         //printf("Got the file %s\n", rpOpt->sval[0]);
1348:main.c        ****    		int table[640][5];
1349:main.c        ****         int rows;
1350:main.c        **** 		const char* path = rpOpt->sval[0];
 6970              		.loc 1 1350 0
 6971 4aa9 488B85F8 		movq	-13832(%rbp), %rax
 6971      C9FFFF
 6972 4ab0 488B4068 		movq	104(%rax), %rax
 6973 4ab4 488B00   		movq	(%rax), %rax
 6974 4ab7 488985A0 		movq	%rax, -13664(%rbp)
 6974      CAFFFF
 6975              	.L378:
1351:main.c        **** 		entire_process:
1352:main.c        **** 		rows = read_table(path, table);
 6976              		.loc 1 1352 0
 6977 4abe 488D95D0 		leaq	-12848(%rbp), %rdx
 6977      CDFFFF
 6978 4ac5 488B85A0 		movq	-13664(%rbp), %rax
 6978      CAFFFF
 6979 4acc 4889D6   		movq	%rdx, %rsi
 6980 4acf 4889C7   		movq	%rax, %rdi
 6981 4ad2 E8000000 		call	read_table
 6981      00
 6982 4ad7 898598C9 		movl	%eax, -13928(%rbp)
 6982      FFFF
 6983              	.LBB64:
1353:main.c        **** 		for(int i=0; i<rows; i++)
 6984              		.loc 1 1353 0
 6985 4add C78568C9 		movl	$0, -13976(%rbp)
 6985      FFFF0000 
 6985      0000
 6986 4ae7 E9DF0000 		jmp	.L379
 6986      00
 6987              	.L380:
1354:main.c        **** 		{
1355:main.c        **** 			printf("%d, %d, %d, %d, %d\n", table[i][0], table[i][1], table[i][2], table[i][3], table[i][4]);
 6988              		.loc 1 1355 0 discriminator 3
 6989 4aec 8B8568C9 		movl	-13976(%rbp), %eax
 6989      FFFF
 6990 4af2 4863D0   		movslq	%eax, %rdx
 6991 4af5 4889D0   		movq	%rdx, %rax
 6992 4af8 48C1E002 		salq	$2, %rax
 6993 4afc 4801D0   		addq	%rdx, %rax
 6994 4aff 48C1E002 		salq	$2, %rax
 6995 4b03 488D5DF0 		leaq	-16(%rbp), %rbx
 6996 4b07 4801D8   		addq	%rbx, %rax
 6997 4b0a 482D1032 		subq	$12816, %rax
 6997      0000
 6998 4b10 448B00   		movl	(%rax), %r8d
 6999 4b13 8B8568C9 		movl	-13976(%rbp), %eax
 6999      FFFF
 7000 4b19 4863D0   		movslq	%eax, %rdx
 7001 4b1c 4889D0   		movq	%rdx, %rax
 7002 4b1f 48C1E002 		salq	$2, %rax
 7003 4b23 4801D0   		addq	%rdx, %rax
 7004 4b26 48C1E002 		salq	$2, %rax
 7005 4b2a 488D5DF0 		leaq	-16(%rbp), %rbx
 7006 4b2e 4801D8   		addq	%rbx, %rax
 7007 4b31 482D1432 		subq	$12820, %rax
 7007      0000
 7008 4b37 8B38     		movl	(%rax), %edi
 7009 4b39 8B8568C9 		movl	-13976(%rbp), %eax
 7009      FFFF
 7010 4b3f 4863D0   		movslq	%eax, %rdx
 7011 4b42 4889D0   		movq	%rdx, %rax
 7012 4b45 48C1E002 		salq	$2, %rax
 7013 4b49 4801D0   		addq	%rdx, %rax
 7014 4b4c 48C1E002 		salq	$2, %rax
 7015 4b50 488D5DF0 		leaq	-16(%rbp), %rbx
 7016 4b54 4801D8   		addq	%rbx, %rax
 7017 4b57 482D1832 		subq	$12824, %rax
 7017      0000
 7018 4b5d 8B08     		movl	(%rax), %ecx
 7019 4b5f 8B8568C9 		movl	-13976(%rbp), %eax
 7019      FFFF
 7020 4b65 4863D0   		movslq	%eax, %rdx
 7021 4b68 4889D0   		movq	%rdx, %rax
 7022 4b6b 48C1E002 		salq	$2, %rax
 7023 4b6f 4801D0   		addq	%rdx, %rax
 7024 4b72 48C1E002 		salq	$2, %rax
 7025 4b76 488D5DF0 		leaq	-16(%rbp), %rbx
 7026 4b7a 4801D8   		addq	%rbx, %rax
 7027 4b7d 482D1C32 		subq	$12828, %rax
 7027      0000
 7028 4b83 8B30     		movl	(%rax), %esi
 7029 4b85 8B8568C9 		movl	-13976(%rbp), %eax
 7029      FFFF
 7030 4b8b 4863D0   		movslq	%eax, %rdx
 7031 4b8e 4889D0   		movq	%rdx, %rax
 7032 4b91 48C1E002 		salq	$2, %rax
 7033 4b95 4801D0   		addq	%rdx, %rax
 7034 4b98 48C1E002 		salq	$2, %rax
 7035 4b9c 488D5DF0 		leaq	-16(%rbp), %rbx
 7036 4ba0 4801D8   		addq	%rbx, %rax
 7037 4ba3 482D2032 		subq	$12832, %rax
 7037      0000
 7038 4ba9 8B00     		movl	(%rax), %eax
 7039 4bab 4589C1   		movl	%r8d, %r9d
 7040 4bae 4189F8   		movl	%edi, %r8d
 7041 4bb1 89F2     		movl	%esi, %edx
 7042 4bb3 89C6     		movl	%eax, %esi
 7043 4bb5 BF000000 		movl	$.LC158, %edi
 7043      00
 7044 4bba B8000000 		movl	$0, %eax
 7044      00
 7045 4bbf E8000000 		call	printf
 7045      00
1353:main.c        **** 		for(int i=0; i<rows; i++)
 7046              		.loc 1 1353 0 discriminator 3
 7047 4bc4 838568C9 		addl	$1, -13976(%rbp)
 7047      FFFF01
 7048              	.L379:
1353:main.c        **** 		for(int i=0; i<rows; i++)
 7049              		.loc 1 1353 0 is_stmt 0 discriminator 1
 7050 4bcb 8B8568C9 		movl	-13976(%rbp), %eax
 7050      FFFF
 7051 4bd1 3B8598C9 		cmpl	-13928(%rbp), %eax
 7051      FFFF
 7052 4bd7 0F8C0FFF 		jl	.L380
 7052      FFFF
 7053              	.LBE64:
1356:main.c        **** 		}
1357:main.c        ****     
1358:main.c        ****     	sleep(1); 
 7054              		.loc 1 1358 0 is_stmt 1
 7055 4bdd BF010000 		movl	$1, %edi
 7055      00
 7056 4be2 E8000000 		call	sleep
 7056      00
 7057              	.L381:
 7058              	.LBB65:
1359:main.c        ****     	int x_coordinate[65],y_coordinate[65]; 
1360:main.c        ****     	host_label_2:
1361:main.c        ****     	for(int i=0;i<65;i++) { x_coordinate[i]=-1; y_coordinate[i]=-1; }
 7059              		.loc 1 1361 0
 7060 4be7 C7856CC9 		movl	$0, -13972(%rbp)
 7060      FFFF0000 
 7060      0000
 7061 4bf1 EB2D     		jmp	.L382
 7062              	.L383:
 7063              		.loc 1 1361 0 is_stmt 0 discriminator 3
 7064 4bf3 8B856CC9 		movl	-13972(%rbp), %eax
 7064      FFFF
 7065 4bf9 4898     		cltq
 7066 4bfb C78485B0 		movl	$-1, -13392(%rbp,%rax,4)
 7066      CBFFFFFF 
 7066      FFFFFF
 7067 4c06 8B856CC9 		movl	-13972(%rbp), %eax
 7067      FFFF
 7068 4c0c 4898     		cltq
 7069 4c0e C78485C0 		movl	$-1, -13120(%rbp,%rax,4)
 7069      CCFFFFFF 
 7069      FFFFFF
 7070 4c19 83856CC9 		addl	$1, -13972(%rbp)
 7070      FFFF01
 7071              	.L382:
 7072              		.loc 1 1361 0 discriminator 1
 7073 4c20 83BD6CC9 		cmpl	$64, -13972(%rbp)
 7073      FFFF40
 7074 4c27 7ECA     		jle	.L383
 7075              	.LBE65:
1362:main.c        ****     	int start_i=0, end_i=64; 
 7076              		.loc 1 1362 0 is_stmt 1
 7077 4c29 C7859CC9 		movl	$0, -13924(%rbp)
 7077      FFFF0000 
 7077      0000
 7078 4c33 C785A0C9 		movl	$64, -13920(%rbp)
 7078      FFFF4000 
 7078      0000
 7079              	.LBB66:
1363:main.c        ****     	for(int i=start_i;i<end_i;i++){
 7080              		.loc 1 1363 0
 7081 4c3d 8B859CC9 		movl	-13924(%rbp), %eax
 7081      FFFF
 7082 4c43 898570C9 		movl	%eax, -13968(%rbp)
 7082      FFFF
 7083 4c49 E9460200 		jmp	.L384
 7083      00
 7084              	.L394:
1364:main.c        ****     			if(isCommCapable){
 7085              		.loc 1 1364 0
 7086 4c4e 80BD4EC9 		cmpb	$0, -14002(%rbp)
 7086      FFFF00
 7087 4c55 0F843202 		je	.L385
 7087      0000
 7088              	.LBB67:
1365:main.c        ****     					uint8 isRunning; 
1366:main.c        ****     					fStatus=flIsFPGARunning(handle,&isRunning,&error);
 7089              		.loc 1 1366 0
 7090 4c5b 488B85C0 		movq	-13888(%rbp), %rax
 7090      C9FFFF
 7091 4c62 488D95C8 		leaq	-13880(%rbp), %rdx
 7091      C9FFFF
 7092 4c69 488D8DD8 		leaq	-13864(%rbp), %rcx
 7092      C9FFFF
 7093 4c70 4889CE   		movq	%rcx, %rsi
 7094 4c73 4889C7   		movq	%rax, %rdi
 7095 4c76 E8000000 		call	flIsFPGARunning
 7095      00
 7096 4c7b 89855CC9 		movl	%eax, -13988(%rbp)
 7096      FFFF
1367:main.c        ****     					CHECK_STATUS(fStatus,FLP_LIBERR,cleanup); 
 7097              		.loc 1 1367 0
 7098 4c81 83BD5CC9 		cmpl	$0, -13988(%rbp)
 7098      FFFF00
 7099 4c88 740F     		je	.L386
 7100              		.loc 1 1367 0 is_stmt 0 discriminator 1
 7101 4c8a C78558C9 		movl	$1, -13992(%rbp)
 7101      FFFF0100 
 7101      0000
 7102 4c94 E9E80900 		jmp	.L323
 7102      00
 7103              	.L386:
1368:main.c        ****     					if(isRunning){
 7104              		.loc 1 1368 0 is_stmt 1
 7105 4c99 0FB685D8 		movzbl	-13864(%rbp), %eax
 7105      C9FFFF
 7106 4ca0 84C0     		testb	%al, %al
 7107 4ca2 0F84E501 		je	.L385
 7107      0000
 7108              	.LBB68:
1369:main.c        ****                                 printf("\n"); 
 7109              		.loc 1 1369 0
 7110 4ca8 BF0A0000 		movl	$10, %edi
 7110      00
 7111 4cad E8000000 		call	putchar
 7111      00
1370:main.c        ****     							printf("attempting to read coordinates from  channel %d\n",2*i); 
 7112              		.loc 1 1370 0
 7113 4cb2 8B8570C9 		movl	-13968(%rbp), %eax
 7113      FFFF
 7114 4cb8 01C0     		addl	%eax, %eax
 7115 4cba 89C6     		movl	%eax, %esi
 7116 4cbc BF000000 		movl	$.LC159, %edi
 7116      00
 7117 4cc1 B8000000 		movl	$0, %eax
 7117      00
 7118 4cc6 E8000000 		call	printf
 7118      00
1371:main.c        ****     							char* red_data=read_4byte_from_fpga(2*i,handle,error,32); 
 7119              		.loc 1 1371 0
 7120 4ccb 488B95C8 		movq	-13880(%rbp), %rdx
 7120      C9FFFF
 7121 4cd2 488B85C0 		movq	-13888(%rbp), %rax
 7121      C9FFFF
 7122 4cd9 8B8D70C9 		movl	-13968(%rbp), %ecx
 7122      FFFF
 7123 4cdf 8D3C09   		leal	(%rcx,%rcx), %edi
 7124 4ce2 B9200000 		movl	$32, %ecx
 7124      00
 7125 4ce7 4889C6   		movq	%rax, %rsi
 7126 4cea E8000000 		call	read_4byte_from_fpga
 7126      00
 7127 4cef 488985D0 		movq	%rax, -13616(%rbp)
 7127      CAFFFF
1372:main.c        ****     							printf("red coordinates %s from channel %d\n",red_data, 2*i); 
 7128              		.loc 1 1372 0
 7129 4cf6 8B8570C9 		movl	-13968(%rbp), %eax
 7129      FFFF
 7130 4cfc 8D1400   		leal	(%rax,%rax), %edx
 7131 4cff 488B85D0 		movq	-13616(%rbp), %rax
 7131      CAFFFF
 7132 4d06 4889C6   		movq	%rax, %rsi
 7133 4d09 BF000000 		movl	$.LC160, %edi
 7133      00
 7134 4d0e B8000000 		movl	$0, %eax
 7134      00
 7135 4d13 E8000000 		call	printf
 7135      00
1373:main.c        ****     							if(red_data[0]=='f') { printf("failed to coordinates\n"); continue; }
 7136              		.loc 1 1373 0
 7137 4d18 488B85D0 		movq	-13616(%rbp), %rax
 7137      CAFFFF
 7138 4d1f 0FB600   		movzbl	(%rax), %eax
 7139 4d22 3C66     		cmpb	$102, %al
 7140 4d24 750F     		jne	.L388
 7141              		.loc 1 1373 0 is_stmt 0 discriminator 1
 7142 4d26 BF000000 		movl	$.LC161, %edi
 7142      00
 7143 4d2b E8000000 		call	puts
 7143      00
 7144 4d30 E9580100 		jmp	.L385
 7144      00
 7145              	.L388:
1374:main.c        ****                                 printf("attempting to write coordinates at channel %d\n",2*i+1); 
 7146              		.loc 1 1374 0 is_stmt 1
 7147 4d35 8B8570C9 		movl	-13968(%rbp), %eax
 7147      FFFF
 7148 4d3b 01C0     		addl	%eax, %eax
 7149 4d3d 83C001   		addl	$1, %eax
 7150 4d40 89C6     		movl	%eax, %esi
 7151 4d42 BF000000 		movl	$.LC162, %edi
 7151      00
 7152 4d47 B8000000 		movl	$0, %eax
 7152      00
 7153 4d4c E8000000 		call	printf
 7153      00
1375:main.c        ****     							char write_status=write_4byte_to_board(2*i+1,red_data,handle,error,32); 
 7154              		.loc 1 1375 0
 7155 4d51 488B8DC8 		movq	-13880(%rbp), %rcx
 7155      C9FFFF
 7156 4d58 488B95C0 		movq	-13888(%rbp), %rdx
 7156      C9FFFF
 7157 4d5f 8B8570C9 		movl	-13968(%rbp), %eax
 7157      FFFF
 7158 4d65 01C0     		addl	%eax, %eax
 7159 4d67 8D7801   		leal	1(%rax), %edi
 7160 4d6a 488B85D0 		movq	-13616(%rbp), %rax
 7160      CAFFFF
 7161 4d71 41B82000 		movl	$32, %r8d
 7161      0000
 7162 4d77 4889C6   		movq	%rax, %rsi
 7163 4d7a E8000000 		call	write_4byte_to_board
 7163      00
 7164 4d7f 88854FC9 		movb	%al, -14001(%rbp)
 7164      FFFF
1376:main.c        ****     							if(write_status=='f') { printf("write failed , continuing for next channel\n"); continue
 7165              		.loc 1 1376 0
 7166 4d85 80BD4FC9 		cmpb	$102, -14001(%rbp)
 7166      FFFF66
 7167 4d8c 750F     		jne	.L390
 7168              		.loc 1 1376 0 is_stmt 0 discriminator 1
 7169 4d8e BF000000 		movl	$.LC163, %edi
 7169      00
 7170 4d93 E8000000 		call	puts
 7170      00
 7171 4d98 E9F00000 		jmp	.L385
 7171      00
 7172              	.L390:
1377:main.c        ****                                 printf("attempting to receive ack\n"); 
 7173              		.loc 1 1377 0 is_stmt 1
 7174 4d9d BF000000 		movl	$.LC164, %edi
 7174      00
 7175 4da2 E8000000 		call	puts
 7175      00
1378:main.c        ****     							char* ack_status=receive_ack(2*i,handle,error,1); 
 7176              		.loc 1 1378 0
 7177 4da7 488B95C8 		movq	-13880(%rbp), %rdx
 7177      C9FFFF
 7178 4dae 488B85C0 		movq	-13888(%rbp), %rax
 7178      C9FFFF
 7179 4db5 8B8D70C9 		movl	-13968(%rbp), %ecx
 7179      FFFF
 7180 4dbb 8D3C09   		leal	(%rcx,%rcx), %edi
 7181 4dbe B9010000 		movl	$1, %ecx
 7181      00
 7182 4dc3 4889C6   		movq	%rax, %rsi
 7183 4dc6 E8000000 		call	receive_ack
 7183      00
 7184 4dcb 488985D8 		movq	%rax, -13608(%rbp)
 7184      CAFFFF
1379:main.c        ****     							if(ack_status[0]=='f'){
 7185              		.loc 1 1379 0
 7186 4dd2 488B85D8 		movq	-13608(%rbp), %rax
 7186      CAFFFF
 7187 4dd9 0FB600   		movzbl	(%rax), %eax
 7188 4ddc 3C66     		cmpb	$102, %al
 7189 4dde 7560     		jne	.L391
1380:main.c        ****                                         printf("first ack was incorrect , attempting after 5 second
 7190              		.loc 1 1380 0
 7191 4de0 BF000000 		movl	$.LC165, %edi
 7191      00
 7192 4de5 E8000000 		call	puts
 7192      00
1381:main.c        ****     									sleep(5); 
 7193              		.loc 1 1381 0
 7194 4dea BF050000 		movl	$5, %edi
 7194      00
 7195 4def E8000000 		call	sleep
 7195      00
1382:main.c        ****                                         printf("attempting to receive ack for second time\n"); 
 7196              		.loc 1 1382 0
 7197 4df4 BF000000 		movl	$.LC166, %edi
 7197      00
 7198 4df9 E8000000 		call	puts
 7198      00
1383:main.c        ****     									ack_status=receive_ack(2*i,handle,error,1); 
 7199              		.loc 1 1383 0
 7200 4dfe 488B95C8 		movq	-13880(%rbp), %rdx
 7200      C9FFFF
 7201 4e05 488B85C0 		movq	-13888(%rbp), %rax
 7201      C9FFFF
 7202 4e0c 8B8D70C9 		movl	-13968(%rbp), %ecx
 7202      FFFF
 7203 4e12 8D3C09   		leal	(%rcx,%rcx), %edi
 7204 4e15 B9010000 		movl	$1, %ecx
 7204      00
 7205 4e1a 4889C6   		movq	%rax, %rsi
 7206 4e1d E8000000 		call	receive_ack
 7206      00
 7207 4e22 488985D8 		movq	%rax, -13608(%rbp)
 7207      CAFFFF
1384:main.c        ****     									if(ack_status[0]='f'){
 7208              		.loc 1 1384 0
 7209 4e29 488B85D8 		movq	-13608(%rbp), %rax
 7209      CAFFFF
 7210 4e30 C60066   		movb	$102, (%rax)
1385:main.c        ****                                                 printf("second ack was also incorect\n"); 
 7211              		.loc 1 1385 0
 7212 4e33 BF000000 		movl	$.LC167, %edi
 7212      00
 7213 4e38 E8000000 		call	puts
 7213      00
1386:main.c        ****     											/*start_i=(i+1)%64; 
1387:main.c        ****     											end_i=i+1; 
1388:main.c        ****     											i=start_i-1; 
1389:main.c        ****     											*/
1390:main.c        ****     											continue; 
 7214              		.loc 1 1390 0
 7215 4e3d 90       		nop
 7216 4e3e EB4D     		jmp	.L385
 7217              	.L391:
1391:main.c        ****     									}
1392:main.c        ****     							}
1393:main.c        ****                                 printf("received coordinates correctly and now breaking out of this
 7218              		.loc 1 1393 0
 7219 4e40 BF000000 		movl	$.LC168, %edi
 7219      00
 7220 4e45 E8000000 		call	puts
 7220      00
1394:main.c        ****     							get_coordinate(red_data,&x_coordinate[i],&y_coordinate[i]); 
 7221              		.loc 1 1394 0
 7222 4e4a 488D85C0 		leaq	-13120(%rbp), %rax
 7222      CCFFFF
 7223 4e51 8B9570C9 		movl	-13968(%rbp), %edx
 7223      FFFF
 7224 4e57 4863D2   		movslq	%edx, %rdx
 7225 4e5a 48C1E202 		salq	$2, %rdx
 7226 4e5e 4801C2   		addq	%rax, %rdx
 7227 4e61 488D85B0 		leaq	-13392(%rbp), %rax
 7227      CBFFFF
 7228 4e68 8B8D70C9 		movl	-13968(%rbp), %ecx
 7228      FFFF
 7229 4e6e 4863C9   		movslq	%ecx, %rcx
 7230 4e71 48C1E102 		salq	$2, %rcx
 7231 4e75 4801C1   		addq	%rax, %rcx
 7232 4e78 488B85D0 		movq	-13616(%rbp), %rax
 7232      CAFFFF
 7233 4e7f 4889CE   		movq	%rcx, %rsi
 7234 4e82 4889C7   		movq	%rax, %rdi
 7235 4e85 E8000000 		call	get_coordinate
 7235      00
1395:main.c        ****                                 break; 
 7236              		.loc 1 1395 0
 7237 4e8a 90       		nop
 7238 4e8b EB19     		jmp	.L393
 7239              	.L385:
 7240              	.LBE68:
 7241              	.LBE67:
1363:main.c        ****     			if(isCommCapable){
 7242              		.loc 1 1363 0 discriminator 2
 7243 4e8d 838570C9 		addl	$1, -13968(%rbp)
 7243      FFFF01
 7244              	.L384:
1363:main.c        ****     			if(isCommCapable){
 7245              		.loc 1 1363 0 is_stmt 0 discriminator 1
 7246 4e94 8B8570C9 		movl	-13968(%rbp), %eax
 7246      FFFF
 7247 4e9a 3B85A0C9 		cmpl	-13920(%rbp), %eax
 7247      FFFF
 7248 4ea0 0F8CA8FD 		jl	.L394
 7248      FFFF
 7249              	.L393:
 7250              	.LBE66:
 7251              	.LBB69:
1396:main.c        ****     
1397:main.c        ****     					}
1398:main.c        ****     			}
1399:main.c        ****     	}
1400:main.c        ****     	int read_chan, write_chan; for(int i=0;i<64;i++) { if(x_coordinate[i]!=-1) { read_chan=2*i;wri
 7252              		.loc 1 1400 0 is_stmt 1
 7253 4ea6 C7857CC9 		movl	$0, -13956(%rbp)
 7253      FFFF0000 
 7253      0000
 7254 4eb0 EB3A     		jmp	.L395
 7255              	.L398:
 7256              		.loc 1 1400 0 is_stmt 0 discriminator 5
 7257 4eb2 8B857CC9 		movl	-13956(%rbp), %eax
 7257      FFFF
 7258 4eb8 4898     		cltq
 7259 4eba 8B8485B0 		movl	-13392(%rbp,%rax,4), %eax
 7259      CBFFFF
 7260 4ec1 83F8FF   		cmpl	$-1, %eax
 7261 4ec4 741F     		je	.L396
 7262              		.loc 1 1400 0 discriminator 2
 7263 4ec6 8B857CC9 		movl	-13956(%rbp), %eax
 7263      FFFF
 7264 4ecc 01C0     		addl	%eax, %eax
 7265 4ece 898574C9 		movl	%eax, -13964(%rbp)
 7265      FFFF
 7266 4ed4 8B8574C9 		movl	-13964(%rbp), %eax
 7266      FFFF
 7267 4eda 83C001   		addl	$1, %eax
 7268 4edd 898578C9 		movl	%eax, -13960(%rbp)
 7268      FFFF
 7269 4ee3 EB10     		jmp	.L397
 7270              	.L396:
 7271              		.loc 1 1400 0 discriminator 3
 7272 4ee5 83857CC9 		addl	$1, -13956(%rbp)
 7272      FFFF01
 7273              	.L395:
 7274              		.loc 1 1400 0 discriminator 4
 7275 4eec 83BD7CC9 		cmpl	$63, -13956(%rbp)
 7275      FFFF3F
 7276 4ef3 7EBD     		jle	.L398
 7277              	.L397:
 7278              	.LBE69:
1401:main.c        ****     	send_ack(write_chan,handle, error,32); 
 7279              		.loc 1 1401 0 is_stmt 1
 7280 4ef5 488B95C8 		movq	-13880(%rbp), %rdx
 7280      C9FFFF
 7281 4efc 488BB5C0 		movq	-13888(%rbp), %rsi
 7281      C9FFFF
 7282 4f03 8B8578C9 		movl	-13960(%rbp), %eax
 7282      FFFF
 7283 4f09 B9200000 		movl	$32, %ecx
 7283      00
 7284 4f0e 89C7     		movl	%eax, %edi
 7285 4f10 E8000000 		call	send_ack
 7285      00
1402:main.c        ****         printf("x coordinate is %d and y coordinate is %d\n",x_coordinate[read_chan>>1],y_coordinat
 7286              		.loc 1 1402 0
 7287 4f15 8B8574C9 		movl	-13964(%rbp), %eax
 7287      FFFF
 7288 4f1b D1F8     		sarl	%eax
 7289 4f1d 4898     		cltq
 7290 4f1f 8B9485C0 		movl	-13120(%rbp,%rax,4), %edx
 7290      CCFFFF
 7291 4f26 8B8574C9 		movl	-13964(%rbp), %eax
 7291      FFFF
 7292 4f2c D1F8     		sarl	%eax
 7293 4f2e 4898     		cltq
 7294 4f30 8B8485B0 		movl	-13392(%rbp,%rax,4), %eax
 7294      CBFFFF
 7295 4f37 89C6     		movl	%eax, %esi
 7296 4f39 BF000000 		movl	$.LC169, %edi
 7296      00
 7297 4f3e B8000000 		movl	$0, %eax
 7297      00
 7298 4f43 E8000000 		call	printf
 7298      00
1403:main.c        ****     	char* track_data=func(x_coordinate[read_chan>>1],y_coordinate[read_chan>>1],table,rows); 
 7299              		.loc 1 1403 0
 7300 4f48 8B8574C9 		movl	-13964(%rbp), %eax
 7300      FFFF
 7301 4f4e D1F8     		sarl	%eax
 7302 4f50 4898     		cltq
 7303 4f52 8BB485C0 		movl	-13120(%rbp,%rax,4), %esi
 7303      CCFFFF
 7304 4f59 8B8574C9 		movl	-13964(%rbp), %eax
 7304      FFFF
 7305 4f5f D1F8     		sarl	%eax
 7306 4f61 4898     		cltq
 7307 4f63 8B8485B0 		movl	-13392(%rbp,%rax,4), %eax
 7307      CBFFFF
 7308 4f6a 8B8D98C9 		movl	-13928(%rbp), %ecx
 7308      FFFF
 7309 4f70 488D95D0 		leaq	-12848(%rbp), %rdx
 7309      CDFFFF
 7310 4f77 89C7     		movl	%eax, %edi
 7311 4f79 E8000000 		call	func
 7311      00
 7312 4f7e 488985A8 		movq	%rax, -13656(%rbp)
 7312      CAFFFF
1404:main.c        ****         printf("track data is %s\n", track_data); 
 7313              		.loc 1 1404 0
 7314 4f85 488B85A8 		movq	-13656(%rbp), %rax
 7314      CAFFFF
 7315 4f8c 4889C6   		movq	%rax, %rsi
 7316 4f8f BF000000 		movl	$.LC170, %edi
 7316      00
 7317 4f94 B8000000 		movl	$0, %eax
 7317      00
 7318 4f99 E8000000 		call	printf
 7318      00
1405:main.c        ****     	write_4byte_to_board(write_chan,track_data,handle, error,32); 
 7319              		.loc 1 1405 0
 7320 4f9e 488B8DC8 		movq	-13880(%rbp), %rcx
 7320      C9FFFF
 7321 4fa5 488B95C0 		movq	-13888(%rbp), %rdx
 7321      C9FFFF
 7322 4fac 488BB5A8 		movq	-13656(%rbp), %rsi
 7322      CAFFFF
 7323 4fb3 8B8578C9 		movl	-13960(%rbp), %eax
 7323      FFFF
 7324 4fb9 41B82000 		movl	$32, %r8d
 7324      0000
 7325 4fbf 89C7     		movl	%eax, %edi
 7326 4fc1 E8000000 		call	write_4byte_to_board
 7326      00
1406:main.c        ****     	char* ack_status=receive_ack(read_chan,handle, error, 256); 
 7327              		.loc 1 1406 0
 7328 4fc6 488B95C8 		movq	-13880(%rbp), %rdx
 7328      C9FFFF
 7329 4fcd 488BB5C0 		movq	-13888(%rbp), %rsi
 7329      C9FFFF
 7330 4fd4 8B8574C9 		movl	-13964(%rbp), %eax
 7330      FFFF
 7331 4fda B9000100 		movl	$256, %ecx
 7331      00
 7332 4fdf 89C7     		movl	%eax, %edi
 7333 4fe1 E8000000 		call	receive_ack
 7333      00
 7334 4fe6 488985B0 		movq	%rax, -13648(%rbp)
 7334      CAFFFF
1407:main.c        ****     	if(ack_status[0]=='f') { goto host_label_2; }
 7335              		.loc 1 1407 0
 7336 4fed 488B85B0 		movq	-13648(%rbp), %rax
 7336      CAFFFF
 7337 4ff4 0FB600   		movzbl	(%rax), %eax
 7338 4ff7 3C66     		cmpb	$102, %al
 7339 4ff9 7505     		jne	.L399
 7340 4ffb E9E7FBFF 		jmp	.L381
 7340      FF
 7341              	.L399:
1408:main.c        ****     	else {
1409:main.c        ****     			write_4byte_to_board(write_chan,track_data+32,handle,error,32); 
 7342              		.loc 1 1409 0
 7343 5000 488B8DC8 		movq	-13880(%rbp), %rcx
 7343      C9FFFF
 7344 5007 488B95C0 		movq	-13888(%rbp), %rdx
 7344      C9FFFF
 7345 500e 488B85A8 		movq	-13656(%rbp), %rax
 7345      CAFFFF
 7346 5015 488D7020 		leaq	32(%rax), %rsi
 7347 5019 8B8578C9 		movl	-13960(%rbp), %eax
 7347      FFFF
 7348 501f 41B82000 		movl	$32, %r8d
 7348      0000
 7349 5025 89C7     		movl	%eax, %edi
 7350 5027 E8000000 		call	write_4byte_to_board
 7350      00
1410:main.c        ****     			ack_status=receive_ack(read_chan,handle, error, 256); 
 7351              		.loc 1 1410 0
 7352 502c 488B95C8 		movq	-13880(%rbp), %rdx
 7352      C9FFFF
 7353 5033 488BB5C0 		movq	-13888(%rbp), %rsi
 7353      C9FFFF
 7354 503a 8B8574C9 		movl	-13964(%rbp), %eax
 7354      FFFF
 7355 5040 B9000100 		movl	$256, %ecx
 7355      00
 7356 5045 89C7     		movl	%eax, %edi
 7357 5047 E8000000 		call	receive_ack
 7357      00
 7358 504c 488985B0 		movq	%rax, -13648(%rbp)
 7358      CAFFFF
1411:main.c        ****     			if(ack_status[0]=='f') { goto host_label_2; }
 7359              		.loc 1 1411 0
 7360 5053 488B85B0 		movq	-13648(%rbp), %rax
 7360      CAFFFF
 7361 505a 0FB600   		movzbl	(%rax), %eax
 7362 505d 3C66     		cmpb	$102, %al
 7363 505f 7505     		jne	.L400
 7364 5061 E981FBFF 		jmp	.L381
 7364      FF
 7365              	.L400:
 7366              	.LBB70:
1412:main.c        ****     			else {
1413:main.c        ****                         
1414:main.c        ****     				send_ack(write_chan,handle,error,32); 
 7367              		.loc 1 1414 0
 7368 5066 488B95C8 		movq	-13880(%rbp), %rdx
 7368      C9FFFF
 7369 506d 488BB5C0 		movq	-13888(%rbp), %rsi
 7369      C9FFFF
 7370 5074 8B8578C9 		movl	-13960(%rbp), %eax
 7370      FFFF
 7371 507a B9200000 		movl	$32, %ecx
 7371      00
 7372 507f 89C7     		movl	%eax, %edi
 7373 5081 E8000000 		call	send_ack
 7373      00
1415:main.c        ****     				
1416:main.c        ****     				// goto entire_process; 
1417:main.c        ****     				// Read four bytes
1418:main.c        ****     				// Wait until timeout
1419:main.c        **** 
1420:main.c        ****                     sleep(20);
 7374              		.loc 1 1420 0
 7375 5086 BF140000 		movl	$20, %edi
 7375      00
 7376 508b E8000000 		call	sleep
 7376      00
1421:main.c        **** 
1422:main.c        ****                     int flag1 = 0, flag2 = 0 ;
 7377              		.loc 1 1422 0
 7378 5090 C78580C9 		movl	$0, -13952(%rbp)
 7378      FFFF0000 
 7378      0000
 7379 509a C78584C9 		movl	$0, -13948(%rbp)
 7379      FFFF0000 
 7379      0000
1423:main.c        ****         
1424:main.c        ****                     clock_t start, stop;
1425:main.c        ****                     start = clock();
 7380              		.loc 1 1425 0
 7381 50a4 E8000000 		call	clock
 7381      00
 7382 50a9 488985B8 		movq	%rax, -13640(%rbp)
 7382      CAFFFF
1426:main.c        ****                     
1427:main.c        ****                     int timeout_s = 20;                
 7383              		.loc 1 1427 0
 7384 50b0 C785A4C9 		movl	$20, -13916(%rbp)
 7384      FFFF1400 
 7384      0000
1428:main.c        ****     
1429:main.c        ****                     while ( 100*((double)(clock())-start)/CLOCKS_PER_SEC < timeout_s) {
 7385              		.loc 1 1429 0
 7386 50ba E9750300 		jmp	.L401
 7386      00
 7387              	.L410:
1430:main.c        ****                         printf("%.9f sec\n",100*((double)(clock())-start)/CLOCKS_PER_SEC);  
 7388              		.loc 1 1430 0
 7389 50bf E8000000 		call	clock
 7389      00
 7390 50c4 660FEFC0 		pxor	%xmm0, %xmm0
 7391 50c8 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 7391      C0
 7392 50cd 660FEFC9 		pxor	%xmm1, %xmm1
 7393 50d1 F2480F2A 		cvtsi2sdq	-13640(%rbp), %xmm1
 7393      8DB8CAFF 
 7393      FF
 7394 50da F20F5CC1 		subsd	%xmm1, %xmm0
 7395 50de F20F100D 		movsd	.LC171(%rip), %xmm1
 7395      00000000 
 7396 50e6 F20F59C1 		mulsd	%xmm1, %xmm0
 7397 50ea F20F100D 		movsd	.LC3(%rip), %xmm1
 7397      00000000 
 7398 50f2 F20F5EC1 		divsd	%xmm1, %xmm0
 7399 50f6 BF000000 		movl	$.LC172, %edi
 7399      00
 7400 50fb B8010000 		movl	$1, %eax
 7400      00
 7401 5100 E8000000 		call	printf
 7401      00
1431:main.c        ****                         printf("%.8f sec\n", clock()-start); 
 7402              		.loc 1 1431 0
 7403 5105 E8000000 		call	clock
 7403      00
 7404 510a 482B85B8 		subq	-13640(%rbp), %rax
 7404      CAFFFF
 7405 5111 4889C6   		movq	%rax, %rsi
 7406 5114 BF000000 		movl	$.LC173, %edi
 7406      00
 7407 5119 B8000000 		movl	$0, %eax
 7407      00
 7408 511e E8000000 		call	printf
 7408      00
1432:main.c        ****                         
1433:main.c        ****                         if (!(flag1)){
 7409              		.loc 1 1433 0
 7410 5123 83BD80C9 		cmpl	$0, -13952(%rbp)
 7410      FFFF00
 7411 512a 0F859E02 		jne	.L402
 7411      0000
 7412              	.LBB71:
1434:main.c        ****                               // 32 tries
1435:main.c        ****                               char* red_data=read_1byte_from_fpgalink(read_chan,handle,error,32);  
 7413              		.loc 1 1435 0
 7414 5130 488B95C8 		movq	-13880(%rbp), %rdx
 7414      C9FFFF
 7415 5137 488BB5C0 		movq	-13888(%rbp), %rsi
 7415      C9FFFF
 7416 513e 8B8574C9 		movl	-13964(%rbp), %eax
 7416      FFFF
 7417 5144 B9200000 		movl	$32, %ecx
 7417      00
 7418 5149 89C7     		movl	%eax, %edi
 7419 514b E8000000 		call	read_1byte_from_fpgalink
 7419      00
 7420 5150 488985C0 		movq	%rax, -13632(%rbp)
 7420      CAFFFF
1436:main.c        ****                               if(red_data[0]=='f') {} // printf("data for track update was not avai
 7421              		.loc 1 1436 0
 7422 5157 488B85C0 		movq	-13632(%rbp), %rax
 7422      CAFFFF
 7423 515e 0FB600   		movzbl	(%rax), %eax
 7424 5161 3C66     		cmpb	$102, %al
 7425 5163 0F846502 		je	.L402
 7425      0000
 7426              	.LBB72:
1437:main.c        ****                               else {
1438:main.c        ****                                   printf("red track data update -- %s",red_data); 
 7427              		.loc 1 1438 0
 7428 5169 488B85C0 		movq	-13632(%rbp), %rax
 7428      CAFFFF
 7429 5170 4889C6   		movq	%rax, %rsi
 7430 5173 BF000000 		movl	$.LC174, %edi
 7430      00
 7431 5178 B8000000 		movl	$0, %eax
 7431      00
 7432 517d E8000000 		call	printf
 7432      00
1439:main.c        ****                                   flag1 = 1 ;
 7433              		.loc 1 1439 0
 7434 5182 C78580C9 		movl	$1, -13952(%rbp)
 7434      FFFF0100 
 7434      0000
1440:main.c        ****         	          			// change the entry corresponding to these bytes in the table
1441:main.c        ****     
1442:main.c        ****         	          			int x_c = x_coordinate[read_chan>>1];
 7435              		.loc 1 1442 0
 7436 518c 8B8574C9 		movl	-13964(%rbp), %eax
 7436      FFFF
 7437 5192 D1F8     		sarl	%eax
 7438 5194 4898     		cltq
 7439 5196 8B8485B0 		movl	-13392(%rbp,%rax,4), %eax
 7439      CBFFFF
 7440 519d 8985A8C9 		movl	%eax, -13912(%rbp)
 7440      FFFF
1443:main.c        ****         	          			int y_c = y_coordinate[read_chan>>1];
 7441              		.loc 1 1443 0
 7442 51a3 8B8574C9 		movl	-13964(%rbp), %eax
 7442      FFFF
 7443 51a9 D1F8     		sarl	%eax
 7444 51ab 4898     		cltq
 7445 51ad 8B8485C0 		movl	-13120(%rbp,%rax,4), %eax
 7445      CCFFFF
 7446 51b4 8985ACC9 		movl	%eax, -13908(%rbp)
 7446      FFFF
1444:main.c        ****     
1445:main.c        ****         	          			int x,y,z ;
1446:main.c        ****         	          			x = (red_data[3] == '1') ? 1 : 0  ;
 7447              		.loc 1 1446 0
 7448 51ba 488B85C0 		movq	-13632(%rbp), %rax
 7448      CAFFFF
 7449 51c1 4883C003 		addq	$3, %rax
 7450 51c5 0FB600   		movzbl	(%rax), %eax
 7451 51c8 3C31     		cmpb	$49, %al
 7452 51ca 0F94C0   		sete	%al
 7453 51cd 0FB6C0   		movzbl	%al, %eax
 7454 51d0 8985B0C9 		movl	%eax, -13904(%rbp)
 7454      FFFF
1447:main.c        ****         	          			y = (red_data[4] == '1') ? 1 : 0  ;
 7455              		.loc 1 1447 0
 7456 51d6 488B85C0 		movq	-13632(%rbp), %rax
 7456      CAFFFF
 7457 51dd 4883C004 		addq	$4, %rax
 7458 51e1 0FB600   		movzbl	(%rax), %eax
 7459 51e4 3C31     		cmpb	$49, %al
 7460 51e6 0F94C0   		sete	%al
 7461 51e9 0FB6C0   		movzbl	%al, %eax
 7462 51ec 8985B4C9 		movl	%eax, -13900(%rbp)
 7462      FFFF
1448:main.c        ****         	          			z = (red_data[5] == '1') ? 1 : 0  ;
 7463              		.loc 1 1448 0
 7464 51f2 488B85C0 		movq	-13632(%rbp), %rax
 7464      CAFFFF
 7465 51f9 4883C005 		addq	$5, %rax
 7466 51fd 0FB600   		movzbl	(%rax), %eax
 7467 5200 3C31     		cmpb	$49, %al
 7468 5202 0F94C0   		sete	%al
 7469 5205 0FB6C0   		movzbl	%al, %eax
 7470 5208 8985B8C9 		movl	%eax, -13896(%rbp)
 7470      FFFF
1449:main.c        ****     
1450:main.c        ****         	          			int dir = x*4 + y*2 + z;
 7471              		.loc 1 1450 0
 7472 520e 8B85B0C9 		movl	-13904(%rbp), %eax
 7472      FFFF
 7473 5214 8D1400   		leal	(%rax,%rax), %edx
 7474 5217 8B85B4C9 		movl	-13900(%rbp), %eax
 7474      FFFF
 7475 521d 01D0     		addl	%edx, %eax
 7476 521f 8D1400   		leal	(%rax,%rax), %edx
 7477 5222 8B85B8C9 		movl	-13896(%rbp), %eax
 7477      FFFF
 7478 5228 01D0     		addl	%edx, %eax
 7479 522a 8985BCC9 		movl	%eax, -13892(%rbp)
 7479      FFFF
 7480              	.LBB73:
1451:main.c        ****     
1452:main.c        ****         	          			for (int count =0 ; count < rows ; count++){
 7481              		.loc 1 1452 0
 7482 5230 C78588C9 		movl	$0, -13944(%rbp)
 7482      FFFF0000 
 7482      0000
 7483 523a E9690100 		jmp	.L403
 7483      00
 7484              	.L406:
1453:main.c        ****     
1454:main.c        ****         	          				if (table[count][0] == x_c && table[count][1]==y_c && table[count][2]==dir) 
 7485              		.loc 1 1454 0
 7486 523f 8B8588C9 		movl	-13944(%rbp), %eax
 7486      FFFF
 7487 5245 4863D0   		movslq	%eax, %rdx
 7488 5248 4889D0   		movq	%rdx, %rax
 7489 524b 48C1E002 		salq	$2, %rax
 7490 524f 4801D0   		addq	%rdx, %rax
 7491 5252 48C1E002 		salq	$2, %rax
 7492 5256 488D5DF0 		leaq	-16(%rbp), %rbx
 7493 525a 4801D8   		addq	%rbx, %rax
 7494 525d 482D2032 		subq	$12832, %rax
 7494      0000
 7495 5263 8B00     		movl	(%rax), %eax
 7496 5265 3B85A8C9 		cmpl	-13912(%rbp), %eax
 7496      FFFF
 7497 526b 0F853001 		jne	.L404
 7497      0000
 7498              		.loc 1 1454 0 is_stmt 0 discriminator 1
 7499 5271 8B8588C9 		movl	-13944(%rbp), %eax
 7499      FFFF
 7500 5277 4863D0   		movslq	%eax, %rdx
 7501 527a 4889D0   		movq	%rdx, %rax
 7502 527d 48C1E002 		salq	$2, %rax
 7503 5281 4801D0   		addq	%rdx, %rax
 7504 5284 48C1E002 		salq	$2, %rax
 7505 5288 488D5DF0 		leaq	-16(%rbp), %rbx
 7506 528c 4801D8   		addq	%rbx, %rax
 7507 528f 482D1C32 		subq	$12828, %rax
 7507      0000
 7508 5295 8B00     		movl	(%rax), %eax
 7509 5297 3B85ACC9 		cmpl	-13908(%rbp), %eax
 7509      FFFF
 7510 529d 0F85FE00 		jne	.L404
 7510      0000
 7511              		.loc 1 1454 0 discriminator 2
 7512 52a3 8B8588C9 		movl	-13944(%rbp), %eax
 7512      FFFF
 7513 52a9 4863D0   		movslq	%eax, %rdx
 7514 52ac 4889D0   		movq	%rdx, %rax
 7515 52af 48C1E002 		salq	$2, %rax
 7516 52b3 4801D0   		addq	%rdx, %rax
 7517 52b6 48C1E002 		salq	$2, %rax
 7518 52ba 488D5DF0 		leaq	-16(%rbp), %rbx
 7519 52be 4801D8   		addq	%rbx, %rax
 7520 52c1 482D1832 		subq	$12824, %rax
 7520      0000
 7521 52c7 8B00     		movl	(%rax), %eax
 7522 52c9 3B85BCC9 		cmpl	-13892(%rbp), %eax
 7522      FFFF
 7523 52cf 0F85CC00 		jne	.L404
 7523      0000
1455:main.c        ****         	          					table[count][3] = red_data[6];
 7524              		.loc 1 1455 0 is_stmt 1
 7525 52d5 488B85C0 		movq	-13632(%rbp), %rax
 7525      CAFFFF
 7526 52dc 4883C006 		addq	$6, %rax
 7527 52e0 0FB600   		movzbl	(%rax), %eax
 7528 52e3 0FBEC8   		movsbl	%al, %ecx
 7529 52e6 8B8588C9 		movl	-13944(%rbp), %eax
 7529      FFFF
 7530 52ec 4863D0   		movslq	%eax, %rdx
 7531 52ef 4889D0   		movq	%rdx, %rax
 7532 52f2 48C1E002 		salq	$2, %rax
 7533 52f6 4801D0   		addq	%rdx, %rax
 7534 52f9 48C1E002 		salq	$2, %rax
 7535 52fd 488D5DF0 		leaq	-16(%rbp), %rbx
 7536 5301 4801D8   		addq	%rbx, %rax
 7537 5304 482D1432 		subq	$12820, %rax
 7537      0000
 7538 530a 8908     		movl	%ecx, (%rax)
1456:main.c        ****     
1457:main.c        ****        		          					x = (red_data[0] == '1') ? 1 : 0  ;
 7539              		.loc 1 1457 0
 7540 530c 488B85C0 		movq	-13632(%rbp), %rax
 7540      CAFFFF
 7541 5313 0FB600   		movzbl	(%rax), %eax
 7542 5316 3C31     		cmpb	$49, %al
 7543 5318 0F94C0   		sete	%al
 7544 531b 0FB6C0   		movzbl	%al, %eax
 7545 531e 8985B0C9 		movl	%eax, -13904(%rbp)
 7545      FFFF
1458:main.c        ****        		          					y = (red_data[1] == '1') ? 1 : 0  ;
 7546              		.loc 1 1458 0
 7547 5324 488B85C0 		movq	-13632(%rbp), %rax
 7547      CAFFFF
 7548 532b 4883C001 		addq	$1, %rax
 7549 532f 0FB600   		movzbl	(%rax), %eax
 7550 5332 3C31     		cmpb	$49, %al
 7551 5334 0F94C0   		sete	%al
 7552 5337 0FB6C0   		movzbl	%al, %eax
 7553 533a 8985B4C9 		movl	%eax, -13900(%rbp)
 7553      FFFF
1459:main.c        ****        		          					z = (red_data[2] == '1') ? 1 : 0  ;
 7554              		.loc 1 1459 0
 7555 5340 488B85C0 		movq	-13632(%rbp), %rax
 7555      CAFFFF
 7556 5347 4883C002 		addq	$2, %rax
 7557 534b 0FB600   		movzbl	(%rax), %eax
 7558 534e 3C31     		cmpb	$49, %al
 7559 5350 0F94C0   		sete	%al
 7560 5353 0FB6C0   		movzbl	%al, %eax
 7561 5356 8985B8C9 		movl	%eax, -13896(%rbp)
 7561      FFFF
1460:main.c        ****     
1461:main.c        ****         	          					table[count][4] = x*4 + y*2 + z;
 7562              		.loc 1 1461 0
 7563 535c 8B85B0C9 		movl	-13904(%rbp), %eax
 7563      FFFF
 7564 5362 8D1400   		leal	(%rax,%rax), %edx
 7565 5365 8B85B4C9 		movl	-13900(%rbp), %eax
 7565      FFFF
 7566 536b 01D0     		addl	%edx, %eax
 7567 536d 8D1400   		leal	(%rax,%rax), %edx
 7568 5370 8B85B8C9 		movl	-13896(%rbp), %eax
 7568      FFFF
 7569 5376 8D0C02   		leal	(%rdx,%rax), %ecx
 7570 5379 8B8588C9 		movl	-13944(%rbp), %eax
 7570      FFFF
 7571 537f 4863D0   		movslq	%eax, %rdx
 7572 5382 4889D0   		movq	%rdx, %rax
 7573 5385 48C1E002 		salq	$2, %rax
 7574 5389 4801D0   		addq	%rdx, %rax
 7575 538c 48C1E002 		salq	$2, %rax
 7576 5390 488D5DF0 		leaq	-16(%rbp), %rbx
 7577 5394 4801D8   		addq	%rbx, %rax
 7578 5397 482D1032 		subq	$12816, %rax
 7578      0000
 7579 539d 8908     		movl	%ecx, (%rax)
1462:main.c        ****         	          					break;
 7580              		.loc 1 1462 0
 7581 539f EB19     		jmp	.L405
 7582              	.L404:
1452:main.c        ****     
 7583              		.loc 1 1452 0 discriminator 2
 7584 53a1 838588C9 		addl	$1, -13944(%rbp)
 7584      FFFF01
 7585              	.L403:
1452:main.c        ****     
 7586              		.loc 1 1452 0 is_stmt 0 discriminator 1
 7587 53a8 8B8588C9 		movl	-13944(%rbp), %eax
 7587      FFFF
 7588 53ae 3B8598C9 		cmpl	-13928(%rbp), %eax
 7588      FFFF
 7589 53b4 0F8C85FE 		jl	.L406
 7589      FFFF
 7590              	.L405:
 7591              	.LBE73:
1463:main.c        ****         	          				}
1464:main.c        ****         	          			}
1465:main.c        ****                                   printf("Changed the entry to the table\n");
 7592              		.loc 1 1465 0 is_stmt 1
 7593 53ba BF000000 		movl	$.LC175, %edi
 7593      00
 7594 53bf E8000000 		call	puts
 7594      00
1466:main.c        ****         	          			// Save table
1467:main.c        ****         //	          			save_to_file(table,rows);
1468:main.c        ****     
1469:main.c        ****                                   printf("Saved the table to the file\n");
 7595              		.loc 1 1469 0
 7596 53c4 BF000000 		movl	$.LC176, %edi
 7596      00
 7597 53c9 E8000000 		call	puts
 7597      00
 7598              	.L402:
 7599              	.LBE72:
 7600              	.LBE71:
1470:main.c        ****                               }
1471:main.c        ****                         }
1472:main.c        ****         				// Read data from UART port
1473:main.c        ****         				if (!(flag2)) {
 7601              		.loc 1 1473 0
 7602 53ce 83BD84C9 		cmpl	$0, -13948(%rbp)
 7602      FFFF00
 7603 53d5 754B     		jne	.L407
 7604              	.LBB74:
1474:main.c        ****                             //printf("Reading uart data from the byte\n");
1475:main.c        ****         	         		char* red_uart=read_one_byte_from_uart(1);
 7605              		.loc 1 1475 0
 7606 53d7 BF010000 		movl	$1, %edi
 7606      00
 7607 53dc E8000000 		call	read_one_byte_from_uart
 7607      00
 7608 53e1 488985C8 		movq	%rax, -13624(%rbp)
 7608      CAFFFF
1476:main.c        ****                             //printf("out of read_one_byte \n"); 
1477:main.c        ****                              
1478:main.c        ****                             if(red_uart[0]=='f' && !(flag2)) { 
 7609              		.loc 1 1478 0
 7610 53e8 488B85C8 		movq	-13624(%rbp), %rax
 7610      CAFFFF
 7611 53ef 0FB600   		movzbl	(%rax), %eax
 7612 53f2 3C66     		cmpb	$102, %al
 7613 53f4 7509     		jne	.L408
 7614              		.loc 1 1478 0 is_stmt 0 discriminator 1
 7615 53f6 83BD84C9 		cmpl	$0, -13948(%rbp)
 7615      FFFF00
 7616 53fd 7423     		je	.L407
 7617              	.L408:
1479:main.c        ****                                //printf("Data for track update is not available at uart port \n");
1480:main.c        ****                             }
1481:main.c        ****                              else {
1482:main.c        ****                                  printf("Data received from UART : %s\n", red_uart);
 7618              		.loc 1 1482 0 is_stmt 1
 7619 53ff 488B85C8 		movq	-13624(%rbp), %rax
 7619      CAFFFF
 7620 5406 4889C6   		movq	%rax, %rsi
 7621 5409 BF000000 		movl	$.LC177, %edi
 7621      00
 7622 540e B8000000 		movl	$0, %eax
 7622      00
 7623 5413 E8000000 		call	printf
 7623      00
1483:main.c        ****                                  flag2 = 1 ;
 7624              		.loc 1 1483 0
 7625 5418 C78584C9 		movl	$1, -13948(%rbp)
 7625      FFFF0100 
 7625      0000
 7626              	.L407:
 7627              	.LBE74:
1484:main.c        ****                              }
1485:main.c        ****                              }
1486:main.c        ****                         if(flag1 == 1 && flag2==1 ) break; 
 7628              		.loc 1 1486 0
 7629 5422 83BD80C9 		cmpl	$1, -13952(%rbp)
 7629      FFFF01
 7630 5429 7509     		jne	.L401
 7631              		.loc 1 1486 0 is_stmt 0 discriminator 1
 7632 542b 83BD84C9 		cmpl	$1, -13948(%rbp)
 7632      FFFF01
 7633 5432 7453     		je	.L424
 7634              	.L401:
1429:main.c        ****                         printf("%.9f sec\n",100*((double)(clock())-start)/CLOCKS_PER_SEC);  
 7635              		.loc 1 1429 0 is_stmt 1
 7636 5434 E8000000 		call	clock
 7636      00
 7637 5439 660FEFC0 		pxor	%xmm0, %xmm0
 7638 543d F2480F2A 		cvtsi2sdq	%rax, %xmm0
 7638      C0
 7639 5442 660FEFC9 		pxor	%xmm1, %xmm1
 7640 5446 F2480F2A 		cvtsi2sdq	-13640(%rbp), %xmm1
 7640      8DB8CAFF 
 7640      FF
 7641 544f F20F5CC1 		subsd	%xmm1, %xmm0
 7642 5453 F20F100D 		movsd	.LC171(%rip), %xmm1
 7642      00000000 
 7643 545b F20F59C1 		mulsd	%xmm1, %xmm0
 7644 545f F20F100D 		movsd	.LC3(%rip), %xmm1
 7644      00000000 
 7645 5467 F20F5EC1 		divsd	%xmm1, %xmm0
 7646 546b 660F28C8 		movapd	%xmm0, %xmm1
 7647 546f 660FEFC0 		pxor	%xmm0, %xmm0
 7648 5473 F20F2A85 		cvtsi2sd	-13916(%rbp), %xmm0
 7648      A4C9FFFF 
 7649 547b 660F2EC1 		ucomisd	%xmm1, %xmm0
 7650 547f 0F873AFC 		ja	.L410
 7650      FFFF
 7651 5485 EB01     		jmp	.L409
 7652              	.L424:
 7653              		.loc 1 1486 0
 7654 5487 90       		nop
 7655              	.L409:
1487:main.c        ****                     }
1488:main.c        ****                     flag1 = 0;
 7656              		.loc 1 1488 0
 7657 5488 C78580C9 		movl	$0, -13952(%rbp)
 7657      FFFF0000 
 7657      0000
1489:main.c        ****                     flag2 = 0;
 7658              		.loc 1 1489 0
 7659 5492 C78584C9 		movl	$0, -13948(%rbp)
 7659      FFFF0000 
 7659      0000
1490:main.c        ****     	    		write_one_byte_to_uart();
 7660              		.loc 1 1490 0
 7661 549c B8000000 		movl	$0, %eax
 7661      00
 7662 54a1 E8000000 		call	write_one_byte_to_uart
 7662      00
1491:main.c        ****                     goto entire_process; 
 7663              		.loc 1 1491 0
 7664 54a6 E913F6FF 		jmp	.L378
 7664      FF
 7665              	.L377:
 7666              	.LBE70:
 7667              	.LBE63:
1492:main.c        ****     			}
1493:main.c        **** 
1494:main.c        **** 	}
1495:main.c        **** 
1496:main.c        **** //
1497:main.c        **** //    while(true){
1498:main.c        **** //		if ( isCommCapable ) {
1499:main.c        **** //		   uint8 isRunning;
1500:main.c        **** //			fStatus = flSelectConduit(handle, conduit, &error);
1501:main.c        **** //			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
1502:main.c        **** //			fStatus = flIsFPGARunning(handle, &isRunning, &error);
1503:main.c        **** //			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
1504:main.c        **** //            //printf("is commCapable\n"); 
1505:main.c        **** //            if ( isRunning ) {
1506:main.c        **** //               printf("is Running \n"); 
1507:main.c        **** //			   char* red_data=read_4byte_from_fpga(handle, error);
1508:main.c        **** //               printf("Red coordinates  %s\n", red_data); 
1509:main.c        **** //			   write_4byte_to_board(red_data, handle, error); 
1510:main.c        **** //               printf("wrote coordinates %s\n", red_data); 
1511:main.c        **** //			   //red_data=read_4byte_from_fpga(handle, error); 
1512:main.c        **** //               receive_ack(handle,error); 
1513:main.c        **** //               printf("received ack1 for corordinates\n"); 
1514:main.c        **** //			   send_ack(handle, error); 
1515:main.c        **** //               printf("sent ack2 from host to board \n"); 
1516:main.c        **** //    	       char* writeData = func(red_data, table, rows);
1517:main.c        **** //               printf("Data to be sent to board %s\n",writeData); 
1518:main.c        **** //			   write_4byte_to_board(writeData, handle, error); 
1519:main.c        **** //               printf("wrote first 32 bit of track data \n"); 
1520:main.c        **** //			   //read_4byte_from_fpga(handle, error); 
1521:main.c        **** //               receive_ack(handle,error); 
1522:main.c        **** //               printf("received ack1 \n"); 
1523:main.c        **** //			   write_4byte_to_board(&writeData[32], handle, error); 
1524:main.c        **** //               printf("wrote last 32 bit of track data\n"); 
1525:main.c        **** //			   //read_4byte_from_fpga(handle, error); 
1526:main.c        **** //               receive_ack(handle,error); 
1527:main.c        **** //               printf("received ack1\n"); 
1528:main.c        **** //			   send_ack(handle, error); 
1529:main.c        **** //               printf("sent ack2\n"); 
1530:main.c        **** //               printf(" completed one sequence of communication \n\n\n\n");
1531:main.c        **** //            }
1532:main.c        **** //        	}
1533:main.c        **** //    	}
1534:main.c        **** 	}
1535:main.c        **** 	if ( shellOpt->count ) {
 7668              		.loc 1 1535 0
 7669 54ab 488B8530 		movq	-13776(%rbp), %rax
 7669      CAFFFF
 7670 54b2 8B4060   		movl	96(%rax), %eax
 7671 54b5 85C0     		testl	%eax, %eax
 7672 54b7 0F84C401 		je	.L323
 7672      0000
1536:main.c        **** 		printf("\nEntering CommFPGA command-line mode:\n");
 7673              		.loc 1 1536 0
 7674 54bd BF000000 		movl	$.LC178, %edi
 7674      00
 7675 54c2 E8000000 		call	puts
 7675      00
1537:main.c        **** 		if ( isCommCapable ) {
 7676              		.loc 1 1537 0
 7677 54c7 80BD4EC9 		cmpb	$0, -14002(%rbp)
 7677      FFFF00
 7678 54ce 0F848201 		je	.L411
 7678      0000
 7679              	.LBB75:
1538:main.c        **** 		   uint8 isRunning;
1539:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 7680              		.loc 1 1539 0
 7681 54d4 0FB68D4C 		movzbl	-14004(%rbp), %ecx
 7681      C9FFFF
 7682 54db 488B85C0 		movq	-13888(%rbp), %rax
 7682      C9FFFF
 7683 54e2 488D95C8 		leaq	-13880(%rbp), %rdx
 7683      C9FFFF
 7684 54e9 89CE     		movl	%ecx, %esi
 7685 54eb 4889C7   		movq	%rax, %rdi
 7686 54ee E8000000 		call	flSelectConduit
 7686      00
 7687 54f3 89855CC9 		movl	%eax, -13988(%rbp)
 7687      FFFF
1540:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7688              		.loc 1 1540 0
 7689 54f9 83BD5CC9 		cmpl	$0, -13988(%rbp)
 7689      FFFF00
 7690 5500 740F     		je	.L412
 7691              		.loc 1 1540 0 is_stmt 0 discriminator 1
 7692 5502 C78558C9 		movl	$1, -13992(%rbp)
 7692      FFFF0100 
 7692      0000
 7693 550c E9700100 		jmp	.L323
 7693      00
 7694              	.L412:
1541:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 7695              		.loc 1 1541 0 is_stmt 1
 7696 5511 488B85C0 		movq	-13888(%rbp), %rax
 7696      C9FFFF
 7697 5518 488D95C8 		leaq	-13880(%rbp), %rdx
 7697      C9FFFF
 7698 551f 488D8DD8 		leaq	-13864(%rbp), %rcx
 7698      C9FFFF
 7699 5526 4889CE   		movq	%rcx, %rsi
 7700 5529 4889C7   		movq	%rax, %rdi
 7701 552c E8000000 		call	flIsFPGARunning
 7701      00
 7702 5531 89855CC9 		movl	%eax, -13988(%rbp)
 7702      FFFF
1542:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7703              		.loc 1 1542 0
 7704 5537 83BD5CC9 		cmpl	$0, -13988(%rbp)
 7704      FFFF00
 7705 553e 740F     		je	.L414
 7706              		.loc 1 1542 0 is_stmt 0 discriminator 1
 7707 5540 C78558C9 		movl	$1, -13992(%rbp)
 7707      FFFF0100 
 7707      0000
 7708 554a E9320100 		jmp	.L323
 7708      00
 7709              	.L414:
1543:main.c        **** 			if ( isRunning ) {
 7710              		.loc 1 1543 0 is_stmt 1
 7711 554f 0FB685D8 		movzbl	-13864(%rbp), %eax
 7711      C9FFFF
 7712 5556 84C0     		testb	%al, %al
 7713 5558 0F84CB00 		je	.L415
 7713      0000
 7714              	.L417:
1544:main.c        **** 				do {
1545:main.c        **** 					do {
1546:main.c        **** 						line = readline("> ");
 7715              		.loc 1 1546 0 discriminator 2
 7716 555e BF000000 		movl	$.LC179, %edi
 7716      00
 7717 5563 E8000000 		call	readline
 7717      00
 7718 5568 488985E0 		movq	%rax, -13856(%rbp)
 7718      C9FFFF
1547:main.c        **** 					} while ( line && !line[0] );
 7719              		.loc 1 1547 0 discriminator 2
 7720 556f 4883BDE0 		cmpq	$0, -13856(%rbp)
 7720      C9FFFF00 
 7721 5577 740E     		je	.L416
 7722              		.loc 1 1547 0 is_stmt 0 discriminator 1
 7723 5579 488B85E0 		movq	-13856(%rbp), %rax
 7723      C9FFFF
 7724 5580 0FB600   		movzbl	(%rax), %eax
 7725 5583 84C0     		testb	%al, %al
 7726 5585 74D7     		je	.L417
 7727              	.L416:
1548:main.c        **** 					if ( line && line[0] && line[0] != 'q' ) {
 7728              		.loc 1 1548 0 is_stmt 1
 7729 5587 4883BDE0 		cmpq	$0, -13856(%rbp)
 7729      C9FFFF00 
 7730 558f 747A     		je	.L418
 7731              		.loc 1 1548 0 is_stmt 0 discriminator 1
 7732 5591 488B85E0 		movq	-13856(%rbp), %rax
 7732      C9FFFF
 7733 5598 0FB600   		movzbl	(%rax), %eax
 7734 559b 84C0     		testb	%al, %al
 7735 559d 746C     		je	.L418
 7736              		.loc 1 1548 0 discriminator 2
 7737 559f 488B85E0 		movq	-13856(%rbp), %rax
 7737      C9FFFF
 7738 55a6 0FB600   		movzbl	(%rax), %eax
 7739 55a9 3C71     		cmpb	$113, %al
 7740 55ab 745E     		je	.L418
1549:main.c        **** 						add_history(line);
 7741              		.loc 1 1549 0 is_stmt 1
 7742 55ad 488B85E0 		movq	-13856(%rbp), %rax
 7742      C9FFFF
 7743 55b4 4889C7   		movq	%rax, %rdi
 7744 55b7 E8000000 		call	add_history
 7744      00
1550:main.c        **** 						pStatus = parseLine(handle, line, &error);
 7745              		.loc 1 1550 0
 7746 55bc 488B85C0 		movq	-13888(%rbp), %rax
 7746      C9FFFF
 7747 55c3 488D95C8 		leaq	-13880(%rbp), %rdx
 7747      C9FFFF
 7748 55ca 488B8DE0 		movq	-13856(%rbp), %rcx
 7748      C9FFFF
 7749 55d1 4889CE   		movq	%rcx, %rsi
 7750 55d4 4889C7   		movq	%rax, %rdi
 7751 55d7 E8B8B5FF 		call	parseLine
 7751      FF
 7752 55dc 898594C9 		movl	%eax, -13932(%rbp)
 7752      FFFF
1551:main.c        **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 7753              		.loc 1 1551 0
 7754 55e2 83BD94C9 		cmpl	$0, -13932(%rbp)
 7754      FFFF00
 7755 55e9 7411     		je	.L419
 7756              		.loc 1 1551 0 is_stmt 0 discriminator 1
 7757 55eb 8B8594C9 		movl	-13932(%rbp), %eax
 7757      FFFF
 7758 55f1 898558C9 		movl	%eax, -13992(%rbp)
 7758      FFFF
 7759 55f7 E9850000 		jmp	.L323
 7759      00
 7760              	.L419:
1552:main.c        **** 						free((void*)line);
 7761              		.loc 1 1552 0 is_stmt 1
 7762 55fc 488B85E0 		movq	-13856(%rbp), %rax
 7762      C9FFFF
 7763 5603 4889C7   		movq	%rax, %rdi
 7764 5606 E8000000 		call	free
 7764      00
 7765              	.L418:
1553:main.c        **** 					}
1554:main.c        **** 				} while ( line && line[0] != 'q' );
 7766              		.loc 1 1554 0
 7767 560b 4883BDE0 		cmpq	$0, -13856(%rbp)
 7767      C9FFFF00 
 7768 5613 746C     		je	.L323
 7769              		.loc 1 1554 0 is_stmt 0 discriminator 1
 7770 5615 488B85E0 		movq	-13856(%rbp), %rax
 7770      C9FFFF
 7771 561c 0FB600   		movzbl	(%rax), %eax
 7772 561f 3C71     		cmpb	$113, %al
 7773 5621 0F8537FF 		jne	.L417
 7773      FFFF
 7774 5627 EB58     		jmp	.L323
 7775              	.L415:
1555:main.c        **** 			} else {
1556:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 7776              		.loc 1 1556 0 is_stmt 1
 7777 5629 488B0500 		movq	stderr(%rip), %rax
 7777      000000
 7778 5630 488B9580 		movq	-13696(%rbp), %rdx
 7778      CAFFFF
 7779 5637 BE000000 		movl	$.LC180, %esi
 7779      00
 7780 563c 4889C7   		movq	%rax, %rdi
 7781 563f B8000000 		movl	$0, %eax
 7781      00
 7782 5644 E8000000 		call	fprintf
 7782      00
1557:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 7783              		.loc 1 1557 0
 7784 5649 C78558C9 		movl	$12, -13992(%rbp)
 7784      FFFF0C00 
 7784      0000
 7785 5653 90       		nop
 7786 5654 EB2B     		jmp	.L323
 7787              	.L411:
 7788              	.LBE75:
1558:main.c        **** 			}
1559:main.c        **** 		} else {
1560:main.c        **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 7789              		.loc 1 1560 0
 7790 5656 488B0500 		movq	stderr(%rip), %rax
 7790      000000
 7791 565d 488B9580 		movq	-13696(%rbp), %rdx
 7791      CAFFFF
 7792 5664 BE000000 		movl	$.LC181, %esi
 7792      00
 7793 5669 4889C7   		movq	%rax, %rdi
 7794 566c B8000000 		movl	$0, %eax
 7794      00
 7795 5671 E8000000 		call	fprintf
 7795      00
1561:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 7796              		.loc 1 1561 0
 7797 5676 C78558C9 		movl	$12, -13992(%rbp)
 7797      FFFF0C00 
 7797      0000
 7798 5680 90       		nop
 7799              	.L323:
1562:main.c        **** 		}
1563:main.c        **** 	}
1564:main.c        **** 
1565:main.c        **** cleanup:
1566:main.c        **** 	free((void*)line);
 7800              		.loc 1 1566 0
 7801 5681 488B85E0 		movq	-13856(%rbp), %rax
 7801      C9FFFF
 7802 5688 4889C7   		movq	%rax, %rdi
 7803 568b E8000000 		call	free
 7803      00
1567:main.c        **** 	flClose(handle);
 7804              		.loc 1 1567 0
 7805 5690 488B85C0 		movq	-13888(%rbp), %rax
 7805      C9FFFF
 7806 5697 4889C7   		movq	%rax, %rdi
 7807 569a E8000000 		call	flClose
 7807      00
1568:main.c        **** 	if ( error ) {
 7808              		.loc 1 1568 0
 7809 569f 488B85C8 		movq	-13880(%rbp), %rax
 7809      C9FFFF
 7810 56a6 4885C0   		testq	%rax, %rax
 7811 56a9 742F     		je	.L421
1569:main.c        **** 		fprintf(stderr, "%s\n", error);
 7812              		.loc 1 1569 0
 7813 56ab 488B95C8 		movq	-13880(%rbp), %rdx
 7813      C9FFFF
 7814 56b2 488B0500 		movq	stderr(%rip), %rax
 7814      000000
 7815 56b9 BE000000 		movl	$.LC182, %esi
 7815      00
 7816 56be 4889C7   		movq	%rax, %rdi
 7817 56c1 B8000000 		movl	$0, %eax
 7817      00
 7818 56c6 E8000000 		call	fprintf
 7818      00
1570:main.c        **** 		flFreeError(error);
 7819              		.loc 1 1570 0
 7820 56cb 488B85C8 		movq	-13880(%rbp), %rax
 7820      C9FFFF
 7821 56d2 4889C7   		movq	%rax, %rdi
 7822 56d5 E8000000 		call	flFreeError
 7822      00
 7823              	.L421:
1571:main.c        **** 	}
1572:main.c        **** 	return retVal;
 7824              		.loc 1 1572 0
 7825 56da 8B8558C9 		movl	-13992(%rbp), %eax
 7825      FFFF
1573:main.c        **** }
 7826              		.loc 1 1573 0
 7827 56e0 488B5DE8 		movq	-24(%rbp), %rbx
 7828 56e4 6448331C 		xorq	%fs:40, %rbx
 7828      25280000 
 7828      00
 7829 56ed 7405     		je	.L423
 7830 56ef E8000000 		call	__stack_chk_fail
 7830      00
 7831              	.L423:
 7832 56f4 4881C4C8 		addq	$14024, %rsp
 7832      360000
 7833 56fb 5B       		popq	%rbx
 7834 56fc 5D       		popq	%rbp
 7835              		.cfi_def_cfa 7, 8
 7836 56fd C3       		ret
 7837              		.cfi_endproc
 7838              	.LFE32:
 7840              		.section	.rodata
 7841              		.align 8
 7842              	.LC3:
 7843 1250 00000000 		.long	0
 7844 1254 80842E41 		.long	1093567616
 7845              		.align 8
 7846              	.LC4:
 7847 1258 00000000 		.long	0
 7848 125c 00408F40 		.long	1083129856
 7849              		.align 8
 7850              	.LC37:
 7851 1260 00000000 		.long	0
 7852 1264 00003041 		.long	1093664768
 7853              		.align 8
 7854              	.LC171:
 7855 1268 00000000 		.long	0
 7856 126c 00005940 		.long	1079574528
 7857              		.text
 7858              	.Letext0:
 7859              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 7860              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 7861              		.file 4 "/usr/include/stdio.h"
 7862              		.file 5 "/usr/include/libio.h"
 7863              		.file 6 "/home/rsudarsanan/The-X-Men/makestuff/common/makestuff.h"
 7864              		.file 7 "/home/rsudarsanan/The-X-Men/makestuff/libs/libfpgalink/libfpgalink.h"
 7865              		.file 8 "/home/rsudarsanan/The-X-Men/makestuff/libs/libbuffer/libbuffer.h"
 7866              		.file 9 "/usr/include/time.h"
 7867              		.file 10 "/home/rsudarsanan/The-X-Men/makestuff/libs/libargtable2/argtable2.h"
 7868              		.file 11 "/usr/include/x86_64-linux-gnu/bits/termios.h"
 7869              		.file 12 "/usr/include/x86_64-linux-gnu/bits/time.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccjms6fl.s:13     .data:0000000000000000 key
                            *COM*:0000000000000064 line1
     /tmp/ccjms6fl.s:25     .data:0000000000000008 ack1
     /tmp/ccjms6fl.s:36     .data:0000000000000010 ack2
     /tmp/ccjms6fl.s:39     .bss:0000000000000000 ptr
     /tmp/ccjms6fl.s:39     .bss:0000000000000008 enableBenchmarking
     /tmp/ccjms6fl.s:45     .text:0000000000000000 timediff
     /tmp/ccjms6fl.s:90     .text:000000000000004b save_to_file
     /tmp/ccjms6fl.s:182    .text:000000000000011b set_interface_attribs
     /tmp/ccjms6fl.s:317    .text:0000000000000254 set_blocking
     /tmp/ccjms6fl.s:398    .data:0000000000000018 portname
                            *COM*:0000000000000004 fd
     /tmp/ccjms6fl.s:414    .text:0000000000000309 read_one_byte_from_uart
     /tmp/ccjms6fl.s:592    .text:00000000000004bf write_one_byte_to_uart
     /tmp/ccjms6fl.s:652    .text:0000000000000552 isHexDigit
     /tmp/ccjms6fl.s:701    .text:0000000000000590 calcChecksum
     /tmp/ccjms6fl.s:741    .text:00000000000005d1 getHexNibble
     /tmp/ccjms6fl.s:813    .text:0000000000000645 getHexByte
     /tmp/ccjms6fl.s:913    .rodata:00000000000002a0 errMessages
     /tmp/ccjms6fl.s:931    .text:00000000000006f8 doRead
     /tmp/ccjms6fl.s:1179   .text:00000000000009a0 doWrite
                            *COM*:0000000000000001 out
     /tmp/ccjms6fl.s:1329   .text:0000000000000b94 parseLine
     /tmp/ccjms6fl.s:2572   .data:0000000000000020 nibbles
     /tmp/ccjms6fl.s:2604   .text:0000000000001c50 read_table
     /tmp/ccjms6fl.s:2709   .data:00000000000000d8 mm
     /tmp/ccjms6fl.s:2714   .text:0000000000001d33 boolToHex
     /tmp/ccjms6fl.s:2875   .text:0000000000001e92 get_coordinate
     /tmp/ccjms6fl.s:2977   .text:0000000000001f63 func
     /tmp/ccjms6fl.s:3451   .text:00000000000023af xor
     /tmp/ccjms6fl.s:3484   .text:00000000000023d4 and
     /tmp/ccjms6fl.s:3519   .text:00000000000023fc decrypt
     /tmp/ccjms6fl.s:4227   .text:0000000000002bc7 encrypt
     /tmp/ccjms6fl.s:4754   .text:0000000000003186 read_byte
     /tmp/ccjms6fl.s:4821   .text:00000000000031fb write_4byte_to_board
     /tmp/ccjms6fl.s:4990   .text:0000000000003378 read_4byte_from_fpga
     /tmp/ccjms6fl.s:5128   .text:00000000000034c6 read_1byte_from_fpgalink
     /tmp/ccjms6fl.s:5297   .text:0000000000003642 receive_ack
     /tmp/ccjms6fl.s:5377   .text:00000000000036e4 send_ack
     /tmp/ccjms6fl.s:5461   .text:0000000000003794 wtt
     /tmp/ccjms6fl.s:5768   .text:00000000000037aa main

UNDEFINED SYMBOLS
fopen
fprintf
fclose
memset
tcgetattr
__errno_location
printf
cfsetospeed
cfsetispeed
tcsetattr
__stack_chk_fail
strerror
malloc
read
puts
__isoc99_scanf
write
exit
flReadChannelAsyncSubmit
errPrefix
flReadChannelAsyncAwait
fwrite
fread
flWriteChannelAsync
flAwaitAsyncWrites
bufInitialise
strtoul
strncpy
free
gettimeofday
bufAppendConst
flReadChannel
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
fputc
_IO_getc
strcmp
sleep
usleep
open
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
arg_parse
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flLoadStandardFirmware
flSleep
putchar
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
flFlashStandardFirmware
flFlashCustomFirmware
flSaveFirmware
flResetToggle
flIsNeroCapable
flIsCommCapable
flMultiBitPortAccess
sprintf
jtagScanChain
flProgram
flIsFPGARunning
sigRegisterHandler
sigIsRaised
clock
readline
add_history
flClose
flFreeError
