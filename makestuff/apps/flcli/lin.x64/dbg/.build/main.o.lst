   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.globl	key
   5              		.section	.rodata
   6              		.align 8
   7              	.LC0:
   8 0000 31313030 		.string	"11001100110011001100110011000001"
   8      31313030 
   8      31313030 
   8      31313030 
   8      31313030 
   9              		.data
  10              		.align 8
  13              	key:
  14 0000 00000000 		.quad	.LC0
  14      00000000 
  15              		.comm	line1,100,32
  16              		.globl	ack1
  17              		.section	.rodata
  18 0021 00000000 		.align 8
  18      000000
  19              	.LC1:
  20 0028 31313131 		.string	"11110000111100001111000011110000"
  20      30303030 
  20      31313131 
  20      30303030 
  20      31313131 
  21              		.data
  22              		.align 8
  25              	ack1:
  26 0008 00000000 		.quad	.LC1
  26      00000000 
  27              		.globl	ack2
  28              		.section	.rodata
  29 0049 00000000 		.align 8
  29      000000
  30              	.LC2:
  31 0050 30303030 		.string	"00001111000011110000111100001111"
  31      31313131 
  31      30303030 
  31      31313131 
  31      30303030 
  32              		.data
  33              		.align 8
  36              	ack2:
  37 0010 00000000 		.quad	.LC2
  37      00000000 
  38              		.globl	portname
  39              		.section	.rodata
  40              	.LC3:
  41 0071 2F646576 		.string	"/dev/ttyXRUSB0"
  41      2F747479 
  41      58525553 
  41      423000
  42              		.data
  43              		.align 8
  46              	portname:
  47 0018 00000000 		.quad	.LC3
  47      00000000 
  48              		.comm	fd,4,4
  49              		.local	ptr
  50              		.comm	ptr,8,8
  51              		.local	enableBenchmarking
  52              		.comm	enableBenchmarking,1,1
  53              		.text
  54              		.globl	timediff
  56              	timediff:
  57              	.LFB4:
  58              		.file 1 "main.c"
   1:main.c        **** /* 
   2:main.c        ****  * Copyright (C) 2012-2014 Chris McClelland
   3:main.c        ****  * This program is free software: you can redistribute it and/or modify
   4:main.c        ****  * it under the terms of the GNU General Public License as published by
   5:main.c        ****  * the Free Software Foundation, either version 3 of the License, or
   6:main.c        ****  * (at your option) any later version.
   7:main.c        ****  * This program is distributed in the hope that it will be useful,
   8:main.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:main.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:main.c        ****  * GNU General Public License for more details.
  11:main.c        ****  * You should have received a copy of the GNU General Public License
  12:main.c        ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:main.c        ****  */
  14:main.c        **** #include <stdio.h>
  15:main.c        **** #include <stdlib.h>
  16:main.c        **** #include <string.h>
  17:main.c        **** #include <errno.h>
  18:main.c        **** #include <makestuff.h>
  19:main.c        **** #include <libfpgalink.h>
  20:main.c        **** #include <libbuffer.h>
  21:main.c        **** #include <liberror.h>
  22:main.c        **** #include <libdump.h>
  23:main.c        **** #include <argtable2.h>
  24:main.c        **** #include <readline/readline.h>
  25:main.c        **** #include <readline/history.h>
  26:main.c        **** #include <fcntl.h> 
  27:main.c        **** #include <string.h>
  28:main.c        **** #include <termios.h>
  29:main.c        **** #include <unistd.h>
  30:main.c        **** #include <time.h>
  31:main.c        **** 
  32:main.c        **** #ifdef WIN32
  33:main.c        **** #include <Windows.h>
  34:main.c        **** #else
  35:main.c        **** #include <sys/time.h>
  36:main.c        **** #endif
  37:main.c        **** #define CR     "\x1b[31m"
  38:main.c        **** #define CG  "\x1b[32m"
  39:main.c        **** #define CY  "\x1b[33m"
  40:main.c        **** #define CB  "\x1b[34m"
  41:main.c        **** #define CM "\x1b[35m"
  42:main.c        **** #define CC "\x1b[36m"
  43:main.c        **** #define RST "\x1b[0m"
  44:main.c        **** 
  45:main.c        **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  46:main.c        **** // global declarations 
  47:main.c        **** char* key="11001100110011001100110011000001"; // initialise it 
  48:main.c        **** char line1[100];
  49:main.c        **** char* ack1="11110000111100001111000011110000"; 
  50:main.c        **** char* ack2="00001111000011110000111100001111"; 
  51:main.c        **** char *portname = "/dev/ttyXRUSB0" ;
  52:main.c        **** int fd; // File descriptor corresponding to the USB Port 
  53:main.c        **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  54:main.c        **** 
  55:main.c        **** 
  56:main.c        **** bool sigIsRaised(void);
  57:main.c        **** void sigRegisterHandler(void);
  58:main.c        **** 
  59:main.c        **** static const char *ptr;
  60:main.c        **** static bool enableBenchmarking = false;
  61:main.c        **** 
  62:main.c        **** 
  63:main.c        **** long timediff(clock_t t1, clock_t t2) {
  59              		.loc 1 63 0
  60              		.cfi_startproc
  61 0000 55       		pushq	%rbp
  62              		.cfi_def_cfa_offset 16
  63              		.cfi_offset 6, -16
  64 0001 4889E5   		movq	%rsp, %rbp
  65              		.cfi_def_cfa_register 6
  66 0004 48897DE8 		movq	%rdi, -24(%rbp)
  67 0008 488975E0 		movq	%rsi, -32(%rbp)
  64:main.c        ****     long elapsed;
  65:main.c        ****     elapsed = ((double)t2 - t1) / CLOCKS_PER_SEC * 1000;
  68              		.loc 1 65 0
  69 000c 660FEFC0 		pxor	%xmm0, %xmm0
  70 0010 F2480F2A 		cvtsi2sdq	-32(%rbp), %xmm0
  70      45E0
  71 0016 660FEFC9 		pxor	%xmm1, %xmm1
  72 001a F2480F2A 		cvtsi2sdq	-24(%rbp), %xmm1
  72      4DE8
  73 0020 F20F5CC1 		subsd	%xmm1, %xmm0
  74 0024 F20F100D 		movsd	.LC4(%rip), %xmm1
  74      00000000 
  75 002c F20F5EC1 		divsd	%xmm1, %xmm0
  76 0030 F20F100D 		movsd	.LC5(%rip), %xmm1
  76      00000000 
  77 0038 F20F59C1 		mulsd	%xmm1, %xmm0
  78 003c F2480F2C 		cvttsd2siq	%xmm0, %rax
  78      C0
  79 0041 488945F8 		movq	%rax, -8(%rbp)
  66:main.c        ****     return elapsed;
  80              		.loc 1 66 0
  81 0045 488B45F8 		movq	-8(%rbp), %rax
  67:main.c        **** }
  82              		.loc 1 67 0
  83 0049 5D       		popq	%rbp
  84              		.cfi_def_cfa 7, 8
  85 004a C3       		ret
  86              		.cfi_endproc
  87              	.LFE4:
  89              		.section	.rodata
  90              	.LC6:
  91 0080 74726163 		.string	"track_data"
  91      6B5F6461 
  91      746100
  92              	.LC7:
  93 008b 7700     		.string	"w"
  94              	.LC8:
  95 008d 0A256400 		.string	"\n%d"
  96              	.LC9:
  97 0091 2C256420 		.string	",%d "
  97      00
  98              		.text
  99              		.globl	save_to_file
 101              	save_to_file:
 102              	.LFB5:
  68:main.c        **** 
  69:main.c        **** 
  70:main.c        **** void save_to_file(int table[][5], int m){
 103              		.loc 1 70 0
 104              		.cfi_startproc
 105 004b 55       		pushq	%rbp
 106              		.cfi_def_cfa_offset 16
 107              		.cfi_offset 6, -16
 108 004c 4889E5   		movq	%rsp, %rbp
 109              		.cfi_def_cfa_register 6
 110 004f 4883EC30 		subq	$48, %rsp
 111 0053 48897DD8 		movq	%rdi, -40(%rbp)
 112 0057 8975D4   		movl	%esi, -44(%rbp)
  71:main.c        **** 	
  72:main.c        **** 	FILE *fp;
  73:main.c        **** 	 
  74:main.c        **** 	int i,j;
  75:main.c        **** 	 
  76:main.c        **** 	char* filename=strcat("track_data",".csv");
 113              		.loc 1 76 0
 114 005a B80A0000 		movl	$10, %eax
 114      00
 115 005f 48050000 		addq	$.LC6, %rax
 115      0000
 116 0065 C7002E63 		movl	$1987273518, (%rax)
 116      7376
 117 006b C6400400 		movb	$0, 4(%rax)
 118 006f 48C745F0 		movq	$.LC6, -16(%rbp)
 118      00000000 
  77:main.c        **** 	 
  78:main.c        **** 	fp=fopen(filename,"w");
 119              		.loc 1 78 0
 120 0077 488B45F0 		movq	-16(%rbp), %rax
 121 007b BE000000 		movl	$.LC7, %esi
 121      00
 122 0080 4889C7   		movq	%rax, %rdi
 123 0083 E8000000 		call	fopen
 123      00
 124 0088 488945F8 		movq	%rax, -8(%rbp)
  79:main.c        **** 	 	 
  80:main.c        **** 	for(i=0;i<m;i++){
 125              		.loc 1 80 0
 126 008c C745E800 		movl	$0, -24(%rbp)
 126      000000
 127 0093 EB6F     		jmp	.L4
 128              	.L7:
  81:main.c        **** 	 
  82:main.c        **** 	    fprintf(fp,"\n%d",i+1);
 129              		.loc 1 82 0
 130 0095 8B45E8   		movl	-24(%rbp), %eax
 131 0098 8D5001   		leal	1(%rax), %edx
 132 009b 488B45F8 		movq	-8(%rbp), %rax
 133 009f BE000000 		movl	$.LC8, %esi
 133      00
 134 00a4 4889C7   		movq	%rax, %rdi
 135 00a7 B8000000 		movl	$0, %eax
 135      00
 136 00ac E8000000 		call	fprintf
 136      00
  83:main.c        **** 	 
  84:main.c        **** 	    for(j=0;j<5;j++)
 137              		.loc 1 84 0
 138 00b1 C745EC00 		movl	$0, -20(%rbp)
 138      000000
 139 00b8 EB40     		jmp	.L5
 140              	.L6:
  85:main.c        **** 	 
  86:main.c        **** 	        fprintf(fp,",%d ",table[i][j]);
 141              		.loc 1 86 0 discriminator 3
 142 00ba 8B45E8   		movl	-24(%rbp), %eax
 143 00bd 4863D0   		movslq	%eax, %rdx
 144 00c0 4889D0   		movq	%rdx, %rax
 145 00c3 48C1E002 		salq	$2, %rax
 146 00c7 4801D0   		addq	%rdx, %rax
 147 00ca 48C1E002 		salq	$2, %rax
 148 00ce 4889C2   		movq	%rax, %rdx
 149 00d1 488B45D8 		movq	-40(%rbp), %rax
 150 00d5 4801C2   		addq	%rax, %rdx
 151 00d8 8B45EC   		movl	-20(%rbp), %eax
 152 00db 4898     		cltq
 153 00dd 8B1482   		movl	(%rdx,%rax,4), %edx
 154 00e0 488B45F8 		movq	-8(%rbp), %rax
 155 00e4 BE000000 		movl	$.LC9, %esi
 155      00
 156 00e9 4889C7   		movq	%rax, %rdi
 157 00ec B8000000 		movl	$0, %eax
 157      00
 158 00f1 E8000000 		call	fprintf
 158      00
  84:main.c        **** 	 
 159              		.loc 1 84 0 discriminator 3
 160 00f6 8345EC01 		addl	$1, -20(%rbp)
 161              	.L5:
  84:main.c        **** 	 
 162              		.loc 1 84 0 is_stmt 0 discriminator 1
 163 00fa 837DEC04 		cmpl	$4, -20(%rbp)
 164 00fe 7EBA     		jle	.L6
  80:main.c        **** 	 
 165              		.loc 1 80 0 is_stmt 1 discriminator 2
 166 0100 8345E801 		addl	$1, -24(%rbp)
 167              	.L4:
  80:main.c        **** 	 
 168              		.loc 1 80 0 is_stmt 0 discriminator 1
 169 0104 8B45E8   		movl	-24(%rbp), %eax
 170 0107 3B45D4   		cmpl	-44(%rbp), %eax
 171 010a 7C89     		jl	.L7
  87:main.c        **** 	 
  88:main.c        **** 	    }
  89:main.c        **** 	 
  90:main.c        **** 	fclose(fp);
 172              		.loc 1 90 0 is_stmt 1
 173 010c 488B45F8 		movq	-8(%rbp), %rax
 174 0110 4889C7   		movq	%rax, %rdi
 175 0113 E8000000 		call	fclose
 175      00
  91:main.c        ****  
  92:main.c        ****  	return ;
 176              		.loc 1 92 0
 177 0118 90       		nop
  93:main.c        **** }
 178              		.loc 1 93 0
 179 0119 C9       		leave
 180              		.cfi_def_cfa 7, 8
 181 011a C3       		ret
 182              		.cfi_endproc
 183              	.LFE5:
 185              		.section	.rodata
 186              	.LC10:
 187 0096 6572726F 		.string	"error %d from tcgetattr"
 187      72202564 
 187      2066726F 
 187      6D207463 
 187      67657461 
 188              	.LC11:
 189 00ae 6572726F 		.string	"error %d from tcsetattr"
 189      72202564 
 189      2066726F 
 189      6D207463 
 189      73657461 
 190              		.text
 191              		.globl	set_interface_attribs
 193              	set_interface_attribs:
 194              	.LFB6:
  94:main.c        **** 
  95:main.c        **** 
  96:main.c        **** int set_interface_attribs (int fd, int speed, int parity)
  97:main.c        **** {
 195              		.loc 1 97 0
 196              		.cfi_startproc
 197 011b 55       		pushq	%rbp
 198              		.cfi_def_cfa_offset 16
 199              		.cfi_offset 6, -16
 200 011c 4889E5   		movq	%rsp, %rbp
 201              		.cfi_def_cfa_register 6
 202 011f 4883EC60 		subq	$96, %rsp
 203 0123 897DAC   		movl	%edi, -84(%rbp)
 204 0126 8975A8   		movl	%esi, -88(%rbp)
 205 0129 8955A4   		movl	%edx, -92(%rbp)
 206              		.loc 1 97 0
 207 012c 64488B04 		movq	%fs:40, %rax
 207      25280000 
 207      00
 208 0135 488945F8 		movq	%rax, -8(%rbp)
 209 0139 31C0     		xorl	%eax, %eax
  98:main.c        ****         struct termios tty;
  99:main.c        ****         memset (&tty, 0, sizeof tty);
 210              		.loc 1 99 0
 211 013b 488D45B0 		leaq	-80(%rbp), %rax
 212 013f BA3C0000 		movl	$60, %edx
 212      00
 213 0144 BE000000 		movl	$0, %esi
 213      00
 214 0149 4889C7   		movq	%rax, %rdi
 215 014c E8000000 		call	memset
 215      00
 100:main.c        ****         if (tcgetattr (fd, &tty) != 0)
 216              		.loc 1 100 0
 217 0151 488D55B0 		leaq	-80(%rbp), %rdx
 218 0155 8B45AC   		movl	-84(%rbp), %eax
 219 0158 4889D6   		movq	%rdx, %rsi
 220 015b 89C7     		movl	%eax, %edi
 221 015d E8000000 		call	tcgetattr
 221      00
 222 0162 85C0     		testl	%eax, %eax
 223 0164 7422     		je	.L10
 101:main.c        ****         {
 102:main.c        ****                 printf("error %d from tcgetattr", errno);
 224              		.loc 1 102 0
 225 0166 E8000000 		call	__errno_location
 225      00
 226 016b 8B00     		movl	(%rax), %eax
 227 016d 89C6     		movl	%eax, %esi
 228 016f BF000000 		movl	$.LC10, %edi
 228      00
 229 0174 B8000000 		movl	$0, %eax
 229      00
 230 0179 E8000000 		call	printf
 230      00
 103:main.c        ****                 return -1;
 231              		.loc 1 103 0
 232 017e B8FFFFFF 		movl	$-1, %eax
 232      FF
 233 0183 E9B60000 		jmp	.L13
 233      00
 234              	.L10:
 104:main.c        ****         }
 105:main.c        **** 
 106:main.c        ****         cfsetospeed (&tty, speed);
 235              		.loc 1 106 0
 236 0188 8B55A8   		movl	-88(%rbp), %edx
 237 018b 488D45B0 		leaq	-80(%rbp), %rax
 238 018f 89D6     		movl	%edx, %esi
 239 0191 4889C7   		movq	%rax, %rdi
 240 0194 E8000000 		call	cfsetospeed
 240      00
 107:main.c        ****         cfsetispeed (&tty, speed);
 241              		.loc 1 107 0
 242 0199 8B55A8   		movl	-88(%rbp), %edx
 243 019c 488D45B0 		leaq	-80(%rbp), %rax
 244 01a0 89D6     		movl	%edx, %esi
 245 01a2 4889C7   		movq	%rax, %rdi
 246 01a5 E8000000 		call	cfsetispeed
 246      00
 108:main.c        **** 
 109:main.c        ****         tty.c_cflag = (tty.c_cflag & ~CSIZE) | CS8;     // 8-bit chars
 247              		.loc 1 109 0
 248 01aa 8B45B8   		movl	-72(%rbp), %eax
 249 01ad 83C830   		orl	$48, %eax
 250 01b0 8945B8   		movl	%eax, -72(%rbp)
 110:main.c        ****         // disable IGNBRK for mismatched speed tests; otherwise receive break
 111:main.c        ****         // as \000 chars
 112:main.c        ****         tty.c_iflag &= ~IGNBRK;         // disable break processing
 251              		.loc 1 112 0
 252 01b3 8B45B0   		movl	-80(%rbp), %eax
 253 01b6 83E0FE   		andl	$-2, %eax
 254 01b9 8945B0   		movl	%eax, -80(%rbp)
 113:main.c        ****         tty.c_lflag = 0;                // no signaling chars, no echo,
 255              		.loc 1 113 0
 256 01bc C745BC00 		movl	$0, -68(%rbp)
 256      000000
 114:main.c        ****                                         // no canonical processing
 115:main.c        ****         tty.c_oflag = 0;                // no remapping, no delays
 257              		.loc 1 115 0
 258 01c3 C745B400 		movl	$0, -76(%rbp)
 258      000000
 116:main.c        ****         tty.c_cc[VMIN]  = 0;            // read doesn't block
 259              		.loc 1 116 0
 260 01ca C645C700 		movb	$0, -57(%rbp)
 117:main.c        ****         tty.c_cc[VTIME] = 5;            // 0.5 seconds read timeout
 261              		.loc 1 117 0
 262 01ce C645C605 		movb	$5, -58(%rbp)
 118:main.c        **** 
 119:main.c        ****         tty.c_iflag &= ~(IXON | IXOFF | IXANY); // shut off xon/xoff ctrl
 263              		.loc 1 119 0
 264 01d2 8B45B0   		movl	-80(%rbp), %eax
 265 01d5 80E4E3   		andb	$227, %ah
 266 01d8 8945B0   		movl	%eax, -80(%rbp)
 120:main.c        **** 
 121:main.c        ****         tty.c_cflag |= (CLOCAL | CREAD);// ignore modem controls,
 267              		.loc 1 121 0
 268 01db 8B45B8   		movl	-72(%rbp), %eax
 269 01de 0D800800 		orl	$2176, %eax
 269      00
 270 01e3 8945B8   		movl	%eax, -72(%rbp)
 122:main.c        ****                                         // enable reading
 123:main.c        ****         tty.c_cflag &= ~(PARENB | PARODD);      // shut off parity
 271              		.loc 1 123 0
 272 01e6 8B45B8   		movl	-72(%rbp), %eax
 273 01e9 80E4FC   		andb	$252, %ah
 274 01ec 8945B8   		movl	%eax, -72(%rbp)
 124:main.c        ****         tty.c_cflag |= parity;
 275              		.loc 1 124 0
 276 01ef 8B55B8   		movl	-72(%rbp), %edx
 277 01f2 8B45A4   		movl	-92(%rbp), %eax
 278 01f5 09D0     		orl	%edx, %eax
 279 01f7 8945B8   		movl	%eax, -72(%rbp)
 125:main.c        ****         tty.c_cflag &= ~CSTOPB;
 280              		.loc 1 125 0
 281 01fa 8B45B8   		movl	-72(%rbp), %eax
 282 01fd 83E0BF   		andl	$-65, %eax
 283 0200 8945B8   		movl	%eax, -72(%rbp)
 126:main.c        ****        // tty.c_cflag &= ~CRTSCTS;
 127:main.c        ****     
 128:main.c        **** 
 129:main.c        ****         if (tcsetattr (fd, TCSANOW, &tty) != 0)
 284              		.loc 1 129 0
 285 0203 488D55B0 		leaq	-80(%rbp), %rdx
 286 0207 8B45AC   		movl	-84(%rbp), %eax
 287 020a BE000000 		movl	$0, %esi
 287      00
 288 020f 89C7     		movl	%eax, %edi
 289 0211 E8000000 		call	tcsetattr
 289      00
 290 0216 85C0     		testl	%eax, %eax
 291 0218 741F     		je	.L12
 130:main.c        ****         {
 131:main.c        ****                 printf ("error %d from tcsetattr", errno);
 292              		.loc 1 131 0
 293 021a E8000000 		call	__errno_location
 293      00
 294 021f 8B00     		movl	(%rax), %eax
 295 0221 89C6     		movl	%eax, %esi
 296 0223 BF000000 		movl	$.LC11, %edi
 296      00
 297 0228 B8000000 		movl	$0, %eax
 297      00
 298 022d E8000000 		call	printf
 298      00
 132:main.c        ****                 return -1;
 299              		.loc 1 132 0
 300 0232 B8FFFFFF 		movl	$-1, %eax
 300      FF
 301 0237 EB05     		jmp	.L13
 302              	.L12:
 133:main.c        ****         }
 134:main.c        ****         return 0;
 303              		.loc 1 134 0
 304 0239 B8000000 		movl	$0, %eax
 304      00
 305              	.L13:
 135:main.c        **** }
 306              		.loc 1 135 0 discriminator 1
 307 023e 488B4DF8 		movq	-8(%rbp), %rcx
 308 0242 6448330C 		xorq	%fs:40, %rcx
 308      25280000 
 308      00
 309 024b 7405     		je	.L14
 310              		.loc 1 135 0 is_stmt 0
 311 024d E8000000 		call	__stack_chk_fail
 311      00
 312              	.L14:
 313 0252 C9       		leave
 314              		.cfi_def_cfa 7, 8
 315 0253 C3       		ret
 316              		.cfi_endproc
 317              	.LFE6:
 319              		.section	.rodata
 320              	.LC12:
 321 00c6 6572726F 		.string	"error %d from tggetattr"
 321      72202564 
 321      2066726F 
 321      6D207467 
 321      67657461 
 322 00de 0000     		.align 8
 323              	.LC13:
 324 00e0 6572726F 		.string	"error %d setting term attributes"
 324      72202564 
 324      20736574 
 324      74696E67 
 324      20746572 
 325              		.text
 326              		.globl	set_blocking
 328              	set_blocking:
 329              	.LFB7:
 136:main.c        **** 
 137:main.c        **** void set_blocking (int fd, int should_block)
 138:main.c        **** {
 330              		.loc 1 138 0 is_stmt 1
 331              		.cfi_startproc
 332 0254 55       		pushq	%rbp
 333              		.cfi_def_cfa_offset 16
 334              		.cfi_offset 6, -16
 335 0255 4889E5   		movq	%rsp, %rbp
 336              		.cfi_def_cfa_register 6
 337 0258 4883EC60 		subq	$96, %rsp
 338 025c 897DAC   		movl	%edi, -84(%rbp)
 339 025f 8975A8   		movl	%esi, -88(%rbp)
 340              		.loc 1 138 0
 341 0262 64488B04 		movq	%fs:40, %rax
 341      25280000 
 341      00
 342 026b 488945F8 		movq	%rax, -8(%rbp)
 343 026f 31C0     		xorl	%eax, %eax
 139:main.c        ****         struct termios tty;
 140:main.c        ****         memset (&tty, 0, sizeof tty);
 344              		.loc 1 140 0
 345 0271 488D45B0 		leaq	-80(%rbp), %rax
 346 0275 BA3C0000 		movl	$60, %edx
 346      00
 347 027a BE000000 		movl	$0, %esi
 347      00
 348 027f 4889C7   		movq	%rax, %rdi
 349 0282 E8000000 		call	memset
 349      00
 141:main.c        ****         if (tcgetattr (fd, &tty) != 0)
 350              		.loc 1 141 0
 351 0287 488D55B0 		leaq	-80(%rbp), %rdx
 352 028b 8B45AC   		movl	-84(%rbp), %eax
 353 028e 4889D6   		movq	%rdx, %rsi
 354 0291 89C7     		movl	%eax, %edi
 355 0293 E8000000 		call	tcgetattr
 355      00
 356 0298 85C0     		testl	%eax, %eax
 357 029a 741A     		je	.L16
 142:main.c        ****         {
 143:main.c        ****                 printf ("error %d from tggetattr", errno);
 358              		.loc 1 143 0
 359 029c E8000000 		call	__errno_location
 359      00
 360 02a1 8B00     		movl	(%rax), %eax
 361 02a3 89C6     		movl	%eax, %esi
 362 02a5 BF000000 		movl	$.LC12, %edi
 362      00
 363 02aa B8000000 		movl	$0, %eax
 363      00
 364 02af E8000000 		call	printf
 364      00
 365 02b4 EB3D     		jmp	.L15
 366              	.L16:
 144:main.c        ****                 return;
 145:main.c        ****         }
 146:main.c        **** 
 147:main.c        ****         tty.c_cc[VMIN]  = should_block ? 1 : 0;
 367              		.loc 1 147 0
 368 02b6 837DA800 		cmpl	$0, -88(%rbp)
 369 02ba 0F95C0   		setne	%al
 370 02bd 8845C7   		movb	%al, -57(%rbp)
 148:main.c        ****         tty.c_cc[VTIME] = 5;            // 0.5 seconds read timeout
 371              		.loc 1 148 0
 372 02c0 C645C605 		movb	$5, -58(%rbp)
 149:main.c        **** 
 150:main.c        ****         if (tcsetattr (fd, TCSANOW, &tty) != 0)
 373              		.loc 1 150 0
 374 02c4 488D55B0 		leaq	-80(%rbp), %rdx
 375 02c8 8B45AC   		movl	-84(%rbp), %eax
 376 02cb BE000000 		movl	$0, %esi
 376      00
 377 02d0 89C7     		movl	%eax, %edi
 378 02d2 E8000000 		call	tcsetattr
 378      00
 379 02d7 85C0     		testl	%eax, %eax
 380 02d9 7418     		je	.L15
 151:main.c        ****                printf ("error %d setting term attributes", errno);
 381              		.loc 1 151 0
 382 02db E8000000 		call	__errno_location
 382      00
 383 02e0 8B00     		movl	(%rax), %eax
 384 02e2 89C6     		movl	%eax, %esi
 385 02e4 BF000000 		movl	$.LC13, %edi
 385      00
 386 02e9 B8000000 		movl	$0, %eax
 386      00
 387 02ee E8000000 		call	printf
 387      00
 388              	.L15:
 152:main.c        **** } 
 389              		.loc 1 152 0
 390 02f3 488B45F8 		movq	-8(%rbp), %rax
 391 02f7 64483304 		xorq	%fs:40, %rax
 391      25280000 
 391      00
 392 0300 7405     		je	.L19
 393 0302 E8000000 		call	__stack_chk_fail
 393      00
 394              	.L19:
 395 0307 C9       		leave
 396              		.cfi_def_cfa 7, 8
 397 0308 C3       		ret
 398              		.cfi_endproc
 399              	.LFE7:
 401              		.section	.rodata
 402              	.LC14:
 403 0101 6572726F 		.string	"error %d opening %s: %s"
 403      72202564 
 403      206F7065 
 403      6E696E67 
 403      2025733A 
 404              		.text
 405              		.globl	read_one_byte_from_uart
 407              	read_one_byte_from_uart:
 408              	.LFB8:
 153:main.c        **** 
 154:main.c        **** 
 155:main.c        **** char* read_one_byte_from_uart(long long timeout){
 409              		.loc 1 155 0
 410              		.cfi_startproc
 411 0309 55       		pushq	%rbp
 412              		.cfi_def_cfa_offset 16
 413              		.cfi_offset 6, -16
 414 030a 4889E5   		movq	%rsp, %rbp
 415              		.cfi_def_cfa_register 6
 416 030d 4154     		pushq	%r12
 417 030f 53       		pushq	%rbx
 418 0310 4883EC30 		subq	$48, %rsp
 419              		.cfi_offset 12, -24
 420              		.cfi_offset 3, -32
 421 0314 48897DC8 		movq	%rdi, -56(%rbp)
 422              		.loc 1 155 0
 423 0318 64488B04 		movq	%fs:40, %rax
 423      25280000 
 423      00
 424 0321 488945E8 		movq	%rax, -24(%rbp)
 425 0325 31C0     		xorl	%eax, %eax
 156:main.c        ****         
 157:main.c        **** 
 158:main.c        ****    // clock_t start;	
 159:main.c        **** 
 160:main.c        ****     if (fd < 0)
 426              		.loc 1 160 0
 427 0327 8B050000 		movl	fd(%rip), %eax
 427      0000
 428 032d 85C0     		testl	%eax, %eax
 429 032f 7940     		jns	.L21
 161:main.c        ****     {
 162:main.c        ****         printf ("error %d opening %s: %s", errno, portname, strerror (errno));
 430              		.loc 1 162 0
 431 0331 E8000000 		call	__errno_location
 431      00
 432 0336 8B00     		movl	(%rax), %eax
 433 0338 89C7     		movl	%eax, %edi
 434 033a E8000000 		call	strerror
 434      00
 435 033f 4989C4   		movq	%rax, %r12
 436 0342 488B1D00 		movq	portname(%rip), %rbx
 436      000000
 437 0349 E8000000 		call	__errno_location
 437      00
 438 034e 8B00     		movl	(%rax), %eax
 439 0350 4C89E1   		movq	%r12, %rcx
 440 0353 4889DA   		movq	%rbx, %rdx
 441 0356 89C6     		movl	%eax, %esi
 442 0358 BF000000 		movl	$.LC14, %edi
 442      00
 443 035d B8000000 		movl	$0, %eax
 443      00
 444 0362 E8000000 		call	printf
 444      00
 163:main.c        ****         return 0;
 445              		.loc 1 163 0
 446 0367 B8000000 		movl	$0, %eax
 446      00
 447 036c E9F00000 		jmp	.L28
 447      00
 448              	.L21:
 164:main.c        ****     }
 165:main.c        ****     
 166:main.c        ****     set_interface_attribs (fd, B2400, 0);  // set speed to 115,200 bps, 8n1 (no parity)
 449              		.loc 1 166 0
 450 0371 8B050000 		movl	fd(%rip), %eax
 450      0000
 451 0377 BA000000 		movl	$0, %edx
 451      00
 452 037c BE0B0000 		movl	$11, %esi
 452      00
 453 0381 89C7     		movl	%eax, %edi
 454 0383 E8000000 		call	set_interface_attribs
 454      00
 167:main.c        ****     set_blocking (fd, 0);                // set no blocking
 455              		.loc 1 167 0
 456 0388 8B050000 		movl	fd(%rip), %eax
 456      0000
 457 038e BE000000 		movl	$0, %esi
 457      00
 458 0393 89C7     		movl	%eax, %edi
 459 0395 E8000000 		call	set_blocking
 459      00
 168:main.c        ****     char buf[1];
 169:main.c        ****     char *ans=malloc(9); 
 460              		.loc 1 169 0
 461 039a BF090000 		movl	$9, %edi
 461      00
 462 039f E8000000 		call	malloc
 462      00
 463 03a4 488945D8 		movq	%rax, -40(%rbp)
 170:main.c        **** 
 171:main.c        **** 	//start = clock();    
 172:main.c        **** 
 173:main.c        ****    // while (timediff(clock(), start) < timeout*1000) {
 174:main.c        ****     	int n = read (fd, buf, sizeof(buf)); 
 464              		.loc 1 174 0
 465 03a8 8B050000 		movl	fd(%rip), %eax
 465      0000
 466 03ae 488D4DE7 		leaq	-25(%rbp), %rcx
 467 03b2 BA010000 		movl	$1, %edx
 467      00
 468 03b7 4889CE   		movq	%rcx, %rsi
 469 03ba 89C7     		movl	%eax, %edi
 470 03bc E8000000 		call	read
 470      00
 471 03c1 8945D4   		movl	%eax, -44(%rbp)
 175:main.c        ****     	if (n == 1) {
 472              		.loc 1 175 0
 473 03c4 837DD401 		cmpl	$1, -44(%rbp)
 474 03c8 0F858800 		jne	.L23
 474      0000
 475              	.LBB2:
 176:main.c        **** 	   // 	printf("N is =%d", n);
 177:main.c        **** 	    //	printf("The read string is %hhx\n",buf[0]);
 178:main.c        **** 	    	uint8 temp=buf[0]; 
 476              		.loc 1 178 0
 477 03ce 0FB645E7 		movzbl	-25(%rbp), %eax
 478 03d2 8845D3   		movb	%al, -45(%rbp)
 179:main.c        ****             ans[0]='\0'; 
 479              		.loc 1 179 0
 480 03d5 488B45D8 		movq	-40(%rbp), %rax
 481 03d9 C60000   		movb	$0, (%rax)
 180:main.c        ****        //     printf("data read from uart in uint8 %d \n", temp); 
 181:main.c        ****             while(temp>0){
 482              		.loc 1 181 0
 483 03dc EB6C     		jmp	.L24
 484              	.L27:
 182:main.c        ****                 if(temp%2==1) { strcat(ans,"1"); }
 485              		.loc 1 182 0
 486 03de 0FB645D3 		movzbl	-45(%rbp), %eax
 487 03e2 83E001   		andl	$1, %eax
 488 03e5 84C0     		testb	%al, %al
 489 03e7 7430     		je	.L25
 490              		.loc 1 182 0 is_stmt 0 discriminator 1
 491 03e9 488B45D8 		movq	-40(%rbp), %rax
 492 03ed 48C7C1FF 		movq	$-1, %rcx
 492      FFFFFF
 493 03f4 4889C2   		movq	%rax, %rdx
 494 03f7 B8000000 		movl	$0, %eax
 494      00
 495 03fc 4889D7   		movq	%rdx, %rdi
 496 03ff F2AE     		repnz scasb
 497 0401 4889C8   		movq	%rcx, %rax
 498 0404 48F7D0   		notq	%rax
 499 0407 488D50FF 		leaq	-1(%rax), %rdx
 500 040b 488B45D8 		movq	-40(%rbp), %rax
 501 040f 4801D0   		addq	%rdx, %rax
 502 0412 66C70031 		movw	$49, (%rax)
 502      00
 503 0417 EB2E     		jmp	.L26
 504              	.L25:
 183:main.c        ****                 else strcat(ans,"0"); 
 505              		.loc 1 183 0 is_stmt 1
 506 0419 488B45D8 		movq	-40(%rbp), %rax
 507 041d 48C7C1FF 		movq	$-1, %rcx
 507      FFFFFF
 508 0424 4889C2   		movq	%rax, %rdx
 509 0427 B8000000 		movl	$0, %eax
 509      00
 510 042c 4889D7   		movq	%rdx, %rdi
 511 042f F2AE     		repnz scasb
 512 0431 4889C8   		movq	%rcx, %rax
 513 0434 48F7D0   		notq	%rax
 514 0437 488D50FF 		leaq	-1(%rax), %rdx
 515 043b 488B45D8 		movq	-40(%rbp), %rax
 516 043f 4801D0   		addq	%rdx, %rax
 517 0442 66C70030 		movw	$48, (%rax)
 517      00
 518              	.L26:
 184:main.c        ****                 temp>>=1; 
 519              		.loc 1 184 0
 520 0447 D06DD3   		shrb	-45(%rbp)
 521              	.L24:
 181:main.c        ****                 if(temp%2==1) { strcat(ans,"1"); }
 522              		.loc 1 181 0
 523 044a 807DD300 		cmpb	$0, -45(%rbp)
 524 044e 758E     		jne	.L27
 185:main.c        ****             }
 186:main.c        **** 	    	return ans;
 525              		.loc 1 186 0
 526 0450 488B45D8 		movq	-40(%rbp), %rax
 527 0454 EB0B     		jmp	.L28
 528              	.L23:
 529              	.LBE2:
 187:main.c        **** 	    }
 188:main.c        **** 	//}
 189:main.c        **** 	ans[0]='f'; return ans; 
 530              		.loc 1 189 0
 531 0456 488B45D8 		movq	-40(%rbp), %rax
 532 045a C60066   		movb	$102, (%rax)
 533 045d 488B45D8 		movq	-40(%rbp), %rax
 534              	.L28:
 190:main.c        **** }
 535              		.loc 1 190 0 discriminator 1
 536 0461 488B5DE8 		movq	-24(%rbp), %rbx
 537 0465 6448331C 		xorq	%fs:40, %rbx
 537      25280000 
 537      00
 538 046e 7405     		je	.L29
 539              		.loc 1 190 0 is_stmt 0
 540 0470 E8000000 		call	__stack_chk_fail
 540      00
 541              	.L29:
 542 0475 4883C430 		addq	$48, %rsp
 543 0479 5B       		popq	%rbx
 544 047a 415C     		popq	%r12
 545 047c 5D       		popq	%rbp
 546              		.cfi_def_cfa 7, 8
 547 047d C3       		ret
 548              		.cfi_endproc
 549              	.LFE8:
 551              		.section	.rodata
 552 0119 00000000 		.align 8
 552      000000
 553              	.LC15:
 554 0120 3E3E2045 		.string	">> Enter data to Write via Uart:\n>>>> "
 554      6E746572 
 554      20646174 
 554      6120746F 
 554      20577269 
 555              	.LC16:
 556 0147 25686878 		.string	"%hhx"
 556      00
 557              		.text
 558              		.globl	write_one_byte_to_uart
 560              	write_one_byte_to_uart:
 561              	.LFB9:
 191:main.c        **** 
 192:main.c        **** int write_one_byte_to_uart(){
 562              		.loc 1 192 0 is_stmt 1
 563              		.cfi_startproc
 564 047e 55       		pushq	%rbp
 565              		.cfi_def_cfa_offset 16
 566              		.cfi_offset 6, -16
 567 047f 4889E5   		movq	%rsp, %rbp
 568              		.cfi_def_cfa_register 6
 569 0482 4883EC10 		subq	$16, %rsp
 570              		.loc 1 192 0
 571 0486 64488B04 		movq	%fs:40, %rax
 571      25280000 
 571      00
 572 048f 488945F8 		movq	%rax, -8(%rbp)
 573 0493 31C0     		xorl	%eax, %eax
 193:main.c        **** 	    
 194:main.c        **** 	    unsigned char data[1];
 195:main.c        **** 	    printf(">> Enter data to Write via Uart:\n>>>> ");
 574              		.loc 1 195 0
 575 0495 BF000000 		movl	$.LC15, %edi
 575      00
 576 049a B8000000 		movl	$0, %eax
 576      00
 577 049f E8000000 		call	printf
 577      00
 196:main.c        ****     	scanf("%hhx", &data);
 578              		.loc 1 196 0
 579 04a4 488D45F7 		leaq	-9(%rbp), %rax
 580 04a8 4889C6   		movq	%rax, %rsi
 581 04ab BF000000 		movl	$.LC16, %edi
 581      00
 582 04b0 B8000000 		movl	$0, %eax
 582      00
 583 04b5 E8000000 		call	__isoc99_scanf
 583      00
 197:main.c        **** 
 198:main.c        ****     	// error checking 
 199:main.c        ****     	int n = write (fd, data, 1); 
 584              		.loc 1 199 0
 585 04ba 8B050000 		movl	fd(%rip), %eax
 585      0000
 586 04c0 488D4DF7 		leaq	-9(%rbp), %rcx
 587 04c4 BA010000 		movl	$1, %edx
 587      00
 588 04c9 4889CE   		movq	%rcx, %rsi
 589 04cc 89C7     		movl	%eax, %edi
 590 04ce E8000000 		call	write
 590      00
 591 04d3 8945F0   		movl	%eax, -16(%rbp)
 200:main.c        ****  		if (n!=1)
 592              		.loc 1 200 0
 593 04d6 837DF001 		cmpl	$1, -16(%rbp)
 594 04da 7407     		je	.L31
 201:main.c        ****     	{
 202:main.c        ****         	//printf ("error in writing to the board through UART port");
 203:main.c        ****         	return 0;
 595              		.loc 1 203 0
 596 04dc B8000000 		movl	$0, %eax
 596      00
 597 04e1 EB05     		jmp	.L33
 598              	.L31:
 204:main.c        ****     	}
 205:main.c        ****         //printf("Write Success\n");
 206:main.c        ****     	return 1;
 599              		.loc 1 206 0
 600 04e3 B8010000 		movl	$1, %eax
 600      00
 601              	.L33:
 207:main.c        **** 
 208:main.c        **** }
 602              		.loc 1 208 0 discriminator 1
 603 04e8 488B55F8 		movq	-8(%rbp), %rdx
 604 04ec 64483314 		xorq	%fs:40, %rdx
 604      25280000 
 604      00
 605 04f5 7405     		je	.L34
 606              		.loc 1 208 0 is_stmt 0
 607 04f7 E8000000 		call	__stack_chk_fail
 607      00
 608              	.L34:
 609 04fc C9       		leave
 610              		.cfi_def_cfa 7, 8
 611 04fd C3       		ret
 612              		.cfi_endproc
 613              	.LFE9:
 616              	isHexDigit:
 617              	.LFB10:
 209:main.c        **** 
 210:main.c        **** static bool isHexDigit(char ch) {
 618              		.loc 1 210 0 is_stmt 1
 619              		.cfi_startproc
 620 04fe 55       		pushq	%rbp
 621              		.cfi_def_cfa_offset 16
 622              		.cfi_offset 6, -16
 623 04ff 4889E5   		movq	%rsp, %rbp
 624              		.cfi_def_cfa_register 6
 625 0502 89F8     		movl	%edi, %eax
 626 0504 8845FC   		movb	%al, -4(%rbp)
 211:main.c        **** 	return
 212:main.c        **** 		(ch >= '0' && ch <= '9') ||
 213:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 627              		.loc 1 213 0
 628 0507 807DFC2F 		cmpb	$47, -4(%rbp)
 629 050b 7E06     		jle	.L36
 212:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 630              		.loc 1 212 0
 631 050d 807DFC39 		cmpb	$57, -4(%rbp)
 632 0511 7E18     		jle	.L37
 633              	.L36:
 212:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 634              		.loc 1 212 0 is_stmt 0 discriminator 1
 635 0513 807DFC60 		cmpb	$96, -4(%rbp)
 636 0517 7E06     		jle	.L38
 637              		.loc 1 213 0 is_stmt 1
 638 0519 807DFC66 		cmpb	$102, -4(%rbp)
 639 051d 7E0C     		jle	.L37
 640              	.L38:
 641              		.loc 1 213 0 is_stmt 0 discriminator 2
 642 051f 807DFC40 		cmpb	$64, -4(%rbp)
 643 0523 7E0D     		jle	.L39
 214:main.c        **** 		(ch >= 'A' && ch <= 'F');
 644              		.loc 1 214 0 is_stmt 1
 645 0525 807DFC46 		cmpb	$70, -4(%rbp)
 646 0529 7F07     		jg	.L39
 647              	.L37:
 213:main.c        **** 		(ch >= 'A' && ch <= 'F');
 648              		.loc 1 213 0 discriminator 1
 649 052b B8010000 		movl	$1, %eax
 649      00
 650 0530 EB05     		jmp	.L40
 651              	.L39:
 213:main.c        **** 		(ch >= 'A' && ch <= 'F');
 652              		.loc 1 213 0 is_stmt 0 discriminator 3
 653 0532 B8000000 		movl	$0, %eax
 653      00
 654              	.L40:
 212:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 655              		.loc 1 212 0 is_stmt 1
 656 0537 83E001   		andl	$1, %eax
 215:main.c        **** }
 657              		.loc 1 215 0
 658 053a 5D       		popq	%rbp
 659              		.cfi_def_cfa 7, 8
 660 053b C3       		ret
 661              		.cfi_endproc
 662              	.LFE10:
 665              	calcChecksum:
 666              	.LFB11:
 216:main.c        **** 
 217:main.c        **** static uint16 calcChecksum(const uint8 *data, size_t length) {
 667              		.loc 1 217 0
 668              		.cfi_startproc
 669 053c 55       		pushq	%rbp
 670              		.cfi_def_cfa_offset 16
 671              		.cfi_offset 6, -16
 672 053d 4889E5   		movq	%rsp, %rbp
 673              		.cfi_def_cfa_register 6
 674 0540 48897DE8 		movq	%rdi, -24(%rbp)
 675 0544 488975E0 		movq	%rsi, -32(%rbp)
 218:main.c        **** 	uint16 cksum = 0x0000;
 676              		.loc 1 218 0
 677 0548 66C745FE 		movw	$0, -2(%rbp)
 677      0000
 219:main.c        **** 	while ( length-- ) {
 678              		.loc 1 219 0
 679 054e EB16     		jmp	.L43
 680              	.L44:
 220:main.c        **** 		cksum = (uint16)(cksum + *data++);
 681              		.loc 1 220 0
 682 0550 488B45E8 		movq	-24(%rbp), %rax
 683 0554 488D5001 		leaq	1(%rax), %rdx
 684 0558 488955E8 		movq	%rdx, -24(%rbp)
 685 055c 0FB600   		movzbl	(%rax), %eax
 686 055f 0FB6C0   		movzbl	%al, %eax
 687 0562 660145FE 		addw	%ax, -2(%rbp)
 688              	.L43:
 219:main.c        **** 	while ( length-- ) {
 689              		.loc 1 219 0
 690 0566 488B45E0 		movq	-32(%rbp), %rax
 691 056a 488D50FF 		leaq	-1(%rax), %rdx
 692 056e 488955E0 		movq	%rdx, -32(%rbp)
 693 0572 4885C0   		testq	%rax, %rax
 694 0575 75D9     		jne	.L44
 221:main.c        **** 	}
 222:main.c        **** 	return cksum;
 695              		.loc 1 222 0
 696 0577 0FB745FE 		movzwl	-2(%rbp), %eax
 223:main.c        **** }
 697              		.loc 1 223 0
 698 057b 5D       		popq	%rbp
 699              		.cfi_def_cfa 7, 8
 700 057c C3       		ret
 701              		.cfi_endproc
 702              	.LFE11:
 705              	getHexNibble:
 706              	.LFB12:
 224:main.c        **** 
 225:main.c        **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
 707              		.loc 1 225 0
 708              		.cfi_startproc
 709 057d 55       		pushq	%rbp
 710              		.cfi_def_cfa_offset 16
 711              		.cfi_offset 6, -16
 712 057e 4889E5   		movq	%rsp, %rbp
 713              		.cfi_def_cfa_register 6
 714 0581 89F8     		movl	%edi, %eax
 715 0583 488975F0 		movq	%rsi, -16(%rbp)
 716 0587 8845FC   		movb	%al, -4(%rbp)
 226:main.c        **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
 717              		.loc 1 226 0
 718 058a 807DFC2F 		cmpb	$47, -4(%rbp)
 719 058e 7E1A     		jle	.L47
 720              		.loc 1 226 0 is_stmt 0 discriminator 1
 721 0590 807DFC39 		cmpb	$57, -4(%rbp)
 722 0594 7F14     		jg	.L47
 227:main.c        **** 		*nibble = (uint8)(hexDigit - '0');
 723              		.loc 1 227 0 is_stmt 1
 724 0596 0FB645FC 		movzbl	-4(%rbp), %eax
 725 059a 8D50D0   		leal	-48(%rax), %edx
 726 059d 488B45F0 		movq	-16(%rbp), %rax
 727 05a1 8810     		movb	%dl, (%rax)
 228:main.c        **** 		return false;
 728              		.loc 1 228 0
 729 05a3 B8000000 		movl	$0, %eax
 729      00
 730 05a8 EB45     		jmp	.L48
 731              	.L47:
 229:main.c        **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
 732              		.loc 1 229 0
 733 05aa 807DFC60 		cmpb	$96, -4(%rbp)
 734 05ae 7E1A     		jle	.L49
 735              		.loc 1 229 0 is_stmt 0 discriminator 1
 736 05b0 807DFC66 		cmpb	$102, -4(%rbp)
 737 05b4 7F14     		jg	.L49
 230:main.c        **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
 738              		.loc 1 230 0 is_stmt 1
 739 05b6 0FB645FC 		movzbl	-4(%rbp), %eax
 740 05ba 8D50A9   		leal	-87(%rax), %edx
 741 05bd 488B45F0 		movq	-16(%rbp), %rax
 742 05c1 8810     		movb	%dl, (%rax)
 231:main.c        **** 		return false;
 743              		.loc 1 231 0
 744 05c3 B8000000 		movl	$0, %eax
 744      00
 745 05c8 EB25     		jmp	.L48
 746              	.L49:
 232:main.c        **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
 747              		.loc 1 232 0
 748 05ca 807DFC40 		cmpb	$64, -4(%rbp)
 749 05ce 7E1A     		jle	.L50
 750              		.loc 1 232 0 is_stmt 0 discriminator 1
 751 05d0 807DFC46 		cmpb	$70, -4(%rbp)
 752 05d4 7F14     		jg	.L50
 233:main.c        **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
 753              		.loc 1 233 0 is_stmt 1
 754 05d6 0FB645FC 		movzbl	-4(%rbp), %eax
 755 05da 8D50C9   		leal	-55(%rax), %edx
 756 05dd 488B45F0 		movq	-16(%rbp), %rax
 757 05e1 8810     		movb	%dl, (%rax)
 234:main.c        **** 		return false;
 758              		.loc 1 234 0
 759 05e3 B8000000 		movl	$0, %eax
 759      00
 760 05e8 EB05     		jmp	.L48
 761              	.L50:
 235:main.c        **** 	} else {
 236:main.c        **** 		return true;
 762              		.loc 1 236 0
 763 05ea B8010000 		movl	$1, %eax
 763      00
 764              	.L48:
 237:main.c        **** 	}
 238:main.c        **** }
 765              		.loc 1 238 0
 766 05ef 5D       		popq	%rbp
 767              		.cfi_def_cfa 7, 8
 768 05f0 C3       		ret
 769              		.cfi_endproc
 770              	.LFE12:
 772              		.section	.rodata
 773              	.LC17:
 774 014c 20616674 		.string	" after dump \n "
 774      65722064 
 774      756D7020 
 774      0A2000
 775              		.text
 777              	getHexByte:
 778              	.LFB13:
 239:main.c        **** 
 240:main.c        **** static int getHexByte(uint8 *byte) {
 779              		.loc 1 240 0
 780              		.cfi_startproc
 781 05f1 55       		pushq	%rbp
 782              		.cfi_def_cfa_offset 16
 783              		.cfi_offset 6, -16
 784 05f2 4889E5   		movq	%rsp, %rbp
 785              		.cfi_def_cfa_register 6
 786 05f5 4883EC20 		subq	$32, %rsp
 787 05f9 48897DE8 		movq	%rdi, -24(%rbp)
 788              		.loc 1 240 0
 789 05fd 64488B04 		movq	%fs:40, %rax
 789      25280000 
 789      00
 790 0606 488945F8 		movq	%rax, -8(%rbp)
 791 060a 31C0     		xorl	%eax, %eax
 241:main.c        **** 	uint8 upperNibble;
 242:main.c        **** 	uint8 lowerNibble;
 243:main.c        **** 	if ( !getHexNibble(ptr[0], &upperNibble) && !getHexNibble(ptr[1], &lowerNibble) ) {
 792              		.loc 1 243 0
 793 060c 488B0500 		movq	ptr(%rip), %rax
 793      000000
 794 0613 0FB600   		movzbl	(%rax), %eax
 795 0616 0FBEC0   		movsbl	%al, %eax
 796 0619 488D55F6 		leaq	-10(%rbp), %rdx
 797 061d 4889D6   		movq	%rdx, %rsi
 798 0620 89C7     		movl	%eax, %edi
 799 0622 E856FFFF 		call	getHexNibble
 799      FF
 800 0627 83F001   		xorl	$1, %eax
 801 062a 84C0     		testb	%al, %al
 802 062c 744C     		je	.L52
 803              		.loc 1 243 0 is_stmt 0 discriminator 1
 804 062e 488B0500 		movq	ptr(%rip), %rax
 804      000000
 805 0635 4883C001 		addq	$1, %rax
 806 0639 0FB600   		movzbl	(%rax), %eax
 807 063c 0FBEC0   		movsbl	%al, %eax
 808 063f 488D55F7 		leaq	-9(%rbp), %rdx
 809 0643 4889D6   		movq	%rdx, %rsi
 810 0646 89C7     		movl	%eax, %edi
 811 0648 E830FFFF 		call	getHexNibble
 811      FF
 812 064d 83F001   		xorl	$1, %eax
 813 0650 84C0     		testb	%al, %al
 814 0652 7426     		je	.L52
 244:main.c        **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 815              		.loc 1 244 0 is_stmt 1
 816 0654 0FB645F6 		movzbl	-10(%rbp), %eax
 817 0658 0FB6C0   		movzbl	%al, %eax
 818 065b C1E004   		sall	$4, %eax
 819 065e 89C2     		movl	%eax, %edx
 820 0660 0FB645F7 		movzbl	-9(%rbp), %eax
 821 0664 09D0     		orl	%edx, %eax
 822 0666 89C2     		movl	%eax, %edx
 823 0668 488B45E8 		movq	-24(%rbp), %rax
 824 066c 8810     		movb	%dl, (%rax)
 245:main.c        **** 		byte += 2;
 825              		.loc 1 245 0
 826 066e 488345E8 		addq	$2, -24(%rbp)
 826      02
 246:main.c        **** 		return 0;
 827              		.loc 1 246 0
 828 0673 B8000000 		movl	$0, %eax
 828      00
 829 0678 EB14     		jmp	.L54
 830              	.L52:
 247:main.c        **** 	} else {
 248:main.c        ****     printf(" after dump \n "); 
 831              		.loc 1 248 0
 832 067a BF000000 		movl	$.LC17, %edi
 832      00
 833 067f B8000000 		movl	$0, %eax
 833      00
 834 0684 E8000000 		call	printf
 834      00
 249:main.c        **** 		return 1;
 835              		.loc 1 249 0
 836 0689 B8010000 		movl	$1, %eax
 836      00
 837              	.L54:
 250:main.c        **** 	}
 251:main.c        **** }
 838              		.loc 1 251 0 discriminator 1
 839 068e 488B4DF8 		movq	-8(%rbp), %rcx
 840 0692 6448330C 		xorq	%fs:40, %rcx
 840      25280000 
 840      00
 841 069b 7405     		je	.L55
 842              		.loc 1 251 0 is_stmt 0
 843 069d E8000000 		call	__stack_chk_fail
 843      00
 844              	.L55:
 845 06a2 C9       		leave
 846              		.cfi_def_cfa 7, 8
 847 06a3 C3       		ret
 848              		.cfi_endproc
 849              	.LFE13:
 851              		.section	.rodata
 852              	.LC18:
 853 015b 556E7061 		.string	"Unparseable hex number"
 853      72736561 
 853      626C6520 
 853      68657820 
 853      6E756D62 
 854              	.LC19:
 855 0172 4368616E 		.string	"Channel out of range"
 855      6E656C20 
 855      6F757420 
 855      6F662072 
 855      616E6765 
 856              	.LC20:
 857 0187 436F6E64 		.string	"Conduit out of range"
 857      75697420 
 857      6F757420 
 857      6F662072 
 857      616E6765 
 858              	.LC21:
 859 019c 496C6C65 		.string	"Illegal character"
 859      67616C20 
 859      63686172 
 859      61637465 
 859      7200
 860              	.LC22:
 861 01ae 556E7465 		.string	"Unterminated string"
 861      726D696E 
 861      61746564 
 861      20737472 
 861      696E6700 
 862              	.LC23:
 863 01c2 4E6F206D 		.string	"No memory"
 863      656D6F72 
 863      7900
 864              	.LC24:
 865 01cc 456D7074 		.string	"Empty string"
 865      79207374 
 865      72696E67 
 865      00
 866              	.LC25:
 867 01d9 4F646420 		.string	"Odd number of digits"
 867      6E756D62 
 867      6572206F 
 867      66206469 
 867      67697473 
 868              	.LC26:
 869 01ee 43616E6E 		.string	"Cannot load file"
 869      6F74206C 
 869      6F616420 
 869      66696C65 
 869      00
 870              	.LC27:
 871 01ff 43616E6E 		.string	"Cannot save file"
 871      6F742073 
 871      61766520 
 871      66696C65 
 871      00
 872              	.LC28:
 873 0210 42616420 		.string	"Bad arguments"
 873      61726775 
 873      6D656E74 
 873      7300
 874 021e 0000     		.align 32
 877              	errMessages:
 878 0220 00000000 		.quad	0
 878      00000000 
 879 0228 00000000 		.quad	0
 879      00000000 
 880 0230 00000000 		.quad	.LC18
 880      00000000 
 881 0238 00000000 		.quad	.LC19
 881      00000000 
 882 0240 00000000 		.quad	.LC20
 882      00000000 
 883 0248 00000000 		.quad	.LC21
 883      00000000 
 884 0250 00000000 		.quad	.LC22
 884      00000000 
 885 0258 00000000 		.quad	.LC23
 885      00000000 
 886 0260 00000000 		.quad	.LC24
 886      00000000 
 887 0268 00000000 		.quad	.LC25
 887      00000000 
 888 0270 00000000 		.quad	.LC26
 888      00000000 
 889 0278 00000000 		.quad	.LC27
 889      00000000 
 890 0280 00000000 		.quad	.LC28
 890      00000000 
 891              	.LC29:
 892 0288 646F5265 		.string	"doRead()"
 892      61642829 
 892      00
 893              		.text
 895              	doRead:
 896              	.LFB14:
 252:main.c        **** 
 253:main.c        **** static const char *const errMessages[] = {
 254:main.c        **** 	NULL,
 255:main.c        **** 	NULL,
 256:main.c        **** 	"Unparseable hex number",
 257:main.c        **** 	"Channel out of range",
 258:main.c        **** 	"Conduit out of range",
 259:main.c        **** 	"Illegal character",
 260:main.c        **** 	"Unterminated string",
 261:main.c        **** 	"No memory",
 262:main.c        **** 	"Empty string",
 263:main.c        **** 	"Odd number of digits",
 264:main.c        **** 	"Cannot load file",
 265:main.c        **** 	"Cannot save file",
 266:main.c        **** 	"Bad arguments"
 267:main.c        **** };
 268:main.c        **** 
 269:main.c        **** typedef enum {
 270:main.c        **** 	FLP_SUCCESS,
 271:main.c        **** 	FLP_LIBERR,
 272:main.c        **** 	FLP_BAD_HEX,
 273:main.c        **** 	FLP_CHAN_RANGE,
 274:main.c        **** 	FLP_CONDUIT_RANGE,
 275:main.c        **** 	FLP_ILL_CHAR,
 276:main.c        **** 	FLP_UNTERM_STRING,
 277:main.c        **** 	FLP_NO_MEMORY,
 278:main.c        **** 	FLP_EMPTY_STRING,
 279:main.c        **** 	FLP_ODD_DIGITS,
 280:main.c        **** 	FLP_CANNOT_LOAD,
 281:main.c        **** 	FLP_CANNOT_SAVE,
 282:main.c        **** 	FLP_ARGS
 283:main.c        **** } ReturnCode;
 284:main.c        **** 
 285:main.c        **** static ReturnCode doRead(
 286:main.c        **** 	struct FLContext *handle, uint8 chan, uint32 length, FILE *destFile, uint16 *checksum,
 287:main.c        **** 	const char **error)
 288:main.c        **** {
 897              		.loc 1 288 0 is_stmt 1
 898              		.cfi_startproc
 899 06a4 55       		pushq	%rbp
 900              		.cfi_def_cfa_offset 16
 901              		.cfi_offset 6, -16
 902 06a5 4889E5   		movq	%rsp, %rbp
 903              		.cfi_def_cfa_register 6
 904 06a8 4883EC60 		subq	$96, %rsp
 905 06ac 48897DC8 		movq	%rdi, -56(%rbp)
 906 06b0 89F0     		movl	%esi, %eax
 907 06b2 8955C0   		movl	%edx, -64(%rbp)
 908 06b5 48894DB8 		movq	%rcx, -72(%rbp)
 909 06b9 4C8945B0 		movq	%r8, -80(%rbp)
 910 06bd 4C894DA8 		movq	%r9, -88(%rbp)
 911 06c1 8845C4   		movb	%al, -60(%rbp)
 912              		.loc 1 288 0
 913 06c4 64488B04 		movq	%fs:40, %rax
 913      25280000 
 913      00
 914 06cd 488945F8 		movq	%rax, -8(%rbp)
 915 06d1 31C0     		xorl	%eax, %eax
 289:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 916              		.loc 1 289 0
 917 06d3 C745D800 		movl	$0, -40(%rbp)
 917      000000
 290:main.c        **** 	uint32 bytesWritten;
 291:main.c        **** 	FLStatus fStatus;
 292:main.c        **** 	uint32 chunkSize;
 293:main.c        **** 	const uint8 *recvData;
 294:main.c        **** 	uint32 actualLength;
 295:main.c        **** 	const uint8 *ptr;
 296:main.c        **** 	uint16 csVal = 0x0000;
 918              		.loc 1 296 0
 919 06da 66C745D2 		movw	$0, -46(%rbp)
 919      0000
 297:main.c        **** 	#define READ_MAX 65536
 298:main.c        **** 
 299:main.c        **** 	// Read first chunk
 300:main.c        **** 	chunkSize = length >= READ_MAX ? READ_MAX : length;
 920              		.loc 1 300 0
 921 06e0 B8000001 		movl	$65536, %eax
 921      00
 922 06e5 817DC000 		cmpl	$65536, -64(%rbp)
 922      000100
 923 06ec 0F4645C0 		cmovbe	-64(%rbp), %eax
 924 06f0 8945DC   		movl	%eax, -36(%rbp)
 301:main.c        **** 	fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 925              		.loc 1 301 0
 926 06f3 0FB675C4 		movzbl	-60(%rbp), %esi
 927 06f7 488B4DA8 		movq	-88(%rbp), %rcx
 928 06fb 8B55DC   		movl	-36(%rbp), %edx
 929 06fe 488B45C8 		movq	-56(%rbp), %rax
 930 0702 4989C8   		movq	%rcx, %r8
 931 0705 B9000000 		movl	$0, %ecx
 931      00
 932 070a 4889C7   		movq	%rax, %rdi
 933 070d E8000000 		call	flReadChannelAsyncSubmit
 933      00
 934 0712 8945E0   		movl	%eax, -32(%rbp)
 302:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 935              		.loc 1 302 0
 936 0715 837DE000 		cmpl	$0, -32(%rbp)
 937 0719 741D     		je	.L57
 938              		.loc 1 302 0 is_stmt 0 discriminator 1
 939 071b 488B45A8 		movq	-88(%rbp), %rax
 940 071f BE000000 		movl	$.LC29, %esi
 940      00
 941 0724 4889C7   		movq	%rax, %rdi
 942 0727 E8000000 		call	errPrefix
 942      00
 943 072c C745D801 		movl	$1, -40(%rbp)
 943      000000
 944 0733 E9FB0100 		jmp	.L58
 944      00
 945              	.L57:
 303:main.c        **** 	length = length - chunkSize;
 946              		.loc 1 303 0 is_stmt 1
 947 0738 8B45DC   		movl	-36(%rbp), %eax
 948 073b 2945C0   		subl	%eax, -64(%rbp)
 304:main.c        **** 
 305:main.c        **** 	while ( length ) {
 949              		.loc 1 305 0
 950 073e E91E0100 		jmp	.L59
 950      00
 951              	.L65:
 306:main.c        **** 		// Read chunk N
 307:main.c        **** 		chunkSize = length >= READ_MAX ? READ_MAX : length;
 952              		.loc 1 307 0
 953 0743 B8000001 		movl	$65536, %eax
 953      00
 954 0748 817DC000 		cmpl	$65536, -64(%rbp)
 954      000100
 955 074f 0F4645C0 		cmovbe	-64(%rbp), %eax
 956 0753 8945DC   		movl	%eax, -36(%rbp)
 308:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 957              		.loc 1 308 0
 958 0756 0FB675C4 		movzbl	-60(%rbp), %esi
 959 075a 488B4DA8 		movq	-88(%rbp), %rcx
 960 075e 8B55DC   		movl	-36(%rbp), %edx
 961 0761 488B45C8 		movq	-56(%rbp), %rax
 962 0765 4989C8   		movq	%rcx, %r8
 963 0768 B9000000 		movl	$0, %ecx
 963      00
 964 076d 4889C7   		movq	%rax, %rdi
 965 0770 E8000000 		call	flReadChannelAsyncSubmit
 965      00
 966 0775 8945E0   		movl	%eax, -32(%rbp)
 309:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 967              		.loc 1 309 0
 968 0778 837DE000 		cmpl	$0, -32(%rbp)
 969 077c 741D     		je	.L60
 970              		.loc 1 309 0 is_stmt 0 discriminator 1
 971 077e 488B45A8 		movq	-88(%rbp), %rax
 972 0782 BE000000 		movl	$.LC29, %esi
 972      00
 973 0787 4889C7   		movq	%rax, %rdi
 974 078a E8000000 		call	errPrefix
 974      00
 975 078f C745D801 		movl	$1, -40(%rbp)
 975      000000
 976 0796 E9980100 		jmp	.L58
 976      00
 977              	.L60:
 310:main.c        **** 		length = length - chunkSize;
 978              		.loc 1 310 0 is_stmt 1
 979 079b 8B45DC   		movl	-36(%rbp), %eax
 980 079e 2945C0   		subl	%eax, -64(%rbp)
 311:main.c        **** 		
 312:main.c        **** 		// Await chunk N-1
 313:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 981              		.loc 1 313 0
 982 07a1 488B7DA8 		movq	-88(%rbp), %rdi
 983 07a5 488D4DD4 		leaq	-44(%rbp), %rcx
 984 07a9 488D55D4 		leaq	-44(%rbp), %rdx
 985 07ad 488D75E8 		leaq	-24(%rbp), %rsi
 986 07b1 488B45C8 		movq	-56(%rbp), %rax
 987 07b5 4989F8   		movq	%rdi, %r8
 988 07b8 4889C7   		movq	%rax, %rdi
 989 07bb E8000000 		call	flReadChannelAsyncAwait
 989      00
 990 07c0 8945E0   		movl	%eax, -32(%rbp)
 314:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 991              		.loc 1 314 0
 992 07c3 837DE000 		cmpl	$0, -32(%rbp)
 993 07c7 741D     		je	.L61
 994              		.loc 1 314 0 is_stmt 0 discriminator 1
 995 07c9 488B45A8 		movq	-88(%rbp), %rax
 996 07cd BE000000 		movl	$.LC29, %esi
 996      00
 997 07d2 4889C7   		movq	%rax, %rdi
 998 07d5 E8000000 		call	errPrefix
 998      00
 999 07da C745D801 		movl	$1, -40(%rbp)
 999      000000
 1000 07e1 E94D0100 		jmp	.L58
 1000      00
 1001              	.L61:
 315:main.c        **** 
 316:main.c        **** 		// Write chunk N-1 to file
 317:main.c        **** 		bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 1002              		.loc 1 317 0 is_stmt 1
 1003 07e6 8B45D4   		movl	-44(%rbp), %eax
 1004 07e9 89C6     		movl	%eax, %esi
 1005 07eb 488B45E8 		movq	-24(%rbp), %rax
 1006 07ef 488B55B8 		movq	-72(%rbp), %rdx
 1007 07f3 4889D1   		movq	%rdx, %rcx
 1008 07f6 4889F2   		movq	%rsi, %rdx
 1009 07f9 BE010000 		movl	$1, %esi
 1009      00
 1010 07fe 4889C7   		movq	%rax, %rdi
 1011 0801 E8000000 		call	fwrite
 1011      00
 1012 0806 8945E4   		movl	%eax, -28(%rbp)
 318:main.c        **** 		CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 1013              		.loc 1 318 0
 1014 0809 8B45D4   		movl	-44(%rbp), %eax
 1015 080c 3945E4   		cmpl	%eax, -28(%rbp)
 1016 080f 741D     		je	.L62
 1017              		.loc 1 318 0 is_stmt 0 discriminator 1
 1018 0811 488B45A8 		movq	-88(%rbp), %rax
 1019 0815 BE000000 		movl	$.LC29, %esi
 1019      00
 1020 081a 4889C7   		movq	%rax, %rdi
 1021 081d E8000000 		call	errPrefix
 1021      00
 1022 0822 C745D80B 		movl	$11, -40(%rbp)
 1022      000000
 1023 0829 E9050100 		jmp	.L58
 1023      00
 1024              	.L62:
 319:main.c        **** 
 320:main.c        **** 		// Checksum chunk N-1
 321:main.c        **** 		chunkSize = actualLength;
 1025              		.loc 1 321 0 is_stmt 1
 1026 082e 8B45D4   		movl	-44(%rbp), %eax
 1027 0831 8945DC   		movl	%eax, -36(%rbp)
 322:main.c        **** 		ptr = recvData;
 1028              		.loc 1 322 0
 1029 0834 488B45E8 		movq	-24(%rbp), %rax
 1030 0838 488945F0 		movq	%rax, -16(%rbp)
 323:main.c        **** 		while ( chunkSize-- ) {
 1031              		.loc 1 323 0
 1032 083c EB16     		jmp	.L63
 1033              	.L64:
 324:main.c        **** 			csVal = (uint16)(csVal + *ptr++);
 1034              		.loc 1 324 0
 1035 083e 488B45F0 		movq	-16(%rbp), %rax
 1036 0842 488D5001 		leaq	1(%rax), %rdx
 1037 0846 488955F0 		movq	%rdx, -16(%rbp)
 1038 084a 0FB600   		movzbl	(%rax), %eax
 1039 084d 0FB6C0   		movzbl	%al, %eax
 1040 0850 660145D2 		addw	%ax, -46(%rbp)
 1041              	.L63:
 323:main.c        **** 		while ( chunkSize-- ) {
 1042              		.loc 1 323 0
 1043 0854 8B45DC   		movl	-36(%rbp), %eax
 1044 0857 8D50FF   		leal	-1(%rax), %edx
 1045 085a 8955DC   		movl	%edx, -36(%rbp)
 1046 085d 85C0     		testl	%eax, %eax
 1047 085f 75DD     		jne	.L64
 1048              	.L59:
 305:main.c        **** 		// Read chunk N
 1049              		.loc 1 305 0
 1050 0861 837DC000 		cmpl	$0, -64(%rbp)
 1051 0865 0F85D8FE 		jne	.L65
 1051      FFFF
 325:main.c        **** 		}
 326:main.c        **** 	}
 327:main.c        **** 
 328:main.c        **** 	// Await last chunk
 329:main.c        **** 	fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 1052              		.loc 1 329 0
 1053 086b 488B7DA8 		movq	-88(%rbp), %rdi
 1054 086f 488D4DD4 		leaq	-44(%rbp), %rcx
 1055 0873 488D55D4 		leaq	-44(%rbp), %rdx
 1056 0877 488D75E8 		leaq	-24(%rbp), %rsi
 1057 087b 488B45C8 		movq	-56(%rbp), %rax
 1058 087f 4989F8   		movq	%rdi, %r8
 1059 0882 4889C7   		movq	%rax, %rdi
 1060 0885 E8000000 		call	flReadChannelAsyncAwait
 1060      00
 1061 088a 8945E0   		movl	%eax, -32(%rbp)
 330:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 1062              		.loc 1 330 0
 1063 088d 837DE000 		cmpl	$0, -32(%rbp)
 1064 0891 741D     		je	.L66
 1065              		.loc 1 330 0 is_stmt 0 discriminator 1
 1066 0893 488B45A8 		movq	-88(%rbp), %rax
 1067 0897 BE000000 		movl	$.LC29, %esi
 1067      00
 1068 089c 4889C7   		movq	%rax, %rdi
 1069 089f E8000000 		call	errPrefix
 1069      00
 1070 08a4 C745D801 		movl	$1, -40(%rbp)
 1070      000000
 1071 08ab E9830000 		jmp	.L58
 1071      00
 1072              	.L66:
 331:main.c        **** 	
 332:main.c        **** 	// Write last chunk to file
 333:main.c        **** 	bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 1073              		.loc 1 333 0 is_stmt 1
 1074 08b0 8B45D4   		movl	-44(%rbp), %eax
 1075 08b3 89C6     		movl	%eax, %esi
 1076 08b5 488B45E8 		movq	-24(%rbp), %rax
 1077 08b9 488B55B8 		movq	-72(%rbp), %rdx
 1078 08bd 4889D1   		movq	%rdx, %rcx
 1079 08c0 4889F2   		movq	%rsi, %rdx
 1080 08c3 BE010000 		movl	$1, %esi
 1080      00
 1081 08c8 4889C7   		movq	%rax, %rdi
 1082 08cb E8000000 		call	fwrite
 1082      00
 1083 08d0 8945E4   		movl	%eax, -28(%rbp)
 334:main.c        **** 	CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 1084              		.loc 1 334 0
 1085 08d3 8B45D4   		movl	-44(%rbp), %eax
 1086 08d6 3945E4   		cmpl	%eax, -28(%rbp)
 1087 08d9 741A     		je	.L67
 1088              		.loc 1 334 0 is_stmt 0 discriminator 1
 1089 08db 488B45A8 		movq	-88(%rbp), %rax
 1090 08df BE000000 		movl	$.LC29, %esi
 1090      00
 1091 08e4 4889C7   		movq	%rax, %rdi
 1092 08e7 E8000000 		call	errPrefix
 1092      00
 1093 08ec C745D80B 		movl	$11, -40(%rbp)
 1093      000000
 1094 08f3 EB3E     		jmp	.L58
 1095              	.L67:
 335:main.c        **** 
 336:main.c        **** 	// Checksum last chunk
 337:main.c        **** 	chunkSize = actualLength;
 1096              		.loc 1 337 0 is_stmt 1
 1097 08f5 8B45D4   		movl	-44(%rbp), %eax
 1098 08f8 8945DC   		movl	%eax, -36(%rbp)
 338:main.c        **** 	ptr = recvData;
 1099              		.loc 1 338 0
 1100 08fb 488B45E8 		movq	-24(%rbp), %rax
 1101 08ff 488945F0 		movq	%rax, -16(%rbp)
 339:main.c        **** 	while ( chunkSize-- ) {
 1102              		.loc 1 339 0
 1103 0903 EB16     		jmp	.L68
 1104              	.L69:
 340:main.c        **** 		csVal = (uint16)(csVal + *ptr++);
 1105              		.loc 1 340 0
 1106 0905 488B45F0 		movq	-16(%rbp), %rax
 1107 0909 488D5001 		leaq	1(%rax), %rdx
 1108 090d 488955F0 		movq	%rdx, -16(%rbp)
 1109 0911 0FB600   		movzbl	(%rax), %eax
 1110 0914 0FB6C0   		movzbl	%al, %eax
 1111 0917 660145D2 		addw	%ax, -46(%rbp)
 1112              	.L68:
 339:main.c        **** 	while ( chunkSize-- ) {
 1113              		.loc 1 339 0
 1114 091b 8B45DC   		movl	-36(%rbp), %eax
 1115 091e 8D50FF   		leal	-1(%rax), %edx
 1116 0921 8955DC   		movl	%edx, -36(%rbp)
 1117 0924 85C0     		testl	%eax, %eax
 1118 0926 75DD     		jne	.L69
 341:main.c        **** 	}
 342:main.c        **** 	
 343:main.c        **** 	// Return checksum to caller
 344:main.c        **** 	*checksum = csVal;
 1119              		.loc 1 344 0
 1120 0928 488B45B0 		movq	-80(%rbp), %rax
 1121 092c 0FB755D2 		movzwl	-46(%rbp), %edx
 1122 0930 668910   		movw	%dx, (%rax)
 1123              	.L58:
 345:main.c        **** cleanup:
 346:main.c        **** 	return retVal;
 1124              		.loc 1 346 0
 1125 0933 8B45D8   		movl	-40(%rbp), %eax
 347:main.c        **** }
 1126              		.loc 1 347 0
 1127 0936 488B4DF8 		movq	-8(%rbp), %rcx
 1128 093a 6448330C 		xorq	%fs:40, %rcx
 1128      25280000 
 1128      00
 1129 0943 7405     		je	.L71
 1130 0945 E8000000 		call	__stack_chk_fail
 1130      00
 1131              	.L71:
 1132 094a C9       		leave
 1133              		.cfi_def_cfa 7, 8
 1134 094b C3       		ret
 1135              		.cfi_endproc
 1136              	.LFE14:
 1138              		.section	.rodata
 1139              	.LC30:
 1140 0291 646F5772 		.string	"doWrite()"
 1140      69746528 
 1140      2900
 1141              		.text
 1143              	doWrite:
 1144              	.LFB15:
 348:main.c        **** 
 349:main.c        **** static ReturnCode doWrite(
 350:main.c        **** 	struct FLContext *handle, uint8 chan, FILE *srcFile, size_t *length, uint16 *checksum,
 351:main.c        **** 	const char **error)
 352:main.c        **** {
 1145              		.loc 1 352 0
 1146              		.cfi_startproc
 1147 094c 55       		pushq	%rbp
 1148              		.cfi_def_cfa_offset 16
 1149              		.cfi_offset 6, -16
 1150 094d 4889E5   		movq	%rsp, %rbp
 1151              		.cfi_def_cfa_register 6
 1152 0950 4881EC70 		subq	$65648, %rsp
 1152      000100
 1153 0957 4889BDB8 		movq	%rdi, -65608(%rbp)
 1153      FFFEFF
 1154 095e 89F0     		movl	%esi, %eax
 1155 0960 488995A8 		movq	%rdx, -65624(%rbp)
 1155      FFFEFF
 1156 0967 48898DA0 		movq	%rcx, -65632(%rbp)
 1156      FFFEFF
 1157 096e 4C898598 		movq	%r8, -65640(%rbp)
 1157      FFFEFF
 1158 0975 4C898D90 		movq	%r9, -65648(%rbp)
 1158      FFFEFF
 1159 097c 8885B4FF 		movb	%al, -65612(%rbp)
 1159      FEFF
 1160              		.loc 1 352 0
 1161 0982 64488B04 		movq	%fs:40, %rax
 1161      25280000 
 1161      00
 1162 098b 488945F8 		movq	%rax, -8(%rbp)
 1163 098f 31C0     		xorl	%eax, %eax
 353:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 1164              		.loc 1 353 0
 1165 0991 C785C8FF 		movl	$0, -65592(%rbp)
 1165      FEFF0000 
 1165      0000
 354:main.c        **** 	size_t bytesRead, i;
 355:main.c        **** 	FLStatus fStatus;
 356:main.c        **** 	const uint8 *ptr;
 357:main.c        **** 	uint16 csVal = 0x0000;
 1166              		.loc 1 357 0
 1167 099b 66C785C6 		movw	$0, -65594(%rbp)
 1167      FFFEFF00 
 1167      00
 358:main.c        **** 	size_t lenVal = 0;
 1168              		.loc 1 358 0
 1169 09a4 48C785E0 		movq	$0, -65568(%rbp)
 1169      FFFEFF00 
 1169      000000
 1170              	.L78:
 359:main.c        **** 	#define WRITE_MAX (65536 - 5)
 360:main.c        **** 	uint8 buffer[WRITE_MAX];
 361:main.c        **** 
 362:main.c        **** 	do {
 363:main.c        **** 		// Read Nth chunk
 364:main.c        **** 		bytesRead = fread(buffer, 1, WRITE_MAX, srcFile);
 1171              		.loc 1 364 0
 1172 09af 488B95A8 		movq	-65624(%rbp), %rdx
 1172      FFFEFF
 1173 09b6 488D85F0 		leaq	-65552(%rbp), %rax
 1173      FFFEFF
 1174 09bd 4889D1   		movq	%rdx, %rcx
 1175 09c0 BAFBFF00 		movl	$65531, %edx
 1175      00
 1176 09c5 BE010000 		movl	$1, %esi
 1176      00
 1177 09ca 4889C7   		movq	%rax, %rdi
 1178 09cd E8000000 		call	fread
 1178      00
 1179 09d2 488985E8 		movq	%rax, -65560(%rbp)
 1179      FFFEFF
 365:main.c        **** 		if ( bytesRead ) {
 1180              		.loc 1 365 0
 1181 09d9 4883BDE8 		cmpq	$0, -65560(%rbp)
 1181      FFFEFF00 
 1182 09e1 0F84C200 		je	.L73
 1182      0000
 366:main.c        **** 			// Update running total
 367:main.c        **** 			lenVal = lenVal + bytesRead;
 1183              		.loc 1 367 0
 1184 09e7 488B85E8 		movq	-65560(%rbp), %rax
 1184      FFFEFF
 1185 09ee 480185E0 		addq	%rax, -65568(%rbp)
 1185      FFFEFF
 368:main.c        **** 
 369:main.c        **** 			// Submit Nth chunk
 370:main.c        **** 			fStatus = flWriteChannelAsync(handle, chan, bytesRead, buffer, error);
 1186              		.loc 1 370 0
 1187 09f5 0FB6B5B4 		movzbl	-65612(%rbp), %esi
 1187      FFFEFF
 1188 09fc 488BBD90 		movq	-65648(%rbp), %rdi
 1188      FFFEFF
 1189 0a03 488D8DF0 		leaq	-65552(%rbp), %rcx
 1189      FFFEFF
 1190 0a0a 488B95E8 		movq	-65560(%rbp), %rdx
 1190      FFFEFF
 1191 0a11 488B85B8 		movq	-65608(%rbp), %rax
 1191      FFFEFF
 1192 0a18 4989F8   		movq	%rdi, %r8
 1193 0a1b 4889C7   		movq	%rax, %rdi
 1194 0a1e E8000000 		call	flWriteChannelAsync
 1194      00
 1195 0a23 8985CCFF 		movl	%eax, -65588(%rbp)
 1195      FEFF
 371:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 1196              		.loc 1 371 0
 1197 0a29 83BDCCFF 		cmpl	$0, -65588(%rbp)
 1197      FEFF00
 1198 0a30 7423     		je	.L74
 1199              		.loc 1 371 0 is_stmt 0 discriminator 1
 1200 0a32 488B8590 		movq	-65648(%rbp), %rax
 1200      FFFEFF
 1201 0a39 BE000000 		movl	$.LC30, %esi
 1201      00
 1202 0a3e 4889C7   		movq	%rax, %rdi
 1203 0a41 E8000000 		call	errPrefix
 1203      00
 1204 0a46 C785C8FF 		movl	$1, -65592(%rbp)
 1204      FEFF0100 
 1204      0000
 1205 0a50 E9CF0000 		jmp	.L75
 1205      00
 1206              	.L74:
 372:main.c        **** 
 373:main.c        **** 			// Checksum Nth chunk
 374:main.c        **** 			i = bytesRead;
 1207              		.loc 1 374 0 is_stmt 1
 1208 0a55 488B85E8 		movq	-65560(%rbp), %rax
 1208      FFFEFF
 1209 0a5c 488985D0 		movq	%rax, -65584(%rbp)
 1209      FFFEFF
 375:main.c        **** 			ptr = buffer;
 1210              		.loc 1 375 0
 1211 0a63 488D85F0 		leaq	-65552(%rbp), %rax
 1211      FFFEFF
 1212 0a6a 488985D8 		movq	%rax, -65576(%rbp)
 1212      FFFEFF
 376:main.c        **** 			while ( i-- ) {
 1213              		.loc 1 376 0
 1214 0a71 EB1F     		jmp	.L76
 1215              	.L77:
 377:main.c        **** 				csVal = (uint16)(csVal + *ptr++);
 1216              		.loc 1 377 0
 1217 0a73 488B85D8 		movq	-65576(%rbp), %rax
 1217      FFFEFF
 1218 0a7a 488D5001 		leaq	1(%rax), %rdx
 1219 0a7e 488995D8 		movq	%rdx, -65576(%rbp)
 1219      FFFEFF
 1220 0a85 0FB600   		movzbl	(%rax), %eax
 1221 0a88 0FB6C0   		movzbl	%al, %eax
 1222 0a8b 660185C6 		addw	%ax, -65594(%rbp)
 1222      FFFEFF
 1223              	.L76:
 376:main.c        **** 			while ( i-- ) {
 1224              		.loc 1 376 0
 1225 0a92 488B85D0 		movq	-65584(%rbp), %rax
 1225      FFFEFF
 1226 0a99 488D50FF 		leaq	-1(%rax), %rdx
 1227 0a9d 488995D0 		movq	%rdx, -65584(%rbp)
 1227      FFFEFF
 1228 0aa4 4885C0   		testq	%rax, %rax
 1229 0aa7 75CA     		jne	.L77
 1230              	.L73:
 378:main.c        **** 			}
 379:main.c        **** 		}
 380:main.c        **** 	} while ( bytesRead == WRITE_MAX );
 1231              		.loc 1 380 0
 1232 0aa9 4881BDE8 		cmpq	$65531, -65560(%rbp)
 1232      FFFEFFFB 
 1232      FF0000
 1233 0ab4 0F84F5FE 		je	.L78
 1233      FFFF
 381:main.c        **** 
 382:main.c        **** 	// Wait for writes to be eeceived. This is optional, but it's only fair if we're benchmarking to
 383:main.c        **** 	// actually wait for the work to be completed.
 384:main.c        **** 	fStatus = flAwaitAsyncWrites(handle, error);
 1234              		.loc 1 384 0
 1235 0aba 488B9590 		movq	-65648(%rbp), %rdx
 1235      FFFEFF
 1236 0ac1 488B85B8 		movq	-65608(%rbp), %rax
 1236      FFFEFF
 1237 0ac8 4889D6   		movq	%rdx, %rsi
 1238 0acb 4889C7   		movq	%rax, %rdi
 1239 0ace E8000000 		call	flAwaitAsyncWrites
 1239      00
 1240 0ad3 8985CCFF 		movl	%eax, -65588(%rbp)
 1240      FEFF
 385:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 1241              		.loc 1 385 0
 1242 0ad9 83BDCCFF 		cmpl	$0, -65588(%rbp)
 1242      FEFF00
 1243 0ae0 7420     		je	.L79
 1244              		.loc 1 385 0 is_stmt 0 discriminator 1
 1245 0ae2 488B8590 		movq	-65648(%rbp), %rax
 1245      FFFEFF
 1246 0ae9 BE000000 		movl	$.LC30, %esi
 1246      00
 1247 0aee 4889C7   		movq	%rax, %rdi
 1248 0af1 E8000000 		call	errPrefix
 1248      00
 1249 0af6 C785C8FF 		movl	$1, -65592(%rbp)
 1249      FEFF0100 
 1249      0000
 1250 0b00 EB22     		jmp	.L75
 1251              	.L79:
 386:main.c        **** 
 387:main.c        **** 	// Return checksum & length to caller
 388:main.c        **** 	*checksum = csVal;
 1252              		.loc 1 388 0 is_stmt 1
 1253 0b02 488B8598 		movq	-65640(%rbp), %rax
 1253      FFFEFF
 1254 0b09 0FB795C6 		movzwl	-65594(%rbp), %edx
 1254      FFFEFF
 1255 0b10 668910   		movw	%dx, (%rax)
 389:main.c        **** 	*length = lenVal;
 1256              		.loc 1 389 0
 1257 0b13 488B85A0 		movq	-65632(%rbp), %rax
 1257      FFFEFF
 1258 0b1a 488B95E0 		movq	-65568(%rbp), %rdx
 1258      FFFEFF
 1259 0b21 488910   		movq	%rdx, (%rax)
 1260              	.L75:
 390:main.c        **** cleanup:
 391:main.c        **** 	return retVal;
 1261              		.loc 1 391 0
 1262 0b24 8B85C8FF 		movl	-65592(%rbp), %eax
 1262      FEFF
 392:main.c        **** }
 1263              		.loc 1 392 0
 1264 0b2a 488B4DF8 		movq	-8(%rbp), %rcx
 1265 0b2e 6448330C 		xorq	%fs:40, %rcx
 1265      25280000 
 1265      00
 1266 0b37 7405     		je	.L81
 1267 0b39 E8000000 		call	__stack_chk_fail
 1267      00
 1268              	.L81:
 1269 0b3e C9       		leave
 1270              		.cfi_def_cfa 7, 8
 1271 0b3f C3       		ret
 1272              		.cfi_endproc
 1273              	.LFE15:
 1275              		.comm	out,1,1
 1276              		.section	.rodata
 1277              	.LC31:
 1278 029b 776200   		.string	"wb"
 1279 029e 0000     		.align 8
 1280              	.LC33:
 1281 02a0 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 1281      20256420 
 1281      62797465 
 1281      73202863 
 1281      6865636B 
 1282              	.LC34:
 1283 02dd 726200   		.string	"rb"
 1284              		.align 8
 1285              	.LC35:
 1286 02e0 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 1286      6520257A 
 1286      75206279 
 1286      74657320 
 1286      28636865 
 1287              	.LC36:
 1288 031e 25732061 		.string	"%s at column %d\n  %s\n  "
 1288      7420636F 
 1288      6C756D6E 
 1288      2025640A 
 1288      20202573 
 1289              	.LC37:
 1290 0336 5E0A00   		.string	"^\n"
 1291              		.text
 1293              	parseLine:
 1294              	.LFB16:
 393:main.c        **** 
 394:main.c        **** uint8 out;
 395:main.c        **** 
 396:main.c        **** static int parseLine(struct FLContext *handle, const char *line, const char **error) {
 1295              		.loc 1 396 0
 1296              		.cfi_startproc
 1297 0b40 55       		pushq	%rbp
 1298              		.cfi_def_cfa_offset 16
 1299              		.cfi_offset 6, -16
 1300 0b41 4889E5   		movq	%rsp, %rbp
 1301              		.cfi_def_cfa_register 6
 1302 0b44 4881EC10 		subq	$272, %rsp
 1302      010000
 1303 0b4b 4889BD08 		movq	%rdi, -248(%rbp)
 1303      FFFFFF
 1304 0b52 4889B500 		movq	%rsi, -256(%rbp)
 1304      FFFFFF
 1305 0b59 488995F8 		movq	%rdx, -264(%rbp)
 1305      FEFFFF
 1306              		.loc 1 396 0
 1307 0b60 64488B04 		movq	%fs:40, %rax
 1307      25280000 
 1307      00
 1308 0b69 488945F8 		movq	%rax, -8(%rbp)
 1309 0b6d 31C0     		xorl	%eax, %eax
 397:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, status;
 1310              		.loc 1 397 0
 1311 0b6f C78514FF 		movl	$0, -236(%rbp)
 1311      FFFF0000 
 1311      0000
 398:main.c        **** 	FLStatus fStatus;
 399:main.c        **** 	struct Buffer dataFromFPGA = {0,};
 1312              		.loc 1 399 0
 1313 0b79 48C745D0 		movq	$0, -48(%rbp)
 1313      00000000 
 1314 0b81 48C745D8 		movq	$0, -40(%rbp)
 1314      00000000 
 1315 0b89 48C745E0 		movq	$0, -32(%rbp)
 1315      00000000 
 1316 0b91 48C745E8 		movq	$0, -24(%rbp)
 1316      00000000 
 400:main.c        **** 	BufferStatus bStatus;
 401:main.c        **** 	uint8 *data = NULL;
 1317              		.loc 1 401 0
 1318 0b99 48C78548 		movq	$0, -184(%rbp)
 1318      FFFFFF00 
 1318      000000
 402:main.c        **** 	char *fileName = NULL;
 1319              		.loc 1 402 0
 1320 0ba4 48C78550 		movq	$0, -176(%rbp)
 1320      FFFFFF00 
 1320      000000
 403:main.c        **** 	FILE *file = NULL;
 1321              		.loc 1 403 0
 1322 0baf 48C78558 		movq	$0, -168(%rbp)
 1322      FFFFFF00 
 1322      000000
 404:main.c        **** 	double totalTime, speed;
 405:main.c        **** 	#ifdef WIN32
 406:main.c        **** 		LARGE_INTEGER tvStart, tvEnd, freq;
 407:main.c        **** 		DWORD_PTR mask = 1;
 408:main.c        **** 		SetThreadAffinityMask(GetCurrentThread(), mask);
 409:main.c        **** 		QueryPerformanceFrequency(&freq);
 410:main.c        **** 	#else
 411:main.c        **** 		struct timeval tvStart, tvEnd;
 412:main.c        **** 		long long startTime, endTime;
 413:main.c        **** 	#endif
 414:main.c        **** 	bStatus = bufInitialise(&dataFromFPGA, 1024, 0x00, error);
 1323              		.loc 1 414 0
 1324 0bba 488B95F8 		movq	-264(%rbp), %rdx
 1324      FEFFFF
 1325 0bc1 488D45D0 		leaq	-48(%rbp), %rax
 1326 0bc5 4889D1   		movq	%rdx, %rcx
 1327 0bc8 BA000000 		movl	$0, %edx
 1327      00
 1328 0bcd BE000400 		movl	$1024, %esi
 1328      00
 1329 0bd2 4889C7   		movq	%rax, %rdi
 1330 0bd5 E8000000 		call	bufInitialise
 1330      00
 1331 0bda 898520FF 		movl	%eax, -224(%rbp)
 1331      FFFF
 415:main.c        **** 	CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 1332              		.loc 1 415 0
 1333 0be0 83BD20FF 		cmpl	$0, -224(%rbp)
 1333      FFFF00
 1334 0be7 740F     		je	.L83
 1335              		.loc 1 415 0 is_stmt 0 discriminator 1
 1336 0be9 C78514FF 		movl	$1, -236(%rbp)
 1336      FFFF0100 
 1336      0000
 1337 0bf3 E9F10E00 		jmp	.L84
 1337      00
 1338              	.L83:
 416:main.c        **** 	ptr = line;
 1339              		.loc 1 416 0 is_stmt 1
 1340 0bf8 488B8500 		movq	-256(%rbp), %rax
 1340      FFFFFF
 1341 0bff 48890500 		movq	%rax, ptr(%rip)
 1341      000000
 417:main.c        **** 	do {
 418:main.c        **** 		while ( *ptr == ';' ) {
 1342              		.loc 1 418 0
 1343 0c06 EB12     		jmp	.L85
 1344              	.L86:
 419:main.c        **** 			ptr++;
 1345              		.loc 1 419 0
 1346 0c08 488B0500 		movq	ptr(%rip), %rax
 1346      000000
 1347 0c0f 4883C001 		addq	$1, %rax
 1348 0c13 48890500 		movq	%rax, ptr(%rip)
 1348      000000
 1349              	.L85:
 418:main.c        **** 			ptr++;
 1350              		.loc 1 418 0
 1351 0c1a 488B0500 		movq	ptr(%rip), %rax
 1351      000000
 1352 0c21 0FB600   		movzbl	(%rax), %eax
 1353 0c24 3C3B     		cmpb	$59, %al
 1354 0c26 74E0     		je	.L86
 420:main.c        **** 		}
 421:main.c        **** 		switch ( *ptr ) {
 1355              		.loc 1 421 0
 1356 0c28 488B0500 		movq	ptr(%rip), %rax
 1356      000000
 1357 0c2f 0FB600   		movzbl	(%rax), %eax
 1358 0c32 0FBEC0   		movsbl	%al, %eax
 1359 0c35 83F872   		cmpl	$114, %eax
 1360 0c38 7417     		je	.L88
 1361 0c3a 83F877   		cmpl	$119, %eax
 1362 0c3d 0F84D006 		je	.L89
 1362      0000
 1363 0c43 83F82B   		cmpl	$43, %eax
 1364 0c46 0F84600D 		je	.L90
 1364      0000
 1365 0c4c E9470E00 		jmp	.L160
 1365      00
 1366              	.L88:
 1367              	.LBB3:
 422:main.c        **** 		case 'r':{
 423:main.c        **** 			uint32 chan;
 424:main.c        **** 			uint32 length = 1;
 1368              		.loc 1 424 0
 1369 0c51 C78518FF 		movl	$1, -232(%rbp)
 1369      FFFF0100 
 1369      0000
 425:main.c        **** 			char *end;
 426:main.c        **** 			ptr++;
 1370              		.loc 1 426 0
 1371 0c5b 488B0500 		movq	ptr(%rip), %rax
 1371      000000
 1372 0c62 4883C001 		addq	$1, %rax
 1373 0c66 48890500 		movq	%rax, ptr(%rip)
 1373      000000
 427:main.c        **** 			
 428:main.c        **** 			// Get the channel to be read:
 429:main.c        **** 			errno = 0;
 1374              		.loc 1 429 0
 1375 0c6d E8000000 		call	__errno_location
 1375      00
 1376 0c72 C7000000 		movl	$0, (%rax)
 1376      0000
 430:main.c        **** 			chan = (uint32)strtoul(ptr, &end, 16);
 1377              		.loc 1 430 0
 1378 0c78 488B0500 		movq	ptr(%rip), %rax
 1378      000000
 1379 0c7f 488D8D40 		leaq	-192(%rbp), %rcx
 1379      FFFFFF
 1380 0c86 BA100000 		movl	$16, %edx
 1380      00
 1381 0c8b 4889CE   		movq	%rcx, %rsi
 1382 0c8e 4889C7   		movq	%rax, %rdi
 1383 0c91 E8000000 		call	strtoul
 1383      00
 1384 0c96 898530FF 		movl	%eax, -208(%rbp)
 1384      FFFF
 431:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1385              		.loc 1 431 0
 1386 0c9c E8000000 		call	__errno_location
 1386      00
 1387 0ca1 8B00     		movl	(%rax), %eax
 1388 0ca3 85C0     		testl	%eax, %eax
 1389 0ca5 740F     		je	.L91
 1390              		.loc 1 431 0 is_stmt 0 discriminator 1
 1391 0ca7 C78514FF 		movl	$2, -236(%rbp)
 1391      FFFF0200 
 1391      0000
 1392 0cb1 E9330E00 		jmp	.L84
 1392      00
 1393              	.L91:
 432:main.c        **** 
 433:main.c        **** 			// Ensure that it's 0-127
 434:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 1394              		.loc 1 434 0 is_stmt 1
 1395 0cb6 83BD30FF 		cmpl	$127, -208(%rbp)
 1395      FFFF7F
 1396 0cbd 760F     		jbe	.L93
 1397              		.loc 1 434 0 is_stmt 0 discriminator 1
 1398 0cbf C78514FF 		movl	$3, -236(%rbp)
 1398      FFFF0300 
 1398      0000
 1399 0cc9 E91B0E00 		jmp	.L84
 1399      00
 1400              	.L93:
 435:main.c        **** 			ptr = end;
 1401              		.loc 1 435 0 is_stmt 1
 1402 0cce 488B8540 		movq	-192(%rbp), %rax
 1402      FFFFFF
 1403 0cd5 48890500 		movq	%rax, ptr(%rip)
 1403      000000
 436:main.c        **** 
 437:main.c        **** 			// Only three valid chars at this point:
 438:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 1404              		.loc 1 438 0
 1405 0cdc 488B0500 		movq	ptr(%rip), %rax
 1405      000000
 1406 0ce3 0FB600   		movzbl	(%rax), %eax
 1407 0ce6 84C0     		testb	%al, %al
 1408 0ce8 742B     		je	.L94
 1409              		.loc 1 438 0 is_stmt 0 discriminator 1
 1410 0cea 488B0500 		movq	ptr(%rip), %rax
 1410      000000
 1411 0cf1 0FB600   		movzbl	(%rax), %eax
 1412 0cf4 3C3B     		cmpb	$59, %al
 1413 0cf6 741D     		je	.L94
 1414              		.loc 1 438 0 discriminator 2
 1415 0cf8 488B0500 		movq	ptr(%rip), %rax
 1415      000000
 1416 0cff 0FB600   		movzbl	(%rax), %eax
 1417 0d02 3C20     		cmpb	$32, %al
 1418 0d04 740F     		je	.L94
 1419              		.loc 1 438 0 discriminator 3
 1420 0d06 C78514FF 		movl	$5, -236(%rbp)
 1420      FFFF0500 
 1420      0000
 1421 0d10 E9D40D00 		jmp	.L84
 1421      00
 1422              	.L94:
 439:main.c        **** 
 440:main.c        **** 			if ( *ptr == ' ' ) {
 1423              		.loc 1 440 0 is_stmt 1
 1424 0d15 488B0500 		movq	ptr(%rip), %rax
 1424      000000
 1425 0d1c 0FB600   		movzbl	(%rax), %eax
 1426 0d1f 3C20     		cmpb	$32, %al
 1427 0d21 0F851D02 		jne	.L95
 1427      0000
 441:main.c        **** 				ptr++;
 1428              		.loc 1 441 0
 1429 0d27 488B0500 		movq	ptr(%rip), %rax
 1429      000000
 1430 0d2e 4883C001 		addq	$1, %rax
 1431 0d32 48890500 		movq	%rax, ptr(%rip)
 1431      000000
 442:main.c        **** 
 443:main.c        **** 				// Get the read count:
 444:main.c        **** 				errno = 0;
 1432              		.loc 1 444 0
 1433 0d39 E8000000 		call	__errno_location
 1433      00
 1434 0d3e C7000000 		movl	$0, (%rax)
 1434      0000
 445:main.c        **** 				length = (uint32)strtoul(ptr, &end, 16);
 1435              		.loc 1 445 0
 1436 0d44 488B0500 		movq	ptr(%rip), %rax
 1436      000000
 1437 0d4b 488D8D40 		leaq	-192(%rbp), %rcx
 1437      FFFFFF
 1438 0d52 BA100000 		movl	$16, %edx
 1438      00
 1439 0d57 4889CE   		movq	%rcx, %rsi
 1440 0d5a 4889C7   		movq	%rax, %rdi
 1441 0d5d E8000000 		call	strtoul
 1441      00
 1442 0d62 898518FF 		movl	%eax, -232(%rbp)
 1442      FFFF
 446:main.c        **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1443              		.loc 1 446 0
 1444 0d68 E8000000 		call	__errno_location
 1444      00
 1445 0d6d 8B00     		movl	(%rax), %eax
 1446 0d6f 85C0     		testl	%eax, %eax
 1447 0d71 740F     		je	.L96
 1448              		.loc 1 446 0 is_stmt 0 discriminator 1
 1449 0d73 C78514FF 		movl	$2, -236(%rbp)
 1449      FFFF0200 
 1449      0000
 1450 0d7d E9670D00 		jmp	.L84
 1450      00
 1451              	.L96:
 447:main.c        **** 				ptr = end;
 1452              		.loc 1 447 0 is_stmt 1
 1453 0d82 488B8540 		movq	-192(%rbp), %rax
 1453      FFFFFF
 1454 0d89 48890500 		movq	%rax, ptr(%rip)
 1454      000000
 448:main.c        **** 				
 449:main.c        **** 				// Only three valid chars at this point:
 450:main.c        **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 1455              		.loc 1 450 0
 1456 0d90 488B0500 		movq	ptr(%rip), %rax
 1456      000000
 1457 0d97 0FB600   		movzbl	(%rax), %eax
 1458 0d9a 84C0     		testb	%al, %al
 1459 0d9c 742B     		je	.L97
 1460              		.loc 1 450 0 is_stmt 0 discriminator 1
 1461 0d9e 488B0500 		movq	ptr(%rip), %rax
 1461      000000
 1462 0da5 0FB600   		movzbl	(%rax), %eax
 1463 0da8 3C3B     		cmpb	$59, %al
 1464 0daa 741D     		je	.L97
 1465              		.loc 1 450 0 discriminator 2
 1466 0dac 488B0500 		movq	ptr(%rip), %rax
 1466      000000
 1467 0db3 0FB600   		movzbl	(%rax), %eax
 1468 0db6 3C20     		cmpb	$32, %al
 1469 0db8 740F     		je	.L97
 1470              		.loc 1 450 0 discriminator 3
 1471 0dba C78514FF 		movl	$5, -236(%rbp)
 1471      FFFF0500 
 1471      0000
 1472 0dc4 E9200D00 		jmp	.L84
 1472      00
 1473              	.L97:
 451:main.c        **** 				if ( *ptr == ' ' ) {
 1474              		.loc 1 451 0 is_stmt 1
 1475 0dc9 488B0500 		movq	ptr(%rip), %rax
 1475      000000
 1476 0dd0 0FB600   		movzbl	(%rax), %eax
 1477 0dd3 3C20     		cmpb	$32, %al
 1478 0dd5 0F856901 		jne	.L95
 1478      0000
 1479              	.LBB4:
 452:main.c        **** 					const char *p;
 453:main.c        **** 					const char quoteChar = *++ptr;
 1480              		.loc 1 453 0
 1481 0ddb 488B0500 		movq	ptr(%rip), %rax
 1481      000000
 1482 0de2 4883C001 		addq	$1, %rax
 1483 0de6 48890500 		movq	%rax, ptr(%rip)
 1483      000000
 1484 0ded 488B0500 		movq	ptr(%rip), %rax
 1484      000000
 1485 0df4 0FB600   		movzbl	(%rax), %eax
 1486 0df7 888511FF 		movb	%al, -239(%rbp)
 1486      FFFF
 454:main.c        **** 					CHECK_STATUS(
 1487              		.loc 1 454 0
 1488 0dfd 80BD11FF 		cmpb	$34, -239(%rbp)
 1488      FFFF22
 1489 0e04 7418     		je	.L98
 1490              		.loc 1 454 0 is_stmt 0 discriminator 1
 1491 0e06 80BD11FF 		cmpb	$39, -239(%rbp)
 1491      FFFF27
 1492 0e0d 740F     		je	.L98
 1493              		.loc 1 454 0 discriminator 2
 1494 0e0f C78514FF 		movl	$5, -236(%rbp)
 1494      FFFF0500 
 1494      0000
 1495 0e19 E9CB0C00 		jmp	.L84
 1495      00
 1496              	.L98:
 455:main.c        **** 						(quoteChar != '"' && quoteChar != '\''),
 456:main.c        **** 						FLP_ILL_CHAR, cleanup);
 457:main.c        **** 					
 458:main.c        **** 					// Get the file to write bytes to:
 459:main.c        **** 					ptr++;
 1497              		.loc 1 459 0 is_stmt 1
 1498 0e1e 488B0500 		movq	ptr(%rip), %rax
 1498      000000
 1499 0e25 4883C001 		addq	$1, %rax
 1500 0e29 48890500 		movq	%rax, ptr(%rip)
 1500      000000
 460:main.c        **** 					p = ptr;
 1501              		.loc 1 460 0
 1502 0e30 488B0500 		movq	ptr(%rip), %rax
 1502      000000
 1503 0e37 48898560 		movq	%rax, -160(%rbp)
 1503      FFFFFF
 461:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 1504              		.loc 1 461 0
 1505 0e3e EB08     		jmp	.L99
 1506              	.L101:
 462:main.c        **** 						p++;
 1507              		.loc 1 462 0
 1508 0e40 48838560 		addq	$1, -160(%rbp)
 1508      FFFFFF01 
 1509              	.L99:
 461:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 1510              		.loc 1 461 0
 1511 0e48 488B8560 		movq	-160(%rbp), %rax
 1511      FFFFFF
 1512 0e4f 0FB600   		movzbl	(%rax), %eax
 1513 0e52 3A8511FF 		cmpb	-239(%rbp), %al
 1513      FFFF
 1514 0e58 740E     		je	.L100
 461:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 1515              		.loc 1 461 0 is_stmt 0 discriminator 1
 1516 0e5a 488B8560 		movq	-160(%rbp), %rax
 1516      FFFFFF
 1517 0e61 0FB600   		movzbl	(%rax), %eax
 1518 0e64 84C0     		testb	%al, %al
 1519 0e66 75D8     		jne	.L101
 1520              	.L100:
 463:main.c        **** 					}
 464:main.c        **** 					CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 1521              		.loc 1 464 0 is_stmt 1
 1522 0e68 488B8560 		movq	-160(%rbp), %rax
 1522      FFFFFF
 1523 0e6f 0FB600   		movzbl	(%rax), %eax
 1524 0e72 84C0     		testb	%al, %al
 1525 0e74 750F     		jne	.L102
 1526              		.loc 1 464 0 is_stmt 0 discriminator 1
 1527 0e76 C78514FF 		movl	$6, -236(%rbp)
 1527      FFFF0600 
 1527      0000
 1528 0e80 E9640C00 		jmp	.L84
 1528      00
 1529              	.L102:
 465:main.c        **** 					fileName = malloc((size_t)(p - ptr + 1));
 1530              		.loc 1 465 0 is_stmt 1
 1531 0e85 488B8560 		movq	-160(%rbp), %rax
 1531      FFFFFF
 1532 0e8c 488B1500 		movq	ptr(%rip), %rdx
 1532      000000
 1533 0e93 4829D0   		subq	%rdx, %rax
 1534 0e96 4883C001 		addq	$1, %rax
 1535 0e9a 4889C7   		movq	%rax, %rdi
 1536 0e9d E8000000 		call	malloc
 1536      00
 1537 0ea2 48898550 		movq	%rax, -176(%rbp)
 1537      FFFFFF
 466:main.c        **** 					CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 1538              		.loc 1 466 0
 1539 0ea9 4883BD50 		cmpq	$0, -176(%rbp)
 1539      FFFFFF00 
 1540 0eb1 750F     		jne	.L103
 1541              		.loc 1 466 0 is_stmt 0 discriminator 1
 1542 0eb3 C78514FF 		movl	$7, -236(%rbp)
 1542      FFFF0700 
 1542      0000
 1543 0ebd E9270C00 		jmp	.L84
 1543      00
 1544              	.L103:
 467:main.c        **** 					CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 1545              		.loc 1 467 0 is_stmt 1
 1546 0ec2 488B8560 		movq	-160(%rbp), %rax
 1546      FFFFFF
 1547 0ec9 488B1500 		movq	ptr(%rip), %rdx
 1547      000000
 1548 0ed0 4839D0   		cmpq	%rdx, %rax
 1549 0ed3 750F     		jne	.L104
 1550              		.loc 1 467 0 is_stmt 0 discriminator 1
 1551 0ed5 C78514FF 		movl	$8, -236(%rbp)
 1551      FFFF0800 
 1551      0000
 1552 0edf E9050C00 		jmp	.L84
 1552      00
 1553              	.L104:
 468:main.c        **** 					strncpy(fileName, ptr, (size_t)(p - ptr));
 1554              		.loc 1 468 0 is_stmt 1
 1555 0ee4 488B8560 		movq	-160(%rbp), %rax
 1555      FFFFFF
 1556 0eeb 488B1500 		movq	ptr(%rip), %rdx
 1556      000000
 1557 0ef2 4829D0   		subq	%rdx, %rax
 1558 0ef5 4889C2   		movq	%rax, %rdx
 1559 0ef8 488B0D00 		movq	ptr(%rip), %rcx
 1559      000000
 1560 0eff 488B8550 		movq	-176(%rbp), %rax
 1560      FFFFFF
 1561 0f06 4889CE   		movq	%rcx, %rsi
 1562 0f09 4889C7   		movq	%rax, %rdi
 1563 0f0c E8000000 		call	strncpy
 1563      00
 469:main.c        **** 					fileName[p - ptr] = '\0';
 1564              		.loc 1 469 0
 1565 0f11 488B8560 		movq	-160(%rbp), %rax
 1565      FFFFFF
 1566 0f18 488B1500 		movq	ptr(%rip), %rdx
 1566      000000
 1567 0f1f 4829D0   		subq	%rdx, %rax
 1568 0f22 4889C2   		movq	%rax, %rdx
 1569 0f25 488B8550 		movq	-176(%rbp), %rax
 1569      FFFFFF
 1570 0f2c 4801D0   		addq	%rdx, %rax
 1571 0f2f C60000   		movb	$0, (%rax)
 470:main.c        **** 					ptr = p + 1;
 1572              		.loc 1 470 0
 1573 0f32 488B8560 		movq	-160(%rbp), %rax
 1573      FFFFFF
 1574 0f39 4883C001 		addq	$1, %rax
 1575 0f3d 48890500 		movq	%rax, ptr(%rip)
 1575      000000
 1576              	.L95:
 1577              	.LBE4:
 471:main.c        **** 				}
 472:main.c        **** 			}
 473:main.c        **** 			if ( fileName ) {
 1578              		.loc 1 473 0
 1579 0f44 4883BD50 		cmpq	$0, -176(%rbp)
 1579      FFFFFF00 
 1580 0f4c 0F84EA01 		je	.L105
 1580      0000
 1581              	.LBB5:
 474:main.c        **** 				uint16 checksum = 0x0000;
 1582              		.loc 1 474 0
 1583 0f52 66C78538 		movw	$0, -200(%rbp)
 1583      FFFFFF00 
 1583      00
 475:main.c        **** 
 476:main.c        **** 				// Open file for writing
 477:main.c        **** 				file = fopen(fileName, "wb");
 1584              		.loc 1 477 0
 1585 0f5b 488B8550 		movq	-176(%rbp), %rax
 1585      FFFFFF
 1586 0f62 BE000000 		movl	$.LC31, %esi
 1586      00
 1587 0f67 4889C7   		movq	%rax, %rdi
 1588 0f6a E8000000 		call	fopen
 1588      00
 1589 0f6f 48898558 		movq	%rax, -168(%rbp)
 1589      FFFFFF
 478:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 1590              		.loc 1 478 0
 1591 0f76 4883BD58 		cmpq	$0, -168(%rbp)
 1591      FFFFFF00 
 1592 0f7e 750F     		jne	.L106
 1593              		.loc 1 478 0 is_stmt 0 discriminator 1
 1594 0f80 C78514FF 		movl	$11, -236(%rbp)
 1594      FFFF0B00 
 1594      0000
 1595 0f8a E95A0B00 		jmp	.L84
 1595      00
 1596              	.L106:
 479:main.c        **** 				free(fileName);
 1597              		.loc 1 479 0 is_stmt 1
 1598 0f8f 488B8550 		movq	-176(%rbp), %rax
 1598      FFFFFF
 1599 0f96 4889C7   		movq	%rax, %rdi
 1600 0f99 E8000000 		call	free
 1600      00
 480:main.c        **** 				fileName = NULL;
 1601              		.loc 1 480 0
 1602 0f9e 48C78550 		movq	$0, -176(%rbp)
 1602      FFFFFF00 
 1602      000000
 481:main.c        **** 
 482:main.c        **** 				#ifdef WIN32
 483:main.c        **** 					QueryPerformanceCounter(&tvStart);
 484:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 485:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 486:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 487:main.c        **** 					totalTime /= freq.QuadPart;
 488:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 489:main.c        **** 				#else
 490:main.c        **** 					gettimeofday(&tvStart, NULL);
 1603              		.loc 1 490 0
 1604 0fa9 488D45B0 		leaq	-80(%rbp), %rax
 1605 0fad BE000000 		movl	$0, %esi
 1605      00
 1606 0fb2 4889C7   		movq	%rax, %rdi
 1607 0fb5 E8000000 		call	gettimeofday
 1607      00
 491:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 1608              		.loc 1 491 0
 1609 0fba 8B8530FF 		movl	-208(%rbp), %eax
 1609      FFFF
 1610 0fc0 0FB6F0   		movzbl	%al, %esi
 1611 0fc3 4C8B85F8 		movq	-264(%rbp), %r8
 1611      FEFFFF
 1612 0fca 488DBD38 		leaq	-200(%rbp), %rdi
 1612      FFFFFF
 1613 0fd1 488B8D58 		movq	-168(%rbp), %rcx
 1613      FFFFFF
 1614 0fd8 8B9518FF 		movl	-232(%rbp), %edx
 1614      FFFF
 1615 0fde 488B8508 		movq	-248(%rbp), %rax
 1615      FFFFFF
 1616 0fe5 4D89C1   		movq	%r8, %r9
 1617 0fe8 4989F8   		movq	%rdi, %r8
 1618 0feb 4889C7   		movq	%rax, %rdi
 1619 0fee E8B1F6FF 		call	doRead
 1619      FF
 1620 0ff3 898528FF 		movl	%eax, -216(%rbp)
 1620      FFFF
 492:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1621              		.loc 1 492 0
 1622 0ff9 488D45C0 		leaq	-64(%rbp), %rax
 1623 0ffd BE000000 		movl	$0, %esi
 1623      00
 1624 1002 4889C7   		movq	%rax, %rdi
 1625 1005 E8000000 		call	gettimeofday
 1625      00
 493:main.c        **** 					startTime = tvStart.tv_sec;
 1626              		.loc 1 493 0
 1627 100a 488B45B0 		movq	-80(%rbp), %rax
 1628 100e 48894588 		movq	%rax, -120(%rbp)
 494:main.c        **** 					startTime *= 1000000;
 1629              		.loc 1 494 0
 1630 1012 488B4588 		movq	-120(%rbp), %rax
 1631 1016 4869C040 		imulq	$1000000, %rax, %rax
 1631      420F00
 1632 101d 48894588 		movq	%rax, -120(%rbp)
 495:main.c        **** 					startTime += tvStart.tv_usec;
 1633              		.loc 1 495 0
 1634 1021 488B45B8 		movq	-72(%rbp), %rax
 1635 1025 48014588 		addq	%rax, -120(%rbp)
 496:main.c        **** 					endTime = tvEnd.tv_sec;
 1636              		.loc 1 496 0
 1637 1029 488B45C0 		movq	-64(%rbp), %rax
 1638 102d 48894590 		movq	%rax, -112(%rbp)
 497:main.c        **** 					endTime *= 1000000;
 1639              		.loc 1 497 0
 1640 1031 488B4590 		movq	-112(%rbp), %rax
 1641 1035 4869C040 		imulq	$1000000, %rax, %rax
 1641      420F00
 1642 103c 48894590 		movq	%rax, -112(%rbp)
 498:main.c        **** 					endTime += tvEnd.tv_usec;
 1643              		.loc 1 498 0
 1644 1040 488B45C8 		movq	-56(%rbp), %rax
 1645 1044 48014590 		addq	%rax, -112(%rbp)
 499:main.c        **** 					totalTime = (double)(endTime - startTime);
 1646              		.loc 1 499 0
 1647 1048 488B4590 		movq	-112(%rbp), %rax
 1648 104c 482B4588 		subq	-120(%rbp), %rax
 1649 1050 660FEFC0 		pxor	%xmm0, %xmm0
 1650 1054 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1650      C0
 1651 1059 F20F1145 		movsd	%xmm0, -104(%rbp)
 1651      98
 500:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1652              		.loc 1 500 0
 1653 105e F20F1045 		movsd	-104(%rbp), %xmm0
 1653      98
 1654 1063 F20F100D 		movsd	.LC4(%rip), %xmm1
 1654      00000000 
 1655 106b F20F5EC1 		divsd	%xmm1, %xmm0
 1656 106f F20F1145 		movsd	%xmm0, -104(%rbp)
 1656      98
 501:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1657              		.loc 1 501 0
 1658 1074 8B8518FF 		movl	-232(%rbp), %eax
 1658      FFFF
 1659 107a 4885C0   		testq	%rax, %rax
 1660 107d 780B     		js	.L108
 1661 107f 660FEFC0 		pxor	%xmm0, %xmm0
 1662 1083 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1662      C0
 1663 1088 EB19     		jmp	.L109
 1664              	.L108:
 1665 108a 4889C2   		movq	%rax, %rdx
 1666 108d 48D1EA   		shrq	%rdx
 1667 1090 83E001   		andl	$1, %eax
 1668 1093 4809C2   		orq	%rax, %rdx
 1669 1096 660FEFC0 		pxor	%xmm0, %xmm0
 1670 109a F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1670      C2
 1671 109f F20F58C0 		addsd	%xmm0, %xmm0
 1672              	.L109:
 1673 10a3 F20F1055 		movsd	-104(%rbp), %xmm2
 1673      98
 1674 10a8 F20F100D 		movsd	.LC32(%rip), %xmm1
 1674      00000000 
 1675 10b0 F20F59CA 		mulsd	%xmm2, %xmm1
 1676 10b4 F20F5EC1 		divsd	%xmm1, %xmm0
 1677 10b8 F20F1145 		movsd	%xmm0, -96(%rbp)
 1677      A0
 502:main.c        **** 				#endif
 503:main.c        **** 				if ( enableBenchmarking ) {
 1678              		.loc 1 503 0
 1679 10bd 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1679      000000
 1680 10c4 84C0     		testb	%al, %al
 1681 10c6 743A     		je	.L110
 504:main.c        **** 					printf(
 1682              		.loc 1 504 0
 1683 10c8 0FB78538 		movzwl	-200(%rbp), %eax
 1683      FFFFFF
 1684 10cf 0FB7D0   		movzwl	%ax, %edx
 1685 10d2 488B75A0 		movq	-96(%rbp), %rsi
 1686 10d6 8B8D30FF 		movl	-208(%rbp), %ecx
 1686      FFFF
 1687 10dc 8B8518FF 		movl	-232(%rbp), %eax
 1687      FFFF
 1688 10e2 4889B5F0 		movq	%rsi, -272(%rbp)
 1688      FEFFFF
 1689 10e9 F20F1085 		movsd	-272(%rbp), %xmm0
 1689      F0FEFFFF 
 1690 10f1 89C6     		movl	%eax, %esi
 1691 10f3 BF000000 		movl	$.LC33, %edi
 1691      00
 1692 10f8 B8010000 		movl	$1, %eax
 1692      00
 1693 10fd E8000000 		call	printf
 1693      00
 1694              	.L110:
 505:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 506:main.c        **** 						length, checksum, chan, speed);
 507:main.c        **** 				}
 508:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 1695              		.loc 1 508 0
 1696 1102 83BD28FF 		cmpl	$0, -216(%rbp)
 1696      FFFF00
 1697 1109 7412     		je	.L111
 1698              		.loc 1 508 0 is_stmt 0 discriminator 1
 1699 110b 8B8528FF 		movl	-216(%rbp), %eax
 1699      FFFF
 1700 1111 898514FF 		movl	%eax, -236(%rbp)
 1700      FFFF
 1701 1117 90       		nop
 1702              	.LBE5:
 431:main.c        **** 
 1703              		.loc 1 431 0 is_stmt 1 discriminator 1
 1704 1118 E9CC0900 		jmp	.L84
 1704      00
 1705              	.L111:
 1706              	.LBB6:
 509:main.c        **** 
 510:main.c        **** 				// Close the file
 511:main.c        **** 				fclose(file);
 1707              		.loc 1 511 0
 1708 111d 488B8558 		movq	-168(%rbp), %rax
 1708      FFFFFF
 1709 1124 4889C7   		movq	%rax, %rdi
 1710 1127 E8000000 		call	fclose
 1710      00
 512:main.c        **** 				file = NULL;
 1711              		.loc 1 512 0
 1712 112c 48C78558 		movq	$0, -168(%rbp)
 1712      FFFFFF00 
 1712      000000
 1713              	.LBE6:
 513:main.c        **** 			} else {
 514:main.c        **** 				size_t oldLength = dataFromFPGA.length;
 515:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 516:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 517:main.c        **** 				#ifdef WIN32
 518:main.c        **** 					QueryPerformanceCounter(&tvStart);
 519:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 520:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 521:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 522:main.c        **** 					totalTime /= freq.QuadPart;
 523:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 524:main.c        **** 				#else
 525:main.c        **** 					gettimeofday(&tvStart, NULL);
 526:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 527:main.c        ****                     out = dataFromFPGA.data[0];
 528:main.c        **** 					gettimeofday(&tvEnd, NULL);
 529:main.c        **** 					startTime = tvStart.tv_sec;
 530:main.c        **** 					startTime *= 1000000;
 531:main.c        **** 					startTime += tvStart.tv_usec;
 532:main.c        **** 					endTime = tvEnd.tv_sec;
 533:main.c        **** 					endTime *= 1000000;
 534:main.c        **** 					endTime += tvEnd.tv_usec;
 535:main.c        **** 					totalTime = (double)(endTime - startTime);
 536:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 537:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 538:main.c        **** 				#endif
 539:main.c        **** 				if ( enableBenchmarking ) {
 540:main.c        **** 					printf(
 541:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 542:main.c        **** 						length, calcChecksum(dataFromFPGA.data + oldLength, length), chan, speed);
 543:main.c        **** 				}
 544:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 545:main.c        **** 			}
 546:main.c        **** 			break;
 1714              		.loc 1 546 0
 1715 1137 E9680900 		jmp	.L161
 1715      00
 1716              	.L105:
 1717              	.LBB7:
 514:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 1718              		.loc 1 514 0
 1719 113c 488B45D8 		movq	-40(%rbp), %rax
 1720 1140 488945A8 		movq	%rax, -88(%rbp)
 515:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 1721              		.loc 1 515 0
 1722 1144 8B9518FF 		movl	-232(%rbp), %edx
 1722      FFFF
 1723 114a 488B8DF8 		movq	-264(%rbp), %rcx
 1723      FEFFFF
 1724 1151 488D45D0 		leaq	-48(%rbp), %rax
 1725 1155 BE000000 		movl	$0, %esi
 1725      00
 1726 115a 4889C7   		movq	%rax, %rdi
 1727 115d E8000000 		call	bufAppendConst
 1727      00
 1728 1162 898520FF 		movl	%eax, -224(%rbp)
 1728      FFFF
 516:main.c        **** 				#ifdef WIN32
 1729              		.loc 1 516 0
 1730 1168 83BD20FF 		cmpl	$0, -224(%rbp)
 1730      FFFF00
 1731 116f 740F     		je	.L113
 516:main.c        **** 				#ifdef WIN32
 1732              		.loc 1 516 0 is_stmt 0 discriminator 1
 1733 1171 C78514FF 		movl	$1, -236(%rbp)
 1733      FFFF0100 
 1733      0000
 1734 117b E9690900 		jmp	.L84
 1734      00
 1735              	.L113:
 525:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 1736              		.loc 1 525 0 is_stmt 1
 1737 1180 488D45B0 		leaq	-80(%rbp), %rax
 1738 1184 BE000000 		movl	$0, %esi
 1738      00
 1739 1189 4889C7   		movq	%rax, %rdi
 1740 118c E8000000 		call	gettimeofday
 1740      00
 526:main.c        ****                     out = dataFromFPGA.data[0];
 1741              		.loc 1 526 0
 1742 1191 488B55D0 		movq	-48(%rbp), %rdx
 1743 1195 488B45A8 		movq	-88(%rbp), %rax
 1744 1199 488D0C02 		leaq	(%rdx,%rax), %rcx
 1745 119d 8B9518FF 		movl	-232(%rbp), %edx
 1745      FFFF
 1746 11a3 8B8530FF 		movl	-208(%rbp), %eax
 1746      FFFF
 1747 11a9 0FB6F0   		movzbl	%al, %esi
 1748 11ac 488BBDF8 		movq	-264(%rbp), %rdi
 1748      FEFFFF
 1749 11b3 488B8508 		movq	-248(%rbp), %rax
 1749      FFFFFF
 1750 11ba 4989F8   		movq	%rdi, %r8
 1751 11bd 4889C7   		movq	%rax, %rdi
 1752 11c0 E8000000 		call	flReadChannel
 1752      00
 1753 11c5 898524FF 		movl	%eax, -220(%rbp)
 1753      FFFF
 527:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1754              		.loc 1 527 0
 1755 11cb 488B45D0 		movq	-48(%rbp), %rax
 1756 11cf 0FB600   		movzbl	(%rax), %eax
 1757 11d2 88050000 		movb	%al, out(%rip)
 1757      0000
 528:main.c        **** 					startTime = tvStart.tv_sec;
 1758              		.loc 1 528 0
 1759 11d8 488D45C0 		leaq	-64(%rbp), %rax
 1760 11dc BE000000 		movl	$0, %esi
 1760      00
 1761 11e1 4889C7   		movq	%rax, %rdi
 1762 11e4 E8000000 		call	gettimeofday
 1762      00
 529:main.c        **** 					startTime *= 1000000;
 1763              		.loc 1 529 0
 1764 11e9 488B45B0 		movq	-80(%rbp), %rax
 1765 11ed 48894588 		movq	%rax, -120(%rbp)
 530:main.c        **** 					startTime += tvStart.tv_usec;
 1766              		.loc 1 530 0
 1767 11f1 488B4588 		movq	-120(%rbp), %rax
 1768 11f5 4869C040 		imulq	$1000000, %rax, %rax
 1768      420F00
 1769 11fc 48894588 		movq	%rax, -120(%rbp)
 531:main.c        **** 					endTime = tvEnd.tv_sec;
 1770              		.loc 1 531 0
 1771 1200 488B45B8 		movq	-72(%rbp), %rax
 1772 1204 48014588 		addq	%rax, -120(%rbp)
 532:main.c        **** 					endTime *= 1000000;
 1773              		.loc 1 532 0
 1774 1208 488B45C0 		movq	-64(%rbp), %rax
 1775 120c 48894590 		movq	%rax, -112(%rbp)
 533:main.c        **** 					endTime += tvEnd.tv_usec;
 1776              		.loc 1 533 0
 1777 1210 488B4590 		movq	-112(%rbp), %rax
 1778 1214 4869C040 		imulq	$1000000, %rax, %rax
 1778      420F00
 1779 121b 48894590 		movq	%rax, -112(%rbp)
 534:main.c        **** 					totalTime = (double)(endTime - startTime);
 1780              		.loc 1 534 0
 1781 121f 488B45C8 		movq	-56(%rbp), %rax
 1782 1223 48014590 		addq	%rax, -112(%rbp)
 535:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1783              		.loc 1 535 0
 1784 1227 488B4590 		movq	-112(%rbp), %rax
 1785 122b 482B4588 		subq	-120(%rbp), %rax
 1786 122f 660FEFC0 		pxor	%xmm0, %xmm0
 1787 1233 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1787      C0
 1788 1238 F20F1145 		movsd	%xmm0, -104(%rbp)
 1788      98
 536:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1789              		.loc 1 536 0
 1790 123d F20F1045 		movsd	-104(%rbp), %xmm0
 1790      98
 1791 1242 F20F100D 		movsd	.LC4(%rip), %xmm1
 1791      00000000 
 1792 124a F20F5EC1 		divsd	%xmm1, %xmm0
 1793 124e F20F1145 		movsd	%xmm0, -104(%rbp)
 1793      98
 537:main.c        **** 				#endif
 1794              		.loc 1 537 0
 1795 1253 8B8518FF 		movl	-232(%rbp), %eax
 1795      FFFF
 1796 1259 4885C0   		testq	%rax, %rax
 1797 125c 780B     		js	.L114
 1798 125e 660FEFC0 		pxor	%xmm0, %xmm0
 1799 1262 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1799      C0
 1800 1267 EB19     		jmp	.L115
 1801              	.L114:
 1802 1269 4889C2   		movq	%rax, %rdx
 1803 126c 48D1EA   		shrq	%rdx
 1804 126f 83E001   		andl	$1, %eax
 1805 1272 4809C2   		orq	%rax, %rdx
 1806 1275 660FEFC0 		pxor	%xmm0, %xmm0
 1807 1279 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1807      C2
 1808 127e F20F58C0 		addsd	%xmm0, %xmm0
 1809              	.L115:
 1810 1282 F20F1055 		movsd	-104(%rbp), %xmm2
 1810      98
 1811 1287 F20F100D 		movsd	.LC32(%rip), %xmm1
 1811      00000000 
 1812 128f F20F59CA 		mulsd	%xmm2, %xmm1
 1813 1293 F20F5EC1 		divsd	%xmm1, %xmm0
 1814 1297 F20F1145 		movsd	%xmm0, -96(%rbp)
 1814      A0
 539:main.c        **** 					printf(
 1815              		.loc 1 539 0
 1816 129c 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1816      000000
 1817 12a3 84C0     		testb	%al, %al
 1818 12a5 744F     		je	.L116
 542:main.c        **** 				}
 1819              		.loc 1 542 0
 1820 12a7 8B8518FF 		movl	-232(%rbp), %eax
 1820      FFFF
 1821 12ad 488B4DD0 		movq	-48(%rbp), %rcx
 1822 12b1 488B55A8 		movq	-88(%rbp), %rdx
 1823 12b5 4801CA   		addq	%rcx, %rdx
 1824 12b8 4889C6   		movq	%rax, %rsi
 1825 12bb 4889D7   		movq	%rdx, %rdi
 1826 12be E879F2FF 		call	calcChecksum
 1826      FF
 540:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 1827              		.loc 1 540 0
 1828 12c3 0FB7D0   		movzwl	%ax, %edx
 1829 12c6 488B75A0 		movq	-96(%rbp), %rsi
 1830 12ca 8B8D30FF 		movl	-208(%rbp), %ecx
 1830      FFFF
 1831 12d0 8B8518FF 		movl	-232(%rbp), %eax
 1831      FFFF
 1832 12d6 4889B5F0 		movq	%rsi, -272(%rbp)
 1832      FEFFFF
 1833 12dd F20F1085 		movsd	-272(%rbp), %xmm0
 1833      F0FEFFFF 
 1834 12e5 89C6     		movl	%eax, %esi
 1835 12e7 BF000000 		movl	$.LC33, %edi
 1835      00
 1836 12ec B8010000 		movl	$1, %eax
 1836      00
 1837 12f1 E8000000 		call	printf
 1837      00
 1838              	.L116:
 544:main.c        **** 			}
 1839              		.loc 1 544 0
 1840 12f6 83BD24FF 		cmpl	$0, -220(%rbp)
 1840      FFFF00
 1841 12fd 0F84A107 		je	.L161
 1841      0000
 544:main.c        **** 			}
 1842              		.loc 1 544 0 is_stmt 0 discriminator 1
 1843 1303 C78514FF 		movl	$1, -236(%rbp)
 1843      FFFF0100 
 1843      0000
 1844 130d 90       		nop
 1845 130e E9D60700 		jmp	.L84
 1845      00
 1846              	.L89:
 1847              	.LBE7:
 1848              	.LBE3:
 1849              	.LBB8:
 547:main.c        **** 		}
 548:main.c        **** 		case 'w':{
 549:main.c        **** 			unsigned long int chan;
 550:main.c        **** 			size_t length = 1, i;
 1850              		.loc 1 550 0 is_stmt 1
 1851 1313 48C78538 		movq	$1, -200(%rbp)
 1851      FFFFFF01 
 1851      000000
 551:main.c        **** 			char *end, ch;
 552:main.c        **** 			const char *p;
 553:main.c        **** 			ptr++;
 1852              		.loc 1 553 0
 1853 131e 488B0500 		movq	ptr(%rip), %rax
 1853      000000
 1854 1325 4883C001 		addq	$1, %rax
 1855 1329 48890500 		movq	%rax, ptr(%rip)
 1855      000000
 554:main.c        **** 			
 555:main.c        **** 			// Get the channel to be written:
 556:main.c        **** 			errno = 0;
 1856              		.loc 1 556 0
 1857 1330 E8000000 		call	__errno_location
 1857      00
 1858 1335 C7000000 		movl	$0, (%rax)
 1858      0000
 557:main.c        **** 			chan = strtoul(ptr, &end, 16);
 1859              		.loc 1 557 0
 1860 133b 488B0500 		movq	ptr(%rip), %rax
 1860      000000
 1861 1342 488D8D40 		leaq	-192(%rbp), %rcx
 1861      FFFFFF
 1862 1349 BA100000 		movl	$16, %edx
 1862      00
 1863 134e 4889CE   		movq	%rcx, %rsi
 1864 1351 4889C7   		movq	%rax, %rdi
 1865 1354 E8000000 		call	strtoul
 1865      00
 1866 1359 48894580 		movq	%rax, -128(%rbp)
 558:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1867              		.loc 1 558 0
 1868 135d E8000000 		call	__errno_location
 1868      00
 1869 1362 8B00     		movl	(%rax), %eax
 1870 1364 85C0     		testl	%eax, %eax
 1871 1366 740F     		je	.L118
 1872              		.loc 1 558 0 is_stmt 0 discriminator 1
 1873 1368 C78514FF 		movl	$2, -236(%rbp)
 1873      FFFF0200 
 1873      0000
 1874 1372 E9720700 		jmp	.L84
 1874      00
 1875              	.L118:
 559:main.c        **** 
 560:main.c        **** 			// Ensure that it's 0-127
 561:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 1876              		.loc 1 561 0 is_stmt 1
 1877 1377 48837D80 		cmpq	$127, -128(%rbp)
 1877      7F
 1878 137c 760F     		jbe	.L120
 1879              		.loc 1 561 0 is_stmt 0 discriminator 1
 1880 137e C78514FF 		movl	$3, -236(%rbp)
 1880      FFFF0300 
 1880      0000
 1881 1388 E95C0700 		jmp	.L84
 1881      00
 1882              	.L120:
 562:main.c        **** 			ptr = end;
 1883              		.loc 1 562 0 is_stmt 1
 1884 138d 488B8540 		movq	-192(%rbp), %rax
 1884      FFFFFF
 1885 1394 48890500 		movq	%rax, ptr(%rip)
 1885      000000
 563:main.c        **** 
 564:main.c        **** 			// There must be a space now:
 565:main.c        **** 			CHECK_STATUS(*ptr != ' ', FLP_ILL_CHAR, cleanup);
 1886              		.loc 1 565 0
 1887 139b 488B0500 		movq	ptr(%rip), %rax
 1887      000000
 1888 13a2 0FB600   		movzbl	(%rax), %eax
 1889 13a5 3C20     		cmpb	$32, %al
 1890 13a7 740F     		je	.L121
 1891              		.loc 1 565 0 is_stmt 0 discriminator 1
 1892 13a9 C78514FF 		movl	$5, -236(%rbp)
 1892      FFFF0500 
 1892      0000
 1893 13b3 E9310700 		jmp	.L84
 1893      00
 1894              	.L121:
 566:main.c        **** 
 567:main.c        **** 			// Now either a quote or a hex digit
 568:main.c        **** 		   ch = *++ptr;
 1895              		.loc 1 568 0 is_stmt 1
 1896 13b8 488B0500 		movq	ptr(%rip), %rax
 1896      000000
 1897 13bf 4883C001 		addq	$1, %rax
 1898 13c3 48890500 		movq	%rax, ptr(%rip)
 1898      000000
 1899 13ca 488B0500 		movq	ptr(%rip), %rax
 1899      000000
 1900 13d1 0FB600   		movzbl	(%rax), %eax
 1901 13d4 888510FF 		movb	%al, -240(%rbp)
 1901      FFFF
 569:main.c        **** 			if ( ch == '"' || ch == '\'' ) {
 1902              		.loc 1 569 0
 1903 13da 80BD10FF 		cmpb	$34, -240(%rbp)
 1903      FFFF22
 1904 13e1 740D     		je	.L122
 1905              		.loc 1 569 0 is_stmt 0 discriminator 1
 1906 13e3 80BD10FF 		cmpb	$39, -240(%rbp)
 1906      FFFF27
 1907 13ea 0F851203 		jne	.L123
 1907      0000
 1908              	.L122:
 1909              	.LBB9:
 570:main.c        **** 				uint16 checksum = 0x0000;
 1910              		.loc 1 570 0 is_stmt 1
 1911 13f0 66C78512 		movw	$0, -238(%rbp)
 1911      FFFFFF00 
 1911      00
 571:main.c        **** 
 572:main.c        **** 				// Get the file to read bytes from:
 573:main.c        **** 				ptr++;
 1912              		.loc 1 573 0
 1913 13f9 488B0500 		movq	ptr(%rip), %rax
 1913      000000
 1914 1400 4883C001 		addq	$1, %rax
 1915 1404 48890500 		movq	%rax, ptr(%rip)
 1915      000000
 574:main.c        **** 				p = ptr;
 1916              		.loc 1 574 0
 1917 140b 488B0500 		movq	ptr(%rip), %rax
 1917      000000
 1918 1412 48898570 		movq	%rax, -144(%rbp)
 1918      FFFFFF
 575:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1919              		.loc 1 575 0
 1920 1419 EB08     		jmp	.L124
 1921              	.L126:
 576:main.c        **** 					p++;
 1922              		.loc 1 576 0
 1923 141b 48838570 		addq	$1, -144(%rbp)
 1923      FFFFFF01 
 1924              	.L124:
 575:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1925              		.loc 1 575 0
 1926 1423 488B8570 		movq	-144(%rbp), %rax
 1926      FFFFFF
 1927 142a 0FB600   		movzbl	(%rax), %eax
 1928 142d 3A8510FF 		cmpb	-240(%rbp), %al
 1928      FFFF
 1929 1433 740E     		je	.L125
 575:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1930              		.loc 1 575 0 is_stmt 0 discriminator 1
 1931 1435 488B8570 		movq	-144(%rbp), %rax
 1931      FFFFFF
 1932 143c 0FB600   		movzbl	(%rax), %eax
 1933 143f 84C0     		testb	%al, %al
 1934 1441 75D8     		jne	.L126
 1935              	.L125:
 577:main.c        **** 				}
 578:main.c        **** 				CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 1936              		.loc 1 578 0 is_stmt 1
 1937 1443 488B8570 		movq	-144(%rbp), %rax
 1937      FFFFFF
 1938 144a 0FB600   		movzbl	(%rax), %eax
 1939 144d 84C0     		testb	%al, %al
 1940 144f 750F     		jne	.L127
 1941              		.loc 1 578 0 is_stmt 0 discriminator 1
 1942 1451 C78514FF 		movl	$6, -236(%rbp)
 1942      FFFF0600 
 1942      0000
 1943 145b E9890600 		jmp	.L84
 1943      00
 1944              	.L127:
 579:main.c        **** 				fileName = malloc((size_t)(p - ptr + 1));
 1945              		.loc 1 579 0 is_stmt 1
 1946 1460 488B8570 		movq	-144(%rbp), %rax
 1946      FFFFFF
 1947 1467 488B1500 		movq	ptr(%rip), %rdx
 1947      000000
 1948 146e 4829D0   		subq	%rdx, %rax
 1949 1471 4883C001 		addq	$1, %rax
 1950 1475 4889C7   		movq	%rax, %rdi
 1951 1478 E8000000 		call	malloc
 1951      00
 1952 147d 48898550 		movq	%rax, -176(%rbp)
 1952      FFFFFF
 580:main.c        **** 				CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 1953              		.loc 1 580 0
 1954 1484 4883BD50 		cmpq	$0, -176(%rbp)
 1954      FFFFFF00 
 1955 148c 750F     		jne	.L129
 1956              		.loc 1 580 0 is_stmt 0 discriminator 1
 1957 148e C78514FF 		movl	$7, -236(%rbp)
 1957      FFFF0700 
 1957      0000
 1958 1498 E9600200 		jmp	.L128
 1958      00
 1959              	.L129:
 581:main.c        **** 				CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 1960              		.loc 1 581 0 is_stmt 1
 1961 149d 488B8570 		movq	-144(%rbp), %rax
 1961      FFFFFF
 1962 14a4 488B1500 		movq	ptr(%rip), %rdx
 1962      000000
 1963 14ab 4839D0   		cmpq	%rdx, %rax
 1964 14ae 750F     		jne	.L130
 1965              		.loc 1 581 0 is_stmt 0 discriminator 1
 1966 14b0 C78514FF 		movl	$8, -236(%rbp)
 1966      FFFF0800 
 1966      0000
 1967 14ba E93E0200 		jmp	.L128
 1967      00
 1968              	.L130:
 582:main.c        **** 				strncpy(fileName, ptr, (size_t)(p - ptr));
 1969              		.loc 1 582 0 is_stmt 1
 1970 14bf 488B8570 		movq	-144(%rbp), %rax
 1970      FFFFFF
 1971 14c6 488B1500 		movq	ptr(%rip), %rdx
 1971      000000
 1972 14cd 4829D0   		subq	%rdx, %rax
 1973 14d0 4889C2   		movq	%rax, %rdx
 1974 14d3 488B0D00 		movq	ptr(%rip), %rcx
 1974      000000
 1975 14da 488B8550 		movq	-176(%rbp), %rax
 1975      FFFFFF
 1976 14e1 4889CE   		movq	%rcx, %rsi
 1977 14e4 4889C7   		movq	%rax, %rdi
 1978 14e7 E8000000 		call	strncpy
 1978      00
 583:main.c        **** 				fileName[p - ptr] = '\0';
 1979              		.loc 1 583 0
 1980 14ec 488B8570 		movq	-144(%rbp), %rax
 1980      FFFFFF
 1981 14f3 488B1500 		movq	ptr(%rip), %rdx
 1981      000000
 1982 14fa 4829D0   		subq	%rdx, %rax
 1983 14fd 4889C2   		movq	%rax, %rdx
 1984 1500 488B8550 		movq	-176(%rbp), %rax
 1984      FFFFFF
 1985 1507 4801D0   		addq	%rdx, %rax
 1986 150a C60000   		movb	$0, (%rax)
 584:main.c        **** 				ptr = p + 1;  // skip over closing quote
 1987              		.loc 1 584 0
 1988 150d 488B8570 		movq	-144(%rbp), %rax
 1988      FFFFFF
 1989 1514 4883C001 		addq	$1, %rax
 1990 1518 48890500 		movq	%rax, ptr(%rip)
 1990      000000
 585:main.c        **** 
 586:main.c        **** 				// Open file for reading
 587:main.c        **** 				file = fopen(fileName, "rb");
 1991              		.loc 1 587 0
 1992 151f 488B8550 		movq	-176(%rbp), %rax
 1992      FFFFFF
 1993 1526 BE000000 		movl	$.LC34, %esi
 1993      00
 1994 152b 4889C7   		movq	%rax, %rdi
 1995 152e E8000000 		call	fopen
 1995      00
 1996 1533 48898558 		movq	%rax, -168(%rbp)
 1996      FFFFFF
 588:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_LOAD, cleanup);
 1997              		.loc 1 588 0
 1998 153a 4883BD58 		cmpq	$0, -168(%rbp)
 1998      FFFFFF00 
 1999 1542 750F     		jne	.L131
 2000              		.loc 1 588 0 is_stmt 0 discriminator 1
 2001 1544 C78514FF 		movl	$10, -236(%rbp)
 2001      FFFF0A00 
 2001      0000
 2002 154e E9AA0100 		jmp	.L128
 2002      00
 2003              	.L131:
 589:main.c        **** 				free(fileName);
 2004              		.loc 1 589 0 is_stmt 1
 2005 1553 488B8550 		movq	-176(%rbp), %rax
 2005      FFFFFF
 2006 155a 4889C7   		movq	%rax, %rdi
 2007 155d E8000000 		call	free
 2007      00
 590:main.c        **** 				fileName = NULL;
 2008              		.loc 1 590 0
 2009 1562 48C78550 		movq	$0, -176(%rbp)
 2009      FFFFFF00 
 2009      000000
 591:main.c        **** 				
 592:main.c        **** 				#ifdef WIN32
 593:main.c        **** 					QueryPerformanceCounter(&tvStart);
 594:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 595:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 596:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 597:main.c        **** 					totalTime /= freq.QuadPart;
 598:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 599:main.c        **** 				#else
 600:main.c        **** 					gettimeofday(&tvStart, NULL);
 2010              		.loc 1 600 0
 2011 156d 488D45B0 		leaq	-80(%rbp), %rax
 2012 1571 BE000000 		movl	$0, %esi
 2012      00
 2013 1576 4889C7   		movq	%rax, %rdi
 2014 1579 E8000000 		call	gettimeofday
 2014      00
 601:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 2015              		.loc 1 601 0
 2016 157e 488B4580 		movq	-128(%rbp), %rax
 2017 1582 0FB6F0   		movzbl	%al, %esi
 2018 1585 4C8B85F8 		movq	-264(%rbp), %r8
 2018      FEFFFF
 2019 158c 488DBD12 		leaq	-238(%rbp), %rdi
 2019      FFFFFF
 2020 1593 488D8D38 		leaq	-200(%rbp), %rcx
 2020      FFFFFF
 2021 159a 488B9558 		movq	-168(%rbp), %rdx
 2021      FFFFFF
 2022 15a1 488B8508 		movq	-248(%rbp), %rax
 2022      FFFFFF
 2023 15a8 4D89C1   		movq	%r8, %r9
 2024 15ab 4989F8   		movq	%rdi, %r8
 2025 15ae 4889C7   		movq	%rax, %rdi
 2026 15b1 E896F3FF 		call	doWrite
 2026      FF
 2027 15b6 898528FF 		movl	%eax, -216(%rbp)
 2027      FFFF
 602:main.c        **** 					gettimeofday(&tvEnd, NULL);
 2028              		.loc 1 602 0
 2029 15bc 488D45C0 		leaq	-64(%rbp), %rax
 2030 15c0 BE000000 		movl	$0, %esi
 2030      00
 2031 15c5 4889C7   		movq	%rax, %rdi
 2032 15c8 E8000000 		call	gettimeofday
 2032      00
 603:main.c        **** 					startTime = tvStart.tv_sec;
 2033              		.loc 1 603 0
 2034 15cd 488B45B0 		movq	-80(%rbp), %rax
 2035 15d1 48894588 		movq	%rax, -120(%rbp)
 604:main.c        **** 					startTime *= 1000000;
 2036              		.loc 1 604 0
 2037 15d5 488B4588 		movq	-120(%rbp), %rax
 2038 15d9 4869C040 		imulq	$1000000, %rax, %rax
 2038      420F00
 2039 15e0 48894588 		movq	%rax, -120(%rbp)
 605:main.c        **** 					startTime += tvStart.tv_usec;
 2040              		.loc 1 605 0
 2041 15e4 488B45B8 		movq	-72(%rbp), %rax
 2042 15e8 48014588 		addq	%rax, -120(%rbp)
 606:main.c        **** 					endTime = tvEnd.tv_sec;
 2043              		.loc 1 606 0
 2044 15ec 488B45C0 		movq	-64(%rbp), %rax
 2045 15f0 48894590 		movq	%rax, -112(%rbp)
 607:main.c        **** 					endTime *= 1000000;
 2046              		.loc 1 607 0
 2047 15f4 488B4590 		movq	-112(%rbp), %rax
 2048 15f8 4869C040 		imulq	$1000000, %rax, %rax
 2048      420F00
 2049 15ff 48894590 		movq	%rax, -112(%rbp)
 608:main.c        **** 					endTime += tvEnd.tv_usec;
 2050              		.loc 1 608 0
 2051 1603 488B45C8 		movq	-56(%rbp), %rax
 2052 1607 48014590 		addq	%rax, -112(%rbp)
 609:main.c        **** 					totalTime = (double)(endTime - startTime);
 2053              		.loc 1 609 0
 2054 160b 488B4590 		movq	-112(%rbp), %rax
 2055 160f 482B4588 		subq	-120(%rbp), %rax
 2056 1613 660FEFC0 		pxor	%xmm0, %xmm0
 2057 1617 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2057      C0
 2058 161c F20F1145 		movsd	%xmm0, -104(%rbp)
 2058      98
 610:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 2059              		.loc 1 610 0
 2060 1621 F20F1045 		movsd	-104(%rbp), %xmm0
 2060      98
 2061 1626 F20F100D 		movsd	.LC4(%rip), %xmm1
 2061      00000000 
 2062 162e F20F5EC1 		divsd	%xmm1, %xmm0
 2063 1632 F20F1145 		movsd	%xmm0, -104(%rbp)
 2063      98
 611:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 2064              		.loc 1 611 0
 2065 1637 488B8538 		movq	-200(%rbp), %rax
 2065      FFFFFF
 2066 163e 4885C0   		testq	%rax, %rax
 2067 1641 780B     		js	.L132
 2068 1643 660FEFC0 		pxor	%xmm0, %xmm0
 2069 1647 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2069      C0
 2070 164c EB19     		jmp	.L133
 2071              	.L132:
 2072 164e 4889C2   		movq	%rax, %rdx
 2073 1651 48D1EA   		shrq	%rdx
 2074 1654 83E001   		andl	$1, %eax
 2075 1657 4809C2   		orq	%rax, %rdx
 2076 165a 660FEFC0 		pxor	%xmm0, %xmm0
 2077 165e F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 2077      C2
 2078 1663 F20F58C0 		addsd	%xmm0, %xmm0
 2079              	.L133:
 2080 1667 F20F1055 		movsd	-104(%rbp), %xmm2
 2080      98
 2081 166c F20F100D 		movsd	.LC32(%rip), %xmm1
 2081      00000000 
 2082 1674 F20F59CA 		mulsd	%xmm2, %xmm1
 2083 1678 F20F5EC1 		divsd	%xmm1, %xmm0
 2084 167c F20F1145 		movsd	%xmm0, -96(%rbp)
 2084      A0
 612:main.c        **** 				#endif
 613:main.c        **** 				if ( enableBenchmarking ) {
 2085              		.loc 1 613 0
 2086 1681 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 2086      000000
 2087 1688 84C0     		testb	%al, %al
 2088 168a 743A     		je	.L134
 614:main.c        **** 					printf(
 2089              		.loc 1 614 0
 2090 168c 0FB78512 		movzwl	-238(%rbp), %eax
 2090      FFFFFF
 2091 1693 0FB7D0   		movzwl	%ax, %edx
 2092 1696 488B8538 		movq	-200(%rbp), %rax
 2092      FFFFFF
 2093 169d 488B75A0 		movq	-96(%rbp), %rsi
 2094 16a1 488B4D80 		movq	-128(%rbp), %rcx
 2095 16a5 4889B5F0 		movq	%rsi, -272(%rbp)
 2095      FEFFFF
 2096 16ac F20F1085 		movsd	-272(%rbp), %xmm0
 2096      F0FEFFFF 
 2097 16b4 4889C6   		movq	%rax, %rsi
 2098 16b7 BF000000 		movl	$.LC35, %edi
 2098      00
 2099 16bc B8010000 		movl	$1, %eax
 2099      00
 2100 16c1 E8000000 		call	printf
 2100      00
 2101              	.L134:
 615:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 616:main.c        **** 						length, checksum, chan, speed);
 617:main.c        **** 				}
 618:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 2102              		.loc 1 618 0
 2103 16c6 83BD28FF 		cmpl	$0, -216(%rbp)
 2103      FFFF00
 2104 16cd 740E     		je	.L135
 2105              		.loc 1 618 0 is_stmt 0 discriminator 1
 2106 16cf 8B8528FF 		movl	-216(%rbp), %eax
 2106      FFFF
 2107 16d5 898514FF 		movl	%eax, -236(%rbp)
 2107      FFFF
 2108 16db EB20     		jmp	.L128
 2109              	.L135:
 619:main.c        **** 
 620:main.c        **** 				// Close the file
 621:main.c        **** 				fclose(file);
 2110              		.loc 1 621 0 is_stmt 1
 2111 16dd 488B8558 		movq	-168(%rbp), %rax
 2111      FFFFFF
 2112 16e4 4889C7   		movq	%rax, %rdi
 2113 16e7 E8000000 		call	fclose
 2113      00
 622:main.c        **** 				file = NULL;
 2114              		.loc 1 622 0
 2115 16ec 48C78558 		movq	$0, -168(%rbp)
 2115      FFFFFF00 
 2115      000000
 2116              	.LBE9:
 569:main.c        **** 				uint16 checksum = 0x0000;
 2117              		.loc 1 569 0
 2118 16f7 90       		nop
 2119 16f8 E9AB0300 		jmp	.L117
 2119      00
 2120              	.L128:
 558:main.c        **** 
 2121              		.loc 1 558 0 discriminator 2
 2122 16fd E9E70300 		jmp	.L84
 2122      00
 2123              	.L123:
 623:main.c        **** 			} else if ( isHexDigit(ch) ) {
 2124              		.loc 1 623 0
 2125 1702 0FBE8510 		movsbl	-240(%rbp), %eax
 2125      FFFFFF
 2126 1709 89C7     		movl	%eax, %edi
 2127 170b E8EEEDFF 		call	isHexDigit
 2127      FF
 2128 1710 84C0     		testb	%al, %al
 2129 1712 0F848402 		je	.L137
 2129      0000
 2130              	.LBB10:
 624:main.c        **** 				// Read a sequence of hex bytes to write
 625:main.c        **** 				uint8 *dataPtr;
 626:main.c        **** 				p = ptr + 1;
 2131              		.loc 1 626 0
 2132 1718 488B0500 		movq	ptr(%rip), %rax
 2132      000000
 2133 171f 4883C001 		addq	$1, %rax
 2134 1723 48898570 		movq	%rax, -144(%rbp)
 2134      FFFFFF
 627:main.c        **** 				while ( isHexDigit(*p) ) {
 2135              		.loc 1 627 0
 2136 172a EB08     		jmp	.L138
 2137              	.L139:
 628:main.c        **** 					p++;
 2138              		.loc 1 628 0
 2139 172c 48838570 		addq	$1, -144(%rbp)
 2139      FFFFFF01 
 2140              	.L138:
 627:main.c        **** 				while ( isHexDigit(*p) ) {
 2141              		.loc 1 627 0
 2142 1734 488B8570 		movq	-144(%rbp), %rax
 2142      FFFFFF
 2143 173b 0FB600   		movzbl	(%rax), %eax
 2144 173e 0FBEC0   		movsbl	%al, %eax
 2145 1741 89C7     		movl	%eax, %edi
 2146 1743 E8B6EDFF 		call	isHexDigit
 2146      FF
 2147 1748 84C0     		testb	%al, %al
 2148 174a 75E0     		jne	.L139
 629:main.c        **** 				}
 630:main.c        **** 				CHECK_STATUS((p - ptr) & 1, FLP_ODD_DIGITS, cleanup);
 2149              		.loc 1 630 0
 2150 174c 488B8570 		movq	-144(%rbp), %rax
 2150      FFFFFF
 2151 1753 488B1500 		movq	ptr(%rip), %rdx
 2151      000000
 2152 175a 4829D0   		subq	%rdx, %rax
 2153 175d 83E001   		andl	$1, %eax
 2154 1760 4885C0   		testq	%rax, %rax
 2155 1763 740F     		je	.L140
 2156              		.loc 1 630 0 is_stmt 0 discriminator 1
 2157 1765 C78514FF 		movl	$9, -236(%rbp)
 2157      FFFF0900 
 2157      0000
 2158 176f E9750300 		jmp	.L84
 2158      00
 2159              	.L140:
 631:main.c        **** 				length = (size_t)(p - ptr) / 2;
 2160              		.loc 1 631 0 is_stmt 1
 2161 1774 488B8570 		movq	-144(%rbp), %rax
 2161      FFFFFF
 2162 177b 488B1500 		movq	ptr(%rip), %rdx
 2162      000000
 2163 1782 4829D0   		subq	%rdx, %rax
 2164 1785 48D1E8   		shrq	%rax
 2165 1788 48898538 		movq	%rax, -200(%rbp)
 2165      FFFFFF
 632:main.c        **** 				data = malloc(length);
 2166              		.loc 1 632 0
 2167 178f 488B8538 		movq	-200(%rbp), %rax
 2167      FFFFFF
 2168 1796 4889C7   		movq	%rax, %rdi
 2169 1799 E8000000 		call	malloc
 2169      00
 2170 179e 48898548 		movq	%rax, -184(%rbp)
 2170      FFFFFF
 633:main.c        **** 				dataPtr = data;
 2171              		.loc 1 633 0
 2172 17a5 488B8548 		movq	-184(%rbp), %rax
 2172      FFFFFF
 2173 17ac 48898578 		movq	%rax, -136(%rbp)
 2173      FFFFFF
 634:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2174              		.loc 1 634 0
 2175 17b3 48C78568 		movq	$0, -152(%rbp)
 2175      FFFFFF00 
 2175      000000
 2176 17be EB34     		jmp	.L141
 2177              	.L142:
 635:main.c        **** 					getHexByte(dataPtr++);
 2178              		.loc 1 635 0 discriminator 3
 2179 17c0 488B8578 		movq	-136(%rbp), %rax
 2179      FFFFFF
 2180 17c7 488D5001 		leaq	1(%rax), %rdx
 2181 17cb 48899578 		movq	%rdx, -136(%rbp)
 2181      FFFFFF
 2182 17d2 4889C7   		movq	%rax, %rdi
 2183 17d5 E817EEFF 		call	getHexByte
 2183      FF
 636:main.c        **** 					ptr += 2;
 2184              		.loc 1 636 0 discriminator 3
 2185 17da 488B0500 		movq	ptr(%rip), %rax
 2185      000000
 2186 17e1 4883C002 		addq	$2, %rax
 2187 17e5 48890500 		movq	%rax, ptr(%rip)
 2187      000000
 634:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2188              		.loc 1 634 0 discriminator 3
 2189 17ec 48838568 		addq	$1, -152(%rbp)
 2189      FFFFFF01 
 2190              	.L141:
 634:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2191              		.loc 1 634 0 is_stmt 0 discriminator 1
 2192 17f4 488B8538 		movq	-200(%rbp), %rax
 2192      FFFFFF
 2193 17fb 48398568 		cmpq	%rax, -152(%rbp)
 2193      FFFFFF
 2194 1802 72BC     		jb	.L142
 637:main.c        **** 				}
 638:main.c        **** 				#ifdef WIN32
 639:main.c        **** 					QueryPerformanceCounter(&tvStart);
 640:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 641:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 642:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 643:main.c        **** 					totalTime /= freq.QuadPart;
 644:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 645:main.c        **** 				#else
 646:main.c        **** 					gettimeofday(&tvStart, NULL);
 2195              		.loc 1 646 0 is_stmt 1
 2196 1804 488D45B0 		leaq	-80(%rbp), %rax
 2197 1808 BE000000 		movl	$0, %esi
 2197      00
 2198 180d 4889C7   		movq	%rax, %rdi
 2199 1810 E8000000 		call	gettimeofday
 2199      00
 647:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 2200              		.loc 1 647 0
 2201 1815 488B9538 		movq	-200(%rbp), %rdx
 2201      FFFFFF
 2202 181c 488B4580 		movq	-128(%rbp), %rax
 2203 1820 0FB6F0   		movzbl	%al, %esi
 2204 1823 488BBDF8 		movq	-264(%rbp), %rdi
 2204      FEFFFF
 2205 182a 488B8D48 		movq	-184(%rbp), %rcx
 2205      FFFFFF
 2206 1831 488B8508 		movq	-248(%rbp), %rax
 2206      FFFFFF
 2207 1838 4989F8   		movq	%rdi, %r8
 2208 183b 4889C7   		movq	%rax, %rdi
 2209 183e E8000000 		call	flWriteChannel
 2209      00
 2210 1843 898524FF 		movl	%eax, -220(%rbp)
 2210      FFFF
 648:main.c        **** 					gettimeofday(&tvEnd, NULL);
 2211              		.loc 1 648 0
 2212 1849 488D45C0 		leaq	-64(%rbp), %rax
 2213 184d BE000000 		movl	$0, %esi
 2213      00
 2214 1852 4889C7   		movq	%rax, %rdi
 2215 1855 E8000000 		call	gettimeofday
 2215      00
 649:main.c        **** 					startTime = tvStart.tv_sec;
 2216              		.loc 1 649 0
 2217 185a 488B45B0 		movq	-80(%rbp), %rax
 2218 185e 48894588 		movq	%rax, -120(%rbp)
 650:main.c        **** 					startTime *= 1000000;
 2219              		.loc 1 650 0
 2220 1862 488B4588 		movq	-120(%rbp), %rax
 2221 1866 4869C040 		imulq	$1000000, %rax, %rax
 2221      420F00
 2222 186d 48894588 		movq	%rax, -120(%rbp)
 651:main.c        **** 					startTime += tvStart.tv_usec;
 2223              		.loc 1 651 0
 2224 1871 488B45B8 		movq	-72(%rbp), %rax
 2225 1875 48014588 		addq	%rax, -120(%rbp)
 652:main.c        **** 					endTime = tvEnd.tv_sec;
 2226              		.loc 1 652 0
 2227 1879 488B45C0 		movq	-64(%rbp), %rax
 2228 187d 48894590 		movq	%rax, -112(%rbp)
 653:main.c        **** 					endTime *= 1000000;
 2229              		.loc 1 653 0
 2230 1881 488B4590 		movq	-112(%rbp), %rax
 2231 1885 4869C040 		imulq	$1000000, %rax, %rax
 2231      420F00
 2232 188c 48894590 		movq	%rax, -112(%rbp)
 654:main.c        **** 					endTime += tvEnd.tv_usec;
 2233              		.loc 1 654 0
 2234 1890 488B45C8 		movq	-56(%rbp), %rax
 2235 1894 48014590 		addq	%rax, -112(%rbp)
 655:main.c        **** 					totalTime = (double)(endTime - startTime);
 2236              		.loc 1 655 0
 2237 1898 488B4590 		movq	-112(%rbp), %rax
 2238 189c 482B4588 		subq	-120(%rbp), %rax
 2239 18a0 660FEFC0 		pxor	%xmm0, %xmm0
 2240 18a4 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2240      C0
 2241 18a9 F20F1145 		movsd	%xmm0, -104(%rbp)
 2241      98
 656:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 2242              		.loc 1 656 0
 2243 18ae F20F1045 		movsd	-104(%rbp), %xmm0
 2243      98
 2244 18b3 F20F100D 		movsd	.LC4(%rip), %xmm1
 2244      00000000 
 2245 18bb F20F5EC1 		divsd	%xmm1, %xmm0
 2246 18bf F20F1145 		movsd	%xmm0, -104(%rbp)
 2246      98
 657:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 2247              		.loc 1 657 0
 2248 18c4 488B8538 		movq	-200(%rbp), %rax
 2248      FFFFFF
 2249 18cb 4885C0   		testq	%rax, %rax
 2250 18ce 780B     		js	.L143
 2251 18d0 660FEFC0 		pxor	%xmm0, %xmm0
 2252 18d4 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2252      C0
 2253 18d9 EB19     		jmp	.L144
 2254              	.L143:
 2255 18db 4889C2   		movq	%rax, %rdx
 2256 18de 48D1EA   		shrq	%rdx
 2257 18e1 83E001   		andl	$1, %eax
 2258 18e4 4809C2   		orq	%rax, %rdx
 2259 18e7 660FEFC0 		pxor	%xmm0, %xmm0
 2260 18eb F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 2260      C2
 2261 18f0 F20F58C0 		addsd	%xmm0, %xmm0
 2262              	.L144:
 2263 18f4 F20F1055 		movsd	-104(%rbp), %xmm2
 2263      98
 2264 18f9 F20F100D 		movsd	.LC32(%rip), %xmm1
 2264      00000000 
 2265 1901 F20F59CA 		mulsd	%xmm2, %xmm1
 2266 1905 F20F5EC1 		divsd	%xmm1, %xmm0
 2267 1909 F20F1145 		movsd	%xmm0, -96(%rbp)
 2267      A0
 658:main.c        **** 				#endif
 659:main.c        **** 				if ( enableBenchmarking ) {
 2268              		.loc 1 659 0
 2269 190e 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 2269      000000
 2270 1915 84C0     		testb	%al, %al
 2271 1917 744C     		je	.L145
 660:main.c        **** 					printf(
 661:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 662:main.c        **** 						length, calcChecksum(data, length), chan, speed);
 2272              		.loc 1 662 0
 2273 1919 488B9538 		movq	-200(%rbp), %rdx
 2273      FFFFFF
 2274 1920 488B8548 		movq	-184(%rbp), %rax
 2274      FFFFFF
 2275 1927 4889D6   		movq	%rdx, %rsi
 2276 192a 4889C7   		movq	%rax, %rdi
 2277 192d E80AECFF 		call	calcChecksum
 2277      FF
 660:main.c        **** 					printf(
 2278              		.loc 1 660 0
 2279 1932 0FB7D0   		movzwl	%ax, %edx
 2280 1935 488B8538 		movq	-200(%rbp), %rax
 2280      FFFFFF
 2281 193c 488B75A0 		movq	-96(%rbp), %rsi
 2282 1940 488B4D80 		movq	-128(%rbp), %rcx
 2283 1944 4889B5F0 		movq	%rsi, -272(%rbp)
 2283      FEFFFF
 2284 194b F20F1085 		movsd	-272(%rbp), %xmm0
 2284      F0FEFFFF 
 2285 1953 4889C6   		movq	%rax, %rsi
 2286 1956 BF000000 		movl	$.LC35, %edi
 2286      00
 2287 195b B8010000 		movl	$1, %eax
 2287      00
 2288 1960 E8000000 		call	printf
 2288      00
 2289              	.L145:
 663:main.c        **** 				}
 664:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2290              		.loc 1 664 0
 2291 1965 83BD24FF 		cmpl	$0, -220(%rbp)
 2291      FFFF00
 2292 196c 740F     		je	.L146
 2293              		.loc 1 664 0 is_stmt 0 discriminator 1
 2294 196e C78514FF 		movl	$1, -236(%rbp)
 2294      FFFF0100 
 2294      0000
 2295 1978 E96C0100 		jmp	.L84
 2295      00
 2296              	.L146:
 665:main.c        **** 				free(data);
 2297              		.loc 1 665 0 is_stmt 1
 2298 197d 488B8548 		movq	-184(%rbp), %rax
 2298      FFFFFF
 2299 1984 4889C7   		movq	%rax, %rdi
 2300 1987 E8000000 		call	free
 2300      00
 666:main.c        **** 				data = NULL;
 2301              		.loc 1 666 0
 2302 198c 48C78548 		movq	$0, -184(%rbp)
 2302      FFFFFF00 
 2302      000000
 2303              	.LBE10:
 667:main.c        **** 			} else {
 668:main.c        **** 				FAIL(FLP_ILL_CHAR, cleanup);
 669:main.c        **** 			}
 670:main.c        **** 			break;
 2304              		.loc 1 670 0
 2305 1997 E90C0100 		jmp	.L117
 2305      00
 2306              	.L137:
 668:main.c        **** 			}
 2307              		.loc 1 668 0
 2308 199c C78514FF 		movl	$5, -236(%rbp)
 2308      FFFF0500 
 2308      0000
 2309 19a6 90       		nop
 2310 19a7 E93D0100 		jmp	.L84
 2310      00
 2311              	.L90:
 2312              	.LBE8:
 2313              	.LBB11:
 671:main.c        **** 		}
 672:main.c        **** 		case '+':{
 673:main.c        **** 			uint32 conduit;
 674:main.c        **** 			char *end;
 675:main.c        **** 			ptr++;
 2314              		.loc 1 675 0
 2315 19ac 488B0500 		movq	ptr(%rip), %rax
 2315      000000
 2316 19b3 4883C001 		addq	$1, %rax
 2317 19b7 48890500 		movq	%rax, ptr(%rip)
 2317      000000
 676:main.c        **** 
 677:main.c        **** 			// Get the conduit
 678:main.c        **** 			errno = 0;
 2318              		.loc 1 678 0
 2319 19be E8000000 		call	__errno_location
 2319      00
 2320 19c3 C7000000 		movl	$0, (%rax)
 2320      0000
 679:main.c        **** 			conduit = (uint32)strtoul(ptr, &end, 16);
 2321              		.loc 1 679 0
 2322 19c9 488B0500 		movq	ptr(%rip), %rax
 2322      000000
 2323 19d0 488D8D40 		leaq	-192(%rbp), %rcx
 2323      FFFFFF
 2324 19d7 BA100000 		movl	$16, %edx
 2324      00
 2325 19dc 4889CE   		movq	%rcx, %rsi
 2326 19df 4889C7   		movq	%rax, %rdi
 2327 19e2 E8000000 		call	strtoul
 2327      00
 2328 19e7 89852CFF 		movl	%eax, -212(%rbp)
 2328      FFFF
 680:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 2329              		.loc 1 680 0
 2330 19ed E8000000 		call	__errno_location
 2330      00
 2331 19f2 8B00     		movl	(%rax), %eax
 2332 19f4 85C0     		testl	%eax, %eax
 2333 19f6 740F     		je	.L147
 2334              		.loc 1 680 0 is_stmt 0 discriminator 1
 2335 19f8 C78514FF 		movl	$2, -236(%rbp)
 2335      FFFF0200 
 2335      0000
 2336 1a02 E9E20000 		jmp	.L84
 2336      00
 2337              	.L147:
 681:main.c        **** 
 682:main.c        **** 			// Ensure that it's 0-127
 683:main.c        **** 			CHECK_STATUS(conduit > 255, FLP_CONDUIT_RANGE, cleanup);
 2338              		.loc 1 683 0 is_stmt 1
 2339 1a07 81BD2CFF 		cmpl	$255, -212(%rbp)
 2339      FFFFFF00 
 2339      0000
 2340 1a11 760F     		jbe	.L149
 2341              		.loc 1 683 0 is_stmt 0 discriminator 1
 2342 1a13 C78514FF 		movl	$4, -236(%rbp)
 2342      FFFF0400 
 2342      0000
 2343 1a1d E9C70000 		jmp	.L84
 2343      00
 2344              	.L149:
 684:main.c        **** 			ptr = end;
 2345              		.loc 1 684 0 is_stmt 1
 2346 1a22 488B8540 		movq	-192(%rbp), %rax
 2346      FFFFFF
 2347 1a29 48890500 		movq	%rax, ptr(%rip)
 2347      000000
 685:main.c        **** 
 686:main.c        **** 			// Only two valid chars at this point:
 687:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';', FLP_ILL_CHAR, cleanup);
 2348              		.loc 1 687 0
 2349 1a30 488B0500 		movq	ptr(%rip), %rax
 2349      000000
 2350 1a37 0FB600   		movzbl	(%rax), %eax
 2351 1a3a 84C0     		testb	%al, %al
 2352 1a3c 741D     		je	.L150
 2353              		.loc 1 687 0 is_stmt 0 discriminator 1
 2354 1a3e 488B0500 		movq	ptr(%rip), %rax
 2354      000000
 2355 1a45 0FB600   		movzbl	(%rax), %eax
 2356 1a48 3C3B     		cmpb	$59, %al
 2357 1a4a 740F     		je	.L150
 2358              		.loc 1 687 0 discriminator 2
 2359 1a4c C78514FF 		movl	$5, -236(%rbp)
 2359      FFFF0500 
 2359      0000
 2360 1a56 E98E0000 		jmp	.L84
 2360      00
 2361              	.L150:
 688:main.c        **** 
 689:main.c        **** 			fStatus = flSelectConduit(handle, (uint8)conduit, error);
 2362              		.loc 1 689 0 is_stmt 1
 2363 1a5b 8B852CFF 		movl	-212(%rbp), %eax
 2363      FFFF
 2364 1a61 0FB6C8   		movzbl	%al, %ecx
 2365 1a64 488B95F8 		movq	-264(%rbp), %rdx
 2365      FEFFFF
 2366 1a6b 488B8508 		movq	-248(%rbp), %rax
 2366      FFFFFF
 2367 1a72 89CE     		movl	%ecx, %esi
 2368 1a74 4889C7   		movq	%rax, %rdi
 2369 1a77 E8000000 		call	flSelectConduit
 2369      00
 2370 1a7c 898524FF 		movl	%eax, -220(%rbp)
 2370      FFFF
 690:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2371              		.loc 1 690 0
 2372 1a82 83BD24FF 		cmpl	$0, -220(%rbp)
 2372      FFFF00
 2373 1a89 741C     		je	.L162
 2374              		.loc 1 690 0 is_stmt 0 discriminator 1
 2375 1a8b C78514FF 		movl	$1, -236(%rbp)
 2375      FFFF0100 
 2375      0000
 2376 1a95 90       		nop
 2377 1a96 EB51     		jmp	.L84
 2378              	.L160:
 2379              	.LBE11:
 691:main.c        **** 			break;
 692:main.c        **** 		}
 693:main.c        **** 		default:
 694:main.c        **** 			FAIL(FLP_ILL_CHAR, cleanup);
 2380              		.loc 1 694 0 is_stmt 1
 2381 1a98 C78514FF 		movl	$5, -236(%rbp)
 2381      FFFF0500 
 2381      0000
 2382 1aa2 EB45     		jmp	.L84
 2383              	.L161:
 2384              	.LBB12:
 546:main.c        **** 		}
 2385              		.loc 1 546 0
 2386 1aa4 90       		nop
 2387 1aa5 EB01     		jmp	.L117
 2388              	.L162:
 2389              	.LBE12:
 2390              	.LBB13:
 691:main.c        **** 			break;
 2391              		.loc 1 691 0
 2392 1aa7 90       		nop
 2393              	.L117:
 2394              	.LBE13:
 695:main.c        **** 		}
 696:main.c        **** 	} while ( *ptr == ';' );
 2395              		.loc 1 696 0
 2396 1aa8 488B0500 		movq	ptr(%rip), %rax
 2396      000000
 2397 1aaf 0FB600   		movzbl	(%rax), %eax
 2398 1ab2 3C3B     		cmpb	$59, %al
 2399 1ab4 0F8460F1 		je	.L85
 2399      FFFF
 697:main.c        **** 	CHECK_STATUS(*ptr != '\0', FLP_ILL_CHAR, cleanup);
 2400              		.loc 1 697 0
 2401 1aba 488B0500 		movq	ptr(%rip), %rax
 2401      000000
 2402 1ac1 0FB600   		movzbl	(%rax), %eax
 2403 1ac4 84C0     		testb	%al, %al
 2404 1ac6 740C     		je	.L153
 2405              		.loc 1 697 0 is_stmt 0 discriminator 1
 2406 1ac8 C78514FF 		movl	$5, -236(%rbp)
 2406      FFFF0500 
 2406      0000
 2407 1ad2 EB15     		jmp	.L84
 2408              	.L153:
 698:main.c        **** 
 699:main.c        **** 	dump(0x00000000, dataFromFPGA.data, dataFromFPGA.length);
 2409              		.loc 1 699 0 is_stmt 1
 2410 1ad4 488B55D8 		movq	-40(%rbp), %rdx
 2411 1ad8 488B45D0 		movq	-48(%rbp), %rax
 2412 1adc 4889C6   		movq	%rax, %rsi
 2413 1adf BF000000 		movl	$0, %edi
 2413      00
 2414 1ae4 E8000000 		call	dump
 2414      00
 2415              	.L84:
 700:main.c        **** 
 701:main.c        **** cleanup:
 702:main.c        **** 	bufDestroy(&dataFromFPGA);
 2416              		.loc 1 702 0
 2417 1ae9 488D45D0 		leaq	-48(%rbp), %rax
 2418 1aed 4889C7   		movq	%rax, %rdi
 2419 1af0 E8000000 		call	bufDestroy
 2419      00
 703:main.c        **** 	if ( file ) {
 2420              		.loc 1 703 0
 2421 1af5 4883BD58 		cmpq	$0, -168(%rbp)
 2421      FFFFFF00 
 2422 1afd 740F     		je	.L154
 704:main.c        **** 		fclose(file);
 2423              		.loc 1 704 0
 2424 1aff 488B8558 		movq	-168(%rbp), %rax
 2424      FFFFFF
 2425 1b06 4889C7   		movq	%rax, %rdi
 2426 1b09 E8000000 		call	fclose
 2426      00
 2427              	.L154:
 705:main.c        **** 	}
 706:main.c        **** 	free(fileName);
 2428              		.loc 1 706 0
 2429 1b0e 488B8550 		movq	-176(%rbp), %rax
 2429      FFFFFF
 2430 1b15 4889C7   		movq	%rax, %rdi
 2431 1b18 E8000000 		call	free
 2431      00
 707:main.c        **** 	free(data);
 2432              		.loc 1 707 0
 2433 1b1d 488B8548 		movq	-184(%rbp), %rax
 2433      FFFFFF
 2434 1b24 4889C7   		movq	%rax, %rdi
 2435 1b27 E8000000 		call	free
 2435      00
 708:main.c        **** 	if ( retVal > FLP_LIBERR ) {
 2436              		.loc 1 708 0
 2437 1b2c 83BD14FF 		cmpl	$1, -236(%rbp)
 2437      FFFF01
 2438 1b33 0F86A700 		jbe	.L155
 2438      0000
 2439              	.LBB14:
 709:main.c        **** 		const int column = (int)(ptr - line);
 2440              		.loc 1 709 0
 2441 1b39 488B0500 		movq	ptr(%rip), %rax
 2441      000000
 2442 1b40 4889C2   		movq	%rax, %rdx
 2443 1b43 488B8500 		movq	-256(%rbp), %rax
 2443      FFFFFF
 2444 1b4a 4829C2   		subq	%rax, %rdx
 2445 1b4d 4889D0   		movq	%rdx, %rax
 2446 1b50 898534FF 		movl	%eax, -204(%rbp)
 2446      FFFF
 710:main.c        **** 		int i;
 711:main.c        **** 		fprintf(stderr, "%s at column %d\n  %s\n  ", errMessages[retVal], column, line);
 2447              		.loc 1 711 0
 2448 1b56 8B8514FF 		movl	-236(%rbp), %eax
 2448      FFFF
 2449 1b5c 488B14C5 		movq	errMessages(,%rax,8), %rdx
 2449      00000000 
 2450 1b64 488B0500 		movq	stderr(%rip), %rax
 2450      000000
 2451 1b6b 488BB500 		movq	-256(%rbp), %rsi
 2451      FFFFFF
 2452 1b72 8B8D34FF 		movl	-204(%rbp), %ecx
 2452      FFFF
 2453 1b78 4989F0   		movq	%rsi, %r8
 2454 1b7b BE000000 		movl	$.LC36, %esi
 2454      00
 2455 1b80 4889C7   		movq	%rax, %rdi
 2456 1b83 B8000000 		movl	$0, %eax
 2456      00
 2457 1b88 E8000000 		call	fprintf
 2457      00
 712:main.c        **** 		for ( i = 0; i < column; i++ ) {
 2458              		.loc 1 712 0
 2459 1b8d C7851CFF 		movl	$0, -228(%rbp)
 2459      FFFF0000 
 2459      0000
 2460 1b97 EB1B     		jmp	.L156
 2461              	.L157:
 713:main.c        **** 			fprintf(stderr, " ");
 2462              		.loc 1 713 0 discriminator 3
 2463 1b99 488B0500 		movq	stderr(%rip), %rax
 2463      000000
 2464 1ba0 4889C6   		movq	%rax, %rsi
 2465 1ba3 BF200000 		movl	$32, %edi
 2465      00
 2466 1ba8 E8000000 		call	fputc
 2466      00
 712:main.c        **** 		for ( i = 0; i < column; i++ ) {
 2467              		.loc 1 712 0 discriminator 3
 2468 1bad 83851CFF 		addl	$1, -228(%rbp)
 2468      FFFF01
 2469              	.L156:
 712:main.c        **** 		for ( i = 0; i < column; i++ ) {
 2470              		.loc 1 712 0 is_stmt 0 discriminator 1
 2471 1bb4 8B851CFF 		movl	-228(%rbp), %eax
 2471      FFFF
 2472 1bba 3B8534FF 		cmpl	-204(%rbp), %eax
 2472      FFFF
 2473 1bc0 7CD7     		jl	.L157
 714:main.c        **** 		}
 715:main.c        **** 		fprintf(stderr, "^\n");
 2474              		.loc 1 715 0 is_stmt 1
 2475 1bc2 488B0500 		movq	stderr(%rip), %rax
 2475      000000
 2476 1bc9 4889C1   		movq	%rax, %rcx
 2477 1bcc BA020000 		movl	$2, %edx
 2477      00
 2478 1bd1 BE010000 		movl	$1, %esi
 2478      00
 2479 1bd6 BF000000 		movl	$.LC37, %edi
 2479      00
 2480 1bdb E8000000 		call	fwrite
 2480      00
 2481              	.L155:
 2482              	.LBE14:
 716:main.c        **** 	}
 717:main.c        **** 	return retVal;
 2483              		.loc 1 717 0
 2484 1be0 8B8514FF 		movl	-236(%rbp), %eax
 2484      FFFF
 718:main.c        **** }
 2485              		.loc 1 718 0
 2486 1be6 488B4DF8 		movq	-8(%rbp), %rcx
 2487 1bea 6448330C 		xorq	%fs:40, %rcx
 2487      25280000 
 2487      00
 2488 1bf3 7405     		je	.L159
 2489 1bf5 E8000000 		call	__stack_chk_fail
 2489      00
 2490              	.L159:
 2491 1bfa C9       		leave
 2492              		.cfi_def_cfa 7, 8
 2493 1bfb C3       		ret
 2494              		.cfi_endproc
 2495              	.LFE16:
 2497              		.section	.rodata
 2498              	.LC38:
 2499 0339 30303030 		.string	"0000"
 2499      00
 2500              	.LC39:
 2501 033e 30303031 		.string	"0001"
 2501      00
 2502              	.LC40:
 2503 0343 30303130 		.string	"0010"
 2503      00
 2504              	.LC41:
 2505 0348 30303131 		.string	"0011"
 2505      00
 2506              	.LC42:
 2507 034d 30313030 		.string	"0100"
 2507      00
 2508              	.LC43:
 2509 0352 30313031 		.string	"0101"
 2509      00
 2510              	.LC44:
 2511 0357 30313130 		.string	"0110"
 2511      00
 2512              	.LC45:
 2513 035c 30313131 		.string	"0111"
 2513      00
 2514              	.LC46:
 2515 0361 31303030 		.string	"1000"
 2515      00
 2516              	.LC47:
 2517 0366 31303031 		.string	"1001"
 2517      00
 2518              	.LC48:
 2519 036b 58585858 		.string	"XXXX"
 2519      00
 2520              	.LC49:
 2521 0370 31303130 		.string	"1010"
 2521      00
 2522              	.LC50:
 2523 0375 31303131 		.string	"1011"
 2523      00
 2524              	.LC51:
 2525 037a 31313030 		.string	"1100"
 2525      00
 2526              	.LC52:
 2527 037f 31313031 		.string	"1101"
 2527      00
 2528              	.LC53:
 2529 0384 31313130 		.string	"1110"
 2529      00
 2530              	.LC54:
 2531 0389 31313131 		.string	"1111"
 2531      00
 2532              		.data
 2533              		.align 32
 2536              	nibbles:
 2537 0020 00000000 		.quad	.LC38
 2537      00000000 
 2538 0028 00000000 		.quad	.LC39
 2538      00000000 
 2539 0030 00000000 		.quad	.LC40
 2539      00000000 
 2540 0038 00000000 		.quad	.LC41
 2540      00000000 
 2541 0040 00000000 		.quad	.LC42
 2541      00000000 
 2542 0048 00000000 		.quad	.LC43
 2542      00000000 
 2543 0050 00000000 		.quad	.LC44
 2543      00000000 
 2544 0058 00000000 		.quad	.LC45
 2544      00000000 
 2545 0060 00000000 		.quad	.LC46
 2545      00000000 
 2546 0068 00000000 		.quad	.LC47
 2546      00000000 
 2547 0070 00000000 		.quad	.LC48
 2547      00000000 
 2548 0078 00000000 		.quad	.LC48
 2548      00000000 
 2549 0080 00000000 		.quad	.LC48
 2549      00000000 
 2550 0088 00000000 		.quad	.LC48
 2550      00000000 
 2551 0090 00000000 		.quad	.LC48
 2551      00000000 
 2552 0098 00000000 		.quad	.LC48
 2552      00000000 
 2553 00a0 00000000 		.quad	.LC48
 2553      00000000 
 2554 00a8 00000000 		.quad	.LC49
 2554      00000000 
 2555 00b0 00000000 		.quad	.LC50
 2555      00000000 
 2556 00b8 00000000 		.quad	.LC51
 2556      00000000 
 2557 00c0 00000000 		.quad	.LC52
 2557      00000000 
 2558 00c8 00000000 		.quad	.LC53
 2558      00000000 
 2559 00d0 00000000 		.quad	.LC54
 2559      00000000 
 2560              		.section	.rodata
 2561              	.LC55:
 2562 038e 474F5420 		.string	"GOT INTO FUNNCTION%s"
 2562      494E544F 
 2562      2046554E 
 2562      4E435449 
 2562      4F4E2573 
 2563              	.LC56:
 2564 03a3 7200     		.string	"r"
 2565              		.text
 2566              		.globl	read_table
 2568              	read_table:
 2569              	.LFB17:
 719:main.c        **** 
 720:main.c        **** static const char *nibbles[] = {
 721:main.c        **** 	"0000",  // '0'
 722:main.c        **** 	"0001",  // '1'
 723:main.c        **** 	"0010",  // '2'
 724:main.c        **** 	"0011",  // '3'
 725:main.c        **** 	"0100",  // '4'
 726:main.c        **** 	"0101",  // '5'
 727:main.c        **** 	"0110",  // '6'
 728:main.c        **** 	"0111",  // '7'
 729:main.c        **** 	"1000",  // '8'
 730:main.c        **** 	"1001",  // '9'
 731:main.c        **** 
 732:main.c        **** 	"XXXX",  // ':'
 733:main.c        **** 	"XXXX",  // ';'
 734:main.c        **** 	"XXXX",  // '<'
 735:main.c        **** 	"XXXX",  // '='
 736:main.c        **** 	"XXXX",  // '>'
 737:main.c        **** 	"XXXX",  // '?'
 738:main.c        **** 	"XXXX",  // '@'
 739:main.c        **** 
 740:main.c        **** 	"1010",  // 'A'
 741:main.c        **** 	"1011",  // 'B'
 742:main.c        **** 	"1100",  // 'C'
 743:main.c        **** 	"1101",  // 'D'
 744:main.c        **** 	"1110",  // 'E'
 745:main.c        **** 	"1111"   // 'F'
 746:main.c        **** };
 747:main.c        **** 
 748:main.c        **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 749:main.c        **** // Our own function declarations 
 750:main.c        **** 
 751:main.c        **** 
 752:main.c        **** 
 753:main.c        **** int read_table(const char * addr, int table[][5]) {
 2570              		.loc 1 753 0
 2571              		.cfi_startproc
 2572 1bfc 55       		pushq	%rbp
 2573              		.cfi_def_cfa_offset 16
 2574              		.cfi_offset 6, -16
 2575 1bfd 4889E5   		movq	%rsp, %rbp
 2576              		.cfi_def_cfa_register 6
 2577 1c00 4883EC30 		subq	$48, %rsp
 2578 1c04 48897DD8 		movq	%rdi, -40(%rbp)
 2579 1c08 488975D0 		movq	%rsi, -48(%rbp)
 754:main.c        ****         printf("GOT INTO FUNNCTION%s", addr);
 2580              		.loc 1 754 0
 2581 1c0c 488B45D8 		movq	-40(%rbp), %rax
 2582 1c10 4889C6   		movq	%rax, %rsi
 2583 1c13 BF000000 		movl	$.LC55, %edi
 2583      00
 2584 1c18 B8000000 		movl	$0, %eax
 2584      00
 2585 1c1d E8000000 		call	printf
 2585      00
 755:main.c        ****         FILE *file;
 756:main.c        ****         file=fopen( addr , "r" );
 2586              		.loc 1 756 0
 2587 1c22 488B45D8 		movq	-40(%rbp), %rax
 2588 1c26 BE000000 		movl	$.LC56, %esi
 2588      00
 2589 1c2b 4889C7   		movq	%rax, %rdi
 2590 1c2e E8000000 		call	fopen
 2590      00
 2591 1c33 488945F8 		movq	%rax, -8(%rbp)
 757:main.c        ****         char c;
 758:main.c        ****         int i=0,j=0;
 2592              		.loc 1 758 0
 2593 1c37 C745EC00 		movl	$0, -20(%rbp)
 2593      000000
 2594 1c3e C745F000 		movl	$0, -16(%rbp)
 2594      000000
 759:main.c        ****         int nl;
 760:main.c        ****         if(file){
 2595              		.loc 1 760 0
 2596 1c45 48837DF8 		cmpq	$0, -8(%rbp)
 2596      00
 2597 1c4a 0F848700 		je	.L164
 2597      0000
 761:main.c        ****                 while( ( c=getc(file))!=EOF){
 2598              		.loc 1 761 0
 2599 1c50 EB64     		jmp	.L165
 2600              	.L169:
 762:main.c        ****                         if(c == ' ' || c==',') continue;
 2601              		.loc 1 762 0
 2602 1c52 807DEB20 		cmpb	$32, -21(%rbp)
 2603 1c56 745E     		je	.L165
 2604              		.loc 1 762 0 is_stmt 0 discriminator 2
 2605 1c58 807DEB2C 		cmpb	$44, -21(%rbp)
 2606 1c5c 7502     		jne	.L167
 2607              		.loc 1 762 0 discriminator 3
 2608 1c5e EB56     		jmp	.L165
 2609              	.L167:
 763:main.c        ****                         else if( c >= '0' && c <= '9') { table[i][j]=c-48;  j++;  nl=i; }
 2610              		.loc 1 763 0 is_stmt 1
 2611 1c60 807DEB2F 		cmpb	$47, -21(%rbp)
 2612 1c64 7E3F     		jle	.L168
 2613              		.loc 1 763 0 is_stmt 0 discriminator 1
 2614 1c66 807DEB39 		cmpb	$57, -21(%rbp)
 2615 1c6a 7F39     		jg	.L168
 2616              		.loc 1 763 0 discriminator 2
 2617 1c6c 8B45EC   		movl	-20(%rbp), %eax
 2618 1c6f 4863D0   		movslq	%eax, %rdx
 2619 1c72 4889D0   		movq	%rdx, %rax
 2620 1c75 48C1E002 		salq	$2, %rax
 2621 1c79 4801D0   		addq	%rdx, %rax
 2622 1c7c 48C1E002 		salq	$2, %rax
 2623 1c80 4889C2   		movq	%rax, %rdx
 2624 1c83 488B45D0 		movq	-48(%rbp), %rax
 2625 1c87 4801C2   		addq	%rax, %rdx
 2626 1c8a 0FBE45EB 		movsbl	-21(%rbp), %eax
 2627 1c8e 8D48D0   		leal	-48(%rax), %ecx
 2628 1c91 8B45F0   		movl	-16(%rbp), %eax
 2629 1c94 4898     		cltq
 2630 1c96 890C82   		movl	%ecx, (%rdx,%rax,4)
 2631 1c99 8345F001 		addl	$1, -16(%rbp)
 2632 1c9d 8B45EC   		movl	-20(%rbp), %eax
 2633 1ca0 8945F4   		movl	%eax, -12(%rbp)
 2634 1ca3 EB11     		jmp	.L165
 2635              	.L168:
 764:main.c        ****                         else if ( c == '\n' ) { i++; j=0; }
 2636              		.loc 1 764 0 is_stmt 1
 2637 1ca5 807DEB0A 		cmpb	$10, -21(%rbp)
 2638 1ca9 750B     		jne	.L165
 2639              		.loc 1 764 0 is_stmt 0 discriminator 1
 2640 1cab 8345EC01 		addl	$1, -20(%rbp)
 2641 1caf C745F000 		movl	$0, -16(%rbp)
 2641      000000
 2642              	.L165:
 761:main.c        ****                         if(c == ' ' || c==',') continue;
 2643              		.loc 1 761 0 is_stmt 1
 2644 1cb6 488B45F8 		movq	-8(%rbp), %rax
 2645 1cba 4889C7   		movq	%rax, %rdi
 2646 1cbd E8000000 		call	_IO_getc
 2646      00
 2647 1cc2 8845EB   		movb	%al, -21(%rbp)
 2648 1cc5 807DEBFF 		cmpb	$-1, -21(%rbp)
 2649 1cc9 7587     		jne	.L169
 765:main.c        ****                 }
 766:main.c        ****                 fclose(file);
 2650              		.loc 1 766 0
 2651 1ccb 488B45F8 		movq	-8(%rbp), %rax
 2652 1ccf 4889C7   		movq	%rax, %rdi
 2653 1cd2 E8000000 		call	fclose
 2653      00
 2654              	.L164:
 767:main.c        ****         }
 768:main.c        ****         return nl+1;
 2655              		.loc 1 768 0
 2656 1cd7 8B45F4   		movl	-12(%rbp), %eax
 2657 1cda 83C001   		addl	$1, %eax
 769:main.c        **** }
 2658              		.loc 1 769 0
 2659 1cdd C9       		leave
 2660              		.cfi_def_cfa 7, 8
 2661 1cde C3       		ret
 2662              		.cfi_endproc
 2663              	.LFE17:
 2665              		.globl	mm
 2666              		.section	.rodata
 2667              	.LC57:
 2668 03a5 30313233 		.string	"0123456789abcdef"
 2668      34353637 
 2668      38396162 
 2668      63646566 
 2668      00
 2669              		.data
 2670              		.align 8
 2673              	mm:
 2674 00d8 00000000 		.quad	.LC57
 2674      00000000 
 2675              		.text
 2676              		.globl	boolToHex
 2678              	boolToHex:
 2679              	.LFB18:
 770:main.c        **** char * mm= "0123456789abcdef";
 771:main.c        **** char* boolToHex(char* input) // modify bool to hex , correct it 
 772:main.c        **** {
 2680              		.loc 1 772 0
 2681              		.cfi_startproc
 2682 1cdf 55       		pushq	%rbp
 2683              		.cfi_def_cfa_offset 16
 2684              		.cfi_offset 6, -16
 2685 1ce0 4889E5   		movq	%rsp, %rbp
 2686              		.cfi_def_cfa_register 6
 2687 1ce3 4883EC30 		subq	$48, %rsp
 2688 1ce7 48897DD8 		movq	%rdi, -40(%rbp)
 773:main.c        ****     char * ans=malloc(9); 
 2689              		.loc 1 773 0
 2690 1ceb BF090000 		movl	$9, %edi
 2690      00
 2691 1cf0 E8000000 		call	malloc
 2691      00
 2692 1cf5 488945F8 		movq	%rax, -8(%rbp)
 774:main.c        ****     int var=(input[0]=='1'); 
 2693              		.loc 1 774 0
 2694 1cf9 488B45D8 		movq	-40(%rbp), %rax
 2695 1cfd 0FB600   		movzbl	(%rax), %eax
 2696 1d00 3C31     		cmpb	$49, %al
 2697 1d02 0F94C0   		sete	%al
 2698 1d05 0FB6C0   		movzbl	%al, %eax
 2699 1d08 8945EC   		movl	%eax, -20(%rbp)
 2700              	.LBB15:
 775:main.c        ****     for(int i=1;i<32;i++){
 2701              		.loc 1 775 0
 2702 1d0b C745F001 		movl	$1, -16(%rbp)
 2702      000000
 2703 1d12 E98A0000 		jmp	.L172
 2703      00
 2704              	.L175:
 776:main.c        ****         if(i%4==0){
 2705              		.loc 1 776 0
 2706 1d17 8B45F0   		movl	-16(%rbp), %eax
 2707 1d1a 83E003   		andl	$3, %eax
 2708 1d1d 85C0     		testl	%eax, %eax
 2709 1d1f 754C     		jne	.L173
 777:main.c        ****             ans[i/4-1]=mm[var]; 
 2710              		.loc 1 777 0
 2711 1d21 8B45F0   		movl	-16(%rbp), %eax
 2712 1d24 8D5003   		leal	3(%rax), %edx
 2713 1d27 85C0     		testl	%eax, %eax
 2714 1d29 0F48C2   		cmovs	%edx, %eax
 2715 1d2c C1F802   		sarl	$2, %eax
 2716 1d2f 4898     		cltq
 2717 1d31 488D50FF 		leaq	-1(%rax), %rdx
 2718 1d35 488B45F8 		movq	-8(%rbp), %rax
 2719 1d39 4801C2   		addq	%rax, %rdx
 2720 1d3c 488B0D00 		movq	mm(%rip), %rcx
 2720      000000
 2721 1d43 8B45EC   		movl	-20(%rbp), %eax
 2722 1d46 4898     		cltq
 2723 1d48 4801C8   		addq	%rcx, %rax
 2724 1d4b 0FB600   		movzbl	(%rax), %eax
 2725 1d4e 8802     		movb	%al, (%rdx)
 778:main.c        ****             var=(input[i]=='1'); 
 2726              		.loc 1 778 0
 2727 1d50 8B45F0   		movl	-16(%rbp), %eax
 2728 1d53 4863D0   		movslq	%eax, %rdx
 2729 1d56 488B45D8 		movq	-40(%rbp), %rax
 2730 1d5a 4801D0   		addq	%rdx, %rax
 2731 1d5d 0FB600   		movzbl	(%rax), %eax
 2732 1d60 3C31     		cmpb	$49, %al
 2733 1d62 0F94C0   		sete	%al
 2734 1d65 0FB6C0   		movzbl	%al, %eax
 2735 1d68 8945EC   		movl	%eax, -20(%rbp)
 2736 1d6b EB30     		jmp	.L174
 2737              	.L173:
 779:main.c        ****         }
 780:main.c        ****         else {
 781:main.c        ****             if(input[i]=='1'){
 2738              		.loc 1 781 0
 2739 1d6d 8B45F0   		movl	-16(%rbp), %eax
 2740 1d70 4863D0   		movslq	%eax, %rdx
 2741 1d73 488B45D8 		movq	-40(%rbp), %rax
 2742 1d77 4801D0   		addq	%rdx, %rax
 2743 1d7a 0FB600   		movzbl	(%rax), %eax
 2744 1d7d 3C31     		cmpb	$49, %al
 2745 1d7f 751C     		jne	.L174
 782:main.c        ****                 var+=(1<<(i%4)); 
 2746              		.loc 1 782 0
 2747 1d81 8B45F0   		movl	-16(%rbp), %eax
 2748 1d84 99       		cltd
 2749 1d85 C1EA1E   		shrl	$30, %edx
 2750 1d88 01D0     		addl	%edx, %eax
 2751 1d8a 83E003   		andl	$3, %eax
 2752 1d8d 29D0     		subl	%edx, %eax
 2753 1d8f BA010000 		movl	$1, %edx
 2753      00
 2754 1d94 89C1     		movl	%eax, %ecx
 2755 1d96 D3E2     		sall	%cl, %edx
 2756 1d98 89D0     		movl	%edx, %eax
 2757 1d9a 0145EC   		addl	%eax, -20(%rbp)
 2758              	.L174:
 775:main.c        ****         if(i%4==0){
 2759              		.loc 1 775 0 discriminator 2
 2760 1d9d 8345F001 		addl	$1, -16(%rbp)
 2761              	.L172:
 775:main.c        ****         if(i%4==0){
 2762              		.loc 1 775 0 is_stmt 0 discriminator 1
 2763 1da1 837DF01F 		cmpl	$31, -16(%rbp)
 2764 1da5 0F8E6CFF 		jle	.L175
 2764      FFFF
 2765              	.LBE15:
 783:main.c        ****             }
 784:main.c        ****         }
 785:main.c        ****     }
 786:main.c        ****     ans[7]=mm[var]; 
 2766              		.loc 1 786 0 is_stmt 1
 2767 1dab 488B45F8 		movq	-8(%rbp), %rax
 2768 1daf 488D5007 		leaq	7(%rax), %rdx
 2769 1db3 488B0D00 		movq	mm(%rip), %rcx
 2769      000000
 2770 1dba 8B45EC   		movl	-20(%rbp), %eax
 2771 1dbd 4898     		cltq
 2772 1dbf 4801C8   		addq	%rcx, %rax
 2773 1dc2 0FB600   		movzbl	(%rax), %eax
 2774 1dc5 8802     		movb	%al, (%rdx)
 2775              	.LBB16:
 787:main.c        **** 	for(int i=0;i<4;i++){
 2776              		.loc 1 787 0
 2777 1dc7 C745F400 		movl	$0, -12(%rbp)
 2777      000000
 2778 1dce EB57     		jmp	.L176
 2779              	.L177:
 2780              	.LBB17:
 788:main.c        **** 			char temp=ans[2*i]; 
 2781              		.loc 1 788 0 discriminator 3
 2782 1dd0 8B45F4   		movl	-12(%rbp), %eax
 2783 1dd3 01C0     		addl	%eax, %eax
 2784 1dd5 4863D0   		movslq	%eax, %rdx
 2785 1dd8 488B45F8 		movq	-8(%rbp), %rax
 2786 1ddc 4801D0   		addq	%rdx, %rax
 2787 1ddf 0FB600   		movzbl	(%rax), %eax
 2788 1de2 8845EB   		movb	%al, -21(%rbp)
 789:main.c        **** 			ans[2*i] =ans[2*i+1]; 
 2789              		.loc 1 789 0 discriminator 3
 2790 1de5 8B45F4   		movl	-12(%rbp), %eax
 2791 1de8 01C0     		addl	%eax, %eax
 2792 1dea 4863D0   		movslq	%eax, %rdx
 2793 1ded 488B45F8 		movq	-8(%rbp), %rax
 2794 1df1 4801C2   		addq	%rax, %rdx
 2795 1df4 8B45F4   		movl	-12(%rbp), %eax
 2796 1df7 01C0     		addl	%eax, %eax
 2797 1df9 4898     		cltq
 2798 1dfb 488D4801 		leaq	1(%rax), %rcx
 2799 1dff 488B45F8 		movq	-8(%rbp), %rax
 2800 1e03 4801C8   		addq	%rcx, %rax
 2801 1e06 0FB600   		movzbl	(%rax), %eax
 2802 1e09 8802     		movb	%al, (%rdx)
 790:main.c        **** 			ans[2*i+1]=temp; 
 2803              		.loc 1 790 0 discriminator 3
 2804 1e0b 8B45F4   		movl	-12(%rbp), %eax
 2805 1e0e 01C0     		addl	%eax, %eax
 2806 1e10 4898     		cltq
 2807 1e12 488D5001 		leaq	1(%rax), %rdx
 2808 1e16 488B45F8 		movq	-8(%rbp), %rax
 2809 1e1a 4801C2   		addq	%rax, %rdx
 2810 1e1d 0FB645EB 		movzbl	-21(%rbp), %eax
 2811 1e21 8802     		movb	%al, (%rdx)
 2812              	.LBE17:
 787:main.c        **** 			char temp=ans[2*i]; 
 2813              		.loc 1 787 0 discriminator 3
 2814 1e23 8345F401 		addl	$1, -12(%rbp)
 2815              	.L176:
 787:main.c        **** 			char temp=ans[2*i]; 
 2816              		.loc 1 787 0 is_stmt 0 discriminator 1
 2817 1e27 837DF403 		cmpl	$3, -12(%rbp)
 2818 1e2b 7EA3     		jle	.L177
 2819              	.LBE16:
 791:main.c        **** 	}
 792:main.c        ****     ans[8]='\0'; 
 2820              		.loc 1 792 0 is_stmt 1
 2821 1e2d 488B45F8 		movq	-8(%rbp), %rax
 2822 1e31 4883C008 		addq	$8, %rax
 2823 1e35 C60000   		movb	$0, (%rax)
 793:main.c        ****     return ans; 
 2824              		.loc 1 793 0
 2825 1e38 488B45F8 		movq	-8(%rbp), %rax
 794:main.c        **** }
 2826              		.loc 1 794 0
 2827 1e3c C9       		leave
 2828              		.cfi_def_cfa 7, 8
 2829 1e3d C3       		ret
 2830              		.cfi_endproc
 2831              	.LFE18:
 2833              		.section	.rodata
 2834              	.LC58:
 2835 03b6 25642020 		.string	"%d                       %d\n"
 2835      20202020 
 2835      20202020 
 2835      20202020 
 2835      20202020 
 2836              		.text
 2837              		.globl	get_coordinate
 2839              	get_coordinate:
 2840              	.LFB19:
 795:main.c        **** 
 796:main.c        **** void get_coordinate(const char * xy, int *x , int *y){
 2841              		.loc 1 796 0
 2842              		.cfi_startproc
 2843 1e3e 55       		pushq	%rbp
 2844              		.cfi_def_cfa_offset 16
 2845              		.cfi_offset 6, -16
 2846 1e3f 4889E5   		movq	%rsp, %rbp
 2847              		.cfi_def_cfa_register 6
 2848 1e42 4883EC30 		subq	$48, %rsp
 2849 1e46 48897DE8 		movq	%rdi, -24(%rbp)
 2850 1e4a 488975E0 		movq	%rsi, -32(%rbp)
 2851 1e4e 488955D8 		movq	%rdx, -40(%rbp)
 797:main.c        ****         *x=0; *y=0; 
 2852              		.loc 1 797 0
 2853 1e52 488B45E0 		movq	-32(%rbp), %rax
 2854 1e56 C7000000 		movl	$0, (%rax)
 2854      0000
 2855 1e5c 488B45D8 		movq	-40(%rbp), %rax
 2856 1e60 C7000000 		movl	$0, (%rax)
 2856      0000
 2857              	.LBB18:
 798:main.c        **** 		for(int i=0;i<4;i++){
 2858              		.loc 1 798 0
 2859 1e66 C745F800 		movl	$0, -8(%rbp)
 2859      000000
 2860 1e6d EB34     		jmp	.L180
 2861              	.L182:
 799:main.c        **** 				if(xy[i]=='1') { *x+=(1<<i); }
 2862              		.loc 1 799 0
 2863 1e6f 8B45F8   		movl	-8(%rbp), %eax
 2864 1e72 4863D0   		movslq	%eax, %rdx
 2865 1e75 488B45E8 		movq	-24(%rbp), %rax
 2866 1e79 4801D0   		addq	%rdx, %rax
 2867 1e7c 0FB600   		movzbl	(%rax), %eax
 2868 1e7f 3C31     		cmpb	$49, %al
 2869 1e81 751C     		jne	.L181
 2870              		.loc 1 799 0 is_stmt 0 discriminator 1
 2871 1e83 488B45E0 		movq	-32(%rbp), %rax
 2872 1e87 8B10     		movl	(%rax), %edx
 2873 1e89 8B45F8   		movl	-8(%rbp), %eax
 2874 1e8c BE010000 		movl	$1, %esi
 2874      00
 2875 1e91 89C1     		movl	%eax, %ecx
 2876 1e93 D3E6     		sall	%cl, %esi
 2877 1e95 89F0     		movl	%esi, %eax
 2878 1e97 01C2     		addl	%eax, %edx
 2879 1e99 488B45E0 		movq	-32(%rbp), %rax
 2880 1e9d 8910     		movl	%edx, (%rax)
 2881              	.L181:
 798:main.c        **** 		for(int i=0;i<4;i++){
 2882              		.loc 1 798 0 is_stmt 1 discriminator 2
 2883 1e9f 8345F801 		addl	$1, -8(%rbp)
 2884              	.L180:
 798:main.c        **** 		for(int i=0;i<4;i++){
 2885              		.loc 1 798 0 is_stmt 0 discriminator 1
 2886 1ea3 837DF803 		cmpl	$3, -8(%rbp)
 2887 1ea7 7EC6     		jle	.L182
 2888              	.LBE18:
 2889              	.LBB19:
 800:main.c        **** 		}
 801:main.c        **** 		for(int i=4;i<8;i++){
 2890              		.loc 1 801 0 is_stmt 1
 2891 1ea9 C745FC04 		movl	$4, -4(%rbp)
 2891      000000
 2892 1eb0 EB37     		jmp	.L183
 2893              	.L185:
 802:main.c        **** 				if(xy[i]=='1') { *y+=(1<<(i-4)); }
 2894              		.loc 1 802 0
 2895 1eb2 8B45FC   		movl	-4(%rbp), %eax
 2896 1eb5 4863D0   		movslq	%eax, %rdx
 2897 1eb8 488B45E8 		movq	-24(%rbp), %rax
 2898 1ebc 4801D0   		addq	%rdx, %rax
 2899 1ebf 0FB600   		movzbl	(%rax), %eax
 2900 1ec2 3C31     		cmpb	$49, %al
 2901 1ec4 751F     		jne	.L184
 2902              		.loc 1 802 0 is_stmt 0 discriminator 1
 2903 1ec6 488B45D8 		movq	-40(%rbp), %rax
 2904 1eca 8B00     		movl	(%rax), %eax
 2905 1ecc 8B55FC   		movl	-4(%rbp), %edx
 2906 1ecf 83EA04   		subl	$4, %edx
 2907 1ed2 BE010000 		movl	$1, %esi
 2907      00
 2908 1ed7 89D1     		movl	%edx, %ecx
 2909 1ed9 D3E6     		sall	%cl, %esi
 2910 1edb 89F2     		movl	%esi, %edx
 2911 1edd 01C2     		addl	%eax, %edx
 2912 1edf 488B45D8 		movq	-40(%rbp), %rax
 2913 1ee3 8910     		movl	%edx, (%rax)
 2914              	.L184:
 801:main.c        **** 				if(xy[i]=='1') { *y+=(1<<(i-4)); }
 2915              		.loc 1 801 0 is_stmt 1 discriminator 2
 2916 1ee5 8345FC01 		addl	$1, -4(%rbp)
 2917              	.L183:
 801:main.c        **** 				if(xy[i]=='1') { *y+=(1<<(i-4)); }
 2918              		.loc 1 801 0 is_stmt 0 discriminator 1
 2919 1ee9 837DFC07 		cmpl	$7, -4(%rbp)
 2920 1eed 7EC3     		jle	.L185
 2921              	.LBE19:
 803:main.c        **** 		}
 804:main.c        ****         printf("%d                       %d\n",*x,*y); 
 2922              		.loc 1 804 0 is_stmt 1
 2923 1eef 488B45D8 		movq	-40(%rbp), %rax
 2924 1ef3 8B10     		movl	(%rax), %edx
 2925 1ef5 488B45E0 		movq	-32(%rbp), %rax
 2926 1ef9 8B00     		movl	(%rax), %eax
 2927 1efb 89C6     		movl	%eax, %esi
 2928 1efd BF000000 		movl	$.LC58, %edi
 2928      00
 2929 1f02 B8000000 		movl	$0, %eax
 2929      00
 2930 1f07 E8000000 		call	printf
 2930      00
 805:main.c        **** }
 2931              		.loc 1 805 0
 2932 1f0c 90       		nop
 2933 1f0d C9       		leave
 2934              		.cfi_def_cfa 7, 8
 2935 1f0e C3       		ret
 2936              		.cfi_endproc
 2937              	.LFE19:
 2939              		.globl	func
 2941              	func:
 2942              	.LFB20:
 806:main.c        **** 
 807:main.c        **** char* func(int x, int y,  int table[][5], int rows){
 2943              		.loc 1 807 0
 2944              		.cfi_startproc
 2945 1f0f 55       		pushq	%rbp
 2946              		.cfi_def_cfa_offset 16
 2947              		.cfi_offset 6, -16
 2948 1f10 4889E5   		movq	%rsp, %rbp
 2949              		.cfi_def_cfa_register 6
 2950 1f13 4883EC50 		subq	$80, %rsp
 2951 1f17 897DCC   		movl	%edi, -52(%rbp)
 2952 1f1a 8975C8   		movl	%esi, -56(%rbp)
 2953 1f1d 488955C0 		movq	%rdx, -64(%rbp)
 2954 1f21 894DBC   		movl	%ecx, -68(%rbp)
 808:main.c        **** 
 809:main.c        **** 	char *ret = malloc(65);
 2955              		.loc 1 809 0
 2956 1f24 BF410000 		movl	$65, %edi
 2956      00
 2957 1f29 E8000000 		call	malloc
 2957      00
 2958 1f2e 488945F0 		movq	%rax, -16(%rbp)
 810:main.c        **** 
 811:main.c        **** 	bool *seen = malloc(8) ;
 2959              		.loc 1 811 0
 2960 1f32 BF080000 		movl	$8, %edi
 2960      00
 2961 1f37 E8000000 		call	malloc
 2961      00
 2962 1f3c 488945F8 		movq	%rax, -8(%rbp)
 2963              	.LBB20:
 812:main.c        **** 
 813:main.c        **** 	for (int i=0;i<8;i++) seen[i] = false ;
 2964              		.loc 1 813 0
 2965 1f40 C745D400 		movl	$0, -44(%rbp)
 2965      000000
 2966 1f47 EB14     		jmp	.L187
 2967              	.L188:
 2968              		.loc 1 813 0 is_stmt 0 discriminator 3
 2969 1f49 8B45D4   		movl	-44(%rbp), %eax
 2970 1f4c 4863D0   		movslq	%eax, %rdx
 2971 1f4f 488B45F8 		movq	-8(%rbp), %rax
 2972 1f53 4801D0   		addq	%rdx, %rax
 2973 1f56 C60000   		movb	$0, (%rax)
 2974 1f59 8345D401 		addl	$1, -44(%rbp)
 2975              	.L187:
 2976              		.loc 1 813 0 discriminator 1
 2977 1f5d 837DD407 		cmpl	$7, -44(%rbp)
 2978 1f61 7EE6     		jle	.L188
 2979              	.LBE20:
 2980              	.LBB21:
 814:main.c        **** 
 815:main.c        ****   	for (int i=0; i<rows; i++){
 2981              		.loc 1 815 0 is_stmt 1
 2982 1f63 C745D800 		movl	$0, -40(%rbp)
 2982      000000
 2983 1f6a E97D0200 		jmp	.L189
 2983      00
 2984              	.L205:
 816:main.c        ****    		if (table[i][0] == x && table[i][1] == y) {
 2985              		.loc 1 816 0
 2986 1f6f 8B45D8   		movl	-40(%rbp), %eax
 2987 1f72 4863D0   		movslq	%eax, %rdx
 2988 1f75 4889D0   		movq	%rdx, %rax
 2989 1f78 48C1E002 		salq	$2, %rax
 2990 1f7c 4801D0   		addq	%rdx, %rax
 2991 1f7f 48C1E002 		salq	$2, %rax
 2992 1f83 4889C2   		movq	%rax, %rdx
 2993 1f86 488B45C0 		movq	-64(%rbp), %rax
 2994 1f8a 4801D0   		addq	%rdx, %rax
 2995 1f8d 8B00     		movl	(%rax), %eax
 2996 1f8f 3B45CC   		cmpl	-52(%rbp), %eax
 2997 1f92 0F855002 		jne	.L190
 2997      0000
 2998              		.loc 1 816 0 is_stmt 0 discriminator 1
 2999 1f98 8B45D8   		movl	-40(%rbp), %eax
 3000 1f9b 4863D0   		movslq	%eax, %rdx
 3001 1f9e 4889D0   		movq	%rdx, %rax
 3002 1fa1 48C1E002 		salq	$2, %rax
 3003 1fa5 4801D0   		addq	%rdx, %rax
 3004 1fa8 48C1E002 		salq	$2, %rax
 3005 1fac 4889C2   		movq	%rax, %rdx
 3006 1faf 488B45C0 		movq	-64(%rbp), %rax
 3007 1fb3 4801D0   		addq	%rdx, %rax
 3008 1fb6 8B4004   		movl	4(%rax), %eax
 3009 1fb9 3B45C8   		cmpl	-56(%rbp), %eax
 3010 1fbc 0F852602 		jne	.L190
 3010      0000
 3011              	.LBB22:
 817:main.c        ****    			int dir =  table[i][2] ;
 3012              		.loc 1 817 0 is_stmt 1
 3013 1fc2 8B45D8   		movl	-40(%rbp), %eax
 3014 1fc5 4863D0   		movslq	%eax, %rdx
 3015 1fc8 4889D0   		movq	%rdx, %rax
 3016 1fcb 48C1E002 		salq	$2, %rax
 3017 1fcf 4801D0   		addq	%rdx, %rax
 3018 1fd2 48C1E002 		salq	$2, %rax
 3019 1fd6 4889C2   		movq	%rax, %rdx
 3020 1fd9 488B45C0 		movq	-64(%rbp), %rax
 3021 1fdd 4801D0   		addq	%rdx, %rax
 3022 1fe0 8B4008   		movl	8(%rax), %eax
 3023 1fe3 8945E0   		movl	%eax, -32(%rbp)
 818:main.c        ****    			int ns = table[i][4] ;
 3024              		.loc 1 818 0
 3025 1fe6 8B45D8   		movl	-40(%rbp), %eax
 3026 1fe9 4863D0   		movslq	%eax, %rdx
 3027 1fec 4889D0   		movq	%rdx, %rax
 3028 1fef 48C1E002 		salq	$2, %rax
 3029 1ff3 4801D0   		addq	%rdx, %rax
 3030 1ff6 48C1E002 		salq	$2, %rax
 3031 1ffa 4889C2   		movq	%rax, %rdx
 3032 1ffd 488B45C0 		movq	-64(%rbp), %rax
 3033 2001 4801D0   		addq	%rdx, %rax
 3034 2004 8B4010   		movl	16(%rax), %eax
 3035 2007 8945E4   		movl	%eax, -28(%rbp)
 819:main.c        ****    			int j = 8*dir ;
 3036              		.loc 1 819 0
 3037 200a 8B45E0   		movl	-32(%rbp), %eax
 3038 200d C1E003   		sall	$3, %eax
 3039 2010 8945E8   		movl	%eax, -24(%rbp)
 820:main.c        ****    			ret [j+2] = ((dir/4)%2 == 1) ? '1' : '0'  ;
 3040              		.loc 1 820 0
 3041 2013 8B45E8   		movl	-24(%rbp), %eax
 3042 2016 4898     		cltq
 3043 2018 488D5002 		leaq	2(%rax), %rdx
 3044 201c 488B45F0 		movq	-16(%rbp), %rax
 3045 2020 4801C2   		addq	%rax, %rdx
 3046 2023 8B45E0   		movl	-32(%rbp), %eax
 3047 2026 8D4803   		leal	3(%rax), %ecx
 3048 2029 85C0     		testl	%eax, %eax
 3049 202b 0F48C1   		cmovs	%ecx, %eax
 3050 202e C1F802   		sarl	$2, %eax
 3051 2031 89C1     		movl	%eax, %ecx
 3052 2033 89C8     		movl	%ecx, %eax
 3053 2035 C1F81F   		sarl	$31, %eax
 3054 2038 C1E81F   		shrl	$31, %eax
 3055 203b 01C1     		addl	%eax, %ecx
 3056 203d 83E101   		andl	$1, %ecx
 3057 2040 29C1     		subl	%eax, %ecx
 3058 2042 89C8     		movl	%ecx, %eax
 3059 2044 83F801   		cmpl	$1, %eax
 3060 2047 7507     		jne	.L191
 3061              		.loc 1 820 0 is_stmt 0 discriminator 1
 3062 2049 B8310000 		movl	$49, %eax
 3062      00
 3063 204e EB05     		jmp	.L192
 3064              	.L191:
 3065              		.loc 1 820 0 discriminator 2
 3066 2050 B8300000 		movl	$48, %eax
 3066      00
 3067              	.L192:
 3068              		.loc 1 820 0 discriminator 4
 3069 2055 8802     		movb	%al, (%rdx)
 821:main.c        ****    			ret [j+3] = ((dir/2)%2 == 1) ? '1' : '0' ;
 3070              		.loc 1 821 0 is_stmt 1 discriminator 4
 3071 2057 8B45E8   		movl	-24(%rbp), %eax
 3072 205a 4898     		cltq
 3073 205c 488D5003 		leaq	3(%rax), %rdx
 3074 2060 488B45F0 		movq	-16(%rbp), %rax
 3075 2064 4801C2   		addq	%rax, %rdx
 3076 2067 8B45E0   		movl	-32(%rbp), %eax
 3077 206a 89C1     		movl	%eax, %ecx
 3078 206c C1E91F   		shrl	$31, %ecx
 3079 206f 01C8     		addl	%ecx, %eax
 3080 2071 D1F8     		sarl	%eax
 3081 2073 89C1     		movl	%eax, %ecx
 3082 2075 89C8     		movl	%ecx, %eax
 3083 2077 C1F81F   		sarl	$31, %eax
 3084 207a C1E81F   		shrl	$31, %eax
 3085 207d 01C1     		addl	%eax, %ecx
 3086 207f 83E101   		andl	$1, %ecx
 3087 2082 29C1     		subl	%eax, %ecx
 3088 2084 89C8     		movl	%ecx, %eax
 3089 2086 83F801   		cmpl	$1, %eax
 3090 2089 7507     		jne	.L193
 3091              		.loc 1 821 0 is_stmt 0 discriminator 1
 3092 208b B8310000 		movl	$49, %eax
 3092      00
 3093 2090 EB05     		jmp	.L194
 3094              	.L193:
 3095              		.loc 1 821 0 discriminator 2
 3096 2092 B8300000 		movl	$48, %eax
 3096      00
 3097              	.L194:
 3098              		.loc 1 821 0 discriminator 4
 3099 2097 8802     		movb	%al, (%rdx)
 822:main.c        ****    			ret [j+4] = (dir%2 == 1) ? '1' : '0' ;
 3100              		.loc 1 822 0 is_stmt 1 discriminator 4
 3101 2099 8B45E8   		movl	-24(%rbp), %eax
 3102 209c 4898     		cltq
 3103 209e 488D5004 		leaq	4(%rax), %rdx
 3104 20a2 488B45F0 		movq	-16(%rbp), %rax
 3105 20a6 488D0C02 		leaq	(%rdx,%rax), %rcx
 3106 20aa 8B45E0   		movl	-32(%rbp), %eax
 3107 20ad 99       		cltd
 3108 20ae C1EA1F   		shrl	$31, %edx
 3109 20b1 01D0     		addl	%edx, %eax
 3110 20b3 83E001   		andl	$1, %eax
 3111 20b6 29D0     		subl	%edx, %eax
 3112 20b8 83F801   		cmpl	$1, %eax
 3113 20bb 7507     		jne	.L195
 3114              		.loc 1 822 0 is_stmt 0 discriminator 1
 3115 20bd B8310000 		movl	$49, %eax
 3115      00
 3116 20c2 EB05     		jmp	.L196
 3117              	.L195:
 3118              		.loc 1 822 0 discriminator 2
 3119 20c4 B8300000 		movl	$48, %eax
 3119      00
 3120              	.L196:
 3121              		.loc 1 822 0 discriminator 4
 3122 20c9 8801     		movb	%al, (%rcx)
 823:main.c        ****    			ret [j] = '1' ;
 3123              		.loc 1 823 0 is_stmt 1 discriminator 4
 3124 20cb 8B45E8   		movl	-24(%rbp), %eax
 3125 20ce 4863D0   		movslq	%eax, %rdx
 3126 20d1 488B45F0 		movq	-16(%rbp), %rax
 3127 20d5 4801D0   		addq	%rdx, %rax
 3128 20d8 C60031   		movb	$49, (%rax)
 824:main.c        ****    			ret [j+1] = (table[i][3] == 1) ? '1' : '0' ;
 3129              		.loc 1 824 0 discriminator 4
 3130 20db 8B45E8   		movl	-24(%rbp), %eax
 3131 20de 4898     		cltq
 3132 20e0 488D5001 		leaq	1(%rax), %rdx
 3133 20e4 488B45F0 		movq	-16(%rbp), %rax
 3134 20e8 488D0C02 		leaq	(%rdx,%rax), %rcx
 3135 20ec 8B45D8   		movl	-40(%rbp), %eax
 3136 20ef 4863D0   		movslq	%eax, %rdx
 3137 20f2 4889D0   		movq	%rdx, %rax
 3138 20f5 48C1E002 		salq	$2, %rax
 3139 20f9 4801D0   		addq	%rdx, %rax
 3140 20fc 48C1E002 		salq	$2, %rax
 3141 2100 4889C2   		movq	%rax, %rdx
 3142 2103 488B45C0 		movq	-64(%rbp), %rax
 3143 2107 4801D0   		addq	%rdx, %rax
 3144 210a 8B400C   		movl	12(%rax), %eax
 3145 210d 83F801   		cmpl	$1, %eax
 3146 2110 7507     		jne	.L197
 3147              		.loc 1 824 0 is_stmt 0 discriminator 1
 3148 2112 B8310000 		movl	$49, %eax
 3148      00
 3149 2117 EB05     		jmp	.L198
 3150              	.L197:
 3151              		.loc 1 824 0 discriminator 2
 3152 2119 B8300000 		movl	$48, %eax
 3152      00
 3153              	.L198:
 3154              		.loc 1 824 0 discriminator 4
 3155 211e 8801     		movb	%al, (%rcx)
 825:main.c        ****    			ret [j+5] = ((ns/4)%2 == 1) ? '1' : '0' ;
 3156              		.loc 1 825 0 is_stmt 1 discriminator 4
 3157 2120 8B45E8   		movl	-24(%rbp), %eax
 3158 2123 4898     		cltq
 3159 2125 488D5005 		leaq	5(%rax), %rdx
 3160 2129 488B45F0 		movq	-16(%rbp), %rax
 3161 212d 4801C2   		addq	%rax, %rdx
 3162 2130 8B45E4   		movl	-28(%rbp), %eax
 3163 2133 8D4803   		leal	3(%rax), %ecx
 3164 2136 85C0     		testl	%eax, %eax
 3165 2138 0F48C1   		cmovs	%ecx, %eax
 3166 213b C1F802   		sarl	$2, %eax
 3167 213e 89C1     		movl	%eax, %ecx
 3168 2140 89C8     		movl	%ecx, %eax
 3169 2142 C1F81F   		sarl	$31, %eax
 3170 2145 C1E81F   		shrl	$31, %eax
 3171 2148 01C1     		addl	%eax, %ecx
 3172 214a 83E101   		andl	$1, %ecx
 3173 214d 29C1     		subl	%eax, %ecx
 3174 214f 89C8     		movl	%ecx, %eax
 3175 2151 83F801   		cmpl	$1, %eax
 3176 2154 7507     		jne	.L199
 3177              		.loc 1 825 0 is_stmt 0 discriminator 1
 3178 2156 B8310000 		movl	$49, %eax
 3178      00
 3179 215b EB05     		jmp	.L200
 3180              	.L199:
 3181              		.loc 1 825 0 discriminator 2
 3182 215d B8300000 		movl	$48, %eax
 3182      00
 3183              	.L200:
 3184              		.loc 1 825 0 discriminator 4
 3185 2162 8802     		movb	%al, (%rdx)
 826:main.c        ****    			ret [j+6] = ((ns/2)%2 == 1) ? '1' : '0' ;
 3186              		.loc 1 826 0 is_stmt 1 discriminator 4
 3187 2164 8B45E8   		movl	-24(%rbp), %eax
 3188 2167 4898     		cltq
 3189 2169 488D5006 		leaq	6(%rax), %rdx
 3190 216d 488B45F0 		movq	-16(%rbp), %rax
 3191 2171 4801C2   		addq	%rax, %rdx
 3192 2174 8B45E4   		movl	-28(%rbp), %eax
 3193 2177 89C1     		movl	%eax, %ecx
 3194 2179 C1E91F   		shrl	$31, %ecx
 3195 217c 01C8     		addl	%ecx, %eax
 3196 217e D1F8     		sarl	%eax
 3197 2180 89C1     		movl	%eax, %ecx
 3198 2182 89C8     		movl	%ecx, %eax
 3199 2184 C1F81F   		sarl	$31, %eax
 3200 2187 C1E81F   		shrl	$31, %eax
 3201 218a 01C1     		addl	%eax, %ecx
 3202 218c 83E101   		andl	$1, %ecx
 3203 218f 29C1     		subl	%eax, %ecx
 3204 2191 89C8     		movl	%ecx, %eax
 3205 2193 83F801   		cmpl	$1, %eax
 3206 2196 7507     		jne	.L201
 3207              		.loc 1 826 0 is_stmt 0 discriminator 1
 3208 2198 B8310000 		movl	$49, %eax
 3208      00
 3209 219d EB05     		jmp	.L202
 3210              	.L201:
 3211              		.loc 1 826 0 discriminator 2
 3212 219f B8300000 		movl	$48, %eax
 3212      00
 3213              	.L202:
 3214              		.loc 1 826 0 discriminator 4
 3215 21a4 8802     		movb	%al, (%rdx)
 827:main.c        ****    			ret [j+7] = (ns%2 == 1) ? '1' : '0' ;
 3216              		.loc 1 827 0 is_stmt 1 discriminator 4
 3217 21a6 8B45E8   		movl	-24(%rbp), %eax
 3218 21a9 4898     		cltq
 3219 21ab 488D5007 		leaq	7(%rax), %rdx
 3220 21af 488B45F0 		movq	-16(%rbp), %rax
 3221 21b3 488D0C02 		leaq	(%rdx,%rax), %rcx
 3222 21b7 8B45E4   		movl	-28(%rbp), %eax
 3223 21ba 99       		cltd
 3224 21bb C1EA1F   		shrl	$31, %edx
 3225 21be 01D0     		addl	%edx, %eax
 3226 21c0 83E001   		andl	$1, %eax
 3227 21c3 29D0     		subl	%edx, %eax
 3228 21c5 83F801   		cmpl	$1, %eax
 3229 21c8 7507     		jne	.L203
 3230              		.loc 1 827 0 is_stmt 0 discriminator 1
 3231 21ca B8310000 		movl	$49, %eax
 3231      00
 3232 21cf EB05     		jmp	.L204
 3233              	.L203:
 3234              		.loc 1 827 0 discriminator 2
 3235 21d1 B8300000 		movl	$48, %eax
 3235      00
 3236              	.L204:
 3237              		.loc 1 827 0 discriminator 4
 3238 21d6 8801     		movb	%al, (%rcx)
 828:main.c        ****    			seen[dir] = true ;
 3239              		.loc 1 828 0 is_stmt 1 discriminator 4
 3240 21d8 8B45E0   		movl	-32(%rbp), %eax
 3241 21db 4863D0   		movslq	%eax, %rdx
 3242 21de 488B45F8 		movq	-8(%rbp), %rax
 3243 21e2 4801D0   		addq	%rdx, %rax
 3244 21e5 C60001   		movb	$1, (%rax)
 3245              	.L190:
 3246              	.LBE22:
 815:main.c        ****    		if (table[i][0] == x && table[i][1] == y) {
 3247              		.loc 1 815 0 discriminator 2
 3248 21e8 8345D801 		addl	$1, -40(%rbp)
 3249              	.L189:
 815:main.c        ****    		if (table[i][0] == x && table[i][1] == y) {
 3250              		.loc 1 815 0 is_stmt 0 discriminator 1
 3251 21ec 8B45D8   		movl	-40(%rbp), %eax
 3252 21ef 3B45BC   		cmpl	-68(%rbp), %eax
 3253 21f2 0F8C77FD 		jl	.L205
 3253      FFFF
 3254              	.LBE21:
 3255              	.LBB23:
 829:main.c        ****    		}
 830:main.c        ****    	}
 831:main.c        **** 
 832:main.c        ****    	for (int i=0;i<8;i++){
 3256              		.loc 1 832 0 is_stmt 1
 3257 21f8 C745DC00 		movl	$0, -36(%rbp)
 3257      000000
 3258 21ff E93C0100 		jmp	.L206
 3258      00
 3259              	.L214:
 833:main.c        ****    		if (!(seen[i])) {
 3260              		.loc 1 833 0
 3261 2204 8B45DC   		movl	-36(%rbp), %eax
 3262 2207 4863D0   		movslq	%eax, %rdx
 3263 220a 488B45F8 		movq	-8(%rbp), %rax
 3264 220e 4801D0   		addq	%rdx, %rax
 3265 2211 0FB600   		movzbl	(%rax), %eax
 3266 2214 83F001   		xorl	$1, %eax
 3267 2217 84C0     		testb	%al, %al
 3268 2219 0F841D01 		je	.L207
 3268      0000
 3269              	.LBB24:
 834:main.c        ****    			int j = 8*i ;
 3270              		.loc 1 834 0
 3271 221f 8B45DC   		movl	-36(%rbp), %eax
 3272 2222 C1E003   		sall	$3, %eax
 3273 2225 8945EC   		movl	%eax, -20(%rbp)
 835:main.c        ****    			ret [j+2] = ((i/4)%2 == 1) ? '1' : '0'  ;
 3274              		.loc 1 835 0
 3275 2228 8B45EC   		movl	-20(%rbp), %eax
 3276 222b 4898     		cltq
 3277 222d 488D5002 		leaq	2(%rax), %rdx
 3278 2231 488B45F0 		movq	-16(%rbp), %rax
 3279 2235 4801C2   		addq	%rax, %rdx
 3280 2238 8B45DC   		movl	-36(%rbp), %eax
 3281 223b 8D4803   		leal	3(%rax), %ecx
 3282 223e 85C0     		testl	%eax, %eax
 3283 2240 0F48C1   		cmovs	%ecx, %eax
 3284 2243 C1F802   		sarl	$2, %eax
 3285 2246 89C1     		movl	%eax, %ecx
 3286 2248 89C8     		movl	%ecx, %eax
 3287 224a C1F81F   		sarl	$31, %eax
 3288 224d C1E81F   		shrl	$31, %eax
 3289 2250 01C1     		addl	%eax, %ecx
 3290 2252 83E101   		andl	$1, %ecx
 3291 2255 29C1     		subl	%eax, %ecx
 3292 2257 89C8     		movl	%ecx, %eax
 3293 2259 83F801   		cmpl	$1, %eax
 3294 225c 7507     		jne	.L208
 3295              		.loc 1 835 0 is_stmt 0 discriminator 1
 3296 225e B8310000 		movl	$49, %eax
 3296      00
 3297 2263 EB05     		jmp	.L209
 3298              	.L208:
 3299              		.loc 1 835 0 discriminator 2
 3300 2265 B8300000 		movl	$48, %eax
 3300      00
 3301              	.L209:
 3302              		.loc 1 835 0 discriminator 4
 3303 226a 8802     		movb	%al, (%rdx)
 836:main.c        ****    			ret [j+3] = ((i/2)%2 == 1) ? '1' : '0' ;
 3304              		.loc 1 836 0 is_stmt 1 discriminator 4
 3305 226c 8B45EC   		movl	-20(%rbp), %eax
 3306 226f 4898     		cltq
 3307 2271 488D5003 		leaq	3(%rax), %rdx
 3308 2275 488B45F0 		movq	-16(%rbp), %rax
 3309 2279 4801C2   		addq	%rax, %rdx
 3310 227c 8B45DC   		movl	-36(%rbp), %eax
 3311 227f 89C1     		movl	%eax, %ecx
 3312 2281 C1E91F   		shrl	$31, %ecx
 3313 2284 01C8     		addl	%ecx, %eax
 3314 2286 D1F8     		sarl	%eax
 3315 2288 89C1     		movl	%eax, %ecx
 3316 228a 89C8     		movl	%ecx, %eax
 3317 228c C1F81F   		sarl	$31, %eax
 3318 228f C1E81F   		shrl	$31, %eax
 3319 2292 01C1     		addl	%eax, %ecx
 3320 2294 83E101   		andl	$1, %ecx
 3321 2297 29C1     		subl	%eax, %ecx
 3322 2299 89C8     		movl	%ecx, %eax
 3323 229b 83F801   		cmpl	$1, %eax
 3324 229e 7507     		jne	.L210
 3325              		.loc 1 836 0 is_stmt 0 discriminator 1
 3326 22a0 B8310000 		movl	$49, %eax
 3326      00
 3327 22a5 EB05     		jmp	.L211
 3328              	.L210:
 3329              		.loc 1 836 0 discriminator 2
 3330 22a7 B8300000 		movl	$48, %eax
 3330      00
 3331              	.L211:
 3332              		.loc 1 836 0 discriminator 4
 3333 22ac 8802     		movb	%al, (%rdx)
 837:main.c        ****    			ret [j+4] = (i%2 == 1) ? '1' : '0' ;
 3334              		.loc 1 837 0 is_stmt 1 discriminator 4
 3335 22ae 8B45EC   		movl	-20(%rbp), %eax
 3336 22b1 4898     		cltq
 3337 22b3 488D5004 		leaq	4(%rax), %rdx
 3338 22b7 488B45F0 		movq	-16(%rbp), %rax
 3339 22bb 488D0C02 		leaq	(%rdx,%rax), %rcx
 3340 22bf 8B45DC   		movl	-36(%rbp), %eax
 3341 22c2 99       		cltd
 3342 22c3 C1EA1F   		shrl	$31, %edx
 3343 22c6 01D0     		addl	%edx, %eax
 3344 22c8 83E001   		andl	$1, %eax
 3345 22cb 29D0     		subl	%edx, %eax
 3346 22cd 83F801   		cmpl	$1, %eax
 3347 22d0 7507     		jne	.L212
 3348              		.loc 1 837 0 is_stmt 0 discriminator 1
 3349 22d2 B8310000 		movl	$49, %eax
 3349      00
 3350 22d7 EB05     		jmp	.L213
 3351              	.L212:
 3352              		.loc 1 837 0 discriminator 2
 3353 22d9 B8300000 		movl	$48, %eax
 3353      00
 3354              	.L213:
 3355              		.loc 1 837 0 discriminator 4
 3356 22de 8801     		movb	%al, (%rcx)
 838:main.c        ****    			ret [j] = '0' ;
 3357              		.loc 1 838 0 is_stmt 1 discriminator 4
 3358 22e0 8B45EC   		movl	-20(%rbp), %eax
 3359 22e3 4863D0   		movslq	%eax, %rdx
 3360 22e6 488B45F0 		movq	-16(%rbp), %rax
 3361 22ea 4801D0   		addq	%rdx, %rax
 3362 22ed C60030   		movb	$48, (%rax)
 839:main.c        ****    			ret [j+1] = '0' ;
 3363              		.loc 1 839 0 discriminator 4
 3364 22f0 8B45EC   		movl	-20(%rbp), %eax
 3365 22f3 4898     		cltq
 3366 22f5 488D5001 		leaq	1(%rax), %rdx
 3367 22f9 488B45F0 		movq	-16(%rbp), %rax
 3368 22fd 4801D0   		addq	%rdx, %rax
 3369 2300 C60030   		movb	$48, (%rax)
 840:main.c        ****    			ret [j+5] = '0' ;
 3370              		.loc 1 840 0 discriminator 4
 3371 2303 8B45EC   		movl	-20(%rbp), %eax
 3372 2306 4898     		cltq
 3373 2308 488D5005 		leaq	5(%rax), %rdx
 3374 230c 488B45F0 		movq	-16(%rbp), %rax
 3375 2310 4801D0   		addq	%rdx, %rax
 3376 2313 C60030   		movb	$48, (%rax)
 841:main.c        ****    			ret [j+6] = '0' ;
 3377              		.loc 1 841 0 discriminator 4
 3378 2316 8B45EC   		movl	-20(%rbp), %eax
 3379 2319 4898     		cltq
 3380 231b 488D5006 		leaq	6(%rax), %rdx
 3381 231f 488B45F0 		movq	-16(%rbp), %rax
 3382 2323 4801D0   		addq	%rdx, %rax
 3383 2326 C60030   		movb	$48, (%rax)
 842:main.c        ****    			ret [j+7] = '0' ;
 3384              		.loc 1 842 0 discriminator 4
 3385 2329 8B45EC   		movl	-20(%rbp), %eax
 3386 232c 4898     		cltq
 3387 232e 488D5007 		leaq	7(%rax), %rdx
 3388 2332 488B45F0 		movq	-16(%rbp), %rax
 3389 2336 4801D0   		addq	%rdx, %rax
 3390 2339 C60030   		movb	$48, (%rax)
 3391              	.L207:
 3392              	.LBE24:
 832:main.c        ****    		if (!(seen[i])) {
 3393              		.loc 1 832 0 discriminator 2
 3394 233c 8345DC01 		addl	$1, -36(%rbp)
 3395              	.L206:
 832:main.c        ****    		if (!(seen[i])) {
 3396              		.loc 1 832 0 is_stmt 0 discriminator 1
 3397 2340 837DDC07 		cmpl	$7, -36(%rbp)
 3398 2344 0F8EBAFE 		jle	.L214
 3398      FFFF
 3399              	.LBE23:
 843:main.c        ****    		}
 844:main.c        ****    	}
 845:main.c        ****     ret[64] = '\0';
 3400              		.loc 1 845 0 is_stmt 1
 3401 234a 488B45F0 		movq	-16(%rbp), %rax
 3402 234e 4883C040 		addq	$64, %rax
 3403 2352 C60000   		movb	$0, (%rax)
 846:main.c        ****    	return ret ;
 3404              		.loc 1 846 0
 3405 2355 488B45F0 		movq	-16(%rbp), %rax
 847:main.c        **** 
 848:main.c        **** }
 3406              		.loc 1 848 0
 3407 2359 C9       		leave
 3408              		.cfi_def_cfa 7, 8
 3409 235a C3       		ret
 3410              		.cfi_endproc
 3411              	.LFE20:
 3413              		.globl	xor
 3415              	xor:
 3416              	.LFB21:
 849:main.c        **** 
 850:main.c        **** char xor(char a, char b){
 3417              		.loc 1 850 0
 3418              		.cfi_startproc
 3419 235b 55       		pushq	%rbp
 3420              		.cfi_def_cfa_offset 16
 3421              		.cfi_offset 6, -16
 3422 235c 4889E5   		movq	%rsp, %rbp
 3423              		.cfi_def_cfa_register 6
 3424 235f 89FA     		movl	%edi, %edx
 3425 2361 89F0     		movl	%esi, %eax
 3426 2363 8855FC   		movb	%dl, -4(%rbp)
 3427 2366 8845F8   		movb	%al, -8(%rbp)
 851:main.c        **** 	if (a==b) return '0';
 3428              		.loc 1 851 0
 3429 2369 0FB645FC 		movzbl	-4(%rbp), %eax
 3430 236d 3A45F8   		cmpb	-8(%rbp), %al
 3431 2370 7507     		jne	.L217
 3432              		.loc 1 851 0 is_stmt 0 discriminator 1
 3433 2372 B8300000 		movl	$48, %eax
 3433      00
 3434 2377 EB05     		jmp	.L218
 3435              	.L217:
 852:main.c        **** 	else return '1';
 3436              		.loc 1 852 0 is_stmt 1
 3437 2379 B8310000 		movl	$49, %eax
 3437      00
 3438              	.L218:
 853:main.c        **** }
 3439              		.loc 1 853 0
 3440 237e 5D       		popq	%rbp
 3441              		.cfi_def_cfa 7, 8
 3442 237f C3       		ret
 3443              		.cfi_endproc
 3444              	.LFE21:
 3446              		.globl	and
 3448              	and:
 3449              	.LFB22:
 854:main.c        **** 
 855:main.c        **** char and(char a, char b){
 3450              		.loc 1 855 0
 3451              		.cfi_startproc
 3452 2380 55       		pushq	%rbp
 3453              		.cfi_def_cfa_offset 16
 3454              		.cfi_offset 6, -16
 3455 2381 4889E5   		movq	%rsp, %rbp
 3456              		.cfi_def_cfa_register 6
 3457 2384 89FA     		movl	%edi, %edx
 3458 2386 89F0     		movl	%esi, %eax
 3459 2388 8855FC   		movb	%dl, -4(%rbp)
 3460 238b 8845F8   		movb	%al, -8(%rbp)
 856:main.c        **** 	if (a=='1' && b=='1') return '1';
 3461              		.loc 1 856 0
 3462 238e 807DFC31 		cmpb	$49, -4(%rbp)
 3463 2392 750D     		jne	.L220
 3464              		.loc 1 856 0 is_stmt 0 discriminator 1
 3465 2394 807DF831 		cmpb	$49, -8(%rbp)
 3466 2398 7507     		jne	.L220
 3467              		.loc 1 856 0 discriminator 2
 3468 239a B8310000 		movl	$49, %eax
 3468      00
 3469 239f EB05     		jmp	.L221
 3470              	.L220:
 857:main.c        **** 	else return '0';
 3471              		.loc 1 857 0 is_stmt 1
 3472 23a1 B8300000 		movl	$48, %eax
 3472      00
 3473              	.L221:
 858:main.c        **** }
 3474              		.loc 1 858 0
 3475 23a6 5D       		popq	%rbp
 3476              		.cfi_def_cfa 7, 8
 3477 23a7 C3       		ret
 3478              		.cfi_endproc
 3479              	.LFE22:
 3481              		.globl	decrypt
 3483              	decrypt:
 3484              	.LFB23:
 859:main.c        **** 
 860:main.c        **** char* decrypt(char C[32], char K[32]){
 3485              		.loc 1 860 0
 3486              		.cfi_startproc
 3487 23a8 55       		pushq	%rbp
 3488              		.cfi_def_cfa_offset 16
 3489              		.cfi_offset 6, -16
 3490 23a9 4889E5   		movq	%rsp, %rbp
 3491              		.cfi_def_cfa_register 6
 3492 23ac 4154     		pushq	%r12
 3493 23ae 53       		pushq	%rbx
 3494 23af 4883EC70 		subq	$112, %rsp
 3495              		.cfi_offset 12, -24
 3496              		.cfi_offset 3, -32
 3497 23b3 48897D88 		movq	%rdi, -120(%rbp)
 3498 23b7 48897580 		movq	%rsi, -128(%rbp)
 861:main.c        **** 	char* P = malloc(33);
 3499              		.loc 1 861 0
 3500 23bb BF210000 		movl	$33, %edi
 3500      00
 3501 23c0 E8000000 		call	malloc
 3501      00
 3502 23c5 488945C0 		movq	%rax, -64(%rbp)
 862:main.c        **** 	int N0=0;
 3503              		.loc 1 862 0
 3504 23c9 C7459400 		movl	$0, -108(%rbp)
 3504      000000
 3505              	.LBB25:
 863:main.c        **** 	for (int i=0;i<32;i++){if (K[i]=='0') N0++;}
 3506              		.loc 1 863 0
 3507 23d0 C7459800 		movl	$0, -104(%rbp)
 3507      000000
 3508 23d7 EB1C     		jmp	.L223
 3509              	.L225:
 3510              		.loc 1 863 0 is_stmt 0 discriminator 6
 3511 23d9 8B4598   		movl	-104(%rbp), %eax
 3512 23dc 4863D0   		movslq	%eax, %rdx
 3513 23df 488B4580 		movq	-128(%rbp), %rax
 3514 23e3 4801D0   		addq	%rdx, %rax
 3515 23e6 0FB600   		movzbl	(%rax), %eax
 3516 23e9 3C30     		cmpb	$48, %al
 3517 23eb 7504     		jne	.L224
 3518              		.loc 1 863 0 discriminator 2
 3519 23ed 83459401 		addl	$1, -108(%rbp)
 3520              	.L224:
 3521              		.loc 1 863 0 discriminator 4
 3522 23f1 83459801 		addl	$1, -104(%rbp)
 3523              	.L223:
 3524              		.loc 1 863 0 discriminator 5
 3525 23f5 837D981F 		cmpl	$31, -104(%rbp)
 3526 23f9 7EDE     		jle	.L225
 3527              	.LBE25:
 3528              	.LBB26:
 864:main.c        **** 	for (int i=0;i<32;i++) P[i]=C[i];
 3529              		.loc 1 864 0 is_stmt 1
 3530 23fb C7459C00 		movl	$0, -100(%rbp)
 3530      000000
 3531 2402 EB23     		jmp	.L226
 3532              	.L227:
 3533              		.loc 1 864 0 is_stmt 0 discriminator 3
 3534 2404 8B459C   		movl	-100(%rbp), %eax
 3535 2407 4863D0   		movslq	%eax, %rdx
 3536 240a 488B45C0 		movq	-64(%rbp), %rax
 3537 240e 4801C2   		addq	%rax, %rdx
 3538 2411 8B459C   		movl	-100(%rbp), %eax
 3539 2414 4863C8   		movslq	%eax, %rcx
 3540 2417 488B4588 		movq	-120(%rbp), %rax
 3541 241b 4801C8   		addq	%rcx, %rax
 3542 241e 0FB600   		movzbl	(%rax), %eax
 3543 2421 8802     		movb	%al, (%rdx)
 3544 2423 83459C01 		addl	$1, -100(%rbp)
 3545              	.L226:
 3546              		.loc 1 864 0 discriminator 1
 3547 2427 837D9C1F 		cmpl	$31, -100(%rbp)
 3548 242b 7ED7     		jle	.L227
 3549              	.LBE26:
 865:main.c        **** 	P[32]='\0';
 3550              		.loc 1 865 0 is_stmt 1
 3551 242d 488B45C0 		movq	-64(%rbp), %rax
 3552 2431 4883C020 		addq	$32, %rax
 3553 2435 C60000   		movb	$0, (%rax)
 866:main.c        **** 
 867:main.c        **** 	char* T = malloc(5) ;
 3554              		.loc 1 867 0
 3555 2438 BF050000 		movl	$5, %edi
 3555      00
 3556 243d E8000000 		call	malloc
 3556      00
 3557 2442 488945C8 		movq	%rax, -56(%rbp)
 868:main.c        **** 	T[4]='\0';
 3558              		.loc 1 868 0
 3559 2446 488B45C8 		movq	-56(%rbp), %rax
 3560 244a 4883C004 		addq	$4, %rax
 3561 244e C60000   		movb	$0, (%rax)
 869:main.c        **** 	T[3] = xor(K[31],xor(K[27],xor(K[23],xor(K[19],xor(K[15],xor(K[11],xor(K[7],K[3])))))));
 3562              		.loc 1 869 0
 3563 2451 488B45C8 		movq	-56(%rbp), %rax
 3564 2455 488D5803 		leaq	3(%rax), %rbx
 3565 2459 488B4580 		movq	-128(%rbp), %rax
 3566 245d 4883C003 		addq	$3, %rax
 3567 2461 0FB600   		movzbl	(%rax), %eax
 3568 2464 0FBED0   		movsbl	%al, %edx
 3569 2467 488B4580 		movq	-128(%rbp), %rax
 3570 246b 4883C007 		addq	$7, %rax
 3571 246f 0FB600   		movzbl	(%rax), %eax
 3572 2472 0FBEC0   		movsbl	%al, %eax
 3573 2475 89D6     		movl	%edx, %esi
 3574 2477 89C7     		movl	%eax, %edi
 3575 2479 E8000000 		call	xor
 3575      00
 3576 247e 0FBED0   		movsbl	%al, %edx
 3577 2481 488B4580 		movq	-128(%rbp), %rax
 3578 2485 4883C00B 		addq	$11, %rax
 3579 2489 0FB600   		movzbl	(%rax), %eax
 3580 248c 0FBEC0   		movsbl	%al, %eax
 3581 248f 89D6     		movl	%edx, %esi
 3582 2491 89C7     		movl	%eax, %edi
 3583 2493 E8000000 		call	xor
 3583      00
 3584 2498 0FBED0   		movsbl	%al, %edx
 3585 249b 488B4580 		movq	-128(%rbp), %rax
 3586 249f 4883C00F 		addq	$15, %rax
 3587 24a3 0FB600   		movzbl	(%rax), %eax
 3588 24a6 0FBEC0   		movsbl	%al, %eax
 3589 24a9 89D6     		movl	%edx, %esi
 3590 24ab 89C7     		movl	%eax, %edi
 3591 24ad E8000000 		call	xor
 3591      00
 3592 24b2 0FBED0   		movsbl	%al, %edx
 3593 24b5 488B4580 		movq	-128(%rbp), %rax
 3594 24b9 4883C013 		addq	$19, %rax
 3595 24bd 0FB600   		movzbl	(%rax), %eax
 3596 24c0 0FBEC0   		movsbl	%al, %eax
 3597 24c3 89D6     		movl	%edx, %esi
 3598 24c5 89C7     		movl	%eax, %edi
 3599 24c7 E8000000 		call	xor
 3599      00
 3600 24cc 0FBED0   		movsbl	%al, %edx
 3601 24cf 488B4580 		movq	-128(%rbp), %rax
 3602 24d3 4883C017 		addq	$23, %rax
 3603 24d7 0FB600   		movzbl	(%rax), %eax
 3604 24da 0FBEC0   		movsbl	%al, %eax
 3605 24dd 89D6     		movl	%edx, %esi
 3606 24df 89C7     		movl	%eax, %edi
 3607 24e1 E8000000 		call	xor
 3607      00
 3608 24e6 0FBED0   		movsbl	%al, %edx
 3609 24e9 488B4580 		movq	-128(%rbp), %rax
 3610 24ed 4883C01B 		addq	$27, %rax
 3611 24f1 0FB600   		movzbl	(%rax), %eax
 3612 24f4 0FBEC0   		movsbl	%al, %eax
 3613 24f7 89D6     		movl	%edx, %esi
 3614 24f9 89C7     		movl	%eax, %edi
 3615 24fb E8000000 		call	xor
 3615      00
 3616 2500 0FBED0   		movsbl	%al, %edx
 3617 2503 488B4580 		movq	-128(%rbp), %rax
 3618 2507 4883C01F 		addq	$31, %rax
 3619 250b 0FB600   		movzbl	(%rax), %eax
 3620 250e 0FBEC0   		movsbl	%al, %eax
 3621 2511 89D6     		movl	%edx, %esi
 3622 2513 89C7     		movl	%eax, %edi
 3623 2515 E8000000 		call	xor
 3623      00
 3624 251a 8803     		movb	%al, (%rbx)
 870:main.c        **** 	T[2] = xor(K[30],xor(K[26],xor(K[22],xor(K[18],xor(K[14],xor(K[10],xor(K[6],K[2])))))));
 3625              		.loc 1 870 0
 3626 251c 488B45C8 		movq	-56(%rbp), %rax
 3627 2520 488D5802 		leaq	2(%rax), %rbx
 3628 2524 488B4580 		movq	-128(%rbp), %rax
 3629 2528 4883C002 		addq	$2, %rax
 3630 252c 0FB600   		movzbl	(%rax), %eax
 3631 252f 0FBED0   		movsbl	%al, %edx
 3632 2532 488B4580 		movq	-128(%rbp), %rax
 3633 2536 4883C006 		addq	$6, %rax
 3634 253a 0FB600   		movzbl	(%rax), %eax
 3635 253d 0FBEC0   		movsbl	%al, %eax
 3636 2540 89D6     		movl	%edx, %esi
 3637 2542 89C7     		movl	%eax, %edi
 3638 2544 E8000000 		call	xor
 3638      00
 3639 2549 0FBED0   		movsbl	%al, %edx
 3640 254c 488B4580 		movq	-128(%rbp), %rax
 3641 2550 4883C00A 		addq	$10, %rax
 3642 2554 0FB600   		movzbl	(%rax), %eax
 3643 2557 0FBEC0   		movsbl	%al, %eax
 3644 255a 89D6     		movl	%edx, %esi
 3645 255c 89C7     		movl	%eax, %edi
 3646 255e E8000000 		call	xor
 3646      00
 3647 2563 0FBED0   		movsbl	%al, %edx
 3648 2566 488B4580 		movq	-128(%rbp), %rax
 3649 256a 4883C00E 		addq	$14, %rax
 3650 256e 0FB600   		movzbl	(%rax), %eax
 3651 2571 0FBEC0   		movsbl	%al, %eax
 3652 2574 89D6     		movl	%edx, %esi
 3653 2576 89C7     		movl	%eax, %edi
 3654 2578 E8000000 		call	xor
 3654      00
 3655 257d 0FBED0   		movsbl	%al, %edx
 3656 2580 488B4580 		movq	-128(%rbp), %rax
 3657 2584 4883C012 		addq	$18, %rax
 3658 2588 0FB600   		movzbl	(%rax), %eax
 3659 258b 0FBEC0   		movsbl	%al, %eax
 3660 258e 89D6     		movl	%edx, %esi
 3661 2590 89C7     		movl	%eax, %edi
 3662 2592 E8000000 		call	xor
 3662      00
 3663 2597 0FBED0   		movsbl	%al, %edx
 3664 259a 488B4580 		movq	-128(%rbp), %rax
 3665 259e 4883C016 		addq	$22, %rax
 3666 25a2 0FB600   		movzbl	(%rax), %eax
 3667 25a5 0FBEC0   		movsbl	%al, %eax
 3668 25a8 89D6     		movl	%edx, %esi
 3669 25aa 89C7     		movl	%eax, %edi
 3670 25ac E8000000 		call	xor
 3670      00
 3671 25b1 0FBED0   		movsbl	%al, %edx
 3672 25b4 488B4580 		movq	-128(%rbp), %rax
 3673 25b8 4883C01A 		addq	$26, %rax
 3674 25bc 0FB600   		movzbl	(%rax), %eax
 3675 25bf 0FBEC0   		movsbl	%al, %eax
 3676 25c2 89D6     		movl	%edx, %esi
 3677 25c4 89C7     		movl	%eax, %edi
 3678 25c6 E8000000 		call	xor
 3678      00
 3679 25cb 0FBED0   		movsbl	%al, %edx
 3680 25ce 488B4580 		movq	-128(%rbp), %rax
 3681 25d2 4883C01E 		addq	$30, %rax
 3682 25d6 0FB600   		movzbl	(%rax), %eax
 3683 25d9 0FBEC0   		movsbl	%al, %eax
 3684 25dc 89D6     		movl	%edx, %esi
 3685 25de 89C7     		movl	%eax, %edi
 3686 25e0 E8000000 		call	xor
 3686      00
 3687 25e5 8803     		movb	%al, (%rbx)
 871:main.c        **** 	T[1] = xor(K[29],xor(K[25],xor(K[21],xor(K[17],xor(K[13],xor(K[9],xor(K[5],K[1])))))));
 3688              		.loc 1 871 0
 3689 25e7 488B45C8 		movq	-56(%rbp), %rax
 3690 25eb 488D5801 		leaq	1(%rax), %rbx
 3691 25ef 488B4580 		movq	-128(%rbp), %rax
 3692 25f3 4883C001 		addq	$1, %rax
 3693 25f7 0FB600   		movzbl	(%rax), %eax
 3694 25fa 0FBED0   		movsbl	%al, %edx
 3695 25fd 488B4580 		movq	-128(%rbp), %rax
 3696 2601 4883C005 		addq	$5, %rax
 3697 2605 0FB600   		movzbl	(%rax), %eax
 3698 2608 0FBEC0   		movsbl	%al, %eax
 3699 260b 89D6     		movl	%edx, %esi
 3700 260d 89C7     		movl	%eax, %edi
 3701 260f E8000000 		call	xor
 3701      00
 3702 2614 0FBED0   		movsbl	%al, %edx
 3703 2617 488B4580 		movq	-128(%rbp), %rax
 3704 261b 4883C009 		addq	$9, %rax
 3705 261f 0FB600   		movzbl	(%rax), %eax
 3706 2622 0FBEC0   		movsbl	%al, %eax
 3707 2625 89D6     		movl	%edx, %esi
 3708 2627 89C7     		movl	%eax, %edi
 3709 2629 E8000000 		call	xor
 3709      00
 3710 262e 0FBED0   		movsbl	%al, %edx
 3711 2631 488B4580 		movq	-128(%rbp), %rax
 3712 2635 4883C00D 		addq	$13, %rax
 3713 2639 0FB600   		movzbl	(%rax), %eax
 3714 263c 0FBEC0   		movsbl	%al, %eax
 3715 263f 89D6     		movl	%edx, %esi
 3716 2641 89C7     		movl	%eax, %edi
 3717 2643 E8000000 		call	xor
 3717      00
 3718 2648 0FBED0   		movsbl	%al, %edx
 3719 264b 488B4580 		movq	-128(%rbp), %rax
 3720 264f 4883C011 		addq	$17, %rax
 3721 2653 0FB600   		movzbl	(%rax), %eax
 3722 2656 0FBEC0   		movsbl	%al, %eax
 3723 2659 89D6     		movl	%edx, %esi
 3724 265b 89C7     		movl	%eax, %edi
 3725 265d E8000000 		call	xor
 3725      00
 3726 2662 0FBED0   		movsbl	%al, %edx
 3727 2665 488B4580 		movq	-128(%rbp), %rax
 3728 2669 4883C015 		addq	$21, %rax
 3729 266d 0FB600   		movzbl	(%rax), %eax
 3730 2670 0FBEC0   		movsbl	%al, %eax
 3731 2673 89D6     		movl	%edx, %esi
 3732 2675 89C7     		movl	%eax, %edi
 3733 2677 E8000000 		call	xor
 3733      00
 3734 267c 0FBED0   		movsbl	%al, %edx
 3735 267f 488B4580 		movq	-128(%rbp), %rax
 3736 2683 4883C019 		addq	$25, %rax
 3737 2687 0FB600   		movzbl	(%rax), %eax
 3738 268a 0FBEC0   		movsbl	%al, %eax
 3739 268d 89D6     		movl	%edx, %esi
 3740 268f 89C7     		movl	%eax, %edi
 3741 2691 E8000000 		call	xor
 3741      00
 3742 2696 0FBED0   		movsbl	%al, %edx
 3743 2699 488B4580 		movq	-128(%rbp), %rax
 3744 269d 4883C01D 		addq	$29, %rax
 3745 26a1 0FB600   		movzbl	(%rax), %eax
 3746 26a4 0FBEC0   		movsbl	%al, %eax
 3747 26a7 89D6     		movl	%edx, %esi
 3748 26a9 89C7     		movl	%eax, %edi
 3749 26ab E8000000 		call	xor
 3749      00
 3750 26b0 8803     		movb	%al, (%rbx)
 872:main.c        **** 	T[0] = xor(K[28],xor(K[24],xor(K[20],xor(K[16],xor(K[12],xor(K[8],xor(K[4],K[0])))))));
 3751              		.loc 1 872 0
 3752 26b2 488B4580 		movq	-128(%rbp), %rax
 3753 26b6 0FB600   		movzbl	(%rax), %eax
 3754 26b9 0FBED0   		movsbl	%al, %edx
 3755 26bc 488B4580 		movq	-128(%rbp), %rax
 3756 26c0 4883C004 		addq	$4, %rax
 3757 26c4 0FB600   		movzbl	(%rax), %eax
 3758 26c7 0FBEC0   		movsbl	%al, %eax
 3759 26ca 89D6     		movl	%edx, %esi
 3760 26cc 89C7     		movl	%eax, %edi
 3761 26ce E8000000 		call	xor
 3761      00
 3762 26d3 0FBED0   		movsbl	%al, %edx
 3763 26d6 488B4580 		movq	-128(%rbp), %rax
 3764 26da 4883C008 		addq	$8, %rax
 3765 26de 0FB600   		movzbl	(%rax), %eax
 3766 26e1 0FBEC0   		movsbl	%al, %eax
 3767 26e4 89D6     		movl	%edx, %esi
 3768 26e6 89C7     		movl	%eax, %edi
 3769 26e8 E8000000 		call	xor
 3769      00
 3770 26ed 0FBED0   		movsbl	%al, %edx
 3771 26f0 488B4580 		movq	-128(%rbp), %rax
 3772 26f4 4883C00C 		addq	$12, %rax
 3773 26f8 0FB600   		movzbl	(%rax), %eax
 3774 26fb 0FBEC0   		movsbl	%al, %eax
 3775 26fe 89D6     		movl	%edx, %esi
 3776 2700 89C7     		movl	%eax, %edi
 3777 2702 E8000000 		call	xor
 3777      00
 3778 2707 0FBED0   		movsbl	%al, %edx
 3779 270a 488B4580 		movq	-128(%rbp), %rax
 3780 270e 4883C010 		addq	$16, %rax
 3781 2712 0FB600   		movzbl	(%rax), %eax
 3782 2715 0FBEC0   		movsbl	%al, %eax
 3783 2718 89D6     		movl	%edx, %esi
 3784 271a 89C7     		movl	%eax, %edi
 3785 271c E8000000 		call	xor
 3785      00
 3786 2721 0FBED0   		movsbl	%al, %edx
 3787 2724 488B4580 		movq	-128(%rbp), %rax
 3788 2728 4883C014 		addq	$20, %rax
 3789 272c 0FB600   		movzbl	(%rax), %eax
 3790 272f 0FBEC0   		movsbl	%al, %eax
 3791 2732 89D6     		movl	%edx, %esi
 3792 2734 89C7     		movl	%eax, %edi
 3793 2736 E8000000 		call	xor
 3793      00
 3794 273b 0FBED0   		movsbl	%al, %edx
 3795 273e 488B4580 		movq	-128(%rbp), %rax
 3796 2742 4883C018 		addq	$24, %rax
 3797 2746 0FB600   		movzbl	(%rax), %eax
 3798 2749 0FBEC0   		movsbl	%al, %eax
 3799 274c 89D6     		movl	%edx, %esi
 3800 274e 89C7     		movl	%eax, %edi
 3801 2750 E8000000 		call	xor
 3801      00
 3802 2755 0FBED0   		movsbl	%al, %edx
 3803 2758 488B4580 		movq	-128(%rbp), %rax
 3804 275c 4883C01C 		addq	$28, %rax
 3805 2760 0FB600   		movzbl	(%rax), %eax
 3806 2763 0FBEC0   		movsbl	%al, %eax
 3807 2766 89D6     		movl	%edx, %esi
 3808 2768 89C7     		movl	%eax, %edi
 3809 276a E8000000 		call	xor
 3809      00
 3810 276f 89C2     		movl	%eax, %edx
 3811 2771 488B45C8 		movq	-56(%rbp), %rax
 3812 2775 8810     		movb	%dl, (%rax)
 873:main.c        **** 
 874:main.c        **** 	// char* T8 = malloc(32);
 875:main.c        **** 
 876:main.c        **** 	// T = T+15
 877:main.c        **** 	char* Carry = malloc(4);
 3813              		.loc 1 877 0
 3814 2777 BF040000 		movl	$4, %edi
 3814      00
 3815 277c E8000000 		call	malloc
 3815      00
 3816 2781 488945D0 		movq	%rax, -48(%rbp)
 878:main.c        **** 	char* Sum = malloc(4);
 3817              		.loc 1 878 0
 3818 2785 BF040000 		movl	$4, %edi
 3818      00
 3819 278a E8000000 		call	malloc
 3819      00
 3820 278f 488945D8 		movq	%rax, -40(%rbp)
 3821              	.LBB27:
 879:main.c        **** 	for (int l=0;l<4;l++) Carry[l]='0';
 3822              		.loc 1 879 0
 3823 2793 C745A000 		movl	$0, -96(%rbp)
 3823      000000
 3824 279a EB14     		jmp	.L228
 3825              	.L229:
 3826              		.loc 1 879 0 is_stmt 0 discriminator 3
 3827 279c 8B45A0   		movl	-96(%rbp), %eax
 3828 279f 4863D0   		movslq	%eax, %rdx
 3829 27a2 488B45D0 		movq	-48(%rbp), %rax
 3830 27a6 4801D0   		addq	%rdx, %rax
 3831 27a9 C60030   		movb	$48, (%rax)
 3832 27ac 8345A001 		addl	$1, -96(%rbp)
 3833              	.L228:
 3834              		.loc 1 879 0 discriminator 1
 3835 27b0 837DA003 		cmpl	$3, -96(%rbp)
 3836 27b4 7EE6     		jle	.L229
 3837              	.LBE27:
 880:main.c        **** 	Sum[0] = xor(T[0],'1');
 3838              		.loc 1 880 0 is_stmt 1
 3839 27b6 488B45C8 		movq	-56(%rbp), %rax
 3840 27ba 0FB600   		movzbl	(%rax), %eax
 3841 27bd 0FBEC0   		movsbl	%al, %eax
 3842 27c0 BE310000 		movl	$49, %esi
 3842      00
 3843 27c5 89C7     		movl	%eax, %edi
 3844 27c7 E8000000 		call	xor
 3844      00
 3845 27cc 89C2     		movl	%eax, %edx
 3846 27ce 488B45D8 		movq	-40(%rbp), %rax
 3847 27d2 8810     		movb	%dl, (%rax)
 881:main.c        **** 	Carry[0] = and(T[0],'1');
 3848              		.loc 1 881 0
 3849 27d4 488B45C8 		movq	-56(%rbp), %rax
 3850 27d8 0FB600   		movzbl	(%rax), %eax
 3851 27db 0FBEC0   		movsbl	%al, %eax
 3852 27de BE310000 		movl	$49, %esi
 3852      00
 3853 27e3 89C7     		movl	%eax, %edi
 3854 27e5 E8000000 		call	and
 3854      00
 3855 27ea 89C2     		movl	%eax, %edx
 3856 27ec 488B45D0 		movq	-48(%rbp), %rax
 3857 27f0 8810     		movb	%dl, (%rax)
 3858              	.LBB28:
 882:main.c        **** 	for (int c=1;c<4;c++){
 3859              		.loc 1 882 0
 3860 27f2 C745A401 		movl	$1, -92(%rbp)
 3860      000000
 3861 27f9 E9F80000 		jmp	.L230
 3861      00
 3862              	.L231:
 883:main.c        **** 		Sum[c] = xor(T[c],xor(Carry[c-1],'1'));
 3863              		.loc 1 883 0 discriminator 3
 3864 27fe 8B45A4   		movl	-92(%rbp), %eax
 3865 2801 4863D0   		movslq	%eax, %rdx
 3866 2804 488B45D8 		movq	-40(%rbp), %rax
 3867 2808 488D1C02 		leaq	(%rdx,%rax), %rbx
 3868 280c 8B45A4   		movl	-92(%rbp), %eax
 3869 280f 4898     		cltq
 3870 2811 488D50FF 		leaq	-1(%rax), %rdx
 3871 2815 488B45D0 		movq	-48(%rbp), %rax
 3872 2819 4801D0   		addq	%rdx, %rax
 3873 281c 0FB600   		movzbl	(%rax), %eax
 3874 281f 0FBEC0   		movsbl	%al, %eax
 3875 2822 BE310000 		movl	$49, %esi
 3875      00
 3876 2827 89C7     		movl	%eax, %edi
 3877 2829 E8000000 		call	xor
 3877      00
 3878 282e 0FBED0   		movsbl	%al, %edx
 3879 2831 8B45A4   		movl	-92(%rbp), %eax
 3880 2834 4863C8   		movslq	%eax, %rcx
 3881 2837 488B45C8 		movq	-56(%rbp), %rax
 3882 283b 4801C8   		addq	%rcx, %rax
 3883 283e 0FB600   		movzbl	(%rax), %eax
 3884 2841 0FBEC0   		movsbl	%al, %eax
 3885 2844 89D6     		movl	%edx, %esi
 3886 2846 89C7     		movl	%eax, %edi
 3887 2848 E8000000 		call	xor
 3887      00
 3888 284d 8803     		movb	%al, (%rbx)
 884:main.c        **** 		Carry[c] = xor(and(Carry[c-1],T[c]),xor(and(Carry[c-1],'1'),and(T[c],'1')));
 3889              		.loc 1 884 0 discriminator 3
 3890 284f 8B45A4   		movl	-92(%rbp), %eax
 3891 2852 4863D0   		movslq	%eax, %rdx
 3892 2855 488B45D0 		movq	-48(%rbp), %rax
 3893 2859 4C8D2402 		leaq	(%rdx,%rax), %r12
 3894 285d 8B45A4   		movl	-92(%rbp), %eax
 3895 2860 4863D0   		movslq	%eax, %rdx
 3896 2863 488B45C8 		movq	-56(%rbp), %rax
 3897 2867 4801D0   		addq	%rdx, %rax
 3898 286a 0FB600   		movzbl	(%rax), %eax
 3899 286d 0FBEC0   		movsbl	%al, %eax
 3900 2870 BE310000 		movl	$49, %esi
 3900      00
 3901 2875 89C7     		movl	%eax, %edi
 3902 2877 E8000000 		call	and
 3902      00
 3903 287c 0FBED8   		movsbl	%al, %ebx
 3904 287f 8B45A4   		movl	-92(%rbp), %eax
 3905 2882 4898     		cltq
 3906 2884 488D50FF 		leaq	-1(%rax), %rdx
 3907 2888 488B45D0 		movq	-48(%rbp), %rax
 3908 288c 4801D0   		addq	%rdx, %rax
 3909 288f 0FB600   		movzbl	(%rax), %eax
 3910 2892 0FBEC0   		movsbl	%al, %eax
 3911 2895 BE310000 		movl	$49, %esi
 3911      00
 3912 289a 89C7     		movl	%eax, %edi
 3913 289c E8000000 		call	and
 3913      00
 3914 28a1 0FBEC0   		movsbl	%al, %eax
 3915 28a4 89DE     		movl	%ebx, %esi
 3916 28a6 89C7     		movl	%eax, %edi
 3917 28a8 E8000000 		call	xor
 3917      00
 3918 28ad 0FBED8   		movsbl	%al, %ebx
 3919 28b0 8B45A4   		movl	-92(%rbp), %eax
 3920 28b3 4863D0   		movslq	%eax, %rdx
 3921 28b6 488B45C8 		movq	-56(%rbp), %rax
 3922 28ba 4801D0   		addq	%rdx, %rax
 3923 28bd 0FB600   		movzbl	(%rax), %eax
 3924 28c0 0FBED0   		movsbl	%al, %edx
 3925 28c3 8B45A4   		movl	-92(%rbp), %eax
 3926 28c6 4898     		cltq
 3927 28c8 488D48FF 		leaq	-1(%rax), %rcx
 3928 28cc 488B45D0 		movq	-48(%rbp), %rax
 3929 28d0 4801C8   		addq	%rcx, %rax
 3930 28d3 0FB600   		movzbl	(%rax), %eax
 3931 28d6 0FBEC0   		movsbl	%al, %eax
 3932 28d9 89D6     		movl	%edx, %esi
 3933 28db 89C7     		movl	%eax, %edi
 3934 28dd E8000000 		call	and
 3934      00
 3935 28e2 0FBEC0   		movsbl	%al, %eax
 3936 28e5 89DE     		movl	%ebx, %esi
 3937 28e7 89C7     		movl	%eax, %edi
 3938 28e9 E8000000 		call	xor
 3938      00
 3939 28ee 41880424 		movb	%al, (%r12)
 882:main.c        **** 	for (int c=1;c<4;c++){
 3940              		.loc 1 882 0 discriminator 3
 3941 28f2 8345A401 		addl	$1, -92(%rbp)
 3942              	.L230:
 882:main.c        **** 	for (int c=1;c<4;c++){
 3943              		.loc 1 882 0 is_stmt 0 discriminator 1
 3944 28f6 837DA403 		cmpl	$3, -92(%rbp)
 3945 28fa 0F8EFEFE 		jle	.L231
 3945      FFFF
 3946              	.LBE28:
 3947              	.LBB29:
 885:main.c        **** 	}
 886:main.c        **** 
 887:main.c        **** 	for (int k=0;k<4;k++) T[k]=Sum[k];
 3948              		.loc 1 887 0 is_stmt 1
 3949 2900 C745A800 		movl	$0, -88(%rbp)
 3949      000000
 3950 2907 EB23     		jmp	.L232
 3951              	.L233:
 3952              		.loc 1 887 0 is_stmt 0 discriminator 3
 3953 2909 8B45A8   		movl	-88(%rbp), %eax
 3954 290c 4863D0   		movslq	%eax, %rdx
 3955 290f 488B45C8 		movq	-56(%rbp), %rax
 3956 2913 4801C2   		addq	%rax, %rdx
 3957 2916 8B45A8   		movl	-88(%rbp), %eax
 3958 2919 4863C8   		movslq	%eax, %rcx
 3959 291c 488B45D8 		movq	-40(%rbp), %rax
 3960 2920 4801C8   		addq	%rcx, %rax
 3961 2923 0FB600   		movzbl	(%rax), %eax
 3962 2926 8802     		movb	%al, (%rdx)
 3963 2928 8345A801 		addl	$1, -88(%rbp)
 3964              	.L232:
 3965              		.loc 1 887 0 discriminator 1
 3966 292c 837DA803 		cmpl	$3, -88(%rbp)
 3967 2930 7ED7     		jle	.L233
 3968              	.LBE29:
 3969              	.LBB30:
 888:main.c        **** 
 889:main.c        **** ///
 890:main.c        **** 	for (int i=0;i<N0;i++){
 3970              		.loc 1 890 0 is_stmt 1
 3971 2932 C745AC00 		movl	$0, -84(%rbp)
 3971      000000
 3972 2939 E91C0200 		jmp	.L234
 3972      00
 3973              	.L243:
 3974              	.LBB31:
 3975              	.LBB32:
 891:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 892:main.c        **** 		for (int j=0;j<32;j++){P[j]=xor(P[j],T[j%4]);}
 3976              		.loc 1 892 0
 3977 293e C745B000 		movl	$0, -80(%rbp)
 3977      000000
 3978 2945 EB4E     		jmp	.L235
 3979              	.L236:
 3980              		.loc 1 892 0 is_stmt 0 discriminator 3
 3981 2947 8B45B0   		movl	-80(%rbp), %eax
 3982 294a 4863D0   		movslq	%eax, %rdx
 3983 294d 488B45C0 		movq	-64(%rbp), %rax
 3984 2951 488D1C02 		leaq	(%rdx,%rax), %rbx
 3985 2955 8B45B0   		movl	-80(%rbp), %eax
 3986 2958 99       		cltd
 3987 2959 C1EA1E   		shrl	$30, %edx
 3988 295c 01D0     		addl	%edx, %eax
 3989 295e 83E003   		andl	$3, %eax
 3990 2961 29D0     		subl	%edx, %eax
 3991 2963 4863D0   		movslq	%eax, %rdx
 3992 2966 488B45C8 		movq	-56(%rbp), %rax
 3993 296a 4801D0   		addq	%rdx, %rax
 3994 296d 0FB600   		movzbl	(%rax), %eax
 3995 2970 0FBED0   		movsbl	%al, %edx
 3996 2973 8B45B0   		movl	-80(%rbp), %eax
 3997 2976 4863C8   		movslq	%eax, %rcx
 3998 2979 488B45C0 		movq	-64(%rbp), %rax
 3999 297d 4801C8   		addq	%rcx, %rax
 4000 2980 0FB600   		movzbl	(%rax), %eax
 4001 2983 0FBEC0   		movsbl	%al, %eax
 4002 2986 89D6     		movl	%edx, %esi
 4003 2988 89C7     		movl	%eax, %edi
 4004 298a E8000000 		call	xor
 4004      00
 4005 298f 8803     		movb	%al, (%rbx)
 4006 2991 8345B001 		addl	$1, -80(%rbp)
 4007              	.L235:
 4008              		.loc 1 892 0 discriminator 1
 4009 2995 837DB01F 		cmpl	$31, -80(%rbp)
 4010 2999 7EAC     		jle	.L236
 4011              	.LBE32:
 893:main.c        **** 
 894:main.c        **** 		char* Carry = malloc(5);
 4012              		.loc 1 894 0 is_stmt 1
 4013 299b BF050000 		movl	$5, %edi
 4013      00
 4014 29a0 E8000000 		call	malloc
 4014      00
 4015 29a5 488945E0 		movq	%rax, -32(%rbp)
 895:main.c        **** 		char* Sum = malloc(5);
 4016              		.loc 1 895 0
 4017 29a9 BF050000 		movl	$5, %edi
 4017      00
 4018 29ae E8000000 		call	malloc
 4018      00
 4019 29b3 488945E8 		movq	%rax, -24(%rbp)
 4020              	.LBB33:
 896:main.c        **** 		for (int l=0;l<4;l++) Carry[l]='0';
 4021              		.loc 1 896 0
 4022 29b7 C745B400 		movl	$0, -76(%rbp)
 4022      000000
 4023 29be EB14     		jmp	.L237
 4024              	.L238:
 4025              		.loc 1 896 0 is_stmt 0 discriminator 3
 4026 29c0 8B45B4   		movl	-76(%rbp), %eax
 4027 29c3 4863D0   		movslq	%eax, %rdx
 4028 29c6 488B45E0 		movq	-32(%rbp), %rax
 4029 29ca 4801D0   		addq	%rdx, %rax
 4030 29cd C60030   		movb	$48, (%rax)
 4031 29d0 8345B401 		addl	$1, -76(%rbp)
 4032              	.L237:
 4033              		.loc 1 896 0 discriminator 1
 4034 29d4 837DB403 		cmpl	$3, -76(%rbp)
 4035 29d8 7EE6     		jle	.L238
 4036              	.LBE33:
 897:main.c        **** 		Sum[0] = xor(T[0],'1');
 4037              		.loc 1 897 0 is_stmt 1
 4038 29da 488B45C8 		movq	-56(%rbp), %rax
 4039 29de 0FB600   		movzbl	(%rax), %eax
 4040 29e1 0FBEC0   		movsbl	%al, %eax
 4041 29e4 BE310000 		movl	$49, %esi
 4041      00
 4042 29e9 89C7     		movl	%eax, %edi
 4043 29eb E8000000 		call	xor
 4043      00
 4044 29f0 89C2     		movl	%eax, %edx
 4045 29f2 488B45E8 		movq	-24(%rbp), %rax
 4046 29f6 8810     		movb	%dl, (%rax)
 898:main.c        **** 		Carry[0] = and(T[0],'1');
 4047              		.loc 1 898 0
 4048 29f8 488B45C8 		movq	-56(%rbp), %rax
 4049 29fc 0FB600   		movzbl	(%rax), %eax
 4050 29ff 0FBEC0   		movsbl	%al, %eax
 4051 2a02 BE310000 		movl	$49, %esi
 4051      00
 4052 2a07 89C7     		movl	%eax, %edi
 4053 2a09 E8000000 		call	and
 4053      00
 4054 2a0e 89C2     		movl	%eax, %edx
 4055 2a10 488B45E0 		movq	-32(%rbp), %rax
 4056 2a14 8810     		movb	%dl, (%rax)
 4057              	.LBB34:
 899:main.c        **** 		for (int c=1;c<4;c++){
 4058              		.loc 1 899 0
 4059 2a16 C745B801 		movl	$1, -72(%rbp)
 4059      000000
 4060 2a1d E9F80000 		jmp	.L239
 4060      00
 4061              	.L240:
 900:main.c        **** 			Sum[c] = xor(T[c],xor(Carry[c-1],'1'));
 4062              		.loc 1 900 0 discriminator 3
 4063 2a22 8B45B8   		movl	-72(%rbp), %eax
 4064 2a25 4863D0   		movslq	%eax, %rdx
 4065 2a28 488B45E8 		movq	-24(%rbp), %rax
 4066 2a2c 488D1C02 		leaq	(%rdx,%rax), %rbx
 4067 2a30 8B45B8   		movl	-72(%rbp), %eax
 4068 2a33 4898     		cltq
 4069 2a35 488D50FF 		leaq	-1(%rax), %rdx
 4070 2a39 488B45E0 		movq	-32(%rbp), %rax
 4071 2a3d 4801D0   		addq	%rdx, %rax
 4072 2a40 0FB600   		movzbl	(%rax), %eax
 4073 2a43 0FBEC0   		movsbl	%al, %eax
 4074 2a46 BE310000 		movl	$49, %esi
 4074      00
 4075 2a4b 89C7     		movl	%eax, %edi
 4076 2a4d E8000000 		call	xor
 4076      00
 4077 2a52 0FBED0   		movsbl	%al, %edx
 4078 2a55 8B45B8   		movl	-72(%rbp), %eax
 4079 2a58 4863C8   		movslq	%eax, %rcx
 4080 2a5b 488B45C8 		movq	-56(%rbp), %rax
 4081 2a5f 4801C8   		addq	%rcx, %rax
 4082 2a62 0FB600   		movzbl	(%rax), %eax
 4083 2a65 0FBEC0   		movsbl	%al, %eax
 4084 2a68 89D6     		movl	%edx, %esi
 4085 2a6a 89C7     		movl	%eax, %edi
 4086 2a6c E8000000 		call	xor
 4086      00
 4087 2a71 8803     		movb	%al, (%rbx)
 901:main.c        **** 			Carry[c] = xor(and(Carry[c-1],T[c]),xor(and(Carry[c-1],'1'),and(T[c],'1')));
 4088              		.loc 1 901 0 discriminator 3
 4089 2a73 8B45B8   		movl	-72(%rbp), %eax
 4090 2a76 4863D0   		movslq	%eax, %rdx
 4091 2a79 488B45E0 		movq	-32(%rbp), %rax
 4092 2a7d 4C8D2402 		leaq	(%rdx,%rax), %r12
 4093 2a81 8B45B8   		movl	-72(%rbp), %eax
 4094 2a84 4863D0   		movslq	%eax, %rdx
 4095 2a87 488B45C8 		movq	-56(%rbp), %rax
 4096 2a8b 4801D0   		addq	%rdx, %rax
 4097 2a8e 0FB600   		movzbl	(%rax), %eax
 4098 2a91 0FBEC0   		movsbl	%al, %eax
 4099 2a94 BE310000 		movl	$49, %esi
 4099      00
 4100 2a99 89C7     		movl	%eax, %edi
 4101 2a9b E8000000 		call	and
 4101      00
 4102 2aa0 0FBED8   		movsbl	%al, %ebx
 4103 2aa3 8B45B8   		movl	-72(%rbp), %eax
 4104 2aa6 4898     		cltq
 4105 2aa8 488D50FF 		leaq	-1(%rax), %rdx
 4106 2aac 488B45E0 		movq	-32(%rbp), %rax
 4107 2ab0 4801D0   		addq	%rdx, %rax
 4108 2ab3 0FB600   		movzbl	(%rax), %eax
 4109 2ab6 0FBEC0   		movsbl	%al, %eax
 4110 2ab9 BE310000 		movl	$49, %esi
 4110      00
 4111 2abe 89C7     		movl	%eax, %edi
 4112 2ac0 E8000000 		call	and
 4112      00
 4113 2ac5 0FBEC0   		movsbl	%al, %eax
 4114 2ac8 89DE     		movl	%ebx, %esi
 4115 2aca 89C7     		movl	%eax, %edi
 4116 2acc E8000000 		call	xor
 4116      00
 4117 2ad1 0FBED8   		movsbl	%al, %ebx
 4118 2ad4 8B45B8   		movl	-72(%rbp), %eax
 4119 2ad7 4863D0   		movslq	%eax, %rdx
 4120 2ada 488B45C8 		movq	-56(%rbp), %rax
 4121 2ade 4801D0   		addq	%rdx, %rax
 4122 2ae1 0FB600   		movzbl	(%rax), %eax
 4123 2ae4 0FBED0   		movsbl	%al, %edx
 4124 2ae7 8B45B8   		movl	-72(%rbp), %eax
 4125 2aea 4898     		cltq
 4126 2aec 488D48FF 		leaq	-1(%rax), %rcx
 4127 2af0 488B45E0 		movq	-32(%rbp), %rax
 4128 2af4 4801C8   		addq	%rcx, %rax
 4129 2af7 0FB600   		movzbl	(%rax), %eax
 4130 2afa 0FBEC0   		movsbl	%al, %eax
 4131 2afd 89D6     		movl	%edx, %esi
 4132 2aff 89C7     		movl	%eax, %edi
 4133 2b01 E8000000 		call	and
 4133      00
 4134 2b06 0FBEC0   		movsbl	%al, %eax
 4135 2b09 89DE     		movl	%ebx, %esi
 4136 2b0b 89C7     		movl	%eax, %edi
 4137 2b0d E8000000 		call	xor
 4137      00
 4138 2b12 41880424 		movb	%al, (%r12)
 899:main.c        **** 		for (int c=1;c<4;c++){
 4139              		.loc 1 899 0 discriminator 3
 4140 2b16 8345B801 		addl	$1, -72(%rbp)
 4141              	.L239:
 899:main.c        **** 		for (int c=1;c<4;c++){
 4142              		.loc 1 899 0 is_stmt 0 discriminator 1
 4143 2b1a 837DB803 		cmpl	$3, -72(%rbp)
 4144 2b1e 0F8EFEFE 		jle	.L240
 4144      FFFF
 4145              	.LBE34:
 4146              	.LBB35:
 902:main.c        **** 		}
 903:main.c        **** 		for (int k=0;k<4;k++) T[k]=Sum[k];
 4147              		.loc 1 903 0 is_stmt 1
 4148 2b24 C745BC00 		movl	$0, -68(%rbp)
 4148      000000
 4149 2b2b EB23     		jmp	.L241
 4150              	.L242:
 4151              		.loc 1 903 0 is_stmt 0 discriminator 3
 4152 2b2d 8B45BC   		movl	-68(%rbp), %eax
 4153 2b30 4863D0   		movslq	%eax, %rdx
 4154 2b33 488B45C8 		movq	-56(%rbp), %rax
 4155 2b37 4801C2   		addq	%rax, %rdx
 4156 2b3a 8B45BC   		movl	-68(%rbp), %eax
 4157 2b3d 4863C8   		movslq	%eax, %rcx
 4158 2b40 488B45E8 		movq	-24(%rbp), %rax
 4159 2b44 4801C8   		addq	%rcx, %rax
 4160 2b47 0FB600   		movzbl	(%rax), %eax
 4161 2b4a 8802     		movb	%al, (%rdx)
 4162 2b4c 8345BC01 		addl	$1, -68(%rbp)
 4163              	.L241:
 4164              		.loc 1 903 0 discriminator 1
 4165 2b50 837DBC03 		cmpl	$3, -68(%rbp)
 4166 2b54 7ED7     		jle	.L242
 4167              	.LBE35:
 4168              	.LBE31:
 890:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 4169              		.loc 1 890 0 is_stmt 1 discriminator 2
 4170 2b56 8345AC01 		addl	$1, -84(%rbp)
 4171              	.L234:
 890:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 4172              		.loc 1 890 0 is_stmt 0 discriminator 1
 4173 2b5a 8B45AC   		movl	-84(%rbp), %eax
 4174 2b5d 3B4594   		cmpl	-108(%rbp), %eax
 4175 2b60 0F8CD8FD 		jl	.L243
 4175      FFFF
 4176              	.LBE30:
 904:main.c        **** 
 905:main.c        **** 	}
 906:main.c        **** 	return P;
 4177              		.loc 1 906 0 is_stmt 1
 4178 2b66 488B45C0 		movq	-64(%rbp), %rax
 907:main.c        **** }
 4179              		.loc 1 907 0
 4180 2b6a 4883C470 		addq	$112, %rsp
 4181 2b6e 5B       		popq	%rbx
 4182 2b6f 415C     		popq	%r12
 4183 2b71 5D       		popq	%rbp
 4184              		.cfi_def_cfa 7, 8
 4185 2b72 C3       		ret
 4186              		.cfi_endproc
 4187              	.LFE23:
 4189              		.globl	encrypt
 4191              	encrypt:
 4192              	.LFB24:
 908:main.c        **** 
 909:main.c        **** char* encrypt(char P[32], char K[32]){
 4193              		.loc 1 909 0
 4194              		.cfi_startproc
 4195 2b73 55       		pushq	%rbp
 4196              		.cfi_def_cfa_offset 16
 4197              		.cfi_offset 6, -16
 4198 2b74 4889E5   		movq	%rsp, %rbp
 4199              		.cfi_def_cfa_register 6
 4200 2b77 53       		pushq	%rbx
 4201 2b78 4883EC58 		subq	$88, %rsp
 4202              		.cfi_offset 3, -24
 4203 2b7c 48897DA8 		movq	%rdi, -88(%rbp)
 4204 2b80 488975A0 		movq	%rsi, -96(%rbp)
 910:main.c        **** 	char* C = malloc(33);
 4205              		.loc 1 910 0
 4206 2b84 BF210000 		movl	$33, %edi
 4206      00
 4207 2b89 E8000000 		call	malloc
 4207      00
 4208 2b8e 488945D8 		movq	%rax, -40(%rbp)
 911:main.c        **** 	int N1=0;
 4209              		.loc 1 911 0
 4210 2b92 C745B000 		movl	$0, -80(%rbp)
 4210      000000
 4211              	.LBB36:
 912:main.c        **** 	for (int i=0;i<32;i++){if (K[i]=='1') N1++;}
 4212              		.loc 1 912 0
 4213 2b99 C745B400 		movl	$0, -76(%rbp)
 4213      000000
 4214 2ba0 EB1C     		jmp	.L246
 4215              	.L248:
 4216              		.loc 1 912 0 is_stmt 0 discriminator 6
 4217 2ba2 8B45B4   		movl	-76(%rbp), %eax
 4218 2ba5 4863D0   		movslq	%eax, %rdx
 4219 2ba8 488B45A0 		movq	-96(%rbp), %rax
 4220 2bac 4801D0   		addq	%rdx, %rax
 4221 2baf 0FB600   		movzbl	(%rax), %eax
 4222 2bb2 3C31     		cmpb	$49, %al
 4223 2bb4 7504     		jne	.L247
 4224              		.loc 1 912 0 discriminator 2
 4225 2bb6 8345B001 		addl	$1, -80(%rbp)
 4226              	.L247:
 4227              		.loc 1 912 0 discriminator 4
 4228 2bba 8345B401 		addl	$1, -76(%rbp)
 4229              	.L246:
 4230              		.loc 1 912 0 discriminator 5
 4231 2bbe 837DB41F 		cmpl	$31, -76(%rbp)
 4232 2bc2 7EDE     		jle	.L248
 4233              	.LBE36:
 4234              	.LBB37:
 913:main.c        **** 	for (int i=0;i<32;i++){C[i]=P[i];}
 4235              		.loc 1 913 0 is_stmt 1
 4236 2bc4 C745B800 		movl	$0, -72(%rbp)
 4236      000000
 4237 2bcb EB23     		jmp	.L249
 4238              	.L250:
 4239              		.loc 1 913 0 is_stmt 0 discriminator 3
 4240 2bcd 8B45B8   		movl	-72(%rbp), %eax
 4241 2bd0 4863D0   		movslq	%eax, %rdx
 4242 2bd3 488B45D8 		movq	-40(%rbp), %rax
 4243 2bd7 4801C2   		addq	%rax, %rdx
 4244 2bda 8B45B8   		movl	-72(%rbp), %eax
 4245 2bdd 4863C8   		movslq	%eax, %rcx
 4246 2be0 488B45A8 		movq	-88(%rbp), %rax
 4247 2be4 4801C8   		addq	%rcx, %rax
 4248 2be7 0FB600   		movzbl	(%rax), %eax
 4249 2bea 8802     		movb	%al, (%rdx)
 4250 2bec 8345B801 		addl	$1, -72(%rbp)
 4251              	.L249:
 4252              		.loc 1 913 0 discriminator 1
 4253 2bf0 837DB81F 		cmpl	$31, -72(%rbp)
 4254 2bf4 7ED7     		jle	.L250
 4255              	.LBE37:
 914:main.c        **** 	char* T = malloc(5) ;
 4256              		.loc 1 914 0 is_stmt 1
 4257 2bf6 BF050000 		movl	$5, %edi
 4257      00
 4258 2bfb E8000000 		call	malloc
 4258      00
 4259 2c00 488945D0 		movq	%rax, -48(%rbp)
 915:main.c        **** 	C[32]='\0'; T[4]='\0';
 4260              		.loc 1 915 0
 4261 2c04 488B45D8 		movq	-40(%rbp), %rax
 4262 2c08 4883C020 		addq	$32, %rax
 4263 2c0c C60000   		movb	$0, (%rax)
 4264 2c0f 488B45D0 		movq	-48(%rbp), %rax
 4265 2c13 4883C004 		addq	$4, %rax
 4266 2c17 C60000   		movb	$0, (%rax)
 916:main.c        **** 	T[3] = xor(K[31],xor(K[27],xor(K[23],xor(K[19],xor(K[15],xor(K[11],xor(K[7],K[3])))))));
 4267              		.loc 1 916 0
 4268 2c1a 488B45D0 		movq	-48(%rbp), %rax
 4269 2c1e 488D5803 		leaq	3(%rax), %rbx
 4270 2c22 488B45A0 		movq	-96(%rbp), %rax
 4271 2c26 4883C003 		addq	$3, %rax
 4272 2c2a 0FB600   		movzbl	(%rax), %eax
 4273 2c2d 0FBED0   		movsbl	%al, %edx
 4274 2c30 488B45A0 		movq	-96(%rbp), %rax
 4275 2c34 4883C007 		addq	$7, %rax
 4276 2c38 0FB600   		movzbl	(%rax), %eax
 4277 2c3b 0FBEC0   		movsbl	%al, %eax
 4278 2c3e 89D6     		movl	%edx, %esi
 4279 2c40 89C7     		movl	%eax, %edi
 4280 2c42 E8000000 		call	xor
 4280      00
 4281 2c47 0FBED0   		movsbl	%al, %edx
 4282 2c4a 488B45A0 		movq	-96(%rbp), %rax
 4283 2c4e 4883C00B 		addq	$11, %rax
 4284 2c52 0FB600   		movzbl	(%rax), %eax
 4285 2c55 0FBEC0   		movsbl	%al, %eax
 4286 2c58 89D6     		movl	%edx, %esi
 4287 2c5a 89C7     		movl	%eax, %edi
 4288 2c5c E8000000 		call	xor
 4288      00
 4289 2c61 0FBED0   		movsbl	%al, %edx
 4290 2c64 488B45A0 		movq	-96(%rbp), %rax
 4291 2c68 4883C00F 		addq	$15, %rax
 4292 2c6c 0FB600   		movzbl	(%rax), %eax
 4293 2c6f 0FBEC0   		movsbl	%al, %eax
 4294 2c72 89D6     		movl	%edx, %esi
 4295 2c74 89C7     		movl	%eax, %edi
 4296 2c76 E8000000 		call	xor
 4296      00
 4297 2c7b 0FBED0   		movsbl	%al, %edx
 4298 2c7e 488B45A0 		movq	-96(%rbp), %rax
 4299 2c82 4883C013 		addq	$19, %rax
 4300 2c86 0FB600   		movzbl	(%rax), %eax
 4301 2c89 0FBEC0   		movsbl	%al, %eax
 4302 2c8c 89D6     		movl	%edx, %esi
 4303 2c8e 89C7     		movl	%eax, %edi
 4304 2c90 E8000000 		call	xor
 4304      00
 4305 2c95 0FBED0   		movsbl	%al, %edx
 4306 2c98 488B45A0 		movq	-96(%rbp), %rax
 4307 2c9c 4883C017 		addq	$23, %rax
 4308 2ca0 0FB600   		movzbl	(%rax), %eax
 4309 2ca3 0FBEC0   		movsbl	%al, %eax
 4310 2ca6 89D6     		movl	%edx, %esi
 4311 2ca8 89C7     		movl	%eax, %edi
 4312 2caa E8000000 		call	xor
 4312      00
 4313 2caf 0FBED0   		movsbl	%al, %edx
 4314 2cb2 488B45A0 		movq	-96(%rbp), %rax
 4315 2cb6 4883C01B 		addq	$27, %rax
 4316 2cba 0FB600   		movzbl	(%rax), %eax
 4317 2cbd 0FBEC0   		movsbl	%al, %eax
 4318 2cc0 89D6     		movl	%edx, %esi
 4319 2cc2 89C7     		movl	%eax, %edi
 4320 2cc4 E8000000 		call	xor
 4320      00
 4321 2cc9 0FBED0   		movsbl	%al, %edx
 4322 2ccc 488B45A0 		movq	-96(%rbp), %rax
 4323 2cd0 4883C01F 		addq	$31, %rax
 4324 2cd4 0FB600   		movzbl	(%rax), %eax
 4325 2cd7 0FBEC0   		movsbl	%al, %eax
 4326 2cda 89D6     		movl	%edx, %esi
 4327 2cdc 89C7     		movl	%eax, %edi
 4328 2cde E8000000 		call	xor
 4328      00
 4329 2ce3 8803     		movb	%al, (%rbx)
 917:main.c        **** 	T[2] = xor(K[30],xor(K[26],xor(K[22],xor(K[18],xor(K[14],xor(K[10],xor(K[6],K[2])))))));
 4330              		.loc 1 917 0
 4331 2ce5 488B45D0 		movq	-48(%rbp), %rax
 4332 2ce9 488D5802 		leaq	2(%rax), %rbx
 4333 2ced 488B45A0 		movq	-96(%rbp), %rax
 4334 2cf1 4883C002 		addq	$2, %rax
 4335 2cf5 0FB600   		movzbl	(%rax), %eax
 4336 2cf8 0FBED0   		movsbl	%al, %edx
 4337 2cfb 488B45A0 		movq	-96(%rbp), %rax
 4338 2cff 4883C006 		addq	$6, %rax
 4339 2d03 0FB600   		movzbl	(%rax), %eax
 4340 2d06 0FBEC0   		movsbl	%al, %eax
 4341 2d09 89D6     		movl	%edx, %esi
 4342 2d0b 89C7     		movl	%eax, %edi
 4343 2d0d E8000000 		call	xor
 4343      00
 4344 2d12 0FBED0   		movsbl	%al, %edx
 4345 2d15 488B45A0 		movq	-96(%rbp), %rax
 4346 2d19 4883C00A 		addq	$10, %rax
 4347 2d1d 0FB600   		movzbl	(%rax), %eax
 4348 2d20 0FBEC0   		movsbl	%al, %eax
 4349 2d23 89D6     		movl	%edx, %esi
 4350 2d25 89C7     		movl	%eax, %edi
 4351 2d27 E8000000 		call	xor
 4351      00
 4352 2d2c 0FBED0   		movsbl	%al, %edx
 4353 2d2f 488B45A0 		movq	-96(%rbp), %rax
 4354 2d33 4883C00E 		addq	$14, %rax
 4355 2d37 0FB600   		movzbl	(%rax), %eax
 4356 2d3a 0FBEC0   		movsbl	%al, %eax
 4357 2d3d 89D6     		movl	%edx, %esi
 4358 2d3f 89C7     		movl	%eax, %edi
 4359 2d41 E8000000 		call	xor
 4359      00
 4360 2d46 0FBED0   		movsbl	%al, %edx
 4361 2d49 488B45A0 		movq	-96(%rbp), %rax
 4362 2d4d 4883C012 		addq	$18, %rax
 4363 2d51 0FB600   		movzbl	(%rax), %eax
 4364 2d54 0FBEC0   		movsbl	%al, %eax
 4365 2d57 89D6     		movl	%edx, %esi
 4366 2d59 89C7     		movl	%eax, %edi
 4367 2d5b E8000000 		call	xor
 4367      00
 4368 2d60 0FBED0   		movsbl	%al, %edx
 4369 2d63 488B45A0 		movq	-96(%rbp), %rax
 4370 2d67 4883C016 		addq	$22, %rax
 4371 2d6b 0FB600   		movzbl	(%rax), %eax
 4372 2d6e 0FBEC0   		movsbl	%al, %eax
 4373 2d71 89D6     		movl	%edx, %esi
 4374 2d73 89C7     		movl	%eax, %edi
 4375 2d75 E8000000 		call	xor
 4375      00
 4376 2d7a 0FBED0   		movsbl	%al, %edx
 4377 2d7d 488B45A0 		movq	-96(%rbp), %rax
 4378 2d81 4883C01A 		addq	$26, %rax
 4379 2d85 0FB600   		movzbl	(%rax), %eax
 4380 2d88 0FBEC0   		movsbl	%al, %eax
 4381 2d8b 89D6     		movl	%edx, %esi
 4382 2d8d 89C7     		movl	%eax, %edi
 4383 2d8f E8000000 		call	xor
 4383      00
 4384 2d94 0FBED0   		movsbl	%al, %edx
 4385 2d97 488B45A0 		movq	-96(%rbp), %rax
 4386 2d9b 4883C01E 		addq	$30, %rax
 4387 2d9f 0FB600   		movzbl	(%rax), %eax
 4388 2da2 0FBEC0   		movsbl	%al, %eax
 4389 2da5 89D6     		movl	%edx, %esi
 4390 2da7 89C7     		movl	%eax, %edi
 4391 2da9 E8000000 		call	xor
 4391      00
 4392 2dae 8803     		movb	%al, (%rbx)
 918:main.c        **** 	T[1] = xor(K[29],xor(K[25],xor(K[21],xor(K[17],xor(K[13],xor(K[9],xor(K[5],K[1])))))));
 4393              		.loc 1 918 0
 4394 2db0 488B45D0 		movq	-48(%rbp), %rax
 4395 2db4 488D5801 		leaq	1(%rax), %rbx
 4396 2db8 488B45A0 		movq	-96(%rbp), %rax
 4397 2dbc 4883C001 		addq	$1, %rax
 4398 2dc0 0FB600   		movzbl	(%rax), %eax
 4399 2dc3 0FBED0   		movsbl	%al, %edx
 4400 2dc6 488B45A0 		movq	-96(%rbp), %rax
 4401 2dca 4883C005 		addq	$5, %rax
 4402 2dce 0FB600   		movzbl	(%rax), %eax
 4403 2dd1 0FBEC0   		movsbl	%al, %eax
 4404 2dd4 89D6     		movl	%edx, %esi
 4405 2dd6 89C7     		movl	%eax, %edi
 4406 2dd8 E8000000 		call	xor
 4406      00
 4407 2ddd 0FBED0   		movsbl	%al, %edx
 4408 2de0 488B45A0 		movq	-96(%rbp), %rax
 4409 2de4 4883C009 		addq	$9, %rax
 4410 2de8 0FB600   		movzbl	(%rax), %eax
 4411 2deb 0FBEC0   		movsbl	%al, %eax
 4412 2dee 89D6     		movl	%edx, %esi
 4413 2df0 89C7     		movl	%eax, %edi
 4414 2df2 E8000000 		call	xor
 4414      00
 4415 2df7 0FBED0   		movsbl	%al, %edx
 4416 2dfa 488B45A0 		movq	-96(%rbp), %rax
 4417 2dfe 4883C00D 		addq	$13, %rax
 4418 2e02 0FB600   		movzbl	(%rax), %eax
 4419 2e05 0FBEC0   		movsbl	%al, %eax
 4420 2e08 89D6     		movl	%edx, %esi
 4421 2e0a 89C7     		movl	%eax, %edi
 4422 2e0c E8000000 		call	xor
 4422      00
 4423 2e11 0FBED0   		movsbl	%al, %edx
 4424 2e14 488B45A0 		movq	-96(%rbp), %rax
 4425 2e18 4883C011 		addq	$17, %rax
 4426 2e1c 0FB600   		movzbl	(%rax), %eax
 4427 2e1f 0FBEC0   		movsbl	%al, %eax
 4428 2e22 89D6     		movl	%edx, %esi
 4429 2e24 89C7     		movl	%eax, %edi
 4430 2e26 E8000000 		call	xor
 4430      00
 4431 2e2b 0FBED0   		movsbl	%al, %edx
 4432 2e2e 488B45A0 		movq	-96(%rbp), %rax
 4433 2e32 4883C015 		addq	$21, %rax
 4434 2e36 0FB600   		movzbl	(%rax), %eax
 4435 2e39 0FBEC0   		movsbl	%al, %eax
 4436 2e3c 89D6     		movl	%edx, %esi
 4437 2e3e 89C7     		movl	%eax, %edi
 4438 2e40 E8000000 		call	xor
 4438      00
 4439 2e45 0FBED0   		movsbl	%al, %edx
 4440 2e48 488B45A0 		movq	-96(%rbp), %rax
 4441 2e4c 4883C019 		addq	$25, %rax
 4442 2e50 0FB600   		movzbl	(%rax), %eax
 4443 2e53 0FBEC0   		movsbl	%al, %eax
 4444 2e56 89D6     		movl	%edx, %esi
 4445 2e58 89C7     		movl	%eax, %edi
 4446 2e5a E8000000 		call	xor
 4446      00
 4447 2e5f 0FBED0   		movsbl	%al, %edx
 4448 2e62 488B45A0 		movq	-96(%rbp), %rax
 4449 2e66 4883C01D 		addq	$29, %rax
 4450 2e6a 0FB600   		movzbl	(%rax), %eax
 4451 2e6d 0FBEC0   		movsbl	%al, %eax
 4452 2e70 89D6     		movl	%edx, %esi
 4453 2e72 89C7     		movl	%eax, %edi
 4454 2e74 E8000000 		call	xor
 4454      00
 4455 2e79 8803     		movb	%al, (%rbx)
 919:main.c        **** 	T[0] = xor(K[28],xor(K[24],xor(K[20],xor(K[16],xor(K[12],xor(K[8],xor(K[4],K[0])))))));
 4456              		.loc 1 919 0
 4457 2e7b 488B45A0 		movq	-96(%rbp), %rax
 4458 2e7f 0FB600   		movzbl	(%rax), %eax
 4459 2e82 0FBED0   		movsbl	%al, %edx
 4460 2e85 488B45A0 		movq	-96(%rbp), %rax
 4461 2e89 4883C004 		addq	$4, %rax
 4462 2e8d 0FB600   		movzbl	(%rax), %eax
 4463 2e90 0FBEC0   		movsbl	%al, %eax
 4464 2e93 89D6     		movl	%edx, %esi
 4465 2e95 89C7     		movl	%eax, %edi
 4466 2e97 E8000000 		call	xor
 4466      00
 4467 2e9c 0FBED0   		movsbl	%al, %edx
 4468 2e9f 488B45A0 		movq	-96(%rbp), %rax
 4469 2ea3 4883C008 		addq	$8, %rax
 4470 2ea7 0FB600   		movzbl	(%rax), %eax
 4471 2eaa 0FBEC0   		movsbl	%al, %eax
 4472 2ead 89D6     		movl	%edx, %esi
 4473 2eaf 89C7     		movl	%eax, %edi
 4474 2eb1 E8000000 		call	xor
 4474      00
 4475 2eb6 0FBED0   		movsbl	%al, %edx
 4476 2eb9 488B45A0 		movq	-96(%rbp), %rax
 4477 2ebd 4883C00C 		addq	$12, %rax
 4478 2ec1 0FB600   		movzbl	(%rax), %eax
 4479 2ec4 0FBEC0   		movsbl	%al, %eax
 4480 2ec7 89D6     		movl	%edx, %esi
 4481 2ec9 89C7     		movl	%eax, %edi
 4482 2ecb E8000000 		call	xor
 4482      00
 4483 2ed0 0FBED0   		movsbl	%al, %edx
 4484 2ed3 488B45A0 		movq	-96(%rbp), %rax
 4485 2ed7 4883C010 		addq	$16, %rax
 4486 2edb 0FB600   		movzbl	(%rax), %eax
 4487 2ede 0FBEC0   		movsbl	%al, %eax
 4488 2ee1 89D6     		movl	%edx, %esi
 4489 2ee3 89C7     		movl	%eax, %edi
 4490 2ee5 E8000000 		call	xor
 4490      00
 4491 2eea 0FBED0   		movsbl	%al, %edx
 4492 2eed 488B45A0 		movq	-96(%rbp), %rax
 4493 2ef1 4883C014 		addq	$20, %rax
 4494 2ef5 0FB600   		movzbl	(%rax), %eax
 4495 2ef8 0FBEC0   		movsbl	%al, %eax
 4496 2efb 89D6     		movl	%edx, %esi
 4497 2efd 89C7     		movl	%eax, %edi
 4498 2eff E8000000 		call	xor
 4498      00
 4499 2f04 0FBED0   		movsbl	%al, %edx
 4500 2f07 488B45A0 		movq	-96(%rbp), %rax
 4501 2f0b 4883C018 		addq	$24, %rax
 4502 2f0f 0FB600   		movzbl	(%rax), %eax
 4503 2f12 0FBEC0   		movsbl	%al, %eax
 4504 2f15 89D6     		movl	%edx, %esi
 4505 2f17 89C7     		movl	%eax, %edi
 4506 2f19 E8000000 		call	xor
 4506      00
 4507 2f1e 0FBED0   		movsbl	%al, %edx
 4508 2f21 488B45A0 		movq	-96(%rbp), %rax
 4509 2f25 4883C01C 		addq	$28, %rax
 4510 2f29 0FB600   		movzbl	(%rax), %eax
 4511 2f2c 0FBEC0   		movsbl	%al, %eax
 4512 2f2f 89D6     		movl	%edx, %esi
 4513 2f31 89C7     		movl	%eax, %edi
 4514 2f33 E8000000 		call	xor
 4514      00
 4515 2f38 89C2     		movl	%eax, %edx
 4516 2f3a 488B45D0 		movq	-48(%rbp), %rax
 4517 2f3e 8810     		movb	%dl, (%rax)
 4518              	.LBB38:
 920:main.c        **** 
 921:main.c        **** 	// char* T8 = malloc(33);
 922:main.c        **** 
 923:main.c        **** 	for (int i=0;i<N1;i++){
 4519              		.loc 1 923 0
 4520 2f40 C745BC00 		movl	$0, -68(%rbp)
 4520      000000
 4521 2f47 E9CF0100 		jmp	.L251
 4521      00
 4522              	.L262:
 4523              	.LBB39:
 924:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 925:main.c        **** 		for (int j=0;j<32;j++){C[j]=xor(C[j],T[j%4]);}
 4524              		.loc 1 925 0
 4525 2f4c C745C000 		movl	$0, -64(%rbp)
 4525      000000
 4526 2f53 EB4E     		jmp	.L252
 4527              	.L253:
 4528              		.loc 1 925 0 is_stmt 0 discriminator 3
 4529 2f55 8B45C0   		movl	-64(%rbp), %eax
 4530 2f58 4863D0   		movslq	%eax, %rdx
 4531 2f5b 488B45D8 		movq	-40(%rbp), %rax
 4532 2f5f 488D1C02 		leaq	(%rdx,%rax), %rbx
 4533 2f63 8B45C0   		movl	-64(%rbp), %eax
 4534 2f66 99       		cltd
 4535 2f67 C1EA1E   		shrl	$30, %edx
 4536 2f6a 01D0     		addl	%edx, %eax
 4537 2f6c 83E003   		andl	$3, %eax
 4538 2f6f 29D0     		subl	%edx, %eax
 4539 2f71 4863D0   		movslq	%eax, %rdx
 4540 2f74 488B45D0 		movq	-48(%rbp), %rax
 4541 2f78 4801D0   		addq	%rdx, %rax
 4542 2f7b 0FB600   		movzbl	(%rax), %eax
 4543 2f7e 0FBED0   		movsbl	%al, %edx
 4544 2f81 8B45C0   		movl	-64(%rbp), %eax
 4545 2f84 4863C8   		movslq	%eax, %rcx
 4546 2f87 488B45D8 		movq	-40(%rbp), %rax
 4547 2f8b 4801C8   		addq	%rcx, %rax
 4548 2f8e 0FB600   		movzbl	(%rax), %eax
 4549 2f91 0FBEC0   		movsbl	%al, %eax
 4550 2f94 89D6     		movl	%edx, %esi
 4551 2f96 89C7     		movl	%eax, %edi
 4552 2f98 E8000000 		call	xor
 4552      00
 4553 2f9d 8803     		movb	%al, (%rbx)
 4554 2f9f 8345C001 		addl	$1, -64(%rbp)
 4555              	.L252:
 4556              		.loc 1 925 0 discriminator 1
 4557 2fa3 837DC01F 		cmpl	$31, -64(%rbp)
 4558 2fa7 7EAC     		jle	.L253
 4559              	.LBE39:
 926:main.c        **** 		if(strcmp(T,"1111") == 1) T="0000";
 4560              		.loc 1 926 0 is_stmt 1
 4561 2fa9 488B45D0 		movq	-48(%rbp), %rax
 4562 2fad BE000000 		movl	$.LC54, %esi
 4562      00
 4563 2fb2 4889C7   		movq	%rax, %rdi
 4564 2fb5 E8000000 		call	strcmp
 4564      00
 4565 2fba 83F801   		cmpl	$1, %eax
 4566 2fbd 750D     		jne	.L254
 4567              		.loc 1 926 0 is_stmt 0 discriminator 1
 4568 2fbf 48C745D0 		movq	$.LC38, -48(%rbp)
 4568      00000000 
 4569 2fc7 E94B0100 		jmp	.L255
 4569      00
 4570              	.L254:
 4571              	.LBB40:
 927:main.c        **** 		else {
 928:main.c        **** 			char* Carry = malloc(4);
 4572              		.loc 1 928 0 is_stmt 1
 4573 2fcc BF040000 		movl	$4, %edi
 4573      00
 4574 2fd1 E8000000 		call	malloc
 4574      00
 4575 2fd6 488945E0 		movq	%rax, -32(%rbp)
 929:main.c        **** 			char* Sum = malloc(4);
 4576              		.loc 1 929 0
 4577 2fda BF040000 		movl	$4, %edi
 4577      00
 4578 2fdf E8000000 		call	malloc
 4578      00
 4579 2fe4 488945E8 		movq	%rax, -24(%rbp)
 4580              	.LBB41:
 930:main.c        **** 			for (int l=0;l<4;l++) Carry[l]='0';
 4581              		.loc 1 930 0
 4582 2fe8 C745C400 		movl	$0, -60(%rbp)
 4582      000000
 4583 2fef EB14     		jmp	.L256
 4584              	.L257:
 4585              		.loc 1 930 0 is_stmt 0 discriminator 3
 4586 2ff1 8B45C4   		movl	-60(%rbp), %eax
 4587 2ff4 4863D0   		movslq	%eax, %rdx
 4588 2ff7 488B45E0 		movq	-32(%rbp), %rax
 4589 2ffb 4801D0   		addq	%rdx, %rax
 4590 2ffe C60030   		movb	$48, (%rax)
 4591 3001 8345C401 		addl	$1, -60(%rbp)
 4592              	.L256:
 4593              		.loc 1 930 0 discriminator 1
 4594 3005 837DC403 		cmpl	$3, -60(%rbp)
 4595 3009 7EE6     		jle	.L257
 4596              	.LBE41:
 931:main.c        **** 			Sum[0] = xor(T[0],'1');
 4597              		.loc 1 931 0 is_stmt 1
 4598 300b 488B45D0 		movq	-48(%rbp), %rax
 4599 300f 0FB600   		movzbl	(%rax), %eax
 4600 3012 0FBEC0   		movsbl	%al, %eax
 4601 3015 BE310000 		movl	$49, %esi
 4601      00
 4602 301a 89C7     		movl	%eax, %edi
 4603 301c E8000000 		call	xor
 4603      00
 4604 3021 89C2     		movl	%eax, %edx
 4605 3023 488B45E8 		movq	-24(%rbp), %rax
 4606 3027 8810     		movb	%dl, (%rax)
 932:main.c        **** 			Carry[0] = and(T[0],'1');
 4607              		.loc 1 932 0
 4608 3029 488B45D0 		movq	-48(%rbp), %rax
 4609 302d 0FB600   		movzbl	(%rax), %eax
 4610 3030 0FBEC0   		movsbl	%al, %eax
 4611 3033 BE310000 		movl	$49, %esi
 4611      00
 4612 3038 89C7     		movl	%eax, %edi
 4613 303a E8000000 		call	and
 4613      00
 4614 303f 89C2     		movl	%eax, %edx
 4615 3041 488B45E0 		movq	-32(%rbp), %rax
 4616 3045 8810     		movb	%dl, (%rax)
 4617              	.LBB42:
 933:main.c        **** 			for (int c=1;c<4;c++){
 4618              		.loc 1 933 0
 4619 3047 C745C801 		movl	$1, -56(%rbp)
 4619      000000
 4620 304e E9880000 		jmp	.L258
 4620      00
 4621              	.L259:
 934:main.c        **** 				Sum[c] = xor(T[c],Carry[c-1]);
 4622              		.loc 1 934 0 discriminator 3
 4623 3053 8B45C8   		movl	-56(%rbp), %eax
 4624 3056 4863D0   		movslq	%eax, %rdx
 4625 3059 488B45E8 		movq	-24(%rbp), %rax
 4626 305d 488D1C02 		leaq	(%rdx,%rax), %rbx
 4627 3061 8B45C8   		movl	-56(%rbp), %eax
 4628 3064 4898     		cltq
 4629 3066 488D50FF 		leaq	-1(%rax), %rdx
 4630 306a 488B45E0 		movq	-32(%rbp), %rax
 4631 306e 4801D0   		addq	%rdx, %rax
 4632 3071 0FB600   		movzbl	(%rax), %eax
 4633 3074 0FBED0   		movsbl	%al, %edx
 4634 3077 8B45C8   		movl	-56(%rbp), %eax
 4635 307a 4863C8   		movslq	%eax, %rcx
 4636 307d 488B45D0 		movq	-48(%rbp), %rax
 4637 3081 4801C8   		addq	%rcx, %rax
 4638 3084 0FB600   		movzbl	(%rax), %eax
 4639 3087 0FBEC0   		movsbl	%al, %eax
 4640 308a 89D6     		movl	%edx, %esi
 4641 308c 89C7     		movl	%eax, %edi
 4642 308e E8000000 		call	xor
 4642      00
 4643 3093 8803     		movb	%al, (%rbx)
 935:main.c        **** 				Carry[c] = and(Carry[c-1],T[c]);
 4644              		.loc 1 935 0 discriminator 3
 4645 3095 8B45C8   		movl	-56(%rbp), %eax
 4646 3098 4863D0   		movslq	%eax, %rdx
 4647 309b 488B45E0 		movq	-32(%rbp), %rax
 4648 309f 488D1C02 		leaq	(%rdx,%rax), %rbx
 4649 30a3 8B45C8   		movl	-56(%rbp), %eax
 4650 30a6 4863D0   		movslq	%eax, %rdx
 4651 30a9 488B45D0 		movq	-48(%rbp), %rax
 4652 30ad 4801D0   		addq	%rdx, %rax
 4653 30b0 0FB600   		movzbl	(%rax), %eax
 4654 30b3 0FBED0   		movsbl	%al, %edx
 4655 30b6 8B45C8   		movl	-56(%rbp), %eax
 4656 30b9 4898     		cltq
 4657 30bb 488D48FF 		leaq	-1(%rax), %rcx
 4658 30bf 488B45E0 		movq	-32(%rbp), %rax
 4659 30c3 4801C8   		addq	%rcx, %rax
 4660 30c6 0FB600   		movzbl	(%rax), %eax
 4661 30c9 0FBEC0   		movsbl	%al, %eax
 4662 30cc 89D6     		movl	%edx, %esi
 4663 30ce 89C7     		movl	%eax, %edi
 4664 30d0 E8000000 		call	and
 4664      00
 4665 30d5 8803     		movb	%al, (%rbx)
 933:main.c        **** 			for (int c=1;c<4;c++){
 4666              		.loc 1 933 0 discriminator 3
 4667 30d7 8345C801 		addl	$1, -56(%rbp)
 4668              	.L258:
 933:main.c        **** 			for (int c=1;c<4;c++){
 4669              		.loc 1 933 0 is_stmt 0 discriminator 1
 4670 30db 837DC803 		cmpl	$3, -56(%rbp)
 4671 30df 0F8E6EFF 		jle	.L259
 4671      FFFF
 4672              	.LBE42:
 4673              	.LBB43:
 936:main.c        **** 			}
 937:main.c        **** 			for(int k=0;k<4;k++) T[k]=Sum[k];
 4674              		.loc 1 937 0 is_stmt 1
 4675 30e5 C745CC00 		movl	$0, -52(%rbp)
 4675      000000
 4676 30ec EB23     		jmp	.L260
 4677              	.L261:
 4678              		.loc 1 937 0 is_stmt 0 discriminator 3
 4679 30ee 8B45CC   		movl	-52(%rbp), %eax
 4680 30f1 4863D0   		movslq	%eax, %rdx
 4681 30f4 488B45D0 		movq	-48(%rbp), %rax
 4682 30f8 4801C2   		addq	%rax, %rdx
 4683 30fb 8B45CC   		movl	-52(%rbp), %eax
 4684 30fe 4863C8   		movslq	%eax, %rcx
 4685 3101 488B45E8 		movq	-24(%rbp), %rax
 4686 3105 4801C8   		addq	%rcx, %rax
 4687 3108 0FB600   		movzbl	(%rax), %eax
 4688 310b 8802     		movb	%al, (%rdx)
 4689 310d 8345CC01 		addl	$1, -52(%rbp)
 4690              	.L260:
 4691              		.loc 1 937 0 discriminator 1
 4692 3111 837DCC03 		cmpl	$3, -52(%rbp)
 4693 3115 7ED7     		jle	.L261
 4694              	.L255:
 4695              	.LBE43:
 4696              	.LBE40:
 923:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 4697              		.loc 1 923 0 is_stmt 1 discriminator 2
 4698 3117 8345BC01 		addl	$1, -68(%rbp)
 4699              	.L251:
 923:main.c        **** 		// for (int j=0;j<32;j++){T8[j] = T[j%4];}
 4700              		.loc 1 923 0 is_stmt 0 discriminator 1
 4701 311b 8B45BC   		movl	-68(%rbp), %eax
 4702 311e 3B45B0   		cmpl	-80(%rbp), %eax
 4703 3121 0F8C25FE 		jl	.L262
 4703      FFFF
 4704              	.LBE38:
 938:main.c        **** 
 939:main.c        **** 		}
 940:main.c        **** 	}
 941:main.c        **** 	return C;
 4705              		.loc 1 941 0 is_stmt 1
 4706 3127 488B45D8 		movq	-40(%rbp), %rax
 942:main.c        **** }
 4707              		.loc 1 942 0
 4708 312b 4883C458 		addq	$88, %rsp
 4709 312f 5B       		popq	%rbx
 4710 3130 5D       		popq	%rbp
 4711              		.cfi_def_cfa 7, 8
 4712 3131 C3       		ret
 4713              		.cfi_endproc
 4714              	.LFE24:
 4716              		.globl	read_byte
 4718              	read_byte:
 4719              	.LFB25:
 943:main.c        **** 
 944:main.c        **** char * read_byte(uint8 a){
 4720              		.loc 1 944 0
 4721              		.cfi_startproc
 4722 3132 55       		pushq	%rbp
 4723              		.cfi_def_cfa_offset 16
 4724              		.cfi_offset 6, -16
 4725 3133 4889E5   		movq	%rsp, %rbp
 4726              		.cfi_def_cfa_register 6
 4727 3136 4883EC20 		subq	$32, %rsp
 4728 313a 89F8     		movl	%edi, %eax
 4729 313c 8845EC   		movb	%al, -20(%rbp)
 945:main.c        **** 		char* ans=malloc(9); 
 4730              		.loc 1 945 0
 4731 313f BF090000 		movl	$9, %edi
 4731      00
 4732 3144 E8000000 		call	malloc
 4732      00
 4733 3149 488945F8 		movq	%rax, -8(%rbp)
 4734              	.LBB44:
 946:main.c        **** 		for(int i=0;i<8;i++) {
 4735              		.loc 1 946 0
 4736 314d C745F400 		movl	$0, -12(%rbp)
 4736      000000
 4737 3154 EB3A     		jmp	.L265
 4738              	.L268:
 947:main.c        **** 				if(a%2==0) { ans[i]= '0'; }
 4739              		.loc 1 947 0
 4740 3156 0FB645EC 		movzbl	-20(%rbp), %eax
 4741 315a 83E001   		andl	$1, %eax
 4742 315d 84C0     		testb	%al, %al
 4743 315f 7512     		jne	.L266
 4744              		.loc 1 947 0 is_stmt 0 discriminator 1
 4745 3161 8B45F4   		movl	-12(%rbp), %eax
 4746 3164 4863D0   		movslq	%eax, %rdx
 4747 3167 488B45F8 		movq	-8(%rbp), %rax
 4748 316b 4801D0   		addq	%rdx, %rax
 4749 316e C60030   		movb	$48, (%rax)
 4750 3171 EB10     		jmp	.L267
 4751              	.L266:
 948:main.c        **** 				else { ans[i]='1'; }
 4752              		.loc 1 948 0 is_stmt 1
 4753 3173 8B45F4   		movl	-12(%rbp), %eax
 4754 3176 4863D0   		movslq	%eax, %rdx
 4755 3179 488B45F8 		movq	-8(%rbp), %rax
 4756 317d 4801D0   		addq	%rdx, %rax
 4757 3180 C60031   		movb	$49, (%rax)
 4758              	.L267:
 949:main.c        **** 				a/=2; 
 4759              		.loc 1 949 0 discriminator 2
 4760 3183 0FB645EC 		movzbl	-20(%rbp), %eax
 4761 3187 D0E8     		shrb	%al
 4762 3189 8845EC   		movb	%al, -20(%rbp)
 946:main.c        **** 				if(a%2==0) { ans[i]= '0'; }
 4763              		.loc 1 946 0 discriminator 2
 4764 318c 8345F401 		addl	$1, -12(%rbp)
 4765              	.L265:
 946:main.c        **** 				if(a%2==0) { ans[i]= '0'; }
 4766              		.loc 1 946 0 is_stmt 0 discriminator 1
 4767 3190 837DF407 		cmpl	$7, -12(%rbp)
 4768 3194 7EC0     		jle	.L268
 4769              	.LBE44:
 950:main.c        **** 		}
 951:main.c        **** 		ans[8]='\0'; 
 4770              		.loc 1 951 0 is_stmt 1
 4771 3196 488B45F8 		movq	-8(%rbp), %rax
 4772 319a 4883C008 		addq	$8, %rax
 4773 319e C60000   		movb	$0, (%rax)
 952:main.c        **** 		return ans; 
 4774              		.loc 1 952 0
 4775 31a1 488B45F8 		movq	-8(%rbp), %rax
 953:main.c        **** }
 4776              		.loc 1 953 0
 4777 31a5 C9       		leave
 4778              		.cfi_def_cfa 7, 8
 4779 31a6 C3       		ret
 4780              		.cfi_endproc
 4781              	.LFE25:
 4783              		.globl	write_4byte_to_board
 4785              	write_4byte_to_board:
 4786              	.LFB26:
 954:main.c        **** 
 955:main.c        **** char write_4byte_to_board(int chan, const char * data, struct FLContext *handle, const char * error
 4787              		.loc 1 955 0
 4788              		.cfi_startproc
 4789 31a7 55       		pushq	%rbp
 4790              		.cfi_def_cfa_offset 16
 4791              		.cfi_offset 6, -16
 4792 31a8 4889E5   		movq	%rsp, %rbp
 4793              		.cfi_def_cfa_register 6
 4794 31ab 4883EC60 		subq	$96, %rsp
 4795 31af 897DBC   		movl	%edi, -68(%rbp)
 4796 31b2 488975B0 		movq	%rsi, -80(%rbp)
 4797 31b6 488955A8 		movq	%rdx, -88(%rbp)
 4798 31ba 48894DA0 		movq	%rcx, -96(%rbp)
 4799 31be 448945B8 		movl	%r8d, -72(%rbp)
 4800              		.loc 1 955 0
 4801 31c2 64488B04 		movq	%fs:40, %rax
 4801      25280000 
 4801      00
 4802 31cb 488945F8 		movq	%rax, -8(%rbp)
 4803 31cf 31C0     		xorl	%eax, %eax
 956:main.c        ****         char* to_enc = malloc(33);
 4804              		.loc 1 956 0
 4805 31d1 BF210000 		movl	$33, %edi
 4805      00
 4806 31d6 E8000000 		call	malloc
 4806      00
 4807 31db 488945E0 		movq	%rax, -32(%rbp)
 4808              	.LBB45:
 957:main.c        ****         for(int i=0; i< 4; i++)
 4809              		.loc 1 957 0
 4810 31df C745CC00 		movl	$0, -52(%rbp)
 4810      000000
 4811 31e6 EB4B     		jmp	.L271
 4812              	.L274:
 4813              	.LBB46:
 958:main.c        ****             for(int j= 0; j<8; j++)
 4814              		.loc 1 958 0
 4815 31e8 C745D000 		movl	$0, -48(%rbp)
 4815      000000
 4816 31ef EB38     		jmp	.L272
 4817              	.L273:
 959:main.c        ****                 to_enc[i*8 +j] = data[i*8 + 7 - j];
 4818              		.loc 1 959 0 discriminator 3
 4819 31f1 8B45CC   		movl	-52(%rbp), %eax
 4820 31f4 8D14C500 		leal	0(,%rax,8), %edx
 4820      000000
 4821 31fb 8B45D0   		movl	-48(%rbp), %eax
 4822 31fe 01D0     		addl	%edx, %eax
 4823 3200 4863D0   		movslq	%eax, %rdx
 4824 3203 488B45E0 		movq	-32(%rbp), %rax
 4825 3207 4801C2   		addq	%rax, %rdx
 4826 320a 8B45CC   		movl	-52(%rbp), %eax
 4827 320d C1E003   		sall	$3, %eax
 4828 3210 83C007   		addl	$7, %eax
 4829 3213 2B45D0   		subl	-48(%rbp), %eax
 4830 3216 4863C8   		movslq	%eax, %rcx
 4831 3219 488B45B0 		movq	-80(%rbp), %rax
 4832 321d 4801C8   		addq	%rcx, %rax
 4833 3220 0FB600   		movzbl	(%rax), %eax
 4834 3223 8802     		movb	%al, (%rdx)
 958:main.c        ****             for(int j= 0; j<8; j++)
 4835              		.loc 1 958 0 discriminator 3
 4836 3225 8345D001 		addl	$1, -48(%rbp)
 4837              	.L272:
 958:main.c        ****             for(int j= 0; j<8; j++)
 4838              		.loc 1 958 0 is_stmt 0 discriminator 1
 4839 3229 837DD007 		cmpl	$7, -48(%rbp)
 4840 322d 7EC2     		jle	.L273
 4841              	.LBE46:
 957:main.c        ****         for(int i=0; i< 4; i++)
 4842              		.loc 1 957 0 is_stmt 1 discriminator 2
 4843 322f 8345CC01 		addl	$1, -52(%rbp)
 4844              	.L271:
 957:main.c        ****         for(int i=0; i< 4; i++)
 4845              		.loc 1 957 0 is_stmt 0 discriminator 1
 4846 3233 837DCC03 		cmpl	$3, -52(%rbp)
 4847 3237 7EAF     		jle	.L274
 4848              	.LBE45:
 960:main.c        ****         to_enc[32] = '\0';
 4849              		.loc 1 960 0 is_stmt 1
 4850 3239 488B45E0 		movq	-32(%rbp), %rax
 4851 323d 4883C020 		addq	$32, %rax
 4852 3241 C60000   		movb	$0, (%rax)
 961:main.c        **** 		char *enc_data=encrypt(to_enc,key); 
 4853              		.loc 1 961 0
 4854 3244 488B1500 		movq	key(%rip), %rdx
 4854      000000
 4855 324b 488B45E0 		movq	-32(%rbp), %rax
 4856 324f 4889D6   		movq	%rdx, %rsi
 4857 3252 4889C7   		movq	%rax, %rdi
 4858 3255 E8000000 		call	encrypt
 4858      00
 4859 325a 488945E8 		movq	%rax, -24(%rbp)
 962:main.c        **** 		uint8 buf[5]; 
 963:main.c        **** 		uint8 temp=0; 
 4860              		.loc 1 963 0
 4861 325e C645CB00 		movb	$0, -53(%rbp)
 4862              	.LBB47:
 964:main.c        **** 		for(int i=0;i<4;i++){
 4863              		.loc 1 964 0
 4864 3262 C745D400 		movl	$0, -44(%rbp)
 4864      000000
 4865 3269 EB63     		jmp	.L275
 4866              	.L279:
 965:main.c        **** 				temp=0; 
 4867              		.loc 1 965 0
 4868 326b C645CB00 		movb	$0, -53(%rbp)
 4869              	.LBB48:
 966:main.c        **** 				for(int j=i<<3; j<(i<<3)+8; j++){ if(enc_data[j]=='1') { temp+=(1<<(j-(i<<3))); } }
 4870              		.loc 1 966 0
 4871 326f 8B45D4   		movl	-44(%rbp), %eax
 4872 3272 C1E003   		sall	$3, %eax
 4873 3275 8945D8   		movl	%eax, -40(%rbp)
 4874 3278 EB35     		jmp	.L276
 4875              	.L278:
 4876              		.loc 1 966 0 is_stmt 0 discriminator 6
 4877 327a 8B45D8   		movl	-40(%rbp), %eax
 4878 327d 4863D0   		movslq	%eax, %rdx
 4879 3280 488B45E8 		movq	-24(%rbp), %rax
 4880 3284 4801D0   		addq	%rdx, %rax
 4881 3287 0FB600   		movzbl	(%rax), %eax
 4882 328a 3C31     		cmpb	$49, %al
 4883 328c 751D     		jne	.L277
 4884              		.loc 1 966 0 discriminator 2
 4885 328e 8B45D4   		movl	-44(%rbp), %eax
 4886 3291 8D14C500 		leal	0(,%rax,8), %edx
 4886      000000
 4887 3298 8B45D8   		movl	-40(%rbp), %eax
 4888 329b 29D0     		subl	%edx, %eax
 4889 329d BA010000 		movl	$1, %edx
 4889      00
 4890 32a2 89C1     		movl	%eax, %ecx
 4891 32a4 D3E2     		sall	%cl, %edx
 4892 32a6 89D0     		movl	%edx, %eax
 4893 32a8 0045CB   		addb	%al, -53(%rbp)
 4894              	.L277:
 4895              		.loc 1 966 0 discriminator 4
 4896 32ab 8345D801 		addl	$1, -40(%rbp)
 4897              	.L276:
 4898              		.loc 1 966 0 discriminator 5
 4899 32af 8B45D4   		movl	-44(%rbp), %eax
 4900 32b2 C1E003   		sall	$3, %eax
 4901 32b5 83C008   		addl	$8, %eax
 4902 32b8 3B45D8   		cmpl	-40(%rbp), %eax
 4903 32bb 7FBD     		jg	.L278
 4904              	.LBE48:
 967:main.c        **** 				buf[i]=temp; 
 4905              		.loc 1 967 0 is_stmt 1 discriminator 2
 4906 32bd 8B45D4   		movl	-44(%rbp), %eax
 4907 32c0 4898     		cltq
 4908 32c2 0FB655CB 		movzbl	-53(%rbp), %edx
 4909 32c6 885405F0 		movb	%dl, -16(%rbp,%rax)
 964:main.c        **** 				temp=0; 
 4910              		.loc 1 964 0 discriminator 2
 4911 32ca 8345D401 		addl	$1, -44(%rbp)
 4912              	.L275:
 964:main.c        **** 				temp=0; 
 4913              		.loc 1 964 0 is_stmt 0 discriminator 1
 4914 32ce 837DD403 		cmpl	$3, -44(%rbp)
 4915 32d2 7E97     		jle	.L279
 4916              	.LBE47:
 968:main.c        **** 		}
 969:main.c        **** 		FLStatus fStatus=flWriteChannel(handle,chan,4,buf,error); 
 4917              		.loc 1 969 0 is_stmt 1
 4918 32d4 8B45BC   		movl	-68(%rbp), %eax
 4919 32d7 0FB6F0   		movzbl	%al, %esi
 4920 32da 488B4DA0 		movq	-96(%rbp), %rcx
 4921 32de 488D55F0 		leaq	-16(%rbp), %rdx
 4922 32e2 488B45A8 		movq	-88(%rbp), %rax
 4923 32e6 4989C8   		movq	%rcx, %r8
 4924 32e9 4889D1   		movq	%rdx, %rcx
 4925 32ec BA040000 		movl	$4, %edx
 4925      00
 4926 32f1 4889C7   		movq	%rax, %rdi
 4927 32f4 E8000000 		call	flWriteChannel
 4927      00
 4928 32f9 8945DC   		movl	%eax, -36(%rbp)
 970:main.c        **** 		if(fStatus!=FLP_SUCCESS) { 
 4929              		.loc 1 970 0
 4930 32fc 837DDC00 		cmpl	$0, -36(%rbp)
 4931 3300 7407     		je	.L280
 971:main.c        **** 				return 'f'; 
 4932              		.loc 1 971 0
 4933 3302 B8660000 		movl	$102, %eax
 4933      00
 4934 3307 EB05     		jmp	.L282
 4935              	.L280:
 972:main.c        **** 		}
 973:main.c        **** 		else return 's'; 
 4936              		.loc 1 973 0
 4937 3309 B8730000 		movl	$115, %eax
 4937      00
 4938              	.L282:
 974:main.c        **** //
 975:main.c        **** //		char *data_to_write=boolToHex(enc_data); 
 976:main.c        **** //		strcpy(line1,"w1 "); 
 977:main.c        **** //       // printf("%s\n",data_to_write); 
 978:main.c        **** //		char *dd=malloc(3);  dd[2]='\0'; 
 979:main.c        **** //		for(int i=0;i<4;i++){
 980:main.c        **** //				dd[0]=data_to_write[i*2]; 
 981:main.c        **** //				dd[1]=data_to_write[i*2+1]; 
 982:main.c        **** //                strcpy(line1,"w1 "); 
 983:main.c        **** //                strcat(line1,dd); 
 984:main.c        **** //				pStatus = parseLine(handle, line1 , &error);
 985:main.c        **** //				if(pStatus != FLP_SUCCESS) i--; 
 986:main.c        **** //		}
 987:main.c        **** //        wtt(); 
 988:main.c        **** 		
 989:main.c        **** }
 4939              		.loc 1 989 0 discriminator 1
 4940 330e 488B7DF8 		movq	-8(%rbp), %rdi
 4941 3312 6448333C 		xorq	%fs:40, %rdi
 4941      25280000 
 4941      00
 4942 331b 7405     		je	.L283
 4943              		.loc 1 989 0 is_stmt 0
 4944 331d E8000000 		call	__stack_chk_fail
 4944      00
 4945              	.L283:
 4946 3322 C9       		leave
 4947              		.cfi_def_cfa 7, 8
 4948 3323 C3       		ret
 4949              		.cfi_endproc
 4950              	.LFE26:
 4952              		.globl	read_4byte_from_fpga
 4954              	read_4byte_from_fpga:
 4955              	.LFB27:
 990:main.c        **** char * read_4byte_from_fpga(int chan, struct FLContext *handle, const char * error, int timeout ){
 4956              		.loc 1 990 0 is_stmt 1
 4957              		.cfi_startproc
 4958 3324 55       		pushq	%rbp
 4959              		.cfi_def_cfa_offset 16
 4960              		.cfi_offset 6, -16
 4961 3325 4889E5   		movq	%rsp, %rbp
 4962              		.cfi_def_cfa_register 6
 4963 3328 4883EC50 		subq	$80, %rsp
 4964 332c 897DCC   		movl	%edi, -52(%rbp)
 4965 332f 488975C0 		movq	%rsi, -64(%rbp)
 4966 3333 488955B8 		movq	%rdx, -72(%rbp)
 4967 3337 894DC8   		movl	%ecx, -56(%rbp)
 4968              		.loc 1 990 0
 4969 333a 64488B04 		movq	%fs:40, %rax
 4969      25280000 
 4969      00
 4970 3343 488945F8 		movq	%rax, -8(%rbp)
 4971 3347 31C0     		xorl	%eax, %eax
 991:main.c        **** 		char* data_red_from_fpga = malloc(33); 
 4972              		.loc 1 991 0
 4973 3349 BF210000 		movl	$33, %edi
 4973      00
 4974 334e E8000000 		call	malloc
 4974      00
 4975 3353 488945E0 		movq	%rax, -32(%rbp)
 992:main.c        **** 		uint8 buf[5]; 
 993:main.c        **** 		FLStatus fstatus=flReadChannel(handle, chan, 2, buf, error); 
 4976              		.loc 1 993 0
 4977 3357 8B45CC   		movl	-52(%rbp), %eax
 4978 335a 0FB6F0   		movzbl	%al, %esi
 4979 335d 488B4DB8 		movq	-72(%rbp), %rcx
 4980 3361 488D55F0 		leaq	-16(%rbp), %rdx
 4981 3365 488B45C0 		movq	-64(%rbp), %rax
 4982 3369 4989C8   		movq	%rcx, %r8
 4983 336c 4889D1   		movq	%rdx, %rcx
 4984 336f BA020000 		movl	$2, %edx
 4984      00
 4985 3374 4889C7   		movq	%rax, %rdi
 4986 3377 E8000000 		call	flReadChannel
 4986      00
 4987 337c 8945DC   		movl	%eax, -36(%rbp)
 994:main.c        ****     	fstatus=flReadChannel(handle, chan, 4, buf, error); 
 4988              		.loc 1 994 0
 4989 337f 8B45CC   		movl	-52(%rbp), %eax
 4990 3382 0FB6F0   		movzbl	%al, %esi
 4991 3385 488B4DB8 		movq	-72(%rbp), %rcx
 4992 3389 488D55F0 		leaq	-16(%rbp), %rdx
 4993 338d 488B45C0 		movq	-64(%rbp), %rax
 4994 3391 4989C8   		movq	%rcx, %r8
 4995 3394 4889D1   		movq	%rdx, %rcx
 4996 3397 BA040000 		movl	$4, %edx
 4996      00
 4997 339c 4889C7   		movq	%rax, %rdi
 4998 339f E8000000 		call	flReadChannel
 4998      00
 4999 33a4 8945DC   		movl	%eax, -36(%rbp)
 995:main.c        **** 		if(fstatus!=FL_SUCCESS) { data_red_from_fpga[0]='f'; return data_red_from_fpga; }
 5000              		.loc 1 995 0
 5001 33a7 837DDC00 		cmpl	$0, -36(%rbp)
 5002 33ab 7410     		je	.L285
 5003              		.loc 1 995 0 is_stmt 0 discriminator 1
 5004 33ad 488B45E0 		movq	-32(%rbp), %rax
 5005 33b1 C60066   		movb	$102, (%rax)
 5006 33b4 488B45E0 		movq	-32(%rbp), %rax
 5007 33b8 E99F0000 		jmp	.L293
 5007      00
 5008              	.L285:
 5009              	.LBB49:
 996:main.c        **** 		for(int i=0;i<4;i++){
 5010              		.loc 1 996 0 is_stmt 1
 5011 33bd C745D400 		movl	$0, -44(%rbp)
 5011      000000
 5012 33c4 EB72     		jmp	.L287
 5013              	.L292:
 5014              	.LBB50:
 997:main.c        **** 				for(int j=0;j<8;j++){
 5015              		.loc 1 997 0
 5016 33c6 C745D800 		movl	$0, -40(%rbp)
 5016      000000
 5017 33cd EB5F     		jmp	.L288
 5018              	.L291:
 998:main.c        **** 						if((buf[i]&(1<<j)) > 0) { data_red_from_fpga[8*i+j]='1'; }
 5019              		.loc 1 998 0
 5020 33cf 8B45D4   		movl	-44(%rbp), %eax
 5021 33d2 4898     		cltq
 5022 33d4 0FB64405 		movzbl	-16(%rbp,%rax), %eax
 5022      F0
 5023 33d9 0FB6D0   		movzbl	%al, %edx
 5024 33dc 8B45D8   		movl	-40(%rbp), %eax
 5025 33df BE010000 		movl	$1, %esi
 5025      00
 5026 33e4 89C1     		movl	%eax, %ecx
 5027 33e6 D3E6     		sall	%cl, %esi
 5028 33e8 89F0     		movl	%esi, %eax
 5029 33ea 21D0     		andl	%edx, %eax
 5030 33ec 85C0     		testl	%eax, %eax
 5031 33ee 7E1E     		jle	.L289
 5032              		.loc 1 998 0 is_stmt 0 discriminator 1
 5033 33f0 8B45D4   		movl	-44(%rbp), %eax
 5034 33f3 8D14C500 		leal	0(,%rax,8), %edx
 5034      000000
 5035 33fa 8B45D8   		movl	-40(%rbp), %eax
 5036 33fd 01D0     		addl	%edx, %eax
 5037 33ff 4863D0   		movslq	%eax, %rdx
 5038 3402 488B45E0 		movq	-32(%rbp), %rax
 5039 3406 4801D0   		addq	%rdx, %rax
 5040 3409 C60031   		movb	$49, (%rax)
 5041 340c EB1C     		jmp	.L290
 5042              	.L289:
 999:main.c        **** 						else { data_red_from_fpga[8*i+j]='0'; }
 5043              		.loc 1 999 0 is_stmt 1
 5044 340e 8B45D4   		movl	-44(%rbp), %eax
 5045 3411 8D14C500 		leal	0(,%rax,8), %edx
 5045      000000
 5046 3418 8B45D8   		movl	-40(%rbp), %eax
 5047 341b 01D0     		addl	%edx, %eax
 5048 341d 4863D0   		movslq	%eax, %rdx
 5049 3420 488B45E0 		movq	-32(%rbp), %rax
 5050 3424 4801D0   		addq	%rdx, %rax
 5051 3427 C60030   		movb	$48, (%rax)
 5052              	.L290:
 997:main.c        **** 				for(int j=0;j<8;j++){
 5053              		.loc 1 997 0 discriminator 2
 5054 342a 8345D801 		addl	$1, -40(%rbp)
 5055              	.L288:
 997:main.c        **** 				for(int j=0;j<8;j++){
 5056              		.loc 1 997 0 is_stmt 0 discriminator 1
 5057 342e 837DD807 		cmpl	$7, -40(%rbp)
 5058 3432 7E9B     		jle	.L291
 5059              	.LBE50:
 996:main.c        **** 				for(int j=0;j<8;j++){
 5060              		.loc 1 996 0 is_stmt 1 discriminator 2
 5061 3434 8345D401 		addl	$1, -44(%rbp)
 5062              	.L287:
 996:main.c        **** 				for(int j=0;j<8;j++){
 5063              		.loc 1 996 0 is_stmt 0 discriminator 1
 5064 3438 837DD403 		cmpl	$3, -44(%rbp)
 5065 343c 7E88     		jle	.L292
 5066              	.LBE49:
1000:main.c        **** 				}
1001:main.c        **** 		}
1002:main.c        **** 		char* dec_data_from_fpga=decrypt(data_red_from_fpga,key); 
 5067              		.loc 1 1002 0 is_stmt 1
 5068 343e 488B1500 		movq	key(%rip), %rdx
 5068      000000
 5069 3445 488B45E0 		movq	-32(%rbp), %rax
 5070 3449 4889D6   		movq	%rdx, %rsi
 5071 344c 4889C7   		movq	%rax, %rdi
 5072 344f E8000000 		call	decrypt
 5072      00
 5073 3454 488945E8 		movq	%rax, -24(%rbp)
1003:main.c        **** 		return dec_data_from_fpga; 
 5074              		.loc 1 1003 0
 5075 3458 488B45E8 		movq	-24(%rbp), %rax
 5076              	.L293:
1004:main.c        ****    //     return data_red_from_fpga; 
1005:main.c        **** 
1006:main.c        **** 
1007:main.c        **** //		char* line1="r0 1"; 
1008:main.c        **** //		data_red_from_fpga[0]='\0'; 
1009:main.c        **** //			   for(int i=0;i<4;i++){
1010:main.c        **** //					   pStatus = parseLine(handle, line1, &error);
1011:main.c        **** //					   if(pStatus == FLP_SUCCESS){
1012:main.c        **** //                            //printf("read  %d th byte \n",i); 
1013:main.c        **** //							   char *red_byte=read_byte(out); 
1014:main.c        **** //							   strcat(data_red_from_fpga,red_byte); 
1015:main.c        **** //					   }
1016:main.c        **** //					   else {
1017:main.c        **** //							   i--; 
1018:main.c        **** //					   }
1019:main.c        **** //			   }
1020:main.c        **** //		data_red_from_fpga[32]='\0'; 
1021:main.c        **** ////		char* key=malloc(33); 
1022:main.c        **** ////
1023:main.c        **** ////        printf("%s\n", data_red_from_fpga); 
1024:main.c        **** //        wtt(); 
1025:main.c        **** //		return dec_data_from_fpga; 
1026:main.c        **** 
1027:main.c        **** }
 5077              		.loc 1 1027 0 discriminator 1
 5078 345c 488B7DF8 		movq	-8(%rbp), %rdi
 5079 3460 6448333C 		xorq	%fs:40, %rdi
 5079      25280000 
 5079      00
 5080 3469 7405     		je	.L294
 5081              		.loc 1 1027 0 is_stmt 0
 5082 346b E8000000 		call	__stack_chk_fail
 5082      00
 5083              	.L294:
 5084 3470 C9       		leave
 5085              		.cfi_def_cfa 7, 8
 5086 3471 C3       		ret
 5087              		.cfi_endproc
 5088              	.LFE27:
 5090              		.globl	read_1byte_from_fpgalink
 5092              	read_1byte_from_fpgalink:
 5093              	.LFB28:
1028:main.c        **** char * read_1byte_from_fpgalink(int chan, struct FLContext *handle, const char * error, int timeout
 5094              		.loc 1 1028 0 is_stmt 1
 5095              		.cfi_startproc
 5096 3472 55       		pushq	%rbp
 5097              		.cfi_def_cfa_offset 16
 5098              		.cfi_offset 6, -16
 5099 3473 4889E5   		movq	%rsp, %rbp
 5100              		.cfi_def_cfa_register 6
 5101 3476 4883EC50 		subq	$80, %rsp
 5102 347a 897DCC   		movl	%edi, -52(%rbp)
 5103 347d 488975C0 		movq	%rsi, -64(%rbp)
 5104 3481 488955B8 		movq	%rdx, -72(%rbp)
 5105 3485 894DC8   		movl	%ecx, -56(%rbp)
 5106              		.loc 1 1028 0
 5107 3488 64488B04 		movq	%fs:40, %rax
 5107      25280000 
 5107      00
 5108 3491 488945F8 		movq	%rax, -8(%rbp)
 5109 3495 31C0     		xorl	%eax, %eax
1029:main.c        **** 		char* data_red_from_fpga = malloc(33); 
 5110              		.loc 1 1029 0
 5111 3497 BF210000 		movl	$33, %edi
 5111      00
 5112 349c E8000000 		call	malloc
 5112      00
 5113 34a1 488945E0 		movq	%rax, -32(%rbp)
1030:main.c        **** 		uint8 buf[5];
1031:main.c        ****         bool data_is_there=0; 
 5114              		.loc 1 1031 0
 5115 34a5 C645D300 		movb	$0, -45(%rbp)
1032:main.c        ****         while(timeout>0){
 5116              		.loc 1 1032 0
 5117 34a9 EB6D     		jmp	.L296
 5118              	.L298:
 5119              	.LBB51:
1033:main.c        ****       //      printf("timeout in reverse order -- %d\n" , timeout); 
1034:main.c        ****             sleep(0.05);
 5120              		.loc 1 1034 0
 5121 34ab BF000000 		movl	$0, %edi
 5121      00
 5122 34b0 E8000000 		call	sleep
 5122      00
1035:main.c        ****             timeout--;
 5123              		.loc 1 1035 0
 5124 34b5 836DC801 		subl	$1, -56(%rbp)
1036:main.c        ****             FLStatus fstatus = flReadChannel(handle,chan,1,buf,error); 
 5125              		.loc 1 1036 0
 5126 34b9 8B45CC   		movl	-52(%rbp), %eax
 5127 34bc 0FB6F0   		movzbl	%al, %esi
 5128 34bf 488B4DB8 		movq	-72(%rbp), %rcx
 5129 34c3 488D55F0 		leaq	-16(%rbp), %rdx
 5130 34c7 488B45C0 		movq	-64(%rbp), %rax
 5131 34cb 4989C8   		movq	%rcx, %r8
 5132 34ce 4889D1   		movq	%rdx, %rcx
 5133 34d1 BA010000 		movl	$1, %edx
 5133      00
 5134 34d6 4889C7   		movq	%rax, %rdi
 5135 34d9 E8000000 		call	flReadChannel
 5135      00
 5136 34de 8945DC   		movl	%eax, -36(%rbp)
1037:main.c        ****             if(buf[0]!=0) {
 5137              		.loc 1 1037 0
 5138 34e1 0FB645F0 		movzbl	-16(%rbp), %eax
 5139 34e5 84C0     		testb	%al, %al
 5140 34e7 742F     		je	.L296
1038:main.c        ****                 data_is_there=1; 
 5141              		.loc 1 1038 0
 5142 34e9 C645D301 		movb	$1, -45(%rbp)
1039:main.c        ****                 fstatus = flReadChannel(handle,chan,3,buf+1,error); 
 5143              		.loc 1 1039 0
 5144 34ed 488D45F0 		leaq	-16(%rbp), %rax
 5145 34f1 4883C001 		addq	$1, %rax
 5146 34f5 8B55CC   		movl	-52(%rbp), %edx
 5147 34f8 0FB6F2   		movzbl	%dl, %esi
 5148 34fb 488B55B8 		movq	-72(%rbp), %rdx
 5149 34ff 488B7DC0 		movq	-64(%rbp), %rdi
 5150 3503 4989D0   		movq	%rdx, %r8
 5151 3506 4889C1   		movq	%rax, %rcx
 5152 3509 BA030000 		movl	$3, %edx
 5152      00
 5153 350e E8000000 		call	flReadChannel
 5153      00
 5154 3513 8945DC   		movl	%eax, -36(%rbp)
1040:main.c        ****                 break; 
 5155              		.loc 1 1040 0
 5156 3516 EB06     		jmp	.L297
 5157              	.L296:
 5158              	.LBE51:
1032:main.c        ****       //      printf("timeout in reverse order -- %d\n" , timeout); 
 5159              		.loc 1 1032 0
 5160 3518 837DC800 		cmpl	$0, -56(%rbp)
 5161 351c 7F8D     		jg	.L298
 5162              	.L297:
1041:main.c        ****             }
1042:main.c        ****         }
1043:main.c        ****         if(!data_is_there) { data_red_from_fpga[0]='f';  return data_red_from_fpga; }
 5163              		.loc 1 1043 0
 5164 351e 0FB645D3 		movzbl	-45(%rbp), %eax
 5165 3522 83F001   		xorl	$1, %eax
 5166 3525 84C0     		testb	%al, %al
 5167 3527 7410     		je	.L299
 5168              		.loc 1 1043 0 is_stmt 0 discriminator 1
 5169 3529 488B45E0 		movq	-32(%rbp), %rax
 5170 352d C60066   		movb	$102, (%rax)
 5171 3530 488B45E0 		movq	-32(%rbp), %rax
 5172 3534 E99F0000 		jmp	.L307
 5172      00
 5173              	.L299:
 5174              	.LBB52:
1044:main.c        **** 		for(int i=0;i<4;i++){
 5175              		.loc 1 1044 0 is_stmt 1
 5176 3539 C745D400 		movl	$0, -44(%rbp)
 5176      000000
 5177 3540 EB72     		jmp	.L301
 5178              	.L306:
 5179              	.LBB53:
1045:main.c        **** 				for(int j=0;j<8;j++){
 5180              		.loc 1 1045 0
 5181 3542 C745D800 		movl	$0, -40(%rbp)
 5181      000000
 5182 3549 EB5F     		jmp	.L302
 5183              	.L305:
1046:main.c        **** 						if((buf[i]&(1<<j)) > 0) { data_red_from_fpga[8*i+j]='1'; }
 5184              		.loc 1 1046 0
 5185 354b 8B45D4   		movl	-44(%rbp), %eax
 5186 354e 4898     		cltq
 5187 3550 0FB64405 		movzbl	-16(%rbp,%rax), %eax
 5187      F0
 5188 3555 0FB6D0   		movzbl	%al, %edx
 5189 3558 8B45D8   		movl	-40(%rbp), %eax
 5190 355b BE010000 		movl	$1, %esi
 5190      00
 5191 3560 89C1     		movl	%eax, %ecx
 5192 3562 D3E6     		sall	%cl, %esi
 5193 3564 89F0     		movl	%esi, %eax
 5194 3566 21D0     		andl	%edx, %eax
 5195 3568 85C0     		testl	%eax, %eax
 5196 356a 7E1E     		jle	.L303
 5197              		.loc 1 1046 0 is_stmt 0 discriminator 1
 5198 356c 8B45D4   		movl	-44(%rbp), %eax
 5199 356f 8D14C500 		leal	0(,%rax,8), %edx
 5199      000000
 5200 3576 8B45D8   		movl	-40(%rbp), %eax
 5201 3579 01D0     		addl	%edx, %eax
 5202 357b 4863D0   		movslq	%eax, %rdx
 5203 357e 488B45E0 		movq	-32(%rbp), %rax
 5204 3582 4801D0   		addq	%rdx, %rax
 5205 3585 C60031   		movb	$49, (%rax)
 5206 3588 EB1C     		jmp	.L304
 5207              	.L303:
1047:main.c        **** 						else { data_red_from_fpga[8*i+j]='0'; }
 5208              		.loc 1 1047 0 is_stmt 1
 5209 358a 8B45D4   		movl	-44(%rbp), %eax
 5210 358d 8D14C500 		leal	0(,%rax,8), %edx
 5210      000000
 5211 3594 8B45D8   		movl	-40(%rbp), %eax
 5212 3597 01D0     		addl	%edx, %eax
 5213 3599 4863D0   		movslq	%eax, %rdx
 5214 359c 488B45E0 		movq	-32(%rbp), %rax
 5215 35a0 4801D0   		addq	%rdx, %rax
 5216 35a3 C60030   		movb	$48, (%rax)
 5217              	.L304:
1045:main.c        **** 				for(int j=0;j<8;j++){
 5218              		.loc 1 1045 0 discriminator 2
 5219 35a6 8345D801 		addl	$1, -40(%rbp)
 5220              	.L302:
1045:main.c        **** 				for(int j=0;j<8;j++){
 5221              		.loc 1 1045 0 is_stmt 0 discriminator 1
 5222 35aa 837DD807 		cmpl	$7, -40(%rbp)
 5223 35ae 7E9B     		jle	.L305
 5224              	.LBE53:
1044:main.c        **** 				for(int j=0;j<8;j++){
 5225              		.loc 1 1044 0 is_stmt 1 discriminator 2
 5226 35b0 8345D401 		addl	$1, -44(%rbp)
 5227              	.L301:
1044:main.c        **** 				for(int j=0;j<8;j++){
 5228              		.loc 1 1044 0 is_stmt 0 discriminator 1
 5229 35b4 837DD403 		cmpl	$3, -44(%rbp)
 5230 35b8 7E88     		jle	.L306
 5231              	.LBE52:
1048:main.c        **** 				}
1049:main.c        **** 		}
1050:main.c        **** 		char* dec_data_from_fpga=decrypt(data_red_from_fpga,key); 
 5232              		.loc 1 1050 0 is_stmt 1
 5233 35ba 488B1500 		movq	key(%rip), %rdx
 5233      000000
 5234 35c1 488B45E0 		movq	-32(%rbp), %rax
 5235 35c5 4889D6   		movq	%rdx, %rsi
 5236 35c8 4889C7   		movq	%rax, %rdi
 5237 35cb E8000000 		call	decrypt
 5237      00
 5238 35d0 488945E8 		movq	%rax, -24(%rbp)
1051:main.c        **** 		return dec_data_from_fpga; 
 5239              		.loc 1 1051 0
 5240 35d4 488B45E8 		movq	-24(%rbp), %rax
 5241              	.L307:
1052:main.c        ****  
1053:main.c        **** }
 5242              		.loc 1 1053 0 discriminator 1
 5243 35d8 488B4DF8 		movq	-8(%rbp), %rcx
 5244 35dc 6448330C 		xorq	%fs:40, %rcx
 5244      25280000 
 5244      00
 5245 35e5 7405     		je	.L308
 5246              		.loc 1 1053 0 is_stmt 0
 5247 35e7 E8000000 		call	__stack_chk_fail
 5247      00
 5248              	.L308:
 5249 35ec C9       		leave
 5250              		.cfi_def_cfa 7, 8
 5251 35ed C3       		ret
 5252              		.cfi_endproc
 5253              	.LFE28:
 5255              		.section	.rodata
 5256              	.LC59:
 5257 03d3 72656365 		.string	"received ack is %s\n"
 5257      69766564 
 5257      2061636B 
 5257      20697320 
 5257      25730A00 
 5258              		.text
 5259              		.globl	receive_ack
 5261              	receive_ack:
 5262              	.LFB29:
1054:main.c        **** 
1055:main.c        **** 
1056:main.c        **** char* receive_ack(int chan, struct FLContext *handle, const char * error, int timeout) {
 5263              		.loc 1 1056 0 is_stmt 1
 5264              		.cfi_startproc
 5265 35ee 55       		pushq	%rbp
 5266              		.cfi_def_cfa_offset 16
 5267              		.cfi_offset 6, -16
 5268 35ef 4889E5   		movq	%rsp, %rbp
 5269              		.cfi_def_cfa_register 6
 5270 35f2 4883EC30 		subq	$48, %rsp
 5271 35f6 897DEC   		movl	%edi, -20(%rbp)
 5272 35f9 488975E0 		movq	%rsi, -32(%rbp)
 5273 35fd 488955D8 		movq	%rdx, -40(%rbp)
 5274 3601 894DE8   		movl	%ecx, -24(%rbp)
1057:main.c        **** 			char * data_red_from_fpga=read_4byte_from_fpga(chan,handle , error,timeout); 
 5275              		.loc 1 1057 0
 5276 3604 8B4DE8   		movl	-24(%rbp), %ecx
 5277 3607 488B55D8 		movq	-40(%rbp), %rdx
 5278 360b 488B75E0 		movq	-32(%rbp), %rsi
 5279 360f 8B45EC   		movl	-20(%rbp), %eax
 5280 3612 89C7     		movl	%eax, %edi
 5281 3614 E8000000 		call	read_4byte_from_fpga
 5281      00
 5282 3619 488945F8 		movq	%rax, -8(%rbp)
1058:main.c        ****             printf("received ack is %s\n",data_red_from_fpga);  
 5283              		.loc 1 1058 0
 5284 361d 488B45F8 		movq	-8(%rbp), %rax
 5285 3621 4889C6   		movq	%rax, %rsi
 5286 3624 BF000000 		movl	$.LC59, %edi
 5286      00
 5287 3629 B8000000 		movl	$0, %eax
 5287      00
 5288 362e E8000000 		call	printf
 5288      00
1059:main.c        **** 			if(data_red_from_fpga[0]=='f') return data_red_from_fpga; 
 5289              		.loc 1 1059 0
 5290 3633 488B45F8 		movq	-8(%rbp), %rax
 5291 3637 0FB600   		movzbl	(%rax), %eax
 5292 363a 3C66     		cmpb	$102, %al
 5293 363c 7506     		jne	.L310
 5294              		.loc 1 1059 0 is_stmt 0 discriminator 1
 5295 363e 488B45F8 		movq	-8(%rbp), %rax
 5296 3642 EB4A     		jmp	.L311
 5297              	.L310:
 5298              	.LBB54:
1060:main.c        **** 			for(int i=0;i<32;i++){
 5299              		.loc 1 1060 0 is_stmt 1
 5300 3644 C745F400 		movl	$0, -12(%rbp)
 5300      000000
 5301 364b EB37     		jmp	.L312
 5302              	.L314:
1061:main.c        **** 					if(data_red_from_fpga[i]!=ack1[i]) { data_red_from_fpga[0]='f';  return data_red_from_fpga; }
 5303              		.loc 1 1061 0
 5304 364d 8B45F4   		movl	-12(%rbp), %eax
 5305 3650 4863D0   		movslq	%eax, %rdx
 5306 3653 488B45F8 		movq	-8(%rbp), %rax
 5307 3657 4801D0   		addq	%rdx, %rax
 5308 365a 0FB610   		movzbl	(%rax), %edx
 5309 365d 488B0D00 		movq	ack1(%rip), %rcx
 5309      000000
 5310 3664 8B45F4   		movl	-12(%rbp), %eax
 5311 3667 4898     		cltq
 5312 3669 4801C8   		addq	%rcx, %rax
 5313 366c 0FB600   		movzbl	(%rax), %eax
 5314 366f 38C2     		cmpb	%al, %dl
 5315 3671 740D     		je	.L313
 5316              		.loc 1 1061 0 is_stmt 0 discriminator 1
 5317 3673 488B45F8 		movq	-8(%rbp), %rax
 5318 3677 C60066   		movb	$102, (%rax)
 5319 367a 488B45F8 		movq	-8(%rbp), %rax
 5320 367e EB0E     		jmp	.L311
 5321              	.L313:
1060:main.c        **** 			for(int i=0;i<32;i++){
 5322              		.loc 1 1060 0 is_stmt 1 discriminator 2
 5323 3680 8345F401 		addl	$1, -12(%rbp)
 5324              	.L312:
1060:main.c        **** 			for(int i=0;i<32;i++){
 5325              		.loc 1 1060 0 is_stmt 0 discriminator 1
 5326 3684 837DF41F 		cmpl	$31, -12(%rbp)
 5327 3688 7EC3     		jle	.L314
 5328              	.LBE54:
1062:main.c        **** 			}
1063:main.c        ****             return data_red_from_fpga; 
 5329              		.loc 1 1063 0 is_stmt 1
 5330 368a 488B45F8 		movq	-8(%rbp), %rax
 5331              	.L311:
1064:main.c        **** 
1065:main.c        **** }
 5332              		.loc 1 1065 0
 5333 368e C9       		leave
 5334              		.cfi_def_cfa 7, 8
 5335 368f C3       		ret
 5336              		.cfi_endproc
 5337              	.LFE29:
 5339              		.globl	send_ack
 5341              	send_ack:
 5342              	.LFB30:
1066:main.c        **** 
1067:main.c        **** char send_ack(int chan, struct FLContext *handle, const char * error, int timeout){
 5343              		.loc 1 1067 0
 5344              		.cfi_startproc
 5345 3690 55       		pushq	%rbp
 5346              		.cfi_def_cfa_offset 16
 5347              		.cfi_offset 6, -16
 5348 3691 4889E5   		movq	%rsp, %rbp
 5349              		.cfi_def_cfa_register 6
 5350 3694 4883EC40 		subq	$64, %rsp
 5351 3698 897DDC   		movl	%edi, -36(%rbp)
 5352 369b 488975D0 		movq	%rsi, -48(%rbp)
 5353 369f 488955C8 		movq	%rdx, -56(%rbp)
 5354 36a3 894DD8   		movl	%ecx, -40(%rbp)
1068:main.c        **** 		char* byte_reversed = malloc(33);
 5355              		.loc 1 1068 0
 5356 36a6 BF210000 		movl	$33, %edi
 5356      00
 5357 36ab E8000000 		call	malloc
 5357      00
 5358 36b0 488945F8 		movq	%rax, -8(%rbp)
 5359              	.LBB55:
1069:main.c        ****         for(int i=0; i< 4; i++)
 5360              		.loc 1 1069 0
 5361 36b4 C745F000 		movl	$0, -16(%rbp)
 5361      000000
 5362 36bb EB4D     		jmp	.L316
 5363              	.L319:
 5364              	.LBB56:
1070:main.c        ****             for(int j= 0; j<8; j++)
 5365              		.loc 1 1070 0
 5366 36bd C745F400 		movl	$0, -12(%rbp)
 5366      000000
 5367 36c4 EB3A     		jmp	.L317
 5368              	.L318:
1071:main.c        ****                 byte_reversed[i*8 +j] = ack2[i*8 + 7 - j];
 5369              		.loc 1 1071 0 discriminator 3
 5370 36c6 8B45F0   		movl	-16(%rbp), %eax
 5371 36c9 8D14C500 		leal	0(,%rax,8), %edx
 5371      000000
 5372 36d0 8B45F4   		movl	-12(%rbp), %eax
 5373 36d3 01D0     		addl	%edx, %eax
 5374 36d5 4863D0   		movslq	%eax, %rdx
 5375 36d8 488B45F8 		movq	-8(%rbp), %rax
 5376 36dc 4801C2   		addq	%rax, %rdx
 5377 36df 488B0D00 		movq	ack2(%rip), %rcx
 5377      000000
 5378 36e6 8B45F0   		movl	-16(%rbp), %eax
 5379 36e9 C1E003   		sall	$3, %eax
 5380 36ec 83C007   		addl	$7, %eax
 5381 36ef 2B45F4   		subl	-12(%rbp), %eax
 5382 36f2 4898     		cltq
 5383 36f4 4801C8   		addq	%rcx, %rax
 5384 36f7 0FB600   		movzbl	(%rax), %eax
 5385 36fa 8802     		movb	%al, (%rdx)
1070:main.c        ****             for(int j= 0; j<8; j++)
 5386              		.loc 1 1070 0 discriminator 3
 5387 36fc 8345F401 		addl	$1, -12(%rbp)
 5388              	.L317:
1070:main.c        ****             for(int j= 0; j<8; j++)
 5389              		.loc 1 1070 0 is_stmt 0 discriminator 1
 5390 3700 837DF407 		cmpl	$7, -12(%rbp)
 5391 3704 7EC0     		jle	.L318
 5392              	.LBE56:
1069:main.c        ****         for(int i=0; i< 4; i++)
 5393              		.loc 1 1069 0 is_stmt 1 discriminator 2
 5394 3706 8345F001 		addl	$1, -16(%rbp)
 5395              	.L316:
1069:main.c        ****         for(int i=0; i< 4; i++)
 5396              		.loc 1 1069 0 is_stmt 0 discriminator 1
 5397 370a 837DF003 		cmpl	$3, -16(%rbp)
 5398 370e 7EAD     		jle	.L319
 5399              	.LBE55:
1072:main.c        ****         byte_reversed[32] = '\0';
 5400              		.loc 1 1072 0 is_stmt 1
 5401 3710 488B45F8 		movq	-8(%rbp), %rax
 5402 3714 4883C020 		addq	$32, %rax
 5403 3718 C60000   		movb	$0, (%rax)
1073:main.c        **** 		char write_status=write_4byte_to_board(chan,byte_reversed,handle,error,timeout); 
 5404              		.loc 1 1073 0
 5405 371b 8B7DD8   		movl	-40(%rbp), %edi
 5406 371e 488B4DC8 		movq	-56(%rbp), %rcx
 5407 3722 488B55D0 		movq	-48(%rbp), %rdx
 5408 3726 488B75F8 		movq	-8(%rbp), %rsi
 5409 372a 8B45DC   		movl	-36(%rbp), %eax
 5410 372d 4189F8   		movl	%edi, %r8d
 5411 3730 89C7     		movl	%eax, %edi
 5412 3732 E8000000 		call	write_4byte_to_board
 5412      00
 5413 3737 8845EF   		movb	%al, -17(%rbp)
1074:main.c        **** 		return write_status; 
 5414              		.loc 1 1074 0
 5415 373a 0FB645EF 		movzbl	-17(%rbp), %eax
1075:main.c        **** 
1076:main.c        **** }
 5416              		.loc 1 1076 0
 5417 373e C9       		leave
 5418              		.cfi_def_cfa 7, 8
 5419 373f C3       		ret
 5420              		.cfi_endproc
 5421              	.LFE30:
 5423              		.globl	wtt
 5425              	wtt:
 5426              	.LFB31:
1077:main.c        **** 
1078:main.c        **** 		
1079:main.c        **** 
1080:main.c        **** void wtt(){
 5427              		.loc 1 1080 0
 5428              		.cfi_startproc
 5429 3740 55       		pushq	%rbp
 5430              		.cfi_def_cfa_offset 16
 5431              		.cfi_offset 6, -16
 5432 3741 4889E5   		movq	%rsp, %rbp
 5433              		.cfi_def_cfa_register 6
1081:main.c        **** //    int n=1000000000; 
1082:main.c        **** //    int yyy=0; 
1083:main.c        **** //    for(int i=0; i<n; i++) yyy++; 
1084:main.c        **** //    for(int i=0; i<n; i++) yyy++; 
1085:main.c        **** //    for(int i=0; i<n; i++) yyy++; 
1086:main.c        **** //    for(int i=0; i<n; i++) yyy++; 
1087:main.c        ****     usleep(100000); 
 5434              		.loc 1 1087 0
 5435 3744 BFA08601 		movl	$100000, %edi
 5435      00
 5436 3749 B8000000 		movl	$0, %eax
 5436      00
 5437 374e E8000000 		call	usleep
 5437      00
1088:main.c        **** }
 5438              		.loc 1 1088 0
 5439 3753 90       		nop
 5440 3754 5D       		popq	%rbp
 5441              		.cfi_def_cfa 7, 8
 5442 3755 C3       		ret
 5443              		.cfi_endproc
 5444              	.LFE31:
 5446              		.section	.rodata
 5447 03e7 00       		.align 8
 5448              	.LC60:
 5449 03e8 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 5449      20202020 
 5449      20202020 
 5449      76656E64 
 5449      6F722049 
 5450              	.LC61:
 5451 041d 3C564944 		.string	"<VID:PID>"
 5451      3A504944 
 5451      3E00
 5452              	.LC62:
 5453 0427 69767000 		.string	"ivp"
 5454              	.LC63:
 5455 042b 6900     		.string	"i"
 5456 042d 000000   		.align 8
 5457              	.LC64:
 5458 0430 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 5458      20202056 
 5458      49442C20 
 5458      50494420 
 5458      616E6420 
 5459              	.LC65:
 5460 0465 3C564944 		.string	"<VID:PID[:DID]>"
 5460      3A504944 
 5460      5B3A4449 
 5460      445D3E00 
 5461              	.LC66:
 5462 0475 767000   		.string	"vp"
 5463              	.LC67:
 5464 0478 7600     		.string	"v"
 5465 047a 00000000 		.align 8
 5465      0000
 5466              	.LC68:
 5467 0480 20202020 		.string	"       For running the program and giving the input file address"
 5467      20202046 
 5467      6F722072 
 5467      756E6E69 
 5467      6E672074 
 5468              	.LC69:
 5469 04c1 3C46696C 		.string	"<File>"
 5469      653E00
 5470              	.LC70:
 5471 04c8 727000   		.string	"rp"
 5472 04cb 00000000 		.align 8
 5472      00
 5473              	.LC71:
 5474 04d0 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 5474      20202020 
 5474      6669726D 
 5474      77617265 
 5474      20746F20 
 5475              	.LC72:
 5476 04fd 3C666972 		.string	"<firmware.hex>"
 5476      6D776172 
 5476      652E6865 
 5476      783E00
 5477              	.LC73:
 5478 050c 667700   		.string	"fw"
 5479              	.LC74:
 5480 050f 6600     		.string	"f"
 5481 0511 00000000 		.align 8
 5481      000000
 5482              	.LC75:
 5483 0518 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 5483      642F7772 
 5483      69746520 
 5483      64696769 
 5483      74616C20 
 5484              	.LC76:
 5485 0545 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 5485      4366675B 
 5485      2C626974 
 5485      4366675D 
 5485      2A3E00
 5486              	.LC77:
 5487 0558 706F7274 		.string	"ports"
 5487      7300
 5488              	.LC78:
 5489 055e 6400     		.string	"d"
 5490              	.LC79:
 5491 0560 20202020 		.string	"         query the JTAG chain"
 5491      20202020 
 5491      20717565 
 5491      72792074 
 5491      6865204A 
 5492              	.LC80:
 5493 057e 3C6A7461 		.string	"<jtagBits>"
 5493      67426974 
 5493      733E00
 5494              	.LC81:
 5495 0589 71756572 		.string	"query"
 5495      7900
 5496              	.LC82:
 5497 058f 7100     		.string	"q"
 5498              	.LC83:
 5499 0591 20202020 		.string	"         program a device"
 5499      20202020 
 5499      2070726F 
 5499      6772616D 
 5499      20612064 
 5500              	.LC84:
 5501 05ab 3C636F6E 		.string	"<config>"
 5501      6669673E 
 5501      00
 5502              	.LC85:
 5503 05b4 70726F67 		.string	"program"
 5503      72616D00 
 5504              	.LC86:
 5505 05bc 7000     		.string	"p"
 5506 05be 0000     		.align 8
 5507              	.LC87:
 5508 05c0 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 5508      20202020 
 5508      77686963 
 5508      6820636F 
 5508      6D6D2063 
 5509              	.LC88:
 5510 05f4 3C636F6E 		.string	"<conduit>"
 5510      64756974 
 5510      3E00
 5511              	.LC89:
 5512 05fe 636F6E64 		.string	"conduit"
 5512      75697400 
 5513              	.LC90:
 5514 0606 6300     		.string	"c"
 5515              		.align 8
 5516              	.LC91:
 5517 0608 20202020 		.string	"    a series of CommFPGA actions"
 5517      61207365 
 5517      72696573 
 5517      206F6620 
 5517      436F6D6D 
 5518              	.LC92:
 5519 0629 3C616374 		.string	"<actionString>"
 5519      696F6E53 
 5519      7472696E 
 5519      673E00
 5520              	.LC93:
 5521 0638 61637469 		.string	"action"
 5521      6F6E00
 5522              	.LC94:
 5523 063f 6100     		.string	"a"
 5524 0641 00000000 		.align 8
 5524      000000
 5525              	.LC95:
 5526 0648 20202020 		.string	"                    start up an interactive CommFPGA session"
 5526      20202020 
 5526      20202020 
 5526      20202020 
 5526      20202020 
 5527              	.LC96:
 5528 0685 7368656C 		.string	"shell"
 5528      6C00
 5529              	.LC97:
 5530 068b 7300     		.string	"s"
 5531 068d 000000   		.align 8
 5532              	.LC98:
 5533 0690 20202020 		.string	"                enable benchmarking & checksumming"
 5533      20202020 
 5533      20202020 
 5533      20202020 
 5533      656E6162 
 5534              	.LC99:
 5535 06c3 62656E63 		.string	"benchmark"
 5535      686D6172 
 5535      6B00
 5536              	.LC100:
 5537 06cd 6200     		.string	"b"
 5538 06cf 00       		.align 8
 5539              	.LC101:
 5540 06d0 20202020 		.string	"                    reset the bulk endpoints"
 5540      20202020 
 5540      20202020 
 5540      20202020 
 5540      20202020 
 5541              	.LC102:
 5542 06fd 72657365 		.string	"reset"
 5542      7400
 5543 0703 00000000 		.align 8
 5543      00
 5544              	.LC103:
 5545 0708 20202077 		.string	"   write data from channel ch to file"
 5545      72697465 
 5545      20646174 
 5545      61206672 
 5545      6F6D2063 
 5546              	.LC104:
 5547 072e 3C63683A 		.string	"<ch:file.bin>"
 5547      66696C65 
 5547      2E62696E 
 5547      3E00
 5548              	.LC105:
 5549 073c 64756D70 		.string	"dumploop"
 5549      6C6F6F70 
 5549      00
 5550              	.LC106:
 5551 0745 6C00     		.string	"l"
 5552 0747 00       		.align 8
 5553              	.LC107:
 5554 0748 20202020 		.string	"                     print this help and exit"
 5554      20202020 
 5554      20202020 
 5554      20202020 
 5554      20202020 
 5555              	.LC108:
 5556 0776 68656C70 		.string	"help"
 5556      00
 5557              	.LC109:
 5558 077b 6800     		.string	"h"
 5559 077d 000000   		.align 8
 5560              	.LC110:
 5561 0780 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 5561      72697465 
 5561      20666972 
 5561      6D776172 
 5561      6520746F 
 5562              	.LC111:
 5563 07a7 3C737464 		.string	"<std|fw.hex|fw.iic>"
 5563      7C66772E 
 5563      6865787C 
 5563      66772E69 
 5563      69633E00 
 5564              	.LC112:
 5565 07bb 65657072 		.string	"eeprom"
 5565      6F6D00
 5566 07c2 00000000 		.align 8
 5566      0000
 5567              	.LC113:
 5568 07c8 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 5568      20626163 
 5568      6B757020 
 5568      46583227 
 5568      73204545 
 5569              	.LC114:
 5570 07f3 3C6B6269 		.string	"<kbitSize:fw.iic>"
 5570      7453697A 
 5570      653A6677 
 5570      2E696963 
 5570      3E00
 5571              	.LC115:
 5572 0805 6261636B 		.string	"backup"
 5572      757000
 5573              	.LC116:
 5574 080c 666C636C 		.string	"flcli"
 5574      6900
 5575              	.LC117:
 5576 0812 25733A20 		.string	"%s: insufficient memory\n"
 5576      696E7375 
 5576      66666963 
 5576      69656E74 
 5576      206D656D 
 5577 082b 00000000 		.align 8
 5577      00
 5578              	.LC118:
 5579 0830 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 5579      4C696E6B 
 5579      20436F6D 
 5579      6D616E64 
 5579      2D4C696E 
 5580              	.LC119:
 5581 0884 0A00     		.string	"\n"
 5582 0886 0000     		.align 8
 5583              	.LC120:
 5584 0888 0A496E74 		.string	"\nInteract with an FPGALink device.\n"
 5584      65726163 
 5584      74207769 
 5584      74682061 
 5584      6E204650 
 5585              	.LC121:
 5586 08ac 2020252D 		.string	"  %-10s %s\n"
 5586      31307320 
 5586      25730A00 
 5587              		.align 8
 5588              	.LC122:
 5589 08b8 54727920 		.string	"Try '%s --help' for more information.\n"
 5589      27257320 
 5589      2D2D6865 
 5589      6C702720 
 5589      666F7220 
 5590 08df 00       		.align 8
 5591              	.LC123:
 5592 08e0 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 5592      6D707469 
 5592      6E672074 
 5592      6F206F70 
 5592      656E2063 
 5593              	.LC124:
 5594 0918 4C6F6164 		.string	"Loading firmware into %s...\n"
 5594      696E6720 
 5594      6669726D 
 5594      77617265 
 5594      20696E74 
 5595              	.LC125:
 5596 0935 41776169 		.string	"Awaiting renumeration"
 5596      74696E67 
 5596      2072656E 
 5596      756D6572 
 5596      6174696F 
 5597 094b 00000000 		.align 8
 5597      00
 5598              	.LC126:
 5599 0950 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 5599      4C696E6B 
 5599      20646576 
 5599      69636520 
 5599      64696420 
 5600 0983 00000000 		.align 8
 5600      00
 5601              	.LC127:
 5602 0988 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 5602      6D707469 
 5602      6E672074 
 5602      6F206F70 
 5602      656E2063 
 5603 09c5 000000   		.align 8
 5604              	.LC128:
 5605 09c8 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 5605      64206E6F 
 5605      74206F70 
 5605      656E2046 
 5605      5047414C 
 5606 0a12 00000000 		.align 8
 5606      0000
 5607              	.LC129:
 5608 0a18 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 5608      65637465 
 5608      6420746F 
 5608      20465047 
 5608      414C696E 
 5609              	.LC130:
 5610 0a67 73746400 		.string	"std"
 5611 0a6b 00000000 		.align 8
 5611      00
 5612              	.LC131:
 5613 0a70 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM..."
 5613      696E6720 
 5613      74686520 
 5613      7374616E 
 5613      64617264 
 5614 0aae 0000     		.align 8
 5615              	.LC132:
 5616 0ab0 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 5616      696E6720 
 5616      63757374 
 5616      6F6D2046 
 5616      5047414C 
 5617 0af1 00000000 		.align 8
 5617      000000
 5618              	.LC133:
 5619 0af8 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 5619      696E7661 
 5619      6C696420 
 5619      61726775 
 5619      6D656E74 
 5620 0b33 00000000 		.align 8
 5620      00
 5621              	.LC134:
 5622 0b38 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 5622      6E672061 
 5622      20626163 
 5622      6B757020 
 5622      6F662025 
 5623              	.LC135:
 5624 0b73 436F6E66 		.string	"Configuring ports..."
 5624      69677572 
 5624      696E6720 
 5624      706F7274 
 5624      732E2E2E 
 5625              	.LC136:
 5626 0b88 25303858 		.string	"%08X"
 5626      00
 5627 0b8d 000000   		.align 8
 5628              	.LC137:
 5629 0b90 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 5629      6261636B 
 5629      3A202020 
 5629      32382020 
 5629      20323420 
 5630              	.LC138:
 5631 0bd0 20257300 		.string	" %s"
 5632              	.LC139:
 5633 0bd4 20202573 		.string	"  %s"
 5633      00
 5634              	.LC140:
 5635 0bd9 2025730A 		.string	" %s\n"
 5635      00
 5636 0bde 0000     		.align 8
 5637              	.LC141:
 5638 0be0 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 5638      46504741 
 5638      4C696E6B 
 5638      20646576 
 5638      69636520 
 5639              	.LC142:
 5640 0c1d 20203078 		.string	"  0x%08X\n"
 5640      25303858 
 5640      0A00
 5641 0c27 00       		.align 8
 5642              	.LC143:
 5643 0c28 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 5643      46504741 
 5643      4C696E6B 
 5643      20646576 
 5643      69636520 
 5644              		.align 8
 5645              	.LC144:
 5646 0c80 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 5646      20636861 
 5646      696E2073 
 5646      63616E20 
 5646      72657175 
 5647              	.LC145:
 5648 0ccf 50726F67 		.string	"Programming device..."
 5648      72616D6D 
 5648      696E6720 
 5648      64657669 
 5648      63652E2E 
 5649 0ce5 000000   		.align 8
 5650              	.LC146:
 5651 0ce8 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 5651      72616D20 
 5651      6F706572 
 5651      6174696F 
 5651      6E207265 
 5652              		.align 8
 5653              	.LC147:
 5654 0d30 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 5654      7574696E 
 5654      6720436F 
 5654      6D6D4650 
 5654      47412061 
 5655 0d65 000000   		.align 8
 5656              	.LC148:
 5657 0d68 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 5657      46504741 
 5657      4C696E6B 
 5657      20646576 
 5657      69636520 
 5658 0db4 00000000 		.align 8
 5659              	.LC149:
 5660 0db8 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 5660      6F6E2072 
 5660      65717565 
 5660      73746564 
 5660      20627574 
 5661 0df5 000000   		.align 8
 5662              	.LC150:
 5663 0df8 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 5663      696E7661 
 5663      6C696420 
 5663      61726775 
 5663      6D656E74 
 5664 0e34 00000000 		.align 8
 5665              	.LC151:
 5666 0e38 436F7079 		.string	"Copying from channel %lu to %s"
 5666      696E6720 
 5666      66726F6D 
 5666      20636861 
 5666      6E6E656C 
 5667              	.LC152:
 5668 0e57 0A436175 		.string	"\nCaught SIGINT, quitting..."
 5668      67687420 
 5668      53494749 
 5668      4E542C20 
 5668      71756974 
 5669 0e73 00000000 		.align 8
 5669      00
 5670              	.LC153:
 5671 0e78 1B5B3336 		.string	"\033[36m=================================================================================
 5671      6D3D3D3D 
 5671      3D3D3D3D 
 5671      3D3D3D3D 
 5671      3D3D3D3D 
 5672 0eed 000000   		.align 8
 5673              	.LC154:
 5674 0ef0 1B5B3335 		.string	"\033[35m=============================== \033[31mDLD PROJECT BY THE XILINX MEN\033[35m ===
 5674      6D3D3D3D 
 5674      3D3D3D3D 
 5674      3D3D3D3D 
 5674      3D3D3D3D 
 5675 0f6f 00       		.align 8
 5676              	.LC155:
 5677 0f70 0A526561 		.string	"\nReading Track Data From the CSV File..."
 5677      64696E67 
 5677      20547261 
 5677      636B2044 
 5677      61746120 
 5678              	.LC156:
 5679 0f99 1B5B3332 		.string	"\033[32mTrack Data Read\n\033[0m"
 5679      6D547261 
 5679      636B2044 
 5679      61746120 
 5679      52656164 
 5680 0fb3 00000000 		.align 8
 5680      00
 5681              	.LC157:
 5682 0fb8 1B5B3334 		.string	"\033[34m\nStarting Polling Process"
 5682      6D0A5374 
 5682      61727469 
 5682      6E672050 
 5682      6F6C6C69 
 5683 0fd7 00       		.align 8
 5684              	.LC158:
 5685 0fd8 0A3E3E20 		.string	"\n>> Attempting to read Co-ordinates from Channel \033[35m%d\n\033[0m"
 5685      41747465 
 5685      6D707469 
 5685      6E672074 
 5685      6F207265 
 5686 1016 0000     		.align 8
 5687              	.LC159:
 5688 1018 1B5B3331 		.string	"\033[31m>>>> Failed to Read co-ordinates from channel\n\033[0m"
 5688      6D3E3E3E 
 5688      3E204661 
 5688      696C6564 
 5688      20746F20 
 5689              		.align 8
 5690              	.LC160:
 5691 1050 1B5B3332 		.string	"\033[32m>>>> Successfully Read co-ordinates from channel  %d\n\033[0m"
 5691      6D3E3E3E 
 5691      3E205375 
 5691      63636573 
 5691      7366756C 
 5692 108f 00       		.align 8
 5693              	.LC161:
 5694 1090 3E3E3E3E 		.string	">>>>>>>> Read data is \033[34m %s\n\033[0m"
 5694      3E3E3E3E 
 5694      20526561 
 5694      64206461 
 5694      74612069 
 5695 10b4 00000000 		.align 8
 5696              	.LC162:
 5697 10b8 3E3E2041 		.string	">> Attempting to Write coordinates at channel \033[35m%d\n\033[0m"
 5697      7474656D 
 5697      7074696E 
 5697      6720746F 
 5697      20577269 
 5698 10f3 00000000 		.align 8
 5698      00
 5699              	.LC163:
 5700 10f8 1B5B3331 		.string	"\033[31mWrite failed, Moving on to the next channel\n\033[0m"
 5700      6D577269 
 5700      74652066 
 5700      61696C65 
 5700      642C204D 
 5701 112e 0000     		.align 8
 5702              	.LC164:
 5703 1130 1B5B3332 		.string	"\033[32m>>>> Successfully Written Co-ordinates to the channel\n\033[0m"
 5703      6D3E3E3E 
 5703      3E205375 
 5703      63636573 
 5703      7366756C 
 5704              	.LC165:
 5705 1170 3E3E2041 		.string	">> Attempting to receive ACK1"
 5705      7474656D 
 5705      7074696E 
 5705      6720746F 
 5705      20726563 
 5706 118e 0000     		.align 8
 5707              	.LC166:
 5708 1190 1B5B3331 		.string	"\033[31m>>>> First ack was incorrect, re-attempt after 5 seconds\n\033[0m"
 5708      6D3E3E3E 
 5708      3E204669 
 5708      72737420 
 5708      61636B20 
 5709 11d3 00000000 		.align 8
 5709      00
 5710              	.LC167:
 5711 11d8 3E3E2041 		.string	">> Attempting to receive ACK1 for the second time"
 5711      7474656D 
 5711      7074696E 
 5711      6720746F 
 5711      20726563 
 5712 120a 00000000 		.align 8
 5712      0000
 5713              	.LC168:
 5714 1210 1B5B3331 		.string	"\033[31m>>>> Second ACK was also incorrect, Moving on to the next channel\n\033[0m"
 5714      6D3E3E3E 
 5714      3E205365 
 5714      636F6E64 
 5714      2041434B 
 5715 125c 00000000 		.align 8
 5716              	.LC169:
 5717 1260 1B5B3332 		.string	"\033[32m>>>> Successfully received ACK1 and co-ordinates\n\033[0m"
 5717      6D3E3E3E 
 5717      3E205375 
 5717      63636573 
 5717      7366756C 
 5718 129b 00000000 		.align 8
 5718      00
 5719              	.LC170:
 5720 12a0 3E3E2043 		.string	">> Co-ordinates are \033[34m(%d,%d)\n\033[0m"
 5720      6F2D6F72 
 5720      64696E61 
 5720      74657320 
 5720      61726520 
 5721              	.LC171:
 5722 12c6 3E3E2053 		.string	">> Sending ACK2 to the board"
 5722      656E6469 
 5722      6E672041 
 5722      434B3220 
 5722      746F2074 
 5723              	.LC172:
 5724 12e3 3E3E2057 		.string	">> Writing 64 bits to board"
 5724      72697469 
 5724      6E672036 
 5724      34206269 
 5724      74732074 
 5725 12ff 00       		.align 8
 5726              	.LC173:
 5727 1300 3E3E3E3E 		.string	">>>> Data to write to the board is \033[35m%s\n\033[0m"
 5727      20446174 
 5727      6120746F 
 5727      20777269 
 5727      74652074 
 5728              		.align 8
 5729              	.LC174:
 5730 1330 1B5B3332 		.string	"\033[32m>>>> Written first four bytes to board\n\033[0m"
 5730      6D3E3E3E 
 5730      3E205772 
 5730      69747465 
 5730      6E206669 
 5731              	.LC175:
 5732 1361 3E3E3E3E 		.string	">>>> Waiting to receive ACK"
 5732      20576169 
 5732      74696E67 
 5732      20746F20 
 5732      72656365 
 5733 137d 000000   		.align 8
 5734              	.LC176:
 5735 1380 1B5B3331 		.string	"\033[31m>>>> Receiving Ack failed, going to host_label_2"
 5735      6D3E3E3E 
 5735      3E205265 
 5735      63656976 
 5735      696E6720 
 5736 13b6 0000     		.align 8
 5737              	.LC177:
 5738 13b8 1B5B3332 		.string	"\033[32m>>>> Written next four bytes to board\n\033[0m"
 5738      6D3E3E3E 
 5738      3E205772 
 5738      69747465 
 5738      6E206E65 
 5739              	.LC178:
 5740 13e8 1B5B3332 		.string	"\033[32m>>>> Sent ACK\n\033[0m"
 5740      6D3E3E3E 
 5740      3E205365 
 5740      6E742041 
 5740      434B0A1B 
 5741              		.align 8
 5742              	.LC179:
 5743 1400 536C6565 		.string	"Sleeping until the display of the board is over"
 5743      70696E67 
 5743      20756E74 
 5743      696C2074 
 5743      68652064 
 5744              		.align 8
 5745              	.LC180:
 5746 1430 57616974 		.string	"Waiting to receive data from the board via FPGA and/or UART"
 5746      696E6720 
 5746      746F2072 
 5746      65636569 
 5746      76652064 
 5747 146c 00000000 		.align 8
 5748              	.LC181:
 5749 1470 1B5B3332 		.string	"\033[32m>> Read track data from FPGA\n\033[0m"
 5749      6D3E3E20 
 5749      52656164 
 5749      20747261 
 5749      636B2064 
 5750 1497 00       		.align 8
 5751              	.LC182:
 5752 1498 3E3E3E3E 		.string	">>>> Read data is \033[35m%s\n\033[0m"
 5752      20526561 
 5752      64206461 
 5752      74612069 
 5752      73201B5B 
 5753 14b7 00       		.align 8
 5754              	.LC183:
 5755 14b8 3E3E3E3E 		.string	">>>> Changed the entry to the table"
 5755      20436861 
 5755      6E676564 
 5755      20746865 
 5755      20656E74 
 5756 14dc 00000000 		.align 8
 5757              	.LC184:
 5758 14e0 3E3E3E3E 		.string	">>>> Saved the table to the file"
 5758      20536176 
 5758      65642074 
 5758      68652074 
 5758      61626C65 
 5759 1501 00000000 		.align 8
 5759      000000
 5760              	.LC186:
 5761 1508 3E3E204E 		.string	">> No data received from controller via FPGA"
 5761      6F206461 
 5761      74612072 
 5761      65636569 
 5761      76656420 
 5762 1535 000000   		.align 8
 5763              	.LC187:
 5764 1538 0A456E74 		.string	"\nEntering CommFPGA command-line mode:"
 5764      6572696E 
 5764      6720436F 
 5764      6D6D4650 
 5764      47412063 
 5765              	.LC188:
 5766 155e 3E2000   		.string	"> "
 5767 1561 00000000 		.align 8
 5767      000000
 5768              	.LC189:
 5769 1568 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 5769      46504741 
 5769      4C696E6B 
 5769      20646576 
 5769      69636520 
 5770 15b1 00000000 		.align 8
 5770      000000
 5771              	.LC190:
 5772 15b8 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 5772      6C207265 
 5772      71756573 
 5772      74656420 
 5772      62757420 
 5773              	.LC191:
 5774 15f4 25730A00 		.string	"%s\n"
 5775              		.text
 5776              		.globl	main
 5778              	main:
 5779              	.LFB32:
1089:main.c        **** ///////////////////////////////////////////////////////////////////////////////////////////////////
1090:main.c        **** 	
1091:main.c        **** int main(int argc, char *argv[]) {
 5780              		.loc 1 1091 0
 5781              		.cfi_startproc
 5782 3756 55       		pushq	%rbp
 5783              		.cfi_def_cfa_offset 16
 5784              		.cfi_offset 6, -16
 5785 3757 4889E5   		movq	%rsp, %rbp
 5786              		.cfi_def_cfa_register 6
 5787 375a 53       		pushq	%rbx
 5788 375b 4881ECB8 		subq	$14008, %rsp
 5788      360000
 5789              		.cfi_offset 3, -24
 5790 3762 89BD4CC9 		movl	%edi, -14004(%rbp)
 5790      FFFF
 5791 3768 4889B540 		movq	%rsi, -14016(%rbp)
 5791      C9FFFF
 5792              		.loc 1 1091 0
 5793 376f 64488B04 		movq	%fs:40, %rax
 5793      25280000 
 5793      00
 5794 3778 488945E8 		movq	%rax, -24(%rbp)
 5795 377c 31C0     		xorl	%eax, %eax
1092:main.c        ****     
1093:main.c        ****     fd = open (portname, O_RDWR | O_NOCTTY | O_SYNC);
 5796              		.loc 1 1093 0
 5797 377e 488B0500 		movq	portname(%rip), %rax
 5797      000000
 5798 3785 BE021110 		movl	$1052930, %esi
 5798      00
 5799 378a 4889C7   		movq	%rax, %rdi
 5800 378d B8000000 		movl	$0, %eax
 5800      00
 5801 3792 E8000000 		call	open
 5801      00
 5802 3797 89050000 		movl	%eax, fd(%rip)
 5802      0000
1094:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, pStatus;
 5803              		.loc 1 1094 0
 5804 379d C78564C9 		movl	$0, -13980(%rbp)
 5804      FFFF0000 
 5804      0000
1095:main.c        **** 	struct arg_str *ivpOpt = arg_str0("i", "ivp", "<VID:PID>", "            vendor ID and product ID (
 5805              		.loc 1 1095 0
 5806 37a7 B9000000 		movl	$.LC60, %ecx
 5806      00
 5807 37ac BA000000 		movl	$.LC61, %edx
 5807      00
 5808 37b1 BE000000 		movl	$.LC62, %esi
 5808      00
 5809 37b6 BF000000 		movl	$.LC63, %edi
 5809      00
 5810 37bb E8000000 		call	arg_str0
 5810      00
 5811 37c0 488985F0 		movq	%rax, -13840(%rbp)
 5811      C9FFFF
1096:main.c        **** 	struct arg_str *vpOpt = arg_str1("v", "vp", "<VID:PID[:DID]>", "       VID, PID and opt. dev ID (e
 5812              		.loc 1 1096 0
 5813 37c7 B9000000 		movl	$.LC64, %ecx
 5813      00
 5814 37cc BA000000 		movl	$.LC65, %edx
 5814      00
 5815 37d1 BE000000 		movl	$.LC66, %esi
 5815      00
 5816 37d6 BF000000 		movl	$.LC67, %edi
 5816      00
 5817 37db E8000000 		call	arg_str1
 5817      00
 5818 37e0 488985F8 		movq	%rax, -13832(%rbp)
 5818      C9FFFF
1097:main.c        **** 	struct arg_str *rpOpt = arg_str0("r", "rp", "<File>", "       For running the program and giving t
 5819              		.loc 1 1097 0
 5820 37e7 B9000000 		movl	$.LC68, %ecx
 5820      00
 5821 37ec BA000000 		movl	$.LC69, %edx
 5821      00
 5822 37f1 BE000000 		movl	$.LC70, %esi
 5822      00
 5823 37f6 BF000000 		movl	$.LC56, %edi
 5823      00
 5824 37fb E8000000 		call	arg_str0
 5824      00
 5825 3800 48898500 		movq	%rax, -13824(%rbp)
 5825      CAFFFF
1098:main.c        **** 	struct arg_str *fwOpt = arg_str0("f", "fw", "<firmware.hex>", "        firmware to RAM-load (or us
 5826              		.loc 1 1098 0
 5827 3807 B9000000 		movl	$.LC71, %ecx
 5827      00
 5828 380c BA000000 		movl	$.LC72, %edx
 5828      00
 5829 3811 BE000000 		movl	$.LC73, %esi
 5829      00
 5830 3816 BF000000 		movl	$.LC74, %edi
 5830      00
 5831 381b E8000000 		call	arg_str0
 5831      00
 5832 3820 48898508 		movq	%rax, -13816(%rbp)
 5832      CAFFFF
1099:main.c        **** 	struct arg_str *portOpt = arg_str0("d", "ports", "<bitCfg[,bitCfg]*>", " read/write digital ports 
 5833              		.loc 1 1099 0
 5834 3827 B9000000 		movl	$.LC75, %ecx
 5834      00
 5835 382c BA000000 		movl	$.LC76, %edx
 5835      00
 5836 3831 BE000000 		movl	$.LC77, %esi
 5836      00
 5837 3836 BF000000 		movl	$.LC78, %edi
 5837      00
 5838 383b E8000000 		call	arg_str0
 5838      00
 5839 3840 48898510 		movq	%rax, -13808(%rbp)
 5839      CAFFFF
1100:main.c        **** 	struct arg_str *queryOpt = arg_str0("q", "query", "<jtagBits>", "         query the JTAG chain");
 5840              		.loc 1 1100 0
 5841 3847 B9000000 		movl	$.LC79, %ecx
 5841      00
 5842 384c BA000000 		movl	$.LC80, %edx
 5842      00
 5843 3851 BE000000 		movl	$.LC81, %esi
 5843      00
 5844 3856 BF000000 		movl	$.LC82, %edi
 5844      00
 5845 385b E8000000 		call	arg_str0
 5845      00
 5846 3860 48898518 		movq	%rax, -13800(%rbp)
 5846      CAFFFF
1101:main.c        **** 	struct arg_str *progOpt = arg_str0("p", "program", "<config>", "         program a device");
 5847              		.loc 1 1101 0
 5848 3867 B9000000 		movl	$.LC83, %ecx
 5848      00
 5849 386c BA000000 		movl	$.LC84, %edx
 5849      00
 5850 3871 BE000000 		movl	$.LC85, %esi
 5850      00
 5851 3876 BF000000 		movl	$.LC86, %edi
 5851      00
 5852 387b E8000000 		call	arg_str0
 5852      00
 5853 3880 48898520 		movq	%rax, -13792(%rbp)
 5853      CAFFFF
1102:main.c        **** 	struct arg_uint *conOpt = arg_uint0("c", "conduit", "<conduit>", "        which comm conduit to ch
 5854              		.loc 1 1102 0
 5855 3887 B9000000 		movl	$.LC87, %ecx
 5855      00
 5856 388c BA000000 		movl	$.LC88, %edx
 5856      00
 5857 3891 BE000000 		movl	$.LC89, %esi
 5857      00
 5858 3896 BF000000 		movl	$.LC90, %edi
 5858      00
 5859 389b E8000000 		call	arg_uint0
 5859      00
 5860 38a0 48898528 		movq	%rax, -13784(%rbp)
 5860      CAFFFF
1103:main.c        **** 	struct arg_str *actOpt = arg_str0("a", "action", "<actionString>", "    a series of CommFPGA actio
 5861              		.loc 1 1103 0
 5862 38a7 B9000000 		movl	$.LC91, %ecx
 5862      00
 5863 38ac BA000000 		movl	$.LC92, %edx
 5863      00
 5864 38b1 BE000000 		movl	$.LC93, %esi
 5864      00
 5865 38b6 BF000000 		movl	$.LC94, %edi
 5865      00
 5866 38bb E8000000 		call	arg_str0
 5866      00
 5867 38c0 48898530 		movq	%rax, -13776(%rbp)
 5867      CAFFFF
1104:main.c        **** 	struct arg_lit *shellOpt  = arg_lit0("s", "shell", "                    start up an interactive Co
 5868              		.loc 1 1104 0
 5869 38c7 BA000000 		movl	$.LC95, %edx
 5869      00
 5870 38cc BE000000 		movl	$.LC96, %esi
 5870      00
 5871 38d1 BF000000 		movl	$.LC97, %edi
 5871      00
 5872 38d6 E8000000 		call	arg_lit0
 5872      00
 5873 38db 48898538 		movq	%rax, -13768(%rbp)
 5873      CAFFFF
1105:main.c        **** 	struct arg_lit *benOpt  = arg_lit0("b", "benchmark", "                enable benchmarking & checks
 5874              		.loc 1 1105 0
 5875 38e2 BA000000 		movl	$.LC98, %edx
 5875      00
 5876 38e7 BE000000 		movl	$.LC99, %esi
 5876      00
 5877 38ec BF000000 		movl	$.LC100, %edi
 5877      00
 5878 38f1 E8000000 		call	arg_lit0
 5878      00
 5879 38f6 48898540 		movq	%rax, -13760(%rbp)
 5879      CAFFFF
1106:main.c        **** 	struct arg_lit *rstOpt  = arg_lit0("r", "reset", "                    reset the bulk endpoints");
 5880              		.loc 1 1106 0
 5881 38fd BA000000 		movl	$.LC101, %edx
 5881      00
 5882 3902 BE000000 		movl	$.LC102, %esi
 5882      00
 5883 3907 BF000000 		movl	$.LC56, %edi
 5883      00
 5884 390c E8000000 		call	arg_lit0
 5884      00
 5885 3911 48898548 		movq	%rax, -13752(%rbp)
 5885      CAFFFF
1107:main.c        **** 	struct arg_str *dumpOpt = arg_str0("l", "dumploop", "<ch:file.bin>", "   write data from channel c
 5886              		.loc 1 1107 0
 5887 3918 B9000000 		movl	$.LC103, %ecx
 5887      00
 5888 391d BA000000 		movl	$.LC104, %edx
 5888      00
 5889 3922 BE000000 		movl	$.LC105, %esi
 5889      00
 5890 3927 BF000000 		movl	$.LC106, %edi
 5890      00
 5891 392c E8000000 		call	arg_str0
 5891      00
 5892 3931 48898550 		movq	%rax, -13744(%rbp)
 5892      CAFFFF
1108:main.c        **** 	struct arg_lit *helpOpt  = arg_lit0("h", "help", "                     print this help and exit");
 5893              		.loc 1 1108 0
 5894 3938 BA000000 		movl	$.LC107, %edx
 5894      00
 5895 393d BE000000 		movl	$.LC108, %esi
 5895      00
 5896 3942 BF000000 		movl	$.LC109, %edi
 5896      00
 5897 3947 E8000000 		call	arg_lit0
 5897      00
 5898 394c 48898558 		movq	%rax, -13736(%rbp)
 5898      CAFFFF
1109:main.c        **** 	struct arg_str *eepromOpt  = arg_str0(NULL, "eeprom", "<std|fw.hex|fw.iic>", "   write firmware to
 5899              		.loc 1 1109 0
 5900 3953 B9000000 		movl	$.LC110, %ecx
 5900      00
 5901 3958 BA000000 		movl	$.LC111, %edx
 5901      00
 5902 395d BE000000 		movl	$.LC112, %esi
 5902      00
 5903 3962 BF000000 		movl	$0, %edi
 5903      00
 5904 3967 E8000000 		call	arg_str0
 5904      00
 5905 396c 48898560 		movq	%rax, -13728(%rbp)
 5905      CAFFFF
1110:main.c        **** 	struct arg_str *backupOpt  = arg_str0(NULL, "backup", "<kbitSize:fw.iic>", "     backup FX2's EEPR
 5906              		.loc 1 1110 0
 5907 3973 B9000000 		movl	$.LC113, %ecx
 5907      00
 5908 3978 BA000000 		movl	$.LC114, %edx
 5908      00
 5909 397d BE000000 		movl	$.LC115, %esi
 5909      00
 5910 3982 BF000000 		movl	$0, %edi
 5910      00
 5911 3987 E8000000 		call	arg_str0
 5911      00
 5912 398c 48898568 		movq	%rax, -13720(%rbp)
 5912      CAFFFF
1111:main.c        **** 	struct arg_end *endOpt   = arg_end(20);
 5913              		.loc 1 1111 0
 5914 3993 BF140000 		movl	$20, %edi
 5914      00
 5915 3998 E8000000 		call	arg_end
 5915      00
 5916 399d 48898570 		movq	%rax, -13712(%rbp)
 5916      CAFFFF
1112:main.c        **** 	void *argTable[] = {
 5917              		.loc 1 1112 0
 5918 39a4 488B85F0 		movq	-13840(%rbp), %rax
 5918      C9FFFF
 5919 39ab 48898520 		movq	%rax, -13536(%rbp)
 5919      CBFFFF
 5920 39b2 488B85F8 		movq	-13832(%rbp), %rax
 5920      C9FFFF
 5921 39b9 48898528 		movq	%rax, -13528(%rbp)
 5921      CBFFFF
 5922 39c0 488B8500 		movq	-13824(%rbp), %rax
 5922      CAFFFF
 5923 39c7 48898530 		movq	%rax, -13520(%rbp)
 5923      CBFFFF
 5924 39ce 488B8508 		movq	-13816(%rbp), %rax
 5924      CAFFFF
 5925 39d5 48898538 		movq	%rax, -13512(%rbp)
 5925      CBFFFF
 5926 39dc 488B8510 		movq	-13808(%rbp), %rax
 5926      CAFFFF
 5927 39e3 48898540 		movq	%rax, -13504(%rbp)
 5927      CBFFFF
 5928 39ea 488B8518 		movq	-13800(%rbp), %rax
 5928      CAFFFF
 5929 39f1 48898548 		movq	%rax, -13496(%rbp)
 5929      CBFFFF
 5930 39f8 488B8520 		movq	-13792(%rbp), %rax
 5930      CAFFFF
 5931 39ff 48898550 		movq	%rax, -13488(%rbp)
 5931      CBFFFF
 5932 3a06 488B8528 		movq	-13784(%rbp), %rax
 5932      CAFFFF
 5933 3a0d 48898558 		movq	%rax, -13480(%rbp)
 5933      CBFFFF
 5934 3a14 488B8530 		movq	-13776(%rbp), %rax
 5934      CAFFFF
 5935 3a1b 48898560 		movq	%rax, -13472(%rbp)
 5935      CBFFFF
 5936 3a22 488B8538 		movq	-13768(%rbp), %rax
 5936      CAFFFF
 5937 3a29 48898568 		movq	%rax, -13464(%rbp)
 5937      CBFFFF
 5938 3a30 488B8540 		movq	-13760(%rbp), %rax
 5938      CAFFFF
 5939 3a37 48898570 		movq	%rax, -13456(%rbp)
 5939      CBFFFF
 5940 3a3e 488B8548 		movq	-13752(%rbp), %rax
 5940      CAFFFF
 5941 3a45 48898578 		movq	%rax, -13448(%rbp)
 5941      CBFFFF
 5942 3a4c 488B8550 		movq	-13744(%rbp), %rax
 5942      CAFFFF
 5943 3a53 48898580 		movq	%rax, -13440(%rbp)
 5943      CBFFFF
 5944 3a5a 488B8558 		movq	-13736(%rbp), %rax
 5944      CAFFFF
 5945 3a61 48898588 		movq	%rax, -13432(%rbp)
 5945      CBFFFF
 5946 3a68 488B8560 		movq	-13728(%rbp), %rax
 5946      CAFFFF
 5947 3a6f 48898590 		movq	%rax, -13424(%rbp)
 5947      CBFFFF
 5948 3a76 488B8568 		movq	-13720(%rbp), %rax
 5948      CAFFFF
 5949 3a7d 48898598 		movq	%rax, -13416(%rbp)
 5949      CBFFFF
 5950 3a84 488B8570 		movq	-13712(%rbp), %rax
 5950      CAFFFF
 5951 3a8b 488985A0 		movq	%rax, -13408(%rbp)
 5951      CBFFFF
1113:main.c        **** 		ivpOpt, vpOpt, rpOpt, fwOpt, portOpt, queryOpt, progOpt, conOpt, actOpt,
1114:main.c        **** 		shellOpt, benOpt, rstOpt, dumpOpt, helpOpt, eepromOpt, backupOpt, endOpt
1115:main.c        **** 	};
1116:main.c        **** 	const char *progName = "flcli";
 5952              		.loc 1 1116 0
 5953 3a92 48C78578 		movq	$.LC116, -13704(%rbp)
 5953      CAFFFF00 
 5953      000000
1117:main.c        **** 	int numErrors;
1118:main.c        **** 	struct FLContext *handle = NULL;
 5954              		.loc 1 1118 0
 5955 3a9d 48C785C8 		movq	$0, -13880(%rbp)
 5955      C9FFFF00 
 5955      000000
1119:main.c        **** 	FLStatus fStatus;
1120:main.c        **** 	const char *error = NULL;
 5956              		.loc 1 1120 0
 5957 3aa8 48C785D0 		movq	$0, -13872(%rbp)
 5957      C9FFFF00 
 5957      000000
1121:main.c        **** 	const char *ivp = NULL;
 5958              		.loc 1 1121 0
 5959 3ab3 48C78580 		movq	$0, -13696(%rbp)
 5959      CAFFFF00 
 5959      000000
1122:main.c        **** 	const char *vp = NULL;
 5960              		.loc 1 1122 0
 5961 3abe 48C78588 		movq	$0, -13688(%rbp)
 5961      CAFFFF00 
 5961      000000
1123:main.c        **** 	bool isNeroCapable, isCommCapable;
1124:main.c        **** 	uint32 numDevices, scanChain[16], i;
1125:main.c        **** 	const char *line = NULL;
 5962              		.loc 1 1125 0
 5963 3ac9 48C785E8 		movq	$0, -13848(%rbp)
 5963      C9FFFF00 
 5963      000000
1126:main.c        **** 	uint8 conduit = 0x01;
 5964              		.loc 1 1126 0
 5965 3ad4 C68558C9 		movb	$1, -13992(%rbp)
 5965      FFFF01
1127:main.c        **** 
1128:main.c        **** 	if ( arg_nullcheck(argTable) != 0 ) {
 5966              		.loc 1 1128 0
 5967 3adb 488D8520 		leaq	-13536(%rbp), %rax
 5967      CBFFFF
 5968 3ae2 4889C7   		movq	%rax, %rdi
 5969 3ae5 E8000000 		call	arg_nullcheck
 5969      00
 5970 3aea 85C0     		testl	%eax, %eax
 5971 3aec 742F     		je	.L323
1129:main.c        **** 		fprintf(stderr, "%s: insufficient memory\n", progName);
 5972              		.loc 1 1129 0
 5973 3aee 488B0500 		movq	stderr(%rip), %rax
 5973      000000
 5974 3af5 488B9578 		movq	-13704(%rbp), %rdx
 5974      CAFFFF
 5975 3afc BE000000 		movl	$.LC117, %esi
 5975      00
 5976 3b01 4889C7   		movq	%rax, %rdi
 5977 3b04 B8000000 		movl	$0, %eax
 5977      00
 5978 3b09 E8000000 		call	fprintf
 5978      00
1130:main.c        **** 		FAIL(1, cleanup);
 5979              		.loc 1 1130 0
 5980 3b0e C78564C9 		movl	$1, -13980(%rbp)
 5980      FFFF0100 
 5980      0000
 5981 3b18 E96F1A00 		jmp	.L324
 5981      00
 5982              	.L323:
1131:main.c        **** 	}
1132:main.c        **** 
1133:main.c        **** 	numErrors = arg_parse(argc, argv, argTable);
 5983              		.loc 1 1133 0
 5984 3b1d 488D9520 		leaq	-13536(%rbp), %rdx
 5984      CBFFFF
 5985 3b24 488B8D40 		movq	-14016(%rbp), %rcx
 5985      C9FFFF
 5986 3b2b 8B854CC9 		movl	-14004(%rbp), %eax
 5986      FFFF
 5987 3b31 4889CE   		movq	%rcx, %rsi
 5988 3b34 89C7     		movl	%eax, %edi
 5989 3b36 E8000000 		call	arg_parse
 5989      00
 5990 3b3b 898590C9 		movl	%eax, -13936(%rbp)
 5990      FFFF
1134:main.c        **** /*
1135:main.c        ****     if( rpOpt->count )
1136:main.c        ****     {
1137:main.c        ****         printf("Got the file %s\n", rpOpt->sval[0]);
1138:main.c        **** 		FAIL(FLP_SUCCESS, cleanup);
1139:main.c        ****     }*/
1140:main.c        **** 
1141:main.c        **** 	if ( helpOpt->count > 0 ) {
 5991              		.loc 1 1141 0
 5992 3b41 488B8558 		movq	-13736(%rbp), %rax
 5992      CAFFFF
 5993 3b48 8B4060   		movl	96(%rax), %eax
 5994 3b4b 85C0     		testl	%eax, %eax
 5995 3b4d 7E6E     		jle	.L325
1142:main.c        **** 		printf("FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s", p
 5996              		.loc 1 1142 0
 5997 3b4f 488B8578 		movq	-13704(%rbp), %rax
 5997      CAFFFF
 5998 3b56 4889C6   		movq	%rax, %rsi
 5999 3b59 BF000000 		movl	$.LC118, %edi
 5999      00
 6000 3b5e B8000000 		movl	$0, %eax
 6000      00
 6001 3b63 E8000000 		call	printf
 6001      00
1143:main.c        **** 		arg_print_syntax(stdout, argTable, "\n");
 6002              		.loc 1 1143 0
 6003 3b68 488B0500 		movq	stdout(%rip), %rax
 6003      000000
 6004 3b6f 488D8D20 		leaq	-13536(%rbp), %rcx
 6004      CBFFFF
 6005 3b76 BA000000 		movl	$.LC119, %edx
 6005      00
 6006 3b7b 4889CE   		movq	%rcx, %rsi
 6007 3b7e 4889C7   		movq	%rax, %rdi
 6008 3b81 E8000000 		call	arg_print_syntax
 6008      00
1144:main.c        **** 		printf("\nInteract with an FPGALink device.\n\n");
 6009              		.loc 1 1144 0
 6010 3b86 BF000000 		movl	$.LC120, %edi
 6010      00
 6011 3b8b E8000000 		call	puts
 6011      00
1145:main.c        **** 		arg_print_glossary(stdout, argTable,"  %-10s %s\n");
 6012              		.loc 1 1145 0
 6013 3b90 488B0500 		movq	stdout(%rip), %rax
 6013      000000
 6014 3b97 488D8D20 		leaq	-13536(%rbp), %rcx
 6014      CBFFFF
 6015 3b9e BA000000 		movl	$.LC121, %edx
 6015      00
 6016 3ba3 4889CE   		movq	%rcx, %rsi
 6017 3ba6 4889C7   		movq	%rax, %rdi
 6018 3ba9 E8000000 		call	arg_print_glossary
 6018      00
1146:main.c        **** 		FAIL(FLP_SUCCESS, cleanup);
 6019              		.loc 1 1146 0
 6020 3bae C78564C9 		movl	$0, -13980(%rbp)
 6020      FFFF0000 
 6020      0000
 6021 3bb8 E9CF1900 		jmp	.L324
 6021      00
 6022              	.L325:
1147:main.c        **** 	}
1148:main.c        **** 
1149:main.c        **** 	if ( numErrors > 0 ) {
 6023              		.loc 1 1149 0
 6024 3bbd 83BD90C9 		cmpl	$0, -13936(%rbp)
 6024      FFFF00
 6025 3bc4 7E4F     		jle	.L326
1150:main.c        **** 		arg_print_errors(stdout, endOpt, progName);
 6026              		.loc 1 1150 0
 6027 3bc6 488B0500 		movq	stdout(%rip), %rax
 6027      000000
 6028 3bcd 488B9578 		movq	-13704(%rbp), %rdx
 6028      CAFFFF
 6029 3bd4 488B8D70 		movq	-13712(%rbp), %rcx
 6029      CAFFFF
 6030 3bdb 4889CE   		movq	%rcx, %rsi
 6031 3bde 4889C7   		movq	%rax, %rdi
 6032 3be1 E8000000 		call	arg_print_errors
 6032      00
1151:main.c        **** 		fprintf(stderr, "Try '%s --help' for more information.\n", progName);
 6033              		.loc 1 1151 0
 6034 3be6 488B0500 		movq	stderr(%rip), %rax
 6034      000000
 6035 3bed 488B9578 		movq	-13704(%rbp), %rdx
 6035      CAFFFF
 6036 3bf4 BE000000 		movl	$.LC122, %esi
 6036      00
 6037 3bf9 4889C7   		movq	%rax, %rdi
 6038 3bfc B8000000 		movl	$0, %eax
 6038      00
 6039 3c01 E8000000 		call	fprintf
 6039      00
1152:main.c        **** 		FAIL(FLP_ARGS, cleanup);
 6040              		.loc 1 1152 0
 6041 3c06 C78564C9 		movl	$12, -13980(%rbp)
 6041      FFFF0C00 
 6041      0000
 6042 3c10 E9771900 		jmp	.L324
 6042      00
 6043              	.L326:
1153:main.c        **** 	}
1154:main.c        **** 
1155:main.c        **** 	fStatus = flInitialise(0, &error);
 6044              		.loc 1 1155 0
 6045 3c15 488D85D0 		leaq	-13872(%rbp), %rax
 6045      C9FFFF
 6046 3c1c 4889C6   		movq	%rax, %rsi
 6047 3c1f BF000000 		movl	$0, %edi
 6047      00
 6048 3c24 E8000000 		call	flInitialise
 6048      00
 6049 3c29 898568C9 		movl	%eax, -13976(%rbp)
 6049      FFFF
1156:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6050              		.loc 1 1156 0
 6051 3c2f 83BD68C9 		cmpl	$0, -13976(%rbp)
 6051      FFFF00
 6052 3c36 740F     		je	.L327
 6053              		.loc 1 1156 0 is_stmt 0 discriminator 1
 6054 3c38 C78564C9 		movl	$1, -13980(%rbp)
 6054      FFFF0100 
 6054      0000
 6055 3c42 E9451900 		jmp	.L324
 6055      00
 6056              	.L327:
1157:main.c        **** 
1158:main.c        **** 	vp = vpOpt->sval[0];
 6057              		.loc 1 1158 0 is_stmt 1
 6058 3c47 488B85F8 		movq	-13832(%rbp), %rax
 6058      C9FFFF
 6059 3c4e 488B4068 		movq	104(%rax), %rax
 6060 3c52 488B00   		movq	(%rax), %rax
 6061 3c55 48898588 		movq	%rax, -13688(%rbp)
 6061      CAFFFF
1159:main.c        **** 
1160:main.c        **** 	printf("Attempting to open connection to FPGALink device %s...\n", vp);
 6062              		.loc 1 1160 0
 6063 3c5c 488B8588 		movq	-13688(%rbp), %rax
 6063      CAFFFF
 6064 3c63 4889C6   		movq	%rax, %rsi
 6065 3c66 BF000000 		movl	$.LC123, %edi
 6065      00
 6066 3c6b B8000000 		movl	$0, %eax
 6066      00
 6067 3c70 E8000000 		call	printf
 6067      00
1161:main.c        **** 	fStatus = flOpen(vp, &handle, NULL);
 6068              		.loc 1 1161 0
 6069 3c75 488D8DC8 		leaq	-13880(%rbp), %rcx
 6069      C9FFFF
 6070 3c7c 488B8588 		movq	-13688(%rbp), %rax
 6070      CAFFFF
 6071 3c83 BA000000 		movl	$0, %edx
 6071      00
 6072 3c88 4889CE   		movq	%rcx, %rsi
 6073 3c8b 4889C7   		movq	%rax, %rdi
 6074 3c8e E8000000 		call	flOpen
 6074      00
 6075 3c93 898568C9 		movl	%eax, -13976(%rbp)
 6075      FFFF
1162:main.c        **** 	if ( fStatus ) {
 6076              		.loc 1 1162 0
 6077 3c99 83BD68C9 		cmpl	$0, -13976(%rbp)
 6077      FFFF00
 6078 3ca0 0F842502 		je	.L328
 6078      0000
1163:main.c        **** 		if ( ivpOpt->count ) {
 6079              		.loc 1 1163 0
 6080 3ca6 488B85F0 		movq	-13840(%rbp), %rax
 6080      C9FFFF
 6081 3cad 8B4060   		movl	96(%rax), %eax
 6082 3cb0 85C0     		testl	%eax, %eax
 6083 3cb2 0F84E401 		je	.L329
 6083      0000
 6084              	.LBB57:
1164:main.c        **** 			int count = 60;
 6085              		.loc 1 1164 0
 6086 3cb8 C78570C9 		movl	$60, -13968(%rbp)
 6086      FFFF3C00 
 6086      0000
1165:main.c        **** 			uint8 flag;
1166:main.c        **** 			ivp = ivpOpt->sval[0];
 6087              		.loc 1 1166 0
 6088 3cc2 488B85F0 		movq	-13840(%rbp), %rax
 6088      C9FFFF
 6089 3cc9 488B4068 		movq	104(%rax), %rax
 6090 3ccd 488B00   		movq	(%rax), %rax
 6091 3cd0 48898580 		movq	%rax, -13696(%rbp)
 6091      CAFFFF
1167:main.c        **** 			printf("Loading firmware into %s...\n", ivp);
 6092              		.loc 1 1167 0
 6093 3cd7 488B8580 		movq	-13696(%rbp), %rax
 6093      CAFFFF
 6094 3cde 4889C6   		movq	%rax, %rsi
 6095 3ce1 BF000000 		movl	$.LC124, %edi
 6095      00
 6096 3ce6 B8000000 		movl	$0, %eax
 6096      00
 6097 3ceb E8000000 		call	printf
 6097      00
1168:main.c        **** 			if ( fwOpt->count ) {
 6098              		.loc 1 1168 0
 6099 3cf0 488B8508 		movq	-13816(%rbp), %rax
 6099      CAFFFF
 6100 3cf7 8B4060   		movl	96(%rax), %eax
 6101 3cfa 85C0     		testl	%eax, %eax
 6102 3cfc 742F     		je	.L330
1169:main.c        **** 				fStatus = flLoadCustomFirmware(ivp, fwOpt->sval[0], &error);
 6103              		.loc 1 1169 0
 6104 3cfe 488B8508 		movq	-13816(%rbp), %rax
 6104      CAFFFF
 6105 3d05 488B4068 		movq	104(%rax), %rax
 6106 3d09 488B08   		movq	(%rax), %rcx
 6107 3d0c 488D95D0 		leaq	-13872(%rbp), %rdx
 6107      C9FFFF
 6108 3d13 488B8580 		movq	-13696(%rbp), %rax
 6108      CAFFFF
 6109 3d1a 4889CE   		movq	%rcx, %rsi
 6110 3d1d 4889C7   		movq	%rax, %rdi
 6111 3d20 E8000000 		call	flLoadCustomFirmware
 6111      00
 6112 3d25 898568C9 		movl	%eax, -13976(%rbp)
 6112      FFFF
 6113 3d2b EB26     		jmp	.L331
 6114              	.L330:
1170:main.c        **** 			} else {
1171:main.c        **** 				fStatus = flLoadStandardFirmware(ivp, vp, &error);
 6115              		.loc 1 1171 0
 6116 3d2d 488D95D0 		leaq	-13872(%rbp), %rdx
 6116      C9FFFF
 6117 3d34 488B8D88 		movq	-13688(%rbp), %rcx
 6117      CAFFFF
 6118 3d3b 488B8580 		movq	-13696(%rbp), %rax
 6118      CAFFFF
 6119 3d42 4889CE   		movq	%rcx, %rsi
 6120 3d45 4889C7   		movq	%rax, %rdi
 6121 3d48 E8000000 		call	flLoadStandardFirmware
 6121      00
 6122 3d4d 898568C9 		movl	%eax, -13976(%rbp)
 6122      FFFF
 6123              	.L331:
1172:main.c        **** 			}
1173:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6124              		.loc 1 1173 0
 6125 3d53 83BD68C9 		cmpl	$0, -13976(%rbp)
 6125      FFFF00
 6126 3d5a 740F     		je	.L332
 6127              		.loc 1 1173 0 is_stmt 0 discriminator 1
 6128 3d5c C78564C9 		movl	$1, -13980(%rbp)
 6128      FFFF0100 
 6128      0000
 6129 3d66 E9211800 		jmp	.L324
 6129      00
 6130              	.L332:
1174:main.c        **** 			
1175:main.c        **** 			printf("Awaiting renumeration");
 6131              		.loc 1 1175 0 is_stmt 1
 6132 3d6b BF000000 		movl	$.LC125, %edi
 6132      00
 6133 3d70 B8000000 		movl	$0, %eax
 6133      00
 6134 3d75 E8000000 		call	printf
 6134      00
1176:main.c        **** 			flSleep(1000);
 6135              		.loc 1 1176 0
 6136 3d7a BFE80300 		movl	$1000, %edi
 6136      00
 6137 3d7f E8000000 		call	flSleep
 6137      00
 6138              	.L336:
1177:main.c        **** 			do {
1178:main.c        **** 				printf(".");
 6139              		.loc 1 1178 0
 6140 3d84 BF2E0000 		movl	$46, %edi
 6140      00
 6141 3d89 E8000000 		call	putchar
 6141      00
1179:main.c        **** 				fflush(stdout);
 6142              		.loc 1 1179 0
 6143 3d8e 488B0500 		movq	stdout(%rip), %rax
 6143      000000
 6144 3d95 4889C7   		movq	%rax, %rdi
 6145 3d98 E8000000 		call	fflush
 6145      00
1180:main.c        **** 				fStatus = flIsDeviceAvailable(vp, &flag, &error);
 6146              		.loc 1 1180 0
 6147 3d9d 488D95D0 		leaq	-13872(%rbp), %rdx
 6147      C9FFFF
 6148 3da4 488D8DE0 		leaq	-13856(%rbp), %rcx
 6148      C9FFFF
 6149 3dab 488B8588 		movq	-13688(%rbp), %rax
 6149      CAFFFF
 6150 3db2 4889CE   		movq	%rcx, %rsi
 6151 3db5 4889C7   		movq	%rax, %rdi
 6152 3db8 E8000000 		call	flIsDeviceAvailable
 6152      00
 6153 3dbd 898568C9 		movl	%eax, -13976(%rbp)
 6153      FFFF
1181:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6154              		.loc 1 1181 0
 6155 3dc3 83BD68C9 		cmpl	$0, -13976(%rbp)
 6155      FFFF00
 6156 3dca 740F     		je	.L334
 6157              		.loc 1 1181 0 is_stmt 0 discriminator 1
 6158 3dcc C78564C9 		movl	$1, -13980(%rbp)
 6158      FFFF0100 
 6158      0000
 6159 3dd6 E9B11700 		jmp	.L324
 6159      00
 6160              	.L334:
1182:main.c        **** 				flSleep(250);
 6161              		.loc 1 1182 0 is_stmt 1
 6162 3ddb BFFA0000 		movl	$250, %edi
 6162      00
 6163 3de0 E8000000 		call	flSleep
 6163      00
1183:main.c        **** 				count--;
 6164              		.loc 1 1183 0
 6165 3de5 83AD70C9 		subl	$1, -13968(%rbp)
 6165      FFFF01
1184:main.c        **** 			} while ( !flag && count );
 6166              		.loc 1 1184 0
 6167 3dec 0FB685E0 		movzbl	-13856(%rbp), %eax
 6167      C9FFFF
 6168 3df3 84C0     		testb	%al, %al
 6169 3df5 7509     		jne	.L335
 6170              		.loc 1 1184 0 is_stmt 0 discriminator 1
 6171 3df7 83BD70C9 		cmpl	$0, -13968(%rbp)
 6171      FFFF00
 6172 3dfe 7584     		jne	.L336
 6173              	.L335:
1185:main.c        **** 			printf("\n");
 6174              		.loc 1 1185 0 is_stmt 1
 6175 3e00 BF0A0000 		movl	$10, %edi
 6175      00
 6176 3e05 E8000000 		call	putchar
 6176      00
1186:main.c        **** 			if ( !flag ) {
 6177              		.loc 1 1186 0
 6178 3e0a 0FB685E0 		movzbl	-13856(%rbp), %eax
 6178      C9FFFF
 6179 3e11 84C0     		testb	%al, %al
 6180 3e13 752F     		jne	.L337
1187:main.c        **** 				fprintf(stderr, "FPGALink device did not renumerate properly as %s\n", vp);
 6181              		.loc 1 1187 0
 6182 3e15 488B0500 		movq	stderr(%rip), %rax
 6182      000000
 6183 3e1c 488B9588 		movq	-13688(%rbp), %rdx
 6183      CAFFFF
 6184 3e23 BE000000 		movl	$.LC126, %esi
 6184      00
 6185 3e28 4889C7   		movq	%rax, %rdi
 6186 3e2b B8000000 		movl	$0, %eax
 6186      00
 6187 3e30 E8000000 		call	fprintf
 6187      00
1188:main.c        **** 				FAIL(FLP_LIBERR, cleanup);
 6188              		.loc 1 1188 0
 6189 3e35 C78564C9 		movl	$1, -13980(%rbp)
 6189      FFFF0100 
 6189      0000
 6190 3e3f E9481700 		jmp	.L324
 6190      00
 6191              	.L337:
1189:main.c        **** 			}
1190:main.c        **** 
1191:main.c        **** 			printf("Attempting to open connection to FPGLink device %s again...\n", vp);
 6192              		.loc 1 1191 0
 6193 3e44 488B8588 		movq	-13688(%rbp), %rax
 6193      CAFFFF
 6194 3e4b 4889C6   		movq	%rax, %rsi
 6195 3e4e BF000000 		movl	$.LC127, %edi
 6195      00
 6196 3e53 B8000000 		movl	$0, %eax
 6196      00
 6197 3e58 E8000000 		call	printf
 6197      00
1192:main.c        **** 			fStatus = flOpen(vp, &handle, &error);
 6198              		.loc 1 1192 0
 6199 3e5d 488D95D0 		leaq	-13872(%rbp), %rdx
 6199      C9FFFF
 6200 3e64 488D8DC8 		leaq	-13880(%rbp), %rcx
 6200      C9FFFF
 6201 3e6b 488B8588 		movq	-13688(%rbp), %rax
 6201      CAFFFF
 6202 3e72 4889CE   		movq	%rcx, %rsi
 6203 3e75 4889C7   		movq	%rax, %rdi
 6204 3e78 E8000000 		call	flOpen
 6204      00
 6205 3e7d 898568C9 		movl	%eax, -13976(%rbp)
 6205      FFFF
1193:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6206              		.loc 1 1193 0
 6207 3e83 83BD68C9 		cmpl	$0, -13976(%rbp)
 6207      FFFF00
 6208 3e8a 743F     		je	.L328
 6209              		.loc 1 1193 0 is_stmt 0 discriminator 1
 6210 3e8c C78564C9 		movl	$1, -13980(%rbp)
 6210      FFFF0100 
 6210      0000
 6211 3e96 90       		nop
 6212 3e97 E9F01600 		jmp	.L324
 6212      00
 6213              	.L329:
 6214              	.LBE57:
1194:main.c        **** 		} else {
1195:main.c        **** 			fprintf(stderr, "Could not open FPGALink device at %s and no initial VID:PID was supplied\n", vp
 6215              		.loc 1 1195 0 is_stmt 1
 6216 3e9c 488B0500 		movq	stderr(%rip), %rax
 6216      000000
 6217 3ea3 488B9588 		movq	-13688(%rbp), %rdx
 6217      CAFFFF
 6218 3eaa BE000000 		movl	$.LC128, %esi
 6218      00
 6219 3eaf 4889C7   		movq	%rax, %rdi
 6220 3eb2 B8000000 		movl	$0, %eax
 6220      00
 6221 3eb7 E8000000 		call	fprintf
 6221      00
1196:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6222              		.loc 1 1196 0
 6223 3ebc C78564C9 		movl	$12, -13980(%rbp)
 6223      FFFF0C00 
 6223      0000
 6224 3ec6 E9C11600 		jmp	.L324
 6224      00
 6225              	.L328:
1197:main.c        **** 		}
1198:main.c        **** 	}
1199:main.c        **** 
1200:main.c        **** 	printf(
 6226              		.loc 1 1200 0
 6227 3ecb 488B85C8 		movq	-13880(%rbp), %rax
 6227      C9FFFF
 6228 3ed2 4889C7   		movq	%rax, %rdi
 6229 3ed5 E8000000 		call	flGetFirmwareVersion
 6229      00
 6230 3eda 89C3     		movl	%eax, %ebx
1201:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
1202:main.c        **** 		vp, flGetFirmwareID(handle), flGetFirmwareVersion(handle)
 6231              		.loc 1 1202 0
 6232 3edc 488B85C8 		movq	-13880(%rbp), %rax
 6232      C9FFFF
 6233 3ee3 4889C7   		movq	%rax, %rdi
 6234 3ee6 E8000000 		call	flGetFirmwareID
 6234      00
1200:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 6235              		.loc 1 1200 0
 6236 3eeb 0FB7D0   		movzwl	%ax, %edx
 6237 3eee 488B8588 		movq	-13688(%rbp), %rax
 6237      CAFFFF
 6238 3ef5 89D9     		movl	%ebx, %ecx
 6239 3ef7 4889C6   		movq	%rax, %rsi
 6240 3efa BF000000 		movl	$.LC129, %edi
 6240      00
 6241 3eff B8000000 		movl	$0, %eax
 6241      00
 6242 3f04 E8000000 		call	printf
 6242      00
1203:main.c        **** 	);
1204:main.c        **** 
1205:main.c        **** 	if ( eepromOpt->count ) {
 6243              		.loc 1 1205 0
 6244 3f09 488B8560 		movq	-13728(%rbp), %rax
 6244      CAFFFF
 6245 3f10 8B4060   		movl	96(%rax), %eax
 6246 3f13 85C0     		testl	%eax, %eax
 6247 3f15 0F84B600 		je	.L339
 6247      0000
1206:main.c        **** 		if ( !strcmp("std", eepromOpt->sval[0]) ) {
 6248              		.loc 1 1206 0
 6249 3f1b 488B8560 		movq	-13728(%rbp), %rax
 6249      CAFFFF
 6250 3f22 488B4068 		movq	104(%rax), %rax
 6251 3f26 488B00   		movq	(%rax), %rax
 6252 3f29 4889C6   		movq	%rax, %rsi
 6253 3f2c BF000000 		movl	$.LC130, %edi
 6253      00
 6254 3f31 E8000000 		call	strcmp
 6254      00
 6255 3f36 85C0     		testl	%eax, %eax
 6256 3f38 7532     		jne	.L340
1207:main.c        **** 			printf("Writing the standard FPGALink firmware to the FX2's EEPROM...\n");
 6257              		.loc 1 1207 0
 6258 3f3a BF000000 		movl	$.LC131, %edi
 6258      00
 6259 3f3f E8000000 		call	puts
 6259      00
1208:main.c        **** 			fStatus = flFlashStandardFirmware(handle, vp, &error);
 6260              		.loc 1 1208 0
 6261 3f44 488B85C8 		movq	-13880(%rbp), %rax
 6261      C9FFFF
 6262 3f4b 488D95D0 		leaq	-13872(%rbp), %rdx
 6262      C9FFFF
 6263 3f52 488B8D88 		movq	-13688(%rbp), %rcx
 6263      CAFFFF
 6264 3f59 4889CE   		movq	%rcx, %rsi
 6265 3f5c 4889C7   		movq	%rax, %rdi
 6266 3f5f E8000000 		call	flFlashStandardFirmware
 6266      00
 6267 3f64 898568C9 		movl	%eax, -13976(%rbp)
 6267      FFFF
 6268 3f6a EB4D     		jmp	.L341
 6269              	.L340:
1209:main.c        **** 		} else {
1210:main.c        **** 			printf("Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n", eepromOpt->sval[0]);
 6270              		.loc 1 1210 0
 6271 3f6c 488B8560 		movq	-13728(%rbp), %rax
 6271      CAFFFF
 6272 3f73 488B4068 		movq	104(%rax), %rax
 6273 3f77 488B00   		movq	(%rax), %rax
 6274 3f7a 4889C6   		movq	%rax, %rsi
 6275 3f7d BF000000 		movl	$.LC132, %edi
 6275      00
 6276 3f82 B8000000 		movl	$0, %eax
 6276      00
 6277 3f87 E8000000 		call	printf
 6277      00
1211:main.c        **** 			fStatus = flFlashCustomFirmware(handle, eepromOpt->sval[0], &error);
 6278              		.loc 1 1211 0
 6279 3f8c 488B8560 		movq	-13728(%rbp), %rax
 6279      CAFFFF
 6280 3f93 488B4068 		movq	104(%rax), %rax
 6281 3f97 488B08   		movq	(%rax), %rcx
 6282 3f9a 488B85C8 		movq	-13880(%rbp), %rax
 6282      C9FFFF
 6283 3fa1 488D95D0 		leaq	-13872(%rbp), %rdx
 6283      C9FFFF
 6284 3fa8 4889CE   		movq	%rcx, %rsi
 6285 3fab 4889C7   		movq	%rax, %rdi
 6286 3fae E8000000 		call	flFlashCustomFirmware
 6286      00
 6287 3fb3 898568C9 		movl	%eax, -13976(%rbp)
 6287      FFFF
 6288              	.L341:
1212:main.c        **** 		}
1213:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6289              		.loc 1 1213 0
 6290 3fb9 83BD68C9 		cmpl	$0, -13976(%rbp)
 6290      FFFF00
 6291 3fc0 740F     		je	.L339
 6292              		.loc 1 1213 0 is_stmt 0 discriminator 1
 6293 3fc2 C78564C9 		movl	$1, -13980(%rbp)
 6293      FFFF0100 
 6293      0000
 6294 3fcc E9BB1500 		jmp	.L324
 6294      00
 6295              	.L339:
1214:main.c        **** 	}
1215:main.c        **** 
1216:main.c        **** 	if ( backupOpt->count ) {
 6296              		.loc 1 1216 0 is_stmt 1
 6297 3fd1 488B8568 		movq	-13720(%rbp), %rax
 6297      CAFFFF
 6298 3fd8 8B4060   		movl	96(%rax), %eax
 6299 3fdb 85C0     		testl	%eax, %eax
 6300 3fdd 0F84DA00 		je	.L342
 6300      0000
 6301              	.LBB58:
1217:main.c        **** 		const char *fileName;
1218:main.c        **** 		const uint32 kbitSize = strtoul(backupOpt->sval[0], (char**)&fileName, 0);
 6302              		.loc 1 1218 0
 6303 3fe3 488B8568 		movq	-13720(%rbp), %rax
 6303      CAFFFF
 6304 3fea 488B4068 		movq	104(%rax), %rax
 6305 3fee 488B00   		movq	(%rax), %rax
 6306 3ff1 488D8DE0 		leaq	-13856(%rbp), %rcx
 6306      C9FFFF
 6307 3ff8 BA000000 		movl	$0, %edx
 6307      00
 6308 3ffd 4889CE   		movq	%rcx, %rsi
 6309 4000 4889C7   		movq	%rax, %rdi
 6310 4003 E8000000 		call	strtoul
 6310      00
 6311 4008 898594C9 		movl	%eax, -13932(%rbp)
 6311      FFFF
1219:main.c        **** 		if ( *fileName != ':' ) {
 6312              		.loc 1 1219 0
 6313 400e 488B85E0 		movq	-13856(%rbp), %rax
 6313      C9FFFF
 6314 4015 0FB600   		movzbl	(%rax), %eax
 6315 4018 3C3A     		cmpb	$58, %al
 6316 401a 742F     		je	.L343
1220:main.c        **** 			fprintf(stderr, "%s: invalid argument to option --backup=<kbitSize:fw.iic>\n", progName);
 6317              		.loc 1 1220 0
 6318 401c 488B0500 		movq	stderr(%rip), %rax
 6318      000000
 6319 4023 488B9578 		movq	-13704(%rbp), %rdx
 6319      CAFFFF
 6320 402a BE000000 		movl	$.LC133, %esi
 6320      00
 6321 402f 4889C7   		movq	%rax, %rdi
 6322 4032 B8000000 		movl	$0, %eax
 6322      00
 6323 4037 E8000000 		call	fprintf
 6323      00
1221:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6324              		.loc 1 1221 0
 6325 403c C78564C9 		movl	$12, -13980(%rbp)
 6325      FFFF0C00 
 6325      0000
 6326 4046 E9411500 		jmp	.L324
 6326      00
 6327              	.L343:
1222:main.c        **** 		}
1223:main.c        **** 		fileName++;
 6328              		.loc 1 1223 0
 6329 404b 488B85E0 		movq	-13856(%rbp), %rax
 6329      C9FFFF
 6330 4052 4883C001 		addq	$1, %rax
 6331 4056 488985E0 		movq	%rax, -13856(%rbp)
 6331      C9FFFF
1224:main.c        **** 		printf("Saving a backup of %d kbit from the FX2's EEPROM to %s...\n", kbitSize, fileName);
 6332              		.loc 1 1224 0
 6333 405d 488B95E0 		movq	-13856(%rbp), %rdx
 6333      C9FFFF
 6334 4064 8B8594C9 		movl	-13932(%rbp), %eax
 6334      FFFF
 6335 406a 89C6     		movl	%eax, %esi
 6336 406c BF000000 		movl	$.LC134, %edi
 6336      00
 6337 4071 B8000000 		movl	$0, %eax
 6337      00
 6338 4076 E8000000 		call	printf
 6338      00
1225:main.c        **** 		fStatus = flSaveFirmware(handle, kbitSize, fileName, &error);
 6339              		.loc 1 1225 0
 6340 407b 488B95E0 		movq	-13856(%rbp), %rdx
 6340      C9FFFF
 6341 4082 488B85C8 		movq	-13880(%rbp), %rax
 6341      C9FFFF
 6342 4089 488D8DD0 		leaq	-13872(%rbp), %rcx
 6342      C9FFFF
 6343 4090 8BB594C9 		movl	-13932(%rbp), %esi
 6343      FFFF
 6344 4096 4889C7   		movq	%rax, %rdi
 6345 4099 E8000000 		call	flSaveFirmware
 6345      00
 6346 409e 898568C9 		movl	%eax, -13976(%rbp)
 6346      FFFF
1226:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6347              		.loc 1 1226 0
 6348 40a4 83BD68C9 		cmpl	$0, -13976(%rbp)
 6348      FFFF00
 6349 40ab 7410     		je	.L342
 6350              		.loc 1 1226 0 is_stmt 0 discriminator 1
 6351 40ad C78564C9 		movl	$1, -13980(%rbp)
 6351      FFFF0100 
 6351      0000
 6352 40b7 90       		nop
 6353 40b8 E9CF1400 		jmp	.L324
 6353      00
 6354              	.L342:
 6355              	.LBE58:
1227:main.c        **** 	}
1228:main.c        **** 
1229:main.c        **** 	if ( rstOpt->count ) {
 6356              		.loc 1 1229 0 is_stmt 1
 6357 40bd 488B8548 		movq	-13752(%rbp), %rax
 6357      CAFFFF
 6358 40c4 8B4060   		movl	96(%rax), %eax
 6359 40c7 85C0     		testl	%eax, %eax
 6360 40c9 7437     		je	.L346
1230:main.c        **** 		// Reset the bulk endpoints (only needed in some virtualised environments)
1231:main.c        **** 		fStatus = flResetToggle(handle, &error);
 6361              		.loc 1 1231 0
 6362 40cb 488B85C8 		movq	-13880(%rbp), %rax
 6362      C9FFFF
 6363 40d2 488D95D0 		leaq	-13872(%rbp), %rdx
 6363      C9FFFF
 6364 40d9 4889D6   		movq	%rdx, %rsi
 6365 40dc 4889C7   		movq	%rax, %rdi
 6366 40df E8000000 		call	flResetToggle
 6366      00
 6367 40e4 898568C9 		movl	%eax, -13976(%rbp)
 6367      FFFF
1232:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6368              		.loc 1 1232 0
 6369 40ea 83BD68C9 		cmpl	$0, -13976(%rbp)
 6369      FFFF00
 6370 40f1 740F     		je	.L346
 6371              		.loc 1 1232 0 is_stmt 0 discriminator 1
 6372 40f3 C78564C9 		movl	$1, -13980(%rbp)
 6372      FFFF0100 
 6372      0000
 6373 40fd E98A1400 		jmp	.L324
 6373      00
 6374              	.L346:
1233:main.c        **** 	}
1234:main.c        **** 
1235:main.c        **** 	if ( conOpt->count ) {
 6375              		.loc 1 1235 0 is_stmt 1
 6376 4102 488B8528 		movq	-13784(%rbp), %rax
 6376      CAFFFF
 6377 4109 8B4060   		movl	96(%rax), %eax
 6378 410c 85C0     		testl	%eax, %eax
 6379 410e 7413     		je	.L347
1236:main.c        **** 		conduit = (uint8)conOpt->ival[0];
 6380              		.loc 1 1236 0
 6381 4110 488B8528 		movq	-13784(%rbp), %rax
 6381      CAFFFF
 6382 4117 488B4068 		movq	104(%rax), %rax
 6383 411b 8B00     		movl	(%rax), %eax
 6384 411d 888558C9 		movb	%al, -13992(%rbp)
 6384      FFFF
 6385              	.L347:
1237:main.c        **** 	}
1238:main.c        **** 
1239:main.c        **** 	isNeroCapable = flIsNeroCapable(handle);
 6386              		.loc 1 1239 0
 6387 4123 488B85C8 		movq	-13880(%rbp), %rax
 6387      C9FFFF
 6388 412a 4889C7   		movq	%rax, %rdi
 6389 412d E8000000 		call	flIsNeroCapable
 6389      00
 6390 4132 84C0     		testb	%al, %al
 6391 4134 0F95C0   		setne	%al
 6392 4137 888559C9 		movb	%al, -13991(%rbp)
 6392      FFFF
1240:main.c        **** 	isCommCapable = flIsCommCapable(handle, conduit);
 6393              		.loc 1 1240 0
 6394 413d 0FB69558 		movzbl	-13992(%rbp), %edx
 6394      C9FFFF
 6395 4144 488B85C8 		movq	-13880(%rbp), %rax
 6395      C9FFFF
 6396 414b 89D6     		movl	%edx, %esi
 6397 414d 4889C7   		movq	%rax, %rdi
 6398 4150 E8000000 		call	flIsCommCapable
 6398      00
 6399 4155 84C0     		testb	%al, %al
 6400 4157 0F95C0   		setne	%al
 6401 415a 88855AC9 		movb	%al, -13990(%rbp)
 6401      FFFF
1241:main.c        **** 
1242:main.c        **** 	if ( portOpt->count ) {
 6402              		.loc 1 1242 0
 6403 4160 488B8510 		movq	-13808(%rbp), %rax
 6403      CAFFFF
 6404 4167 8B4060   		movl	96(%rax), %eax
 6405 416a 85C0     		testl	%eax, %eax
 6406 416c 0F843C02 		je	.L348
 6406      0000
 6407              	.LBB59:
1243:main.c        **** 		uint32 readState;
1244:main.c        **** 		char hex[9];
1245:main.c        **** 		const uint8 *p = (const uint8 *)hex;
 6408              		.loc 1 1245 0
 6409 4172 488D45D0 		leaq	-48(%rbp), %rax
 6410 4176 48898590 		movq	%rax, -13680(%rbp)
 6410      CAFFFF
1246:main.c        **** 		printf("Configuring ports...\n");
 6411              		.loc 1 1246 0
 6412 417d BF000000 		movl	$.LC135, %edi
 6412      00
 6413 4182 E8000000 		call	puts
 6413      00
1247:main.c        **** 		fStatus = flMultiBitPortAccess(handle, portOpt->sval[0], &readState, &error);
 6414              		.loc 1 1247 0
 6415 4187 488B8510 		movq	-13808(%rbp), %rax
 6415      CAFFFF
 6416 418e 488B4068 		movq	104(%rax), %rax
 6417 4192 488B30   		movq	(%rax), %rsi
 6418 4195 488B85C8 		movq	-13880(%rbp), %rax
 6418      C9FFFF
 6419 419c 488D8DD0 		leaq	-13872(%rbp), %rcx
 6419      C9FFFF
 6420 41a3 488D95E0 		leaq	-13856(%rbp), %rdx
 6420      C9FFFF
 6421 41aa 4889C7   		movq	%rax, %rdi
 6422 41ad E8000000 		call	flMultiBitPortAccess
 6422      00
 6423 41b2 898568C9 		movl	%eax, -13976(%rbp)
 6423      FFFF
1248:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6424              		.loc 1 1248 0
 6425 41b8 83BD68C9 		cmpl	$0, -13976(%rbp)
 6425      FFFF00
 6426 41bf 740F     		je	.L349
 6427              		.loc 1 1248 0 is_stmt 0 discriminator 1
 6428 41c1 C78564C9 		movl	$1, -13980(%rbp)
 6428      FFFF0100 
 6428      0000
 6429 41cb E9BC1300 		jmp	.L324
 6429      00
 6430              	.L349:
1249:main.c        **** 		sprintf(hex, "%08X", readState);
 6431              		.loc 1 1249 0 is_stmt 1
 6432 41d0 8B95E0C9 		movl	-13856(%rbp), %edx
 6432      FFFF
 6433 41d6 488D45D0 		leaq	-48(%rbp), %rax
 6434 41da BE000000 		movl	$.LC136, %esi
 6434      00
 6435 41df 4889C7   		movq	%rax, %rdi
 6436 41e2 B8000000 		movl	$0, %eax
 6436      00
 6437 41e7 E8000000 		call	sprintf
 6437      00
1250:main.c        **** 		printf("Readback:   28   24   20   16    12    8    4    0\n          %s", nibbles[*p++ - '0']);
 6438              		.loc 1 1250 0
 6439 41ec 488B8590 		movq	-13680(%rbp), %rax
 6439      CAFFFF
 6440 41f3 488D5001 		leaq	1(%rax), %rdx
 6441 41f7 48899590 		movq	%rdx, -13680(%rbp)
 6441      CAFFFF
 6442 41fe 0FB600   		movzbl	(%rax), %eax
 6443 4201 0FB6C0   		movzbl	%al, %eax
 6444 4204 83E830   		subl	$48, %eax
 6445 4207 4898     		cltq
 6446 4209 488B04C5 		movq	nibbles(,%rax,8), %rax
 6446      00000000 
 6447 4211 4889C6   		movq	%rax, %rsi
 6448 4214 BF000000 		movl	$.LC137, %edi
 6448      00
 6449 4219 B8000000 		movl	$0, %eax
 6449      00
 6450 421e E8000000 		call	printf
 6450      00
1251:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 6451              		.loc 1 1251 0
 6452 4223 488B8590 		movq	-13680(%rbp), %rax
 6452      CAFFFF
 6453 422a 488D5001 		leaq	1(%rax), %rdx
 6454 422e 48899590 		movq	%rdx, -13680(%rbp)
 6454      CAFFFF
 6455 4235 0FB600   		movzbl	(%rax), %eax
 6456 4238 0FB6C0   		movzbl	%al, %eax
 6457 423b 83E830   		subl	$48, %eax
 6458 423e 4898     		cltq
 6459 4240 488B04C5 		movq	nibbles(,%rax,8), %rax
 6459      00000000 
 6460 4248 4889C6   		movq	%rax, %rsi
 6461 424b BF000000 		movl	$.LC138, %edi
 6461      00
 6462 4250 B8000000 		movl	$0, %eax
 6462      00
 6463 4255 E8000000 		call	printf
 6463      00
1252:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 6464              		.loc 1 1252 0
 6465 425a 488B8590 		movq	-13680(%rbp), %rax
 6465      CAFFFF
 6466 4261 488D5001 		leaq	1(%rax), %rdx
 6467 4265 48899590 		movq	%rdx, -13680(%rbp)
 6467      CAFFFF
 6468 426c 0FB600   		movzbl	(%rax), %eax
 6469 426f 0FB6C0   		movzbl	%al, %eax
 6470 4272 83E830   		subl	$48, %eax
 6471 4275 4898     		cltq
 6472 4277 488B04C5 		movq	nibbles(,%rax,8), %rax
 6472      00000000 
 6473 427f 4889C6   		movq	%rax, %rsi
 6474 4282 BF000000 		movl	$.LC138, %edi
 6474      00
 6475 4287 B8000000 		movl	$0, %eax
 6475      00
 6476 428c E8000000 		call	printf
 6476      00
1253:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 6477              		.loc 1 1253 0
 6478 4291 488B8590 		movq	-13680(%rbp), %rax
 6478      CAFFFF
 6479 4298 488D5001 		leaq	1(%rax), %rdx
 6480 429c 48899590 		movq	%rdx, -13680(%rbp)
 6480      CAFFFF
 6481 42a3 0FB600   		movzbl	(%rax), %eax
 6482 42a6 0FB6C0   		movzbl	%al, %eax
 6483 42a9 83E830   		subl	$48, %eax
 6484 42ac 4898     		cltq
 6485 42ae 488B04C5 		movq	nibbles(,%rax,8), %rax
 6485      00000000 
 6486 42b6 4889C6   		movq	%rax, %rsi
 6487 42b9 BF000000 		movl	$.LC138, %edi
 6487      00
 6488 42be B8000000 		movl	$0, %eax
 6488      00
 6489 42c3 E8000000 		call	printf
 6489      00
1254:main.c        **** 		printf("  %s", nibbles[*p++ - '0']);
 6490              		.loc 1 1254 0
 6491 42c8 488B8590 		movq	-13680(%rbp), %rax
 6491      CAFFFF
 6492 42cf 488D5001 		leaq	1(%rax), %rdx
 6493 42d3 48899590 		movq	%rdx, -13680(%rbp)
 6493      CAFFFF
 6494 42da 0FB600   		movzbl	(%rax), %eax
 6495 42dd 0FB6C0   		movzbl	%al, %eax
 6496 42e0 83E830   		subl	$48, %eax
 6497 42e3 4898     		cltq
 6498 42e5 488B04C5 		movq	nibbles(,%rax,8), %rax
 6498      00000000 
 6499 42ed 4889C6   		movq	%rax, %rsi
 6500 42f0 BF000000 		movl	$.LC139, %edi
 6500      00
 6501 42f5 B8000000 		movl	$0, %eax
 6501      00
 6502 42fa E8000000 		call	printf
 6502      00
1255:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 6503              		.loc 1 1255 0
 6504 42ff 488B8590 		movq	-13680(%rbp), %rax
 6504      CAFFFF
 6505 4306 488D5001 		leaq	1(%rax), %rdx
 6506 430a 48899590 		movq	%rdx, -13680(%rbp)
 6506      CAFFFF
 6507 4311 0FB600   		movzbl	(%rax), %eax
 6508 4314 0FB6C0   		movzbl	%al, %eax
 6509 4317 83E830   		subl	$48, %eax
 6510 431a 4898     		cltq
 6511 431c 488B04C5 		movq	nibbles(,%rax,8), %rax
 6511      00000000 
 6512 4324 4889C6   		movq	%rax, %rsi
 6513 4327 BF000000 		movl	$.LC138, %edi
 6513      00
 6514 432c B8000000 		movl	$0, %eax
 6514      00
 6515 4331 E8000000 		call	printf
 6515      00
1256:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 6516              		.loc 1 1256 0
 6517 4336 488B8590 		movq	-13680(%rbp), %rax
 6517      CAFFFF
 6518 433d 488D5001 		leaq	1(%rax), %rdx
 6519 4341 48899590 		movq	%rdx, -13680(%rbp)
 6519      CAFFFF
 6520 4348 0FB600   		movzbl	(%rax), %eax
 6521 434b 0FB6C0   		movzbl	%al, %eax
 6522 434e 83E830   		subl	$48, %eax
 6523 4351 4898     		cltq
 6524 4353 488B04C5 		movq	nibbles(,%rax,8), %rax
 6524      00000000 
 6525 435b 4889C6   		movq	%rax, %rsi
 6526 435e BF000000 		movl	$.LC138, %edi
 6526      00
 6527 4363 B8000000 		movl	$0, %eax
 6527      00
 6528 4368 E8000000 		call	printf
 6528      00
1257:main.c        **** 		printf(" %s\n", nibbles[*p++ - '0']);
 6529              		.loc 1 1257 0
 6530 436d 488B8590 		movq	-13680(%rbp), %rax
 6530      CAFFFF
 6531 4374 488D5001 		leaq	1(%rax), %rdx
 6532 4378 48899590 		movq	%rdx, -13680(%rbp)
 6532      CAFFFF
 6533 437f 0FB600   		movzbl	(%rax), %eax
 6534 4382 0FB6C0   		movzbl	%al, %eax
 6535 4385 83E830   		subl	$48, %eax
 6536 4388 4898     		cltq
 6537 438a 488B04C5 		movq	nibbles(,%rax,8), %rax
 6537      00000000 
 6538 4392 4889C6   		movq	%rax, %rsi
 6539 4395 BF000000 		movl	$.LC140, %edi
 6539      00
 6540 439a B8000000 		movl	$0, %eax
 6540      00
 6541 439f E8000000 		call	printf
 6541      00
1258:main.c        **** 		flSleep(100);
 6542              		.loc 1 1258 0
 6543 43a4 BF640000 		movl	$100, %edi
 6543      00
 6544 43a9 E8000000 		call	flSleep
 6544      00
 6545              	.L348:
 6546              	.LBE59:
1259:main.c        **** 	}
1260:main.c        **** 
1261:main.c        **** 	if ( queryOpt->count ) {
 6547              		.loc 1 1261 0
 6548 43ae 488B8518 		movq	-13800(%rbp), %rax
 6548      CAFFFF
 6549 43b5 8B4060   		movl	96(%rax), %eax
 6550 43b8 85C0     		testl	%eax, %eax
 6551 43ba 0F844D01 		je	.L350
 6551      0000
1262:main.c        **** 		if ( isNeroCapable ) {
 6552              		.loc 1 1262 0
 6553 43c0 80BD59C9 		cmpb	$0, -13991(%rbp)
 6553      FFFF00
 6554 43c7 0F841101 		je	.L351
 6554      0000
1263:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 6555              		.loc 1 1263 0
 6556 43cd 488B85C8 		movq	-13880(%rbp), %rax
 6556      C9FFFF
 6557 43d4 488D95D0 		leaq	-13872(%rbp), %rdx
 6557      C9FFFF
 6558 43db BE000000 		movl	$0, %esi
 6558      00
 6559 43e0 4889C7   		movq	%rax, %rdi
 6560 43e3 E8000000 		call	flSelectConduit
 6560      00
 6561 43e8 898568C9 		movl	%eax, -13976(%rbp)
 6561      FFFF
1264:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6562              		.loc 1 1264 0
 6563 43ee 83BD68C9 		cmpl	$0, -13976(%rbp)
 6563      FFFF00
 6564 43f5 740F     		je	.L352
 6565              		.loc 1 1264 0 is_stmt 0 discriminator 1
 6566 43f7 C78564C9 		movl	$1, -13980(%rbp)
 6566      FFFF0100 
 6566      0000
 6567 4401 E9861100 		jmp	.L324
 6567      00
 6568              	.L352:
1265:main.c        **** 			fStatus = jtagScanChain(handle, queryOpt->sval[0], &numDevices, scanChain, 16, &error);
 6569              		.loc 1 1265 0 is_stmt 1
 6570 4406 488B8518 		movq	-13800(%rbp), %rax
 6570      CAFFFF
 6571 440d 488B4068 		movq	104(%rax), %rax
 6572 4411 488B30   		movq	(%rax), %rsi
 6573 4414 488B85C8 		movq	-13880(%rbp), %rax
 6573      C9FFFF
 6574 441b 488DBDD0 		leaq	-13872(%rbp), %rdi
 6574      C9FFFF
 6575 4422 488D8DE0 		leaq	-13600(%rbp), %rcx
 6575      CAFFFF
 6576 4429 488D955C 		leaq	-13988(%rbp), %rdx
 6576      C9FFFF
 6577 4430 4989F9   		movq	%rdi, %r9
 6578 4433 41B81000 		movl	$16, %r8d
 6578      0000
 6579 4439 4889C7   		movq	%rax, %rdi
 6580 443c E8000000 		call	jtagScanChain
 6580      00
 6581 4441 898568C9 		movl	%eax, -13976(%rbp)
 6581      FFFF
1266:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6582              		.loc 1 1266 0
 6583 4447 83BD68C9 		cmpl	$0, -13976(%rbp)
 6583      FFFF00
 6584 444e 740F     		je	.L353
 6585              		.loc 1 1266 0 is_stmt 0 discriminator 1
 6586 4450 C78564C9 		movl	$1, -13980(%rbp)
 6586      FFFF0100 
 6586      0000
 6587 445a E92D1100 		jmp	.L324
 6587      00
 6588              	.L353:
1267:main.c        **** 			if ( numDevices ) {
 6589              		.loc 1 1267 0 is_stmt 1
 6590 445f 8B855CC9 		movl	-13988(%rbp), %eax
 6590      FFFF
 6591 4465 85C0     		testl	%eax, %eax
 6592 4467 745A     		je	.L354
1268:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain, yielding:\n", vp);
 6593              		.loc 1 1268 0
 6594 4469 488B8588 		movq	-13688(%rbp), %rax
 6594      CAFFFF
 6595 4470 4889C6   		movq	%rax, %rsi
 6596 4473 BF000000 		movl	$.LC141, %edi
 6596      00
 6597 4478 B8000000 		movl	$0, %eax
 6597      00
 6598 447d E8000000 		call	printf
 6598      00
1269:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 6599              		.loc 1 1269 0
 6600 4482 C7856CC9 		movl	$0, -13972(%rbp)
 6600      FFFF0000 
 6600      0000
 6601 448c EB25     		jmp	.L355
 6602              	.L356:
1270:main.c        **** 					printf("  0x%08X\n", scanChain[i]);
 6603              		.loc 1 1270 0 discriminator 3
 6604 448e 8B856CC9 		movl	-13972(%rbp), %eax
 6604      FFFF
 6605 4494 8B8485E0 		movl	-13600(%rbp,%rax,4), %eax
 6605      CAFFFF
 6606 449b 89C6     		movl	%eax, %esi
 6607 449d BF000000 		movl	$.LC142, %edi
 6607      00
 6608 44a2 B8000000 		movl	$0, %eax
 6608      00
 6609 44a7 E8000000 		call	printf
 6609      00
1269:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 6610              		.loc 1 1269 0 discriminator 3
 6611 44ac 83856CC9 		addl	$1, -13972(%rbp)
 6611      FFFF01
 6612              	.L355:
1269:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 6613              		.loc 1 1269 0 is_stmt 0 discriminator 1
 6614 44b3 8B855CC9 		movl	-13988(%rbp), %eax
 6614      FFFF
 6615 44b9 39856CC9 		cmpl	%eax, -13972(%rbp)
 6615      FFFF
 6616 44bf 72CD     		jb	.L356
 6617 44c1 EB4A     		jmp	.L350
 6618              	.L354:
1271:main.c        **** 				}
1272:main.c        **** 			} else {
1273:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\
 6619              		.loc 1 1273 0 is_stmt 1
 6620 44c3 488B8588 		movq	-13688(%rbp), %rax
 6620      CAFFFF
 6621 44ca 4889C6   		movq	%rax, %rsi
 6622 44cd BF000000 		movl	$.LC143, %edi
 6622      00
 6623 44d2 B8000000 		movl	$0, %eax
 6623      00
 6624 44d7 E8000000 		call	printf
 6624      00
 6625 44dc EB2F     		jmp	.L350
 6626              	.L351:
1274:main.c        **** 			}
1275:main.c        **** 		} else {
1276:main.c        **** 			fprintf(stderr, "JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n
 6627              		.loc 1 1276 0
 6628 44de 488B0500 		movq	stderr(%rip), %rax
 6628      000000
 6629 44e5 488B9588 		movq	-13688(%rbp), %rdx
 6629      CAFFFF
 6630 44ec BE000000 		movl	$.LC144, %esi
 6630      00
 6631 44f1 4889C7   		movq	%rax, %rdi
 6632 44f4 B8000000 		movl	$0, %eax
 6632      00
 6633 44f9 E8000000 		call	fprintf
 6633      00
1277:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6634              		.loc 1 1277 0
 6635 44fe C78564C9 		movl	$12, -13980(%rbp)
 6635      FFFF0C00 
 6635      0000
 6636 4508 E97F1000 		jmp	.L324
 6636      00
 6637              	.L350:
1278:main.c        **** 		}
1279:main.c        **** 	}
1280:main.c        **** 
1281:main.c        **** 	if ( progOpt->count ) {
 6638              		.loc 1 1281 0
 6639 450d 488B8520 		movq	-13792(%rbp), %rax
 6639      CAFFFF
 6640 4514 8B4060   		movl	96(%rax), %eax
 6641 4517 85C0     		testl	%eax, %eax
 6642 4519 0F84C900 		je	.L358
 6642      0000
1282:main.c        **** 		printf("Programming device...\n");
 6643              		.loc 1 1282 0
 6644 451f BF000000 		movl	$.LC145, %edi
 6644      00
 6645 4524 E8000000 		call	puts
 6645      00
1283:main.c        **** 		if ( isNeroCapable ) {
 6646              		.loc 1 1283 0
 6647 4529 80BD59C9 		cmpb	$0, -13991(%rbp)
 6647      FFFF00
 6648 4530 0F848300 		je	.L359
 6648      0000
1284:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 6649              		.loc 1 1284 0
 6650 4536 488B85C8 		movq	-13880(%rbp), %rax
 6650      C9FFFF
 6651 453d 488D95D0 		leaq	-13872(%rbp), %rdx
 6651      C9FFFF
 6652 4544 BE000000 		movl	$0, %esi
 6652      00
 6653 4549 4889C7   		movq	%rax, %rdi
 6654 454c E8000000 		call	flSelectConduit
 6654      00
 6655 4551 898568C9 		movl	%eax, -13976(%rbp)
 6655      FFFF
1285:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6656              		.loc 1 1285 0
 6657 4557 83BD68C9 		cmpl	$0, -13976(%rbp)
 6657      FFFF00
 6658 455e 740F     		je	.L360
 6659              		.loc 1 1285 0 is_stmt 0 discriminator 1
 6660 4560 C78564C9 		movl	$1, -13980(%rbp)
 6660      FFFF0100 
 6660      0000
 6661 456a E91D1000 		jmp	.L324
 6661      00
 6662              	.L360:
1286:main.c        **** 			fStatus = flProgram(handle, progOpt->sval[0], NULL, &error);
 6663              		.loc 1 1286 0 is_stmt 1
 6664 456f 488B8520 		movq	-13792(%rbp), %rax
 6664      CAFFFF
 6665 4576 488B4068 		movq	104(%rax), %rax
 6666 457a 488B30   		movq	(%rax), %rsi
 6667 457d 488B85C8 		movq	-13880(%rbp), %rax
 6667      C9FFFF
 6668 4584 488D95D0 		leaq	-13872(%rbp), %rdx
 6668      C9FFFF
 6669 458b 4889D1   		movq	%rdx, %rcx
 6670 458e BA000000 		movl	$0, %edx
 6670      00
 6671 4593 4889C7   		movq	%rax, %rdi
 6672 4596 E8000000 		call	flProgram
 6672      00
 6673 459b 898568C9 		movl	%eax, -13976(%rbp)
 6673      FFFF
1287:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6674              		.loc 1 1287 0
 6675 45a1 83BD68C9 		cmpl	$0, -13976(%rbp)
 6675      FFFF00
 6676 45a8 743E     		je	.L358
 6677              		.loc 1 1287 0 is_stmt 0 discriminator 1
 6678 45aa C78564C9 		movl	$1, -13980(%rbp)
 6678      FFFF0100 
 6678      0000
 6679 45b4 E9D30F00 		jmp	.L324
 6679      00
 6680              	.L359:
1288:main.c        **** 		} else {
1289:main.c        **** 			fprintf(stderr, "Program operation requested but device at %s does not support NeroProg\n", vp);
 6681              		.loc 1 1289 0 is_stmt 1
 6682 45b9 488B0500 		movq	stderr(%rip), %rax
 6682      000000
 6683 45c0 488B9588 		movq	-13688(%rbp), %rdx
 6683      CAFFFF
 6684 45c7 BE000000 		movl	$.LC146, %esi
 6684      00
 6685 45cc 4889C7   		movq	%rax, %rdi
 6686 45cf B8000000 		movl	$0, %eax
 6686      00
 6687 45d4 E8000000 		call	fprintf
 6687      00
1290:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6688              		.loc 1 1290 0
 6689 45d9 C78564C9 		movl	$12, -13980(%rbp)
 6689      FFFF0C00 
 6689      0000
 6690 45e3 E9A40F00 		jmp	.L324
 6690      00
 6691              	.L358:
1291:main.c        **** 		}
1292:main.c        **** 	}
1293:main.c        **** 
1294:main.c        **** 	if ( benOpt->count ) {
 6692              		.loc 1 1294 0
 6693 45e8 488B8540 		movq	-13760(%rbp), %rax
 6693      CAFFFF
 6694 45ef 8B4060   		movl	96(%rax), %eax
 6695 45f2 85C0     		testl	%eax, %eax
 6696 45f4 7407     		je	.L361
1295:main.c        **** 		enableBenchmarking = true;
 6697              		.loc 1 1295 0
 6698 45f6 C6050000 		movb	$1, enableBenchmarking(%rip)
 6698      000001
 6699              	.L361:
1296:main.c        **** 	}
1297:main.c        **** 	
1298:main.c        **** 	if ( actOpt->count ) {
 6700              		.loc 1 1298 0
 6701 45fd 488B8530 		movq	-13776(%rbp), %rax
 6701      CAFFFF
 6702 4604 8B4060   		movl	96(%rax), %eax
 6703 4607 85C0     		testl	%eax, %eax
 6704 4609 0F845201 		je	.L362
 6704      0000
1299:main.c        **** 		printf("Executing CommFPGA actions on FPGALink device %s...\n", vp);
 6705              		.loc 1 1299 0
 6706 460f 488B8588 		movq	-13688(%rbp), %rax
 6706      CAFFFF
 6707 4616 4889C6   		movq	%rax, %rsi
 6708 4619 BF000000 		movl	$.LC147, %edi
 6708      00
 6709 461e B8000000 		movl	$0, %eax
 6709      00
 6710 4623 E8000000 		call	printf
 6710      00
1300:main.c        **** 		if ( isCommCapable ) {
 6711              		.loc 1 1300 0
 6712 4628 80BD5AC9 		cmpb	$0, -13990(%rbp)
 6712      FFFF00
 6713 462f 0F84FD00 		je	.L363
 6713      0000
 6714              	.LBB60:
1301:main.c        **** 			uint8 isRunning;
1302:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 6715              		.loc 1 1302 0
 6716 4635 0FB68D58 		movzbl	-13992(%rbp), %ecx
 6716      C9FFFF
 6717 463c 488B85C8 		movq	-13880(%rbp), %rax
 6717      C9FFFF
 6718 4643 488D95D0 		leaq	-13872(%rbp), %rdx
 6718      C9FFFF
 6719 464a 89CE     		movl	%ecx, %esi
 6720 464c 4889C7   		movq	%rax, %rdi
 6721 464f E8000000 		call	flSelectConduit
 6721      00
 6722 4654 898568C9 		movl	%eax, -13976(%rbp)
 6722      FFFF
1303:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6723              		.loc 1 1303 0
 6724 465a 83BD68C9 		cmpl	$0, -13976(%rbp)
 6724      FFFF00
 6725 4661 740F     		je	.L364
 6726              		.loc 1 1303 0 is_stmt 0 discriminator 1
 6727 4663 C78564C9 		movl	$1, -13980(%rbp)
 6727      FFFF0100 
 6727      0000
 6728 466d E91A0F00 		jmp	.L324
 6728      00
 6729              	.L364:
1304:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 6730              		.loc 1 1304 0 is_stmt 1
 6731 4672 488B85C8 		movq	-13880(%rbp), %rax
 6731      C9FFFF
 6732 4679 488D95D0 		leaq	-13872(%rbp), %rdx
 6732      C9FFFF
 6733 4680 488D8DE0 		leaq	-13856(%rbp), %rcx
 6733      C9FFFF
 6734 4687 4889CE   		movq	%rcx, %rsi
 6735 468a 4889C7   		movq	%rax, %rdi
 6736 468d E8000000 		call	flIsFPGARunning
 6736      00
 6737 4692 898568C9 		movl	%eax, -13976(%rbp)
 6737      FFFF
1305:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6738              		.loc 1 1305 0
 6739 4698 83BD68C9 		cmpl	$0, -13976(%rbp)
 6739      FFFF00
 6740 469f 740F     		je	.L366
 6741              		.loc 1 1305 0 is_stmt 0 discriminator 1
 6742 46a1 C78564C9 		movl	$1, -13980(%rbp)
 6742      FFFF0100 
 6742      0000
 6743 46ab E9DC0E00 		jmp	.L324
 6743      00
 6744              	.L366:
1306:main.c        **** 			if ( isRunning ) {
 6745              		.loc 1 1306 0 is_stmt 1
 6746 46b0 0FB685E0 		movzbl	-13856(%rbp), %eax
 6746      C9FFFF
 6747 46b7 84C0     		testb	%al, %al
 6748 46b9 7447     		je	.L367
1307:main.c        **** 				pStatus = parseLine(handle, actOpt->sval[0], &error);
 6749              		.loc 1 1307 0
 6750 46bb 488B8530 		movq	-13776(%rbp), %rax
 6750      CAFFFF
 6751 46c2 488B4068 		movq	104(%rax), %rax
 6752 46c6 488B08   		movq	(%rax), %rcx
 6753 46c9 488B85C8 		movq	-13880(%rbp), %rax
 6753      C9FFFF
 6754 46d0 488D95D0 		leaq	-13872(%rbp), %rdx
 6754      C9FFFF
 6755 46d7 4889CE   		movq	%rcx, %rsi
 6756 46da 4889C7   		movq	%rax, %rdi
 6757 46dd E85EC4FF 		call	parseLine
 6757      FF
 6758 46e2 898598C9 		movl	%eax, -13928(%rbp)
 6758      FFFF
1308:main.c        **** 				CHECK_STATUS(pStatus, pStatus, cleanup);
 6759              		.loc 1 1308 0
 6760 46e8 83BD98C9 		cmpl	$0, -13928(%rbp)
 6760      FFFF00
 6761 46ef 7470     		je	.L362
 6762              		.loc 1 1308 0 is_stmt 0 discriminator 1
 6763 46f1 8B8598C9 		movl	-13928(%rbp), %eax
 6763      FFFF
 6764 46f7 898564C9 		movl	%eax, -13980(%rbp)
 6764      FFFF
 6765 46fd E98A0E00 		jmp	.L324
 6765      00
 6766              	.L367:
1309:main.c        **** 			} else {
1310:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 6767              		.loc 1 1310 0 is_stmt 1
 6768 4702 488B0500 		movq	stderr(%rip), %rax
 6768      000000
 6769 4709 488B9588 		movq	-13688(%rbp), %rdx
 6769      CAFFFF
 6770 4710 BE000000 		movl	$.LC148, %esi
 6770      00
 6771 4715 4889C7   		movq	%rax, %rdi
 6772 4718 B8000000 		movl	$0, %eax
 6772      00
 6773 471d E8000000 		call	fprintf
 6773      00
1311:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 6774              		.loc 1 1311 0
 6775 4722 C78564C9 		movl	$12, -13980(%rbp)
 6775      FFFF0C00 
 6775      0000
 6776 472c 90       		nop
 6777 472d E95A0E00 		jmp	.L324
 6777      00
 6778              	.L363:
 6779              	.LBE60:
1312:main.c        **** 			}
1313:main.c        **** 		} else {
1314:main.c        **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 6780              		.loc 1 1314 0
 6781 4732 488B0500 		movq	stderr(%rip), %rax
 6781      000000
 6782 4739 488B9588 		movq	-13688(%rbp), %rdx
 6782      CAFFFF
 6783 4740 BE000000 		movl	$.LC149, %esi
 6783      00
 6784 4745 4889C7   		movq	%rax, %rdi
 6785 4748 B8000000 		movl	$0, %eax
 6785      00
 6786 474d E8000000 		call	fprintf
 6786      00
1315:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6787              		.loc 1 1315 0
 6788 4752 C78564C9 		movl	$12, -13980(%rbp)
 6788      FFFF0C00 
 6788      0000
 6789 475c E92B0E00 		jmp	.L324
 6789      00
 6790              	.L362:
1316:main.c        **** 		}
1317:main.c        **** 	}
1318:main.c        **** 
1319:main.c        **** 	if ( dumpOpt->count ) {
 6791              		.loc 1 1319 0
 6792 4761 488B8550 		movq	-13744(%rbp), %rax
 6792      CAFFFF
 6793 4768 8B4060   		movl	96(%rax), %eax
 6794 476b 85C0     		testl	%eax, %eax
 6795 476d 0F84D002 		je	.L369
 6795      0000
 6796              	.LBB61:
1320:main.c        **** 		const char *fileName;
1321:main.c        **** 		unsigned long chan = strtoul(dumpOpt->sval[0], (char**)&fileName, 10);
 6797              		.loc 1 1321 0
 6798 4773 488B8550 		movq	-13744(%rbp), %rax
 6798      CAFFFF
 6799 477a 488B4068 		movq	104(%rax), %rax
 6800 477e 488B00   		movq	(%rax), %rax
 6801 4781 488D8DD8 		leaq	-13864(%rbp), %rcx
 6801      C9FFFF
 6802 4788 BA0A0000 		movl	$10, %edx
 6802      00
 6803 478d 4889CE   		movq	%rcx, %rsi
 6804 4790 4889C7   		movq	%rax, %rdi
 6805 4793 E8000000 		call	strtoul
 6805      00
 6806 4798 48898598 		movq	%rax, -13672(%rbp)
 6806      CAFFFF
1322:main.c        **** 		FILE *file = NULL;
 6807              		.loc 1 1322 0
 6808 479f 48C785A0 		movq	$0, -13664(%rbp)
 6808      CAFFFF00 
 6808      000000
1323:main.c        **** 		const uint8 *recvData;
1324:main.c        **** 		uint32 actualLength;
1325:main.c        **** 		if ( *fileName != ':' ) {
 6809              		.loc 1 1325 0
 6810 47aa 488B85D8 		movq	-13864(%rbp), %rax
 6810      C9FFFF
 6811 47b1 0FB600   		movzbl	(%rax), %eax
 6812 47b4 3C3A     		cmpb	$58, %al
 6813 47b6 742F     		je	.L370
1326:main.c        **** 			fprintf(stderr, "%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n", progName);
 6814              		.loc 1 1326 0
 6815 47b8 488B0500 		movq	stderr(%rip), %rax
 6815      000000
 6816 47bf 488B9578 		movq	-13704(%rbp), %rdx
 6816      CAFFFF
 6817 47c6 BE000000 		movl	$.LC150, %esi
 6817      00
 6818 47cb 4889C7   		movq	%rax, %rdi
 6819 47ce B8000000 		movl	$0, %eax
 6819      00
 6820 47d3 E8000000 		call	fprintf
 6820      00
1327:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 6821              		.loc 1 1327 0
 6822 47d8 C78564C9 		movl	$12, -13980(%rbp)
 6822      FFFF0C00 
 6822      0000
 6823 47e2 E9A50D00 		jmp	.L324
 6823      00
 6824              	.L370:
1328:main.c        **** 		}
1329:main.c        **** 		fileName++;
 6825              		.loc 1 1329 0
 6826 47e7 488B85D8 		movq	-13864(%rbp), %rax
 6826      C9FFFF
 6827 47ee 4883C001 		addq	$1, %rax
 6828 47f2 488985D8 		movq	%rax, -13864(%rbp)
 6828      C9FFFF
1330:main.c        **** 		printf("Copying from channel %lu to %s", chan, fileName);
 6829              		.loc 1 1330 0
 6830 47f9 488B95D8 		movq	-13864(%rbp), %rdx
 6830      C9FFFF
 6831 4800 488B8598 		movq	-13672(%rbp), %rax
 6831      CAFFFF
 6832 4807 4889C6   		movq	%rax, %rsi
 6833 480a BF000000 		movl	$.LC151, %edi
 6833      00
 6834 480f B8000000 		movl	$0, %eax
 6834      00
 6835 4814 E8000000 		call	printf
 6835      00
1331:main.c        **** 		file = fopen(fileName, "wb");
 6836              		.loc 1 1331 0
 6837 4819 488B85D8 		movq	-13864(%rbp), %rax
 6837      C9FFFF
 6838 4820 BE000000 		movl	$.LC31, %esi
 6838      00
 6839 4825 4889C7   		movq	%rax, %rdi
 6840 4828 E8000000 		call	fopen
 6840      00
 6841 482d 488985A0 		movq	%rax, -13664(%rbp)
 6841      CAFFFF
1332:main.c        **** 		CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 6842              		.loc 1 1332 0
 6843 4834 4883BDA0 		cmpq	$0, -13664(%rbp)
 6843      CAFFFF00 
 6844 483c 750F     		jne	.L372
 6845              		.loc 1 1332 0 is_stmt 0 discriminator 1
 6846 483e C78564C9 		movl	$11, -13980(%rbp)
 6846      FFFF0B00 
 6846      0000
 6847 4848 E93F0D00 		jmp	.L324
 6847      00
 6848              	.L372:
1333:main.c        **** 		sigRegisterHandler();
 6849              		.loc 1 1333 0 is_stmt 1
 6850 484d E8000000 		call	sigRegisterHandler
 6850      00
1334:main.c        **** 		fStatus = flSelectConduit(handle, conduit, &error);
 6851              		.loc 1 1334 0
 6852 4852 0FB68D58 		movzbl	-13992(%rbp), %ecx
 6852      C9FFFF
 6853 4859 488B85C8 		movq	-13880(%rbp), %rax
 6853      C9FFFF
 6854 4860 488D95D0 		leaq	-13872(%rbp), %rdx
 6854      C9FFFF
 6855 4867 89CE     		movl	%ecx, %esi
 6856 4869 4889C7   		movq	%rax, %rdi
 6857 486c E8000000 		call	flSelectConduit
 6857      00
 6858 4871 898568C9 		movl	%eax, -13976(%rbp)
 6858      FFFF
1335:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6859              		.loc 1 1335 0
 6860 4877 83BD68C9 		cmpl	$0, -13976(%rbp)
 6860      FFFF00
 6861 487e 740F     		je	.L373
 6862              		.loc 1 1335 0 is_stmt 0 discriminator 1
 6863 4880 C78564C9 		movl	$1, -13980(%rbp)
 6863      FFFF0100 
 6863      0000
 6864 488a E9FD0C00 		jmp	.L324
 6864      00
 6865              	.L373:
1336:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 6866              		.loc 1 1336 0 is_stmt 1
 6867 488f 488B8598 		movq	-13672(%rbp), %rax
 6867      CAFFFF
 6868 4896 0FB6F0   		movzbl	%al, %esi
 6869 4899 488B85C8 		movq	-13880(%rbp), %rax
 6869      C9FFFF
 6870 48a0 488D95D0 		leaq	-13872(%rbp), %rdx
 6870      C9FFFF
 6871 48a7 4989D0   		movq	%rdx, %r8
 6872 48aa B9000000 		movl	$0, %ecx
 6872      00
 6873 48af BA005800 		movl	$22528, %edx
 6873      00
 6874 48b4 4889C7   		movq	%rax, %rdi
 6875 48b7 E8000000 		call	flReadChannelAsyncSubmit
 6875      00
 6876 48bc 898568C9 		movl	%eax, -13976(%rbp)
 6876      FFFF
1337:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6877              		.loc 1 1337 0
 6878 48c2 83BD68C9 		cmpl	$0, -13976(%rbp)
 6878      FFFF00
 6879 48c9 740F     		je	.L374
 6880              		.loc 1 1337 0 is_stmt 0 discriminator 1
 6881 48cb C78564C9 		movl	$1, -13980(%rbp)
 6881      FFFF0100 
 6881      0000
 6882 48d5 E9B20C00 		jmp	.L324
 6882      00
 6883              	.L374:
1338:main.c        **** 		do {
1339:main.c        **** 			fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 6884              		.loc 1 1339 0 is_stmt 1
 6885 48da 488B8598 		movq	-13672(%rbp), %rax
 6885      CAFFFF
 6886 48e1 0FB6F0   		movzbl	%al, %esi
 6887 48e4 488B85C8 		movq	-13880(%rbp), %rax
 6887      C9FFFF
 6888 48eb 488D95D0 		leaq	-13872(%rbp), %rdx
 6888      C9FFFF
 6889 48f2 4989D0   		movq	%rdx, %r8
 6890 48f5 B9000000 		movl	$0, %ecx
 6890      00
 6891 48fa BA005800 		movl	$22528, %edx
 6891      00
 6892 48ff 4889C7   		movq	%rax, %rdi
 6893 4902 E8000000 		call	flReadChannelAsyncSubmit
 6893      00
 6894 4907 898568C9 		movl	%eax, -13976(%rbp)
 6894      FFFF
1340:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6895              		.loc 1 1340 0
 6896 490d 83BD68C9 		cmpl	$0, -13976(%rbp)
 6896      FFFF00
 6897 4914 740F     		je	.L375
 6898              		.loc 1 1340 0 is_stmt 0 discriminator 1
 6899 4916 C78564C9 		movl	$1, -13980(%rbp)
 6899      FFFF0100 
 6899      0000
 6900 4920 E9670C00 		jmp	.L324
 6900      00
 6901              	.L375:
1341:main.c        **** 			fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6902              		.loc 1 1341 0 is_stmt 1
 6903 4925 488B85C8 		movq	-13880(%rbp), %rax
 6903      C9FFFF
 6904 492c 488DBDD0 		leaq	-13872(%rbp), %rdi
 6904      C9FFFF
 6905 4933 488D8D60 		leaq	-13984(%rbp), %rcx
 6905      C9FFFF
 6906 493a 488D9560 		leaq	-13984(%rbp), %rdx
 6906      C9FFFF
 6907 4941 488DB5E0 		leaq	-13856(%rbp), %rsi
 6907      C9FFFF
 6908 4948 4989F8   		movq	%rdi, %r8
 6909 494b 4889C7   		movq	%rax, %rdi
 6910 494e E8000000 		call	flReadChannelAsyncAwait
 6910      00
 6911 4953 898568C9 		movl	%eax, -13976(%rbp)
 6911      FFFF
1342:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6912              		.loc 1 1342 0
 6913 4959 83BD68C9 		cmpl	$0, -13976(%rbp)
 6913      FFFF00
 6914 4960 740F     		je	.L376
 6915              		.loc 1 1342 0 is_stmt 0 discriminator 1
 6916 4962 C78564C9 		movl	$1, -13980(%rbp)
 6916      FFFF0100 
 6916      0000
 6917 496c E91B0C00 		jmp	.L324
 6917      00
 6918              	.L376:
1343:main.c        **** 			fwrite(recvData, 1, actualLength, file);
 6919              		.loc 1 1343 0 is_stmt 1
 6920 4971 8B8560C9 		movl	-13984(%rbp), %eax
 6920      FFFF
 6921 4977 89C6     		movl	%eax, %esi
 6922 4979 488B85E0 		movq	-13856(%rbp), %rax
 6922      C9FFFF
 6923 4980 488B95A0 		movq	-13664(%rbp), %rdx
 6923      CAFFFF
 6924 4987 4889D1   		movq	%rdx, %rcx
 6925 498a 4889F2   		movq	%rsi, %rdx
 6926 498d BE010000 		movl	$1, %esi
 6926      00
 6927 4992 4889C7   		movq	%rax, %rdi
 6928 4995 E8000000 		call	fwrite
 6928      00
1344:main.c        **** 			printf(".");
 6929              		.loc 1 1344 0
 6930 499a BF2E0000 		movl	$46, %edi
 6930      00
 6931 499f E8000000 		call	putchar
 6931      00
1345:main.c        **** 		} while ( !sigIsRaised() );
 6932              		.loc 1 1345 0
 6933 49a4 E8000000 		call	sigIsRaised
 6933      00
 6934 49a9 83F001   		xorl	$1, %eax
 6935 49ac 84C0     		testb	%al, %al
 6936 49ae 0F8526FF 		jne	.L374
 6936      FFFF
1346:main.c        **** 		printf("\nCaught SIGINT, quitting...\n");
 6937              		.loc 1 1346 0
 6938 49b4 BF000000 		movl	$.LC152, %edi
 6938      00
 6939 49b9 E8000000 		call	puts
 6939      00
1347:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6940              		.loc 1 1347 0
 6941 49be 488B85C8 		movq	-13880(%rbp), %rax
 6941      C9FFFF
 6942 49c5 488DBDD0 		leaq	-13872(%rbp), %rdi
 6942      C9FFFF
 6943 49cc 488D8D60 		leaq	-13984(%rbp), %rcx
 6943      C9FFFF
 6944 49d3 488D9560 		leaq	-13984(%rbp), %rdx
 6944      C9FFFF
 6945 49da 488DB5E0 		leaq	-13856(%rbp), %rsi
 6945      C9FFFF
 6946 49e1 4989F8   		movq	%rdi, %r8
 6947 49e4 4889C7   		movq	%rax, %rdi
 6948 49e7 E8000000 		call	flReadChannelAsyncAwait
 6948      00
 6949 49ec 898568C9 		movl	%eax, -13976(%rbp)
 6949      FFFF
1348:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6950              		.loc 1 1348 0
 6951 49f2 83BD68C9 		cmpl	$0, -13976(%rbp)
 6951      FFFF00
 6952 49f9 7410     		je	.L377
 6953              		.loc 1 1348 0 is_stmt 0 discriminator 1
 6954 49fb C78564C9 		movl	$1, -13980(%rbp)
 6954      FFFF0100 
 6954      0000
 6955 4a05 90       		nop
 6956 4a06 E9810B00 		jmp	.L324
 6956      00
 6957              	.L377:
1349:main.c        **** 		fwrite(recvData, 1, actualLength, file);
 6958              		.loc 1 1349 0 is_stmt 1
 6959 4a0b 8B8560C9 		movl	-13984(%rbp), %eax
 6959      FFFF
 6960 4a11 89C6     		movl	%eax, %esi
 6961 4a13 488B85E0 		movq	-13856(%rbp), %rax
 6961      C9FFFF
 6962 4a1a 488B95A0 		movq	-13664(%rbp), %rdx
 6962      CAFFFF
 6963 4a21 4889D1   		movq	%rdx, %rcx
 6964 4a24 4889F2   		movq	%rsi, %rdx
 6965 4a27 BE010000 		movl	$1, %esi
 6965      00
 6966 4a2c 4889C7   		movq	%rax, %rdi
 6967 4a2f E8000000 		call	fwrite
 6967      00
1350:main.c        **** 		fclose(file);
 6968              		.loc 1 1350 0
 6969 4a34 488B85A0 		movq	-13664(%rbp), %rax
 6969      CAFFFF
 6970 4a3b 4889C7   		movq	%rax, %rdi
 6971 4a3e E8000000 		call	fclose
 6971      00
 6972              	.L369:
 6973              	.LBE61:
1351:main.c        **** 	}
1352:main.c        **** //   cccccccccccccccccccccccccccccc
1353:main.c        ****     if( rpOpt->count )
 6974              		.loc 1 1353 0
 6975 4a43 488B8500 		movq	-13824(%rbp), %rax
 6975      CAFFFF
 6976 4a4a 8B4060   		movl	96(%rax), %eax
 6977 4a4d 85C0     		testl	%eax, %eax
 6978 4a4f 0F846109 		je	.L378
 6978      0000
 6979              	.LBB62:
1354:main.c        ****     {
1355:main.c        ****         //printf("Got the file %s\n", rpOpt->sval[0]);
1356:main.c        ****     
1357:main.c        ****         printf(CC "================================================================================
 6980              		.loc 1 1357 0
 6981 4a55 BF000000 		movl	$.LC153, %edi
 6981      00
 6982 4a5a B8000000 		movl	$0, %eax
 6982      00
 6983 4a5f E8000000 		call	printf
 6983      00
1358:main.c        ****         printf(CM "=============================== " CR "DLD PROJECT BY THE XILINX MEN" CM " ======
 6984              		.loc 1 1358 0
 6985 4a64 BF000000 		movl	$.LC154, %edi
 6985      00
 6986 4a69 B8000000 		movl	$0, %eax
 6986      00
 6987 4a6e E8000000 		call	printf
 6987      00
1359:main.c        ****         printf(CC "================================================================================
 6988              		.loc 1 1359 0
 6989 4a73 BF000000 		movl	$.LC153, %edi
 6989      00
 6990 4a78 B8000000 		movl	$0, %eax
 6990      00
 6991 4a7d E8000000 		call	printf
 6991      00
 6992              	.L379:
1360:main.c        ****         
1361:main.c        **** 		entire_process:
1362:main.c        **** 		
1363:main.c        ****         printf("\nReading Track Data From the CSV File...\n");
 6993              		.loc 1 1363 0
 6994 4a82 BF000000 		movl	$.LC155, %edi
 6994      00
 6995 4a87 E8000000 		call	puts
 6995      00
1364:main.c        ****             
1365:main.c        ****    		int table[640][5];
1366:main.c        ****         int rows;
1367:main.c        **** 		const char* path = rpOpt->sval[0];
 6996              		.loc 1 1367 0
 6997 4a8c 488B8500 		movq	-13824(%rbp), %rax
 6997      CAFFFF
 6998 4a93 488B4068 		movq	104(%rax), %rax
 6999 4a97 488B00   		movq	(%rax), %rax
 7000 4a9a 488985A8 		movq	%rax, -13656(%rbp)
 7000      CAFFFF
1368:main.c        **** 		rows = read_table(path, table);
 7001              		.loc 1 1368 0
 7002 4aa1 488D95D0 		leaq	-12848(%rbp), %rdx
 7002      CDFFFF
 7003 4aa8 488B85A8 		movq	-13656(%rbp), %rax
 7003      CAFFFF
 7004 4aaf 4889D6   		movq	%rdx, %rsi
 7005 4ab2 4889C7   		movq	%rax, %rdi
 7006 4ab5 E8000000 		call	read_table
 7006      00
 7007 4aba 89859CC9 		movl	%eax, -13924(%rbp)
 7007      FFFF
1369:main.c        **** 	//	for(int i=0; i<rows; i++)
1370:main.c        **** 	//	{
1371:main.c        **** 	//		printf("%d, %d, %d, %d, %d\n", table[i][0], table[i][1], table[i][2], table[i][3], table[i][4]
1372:main.c        **** 	//	}
1373:main.c        **** 
1374:main.c        ****         printf(CG "Track Data Read\n" RST);   
 7008              		.loc 1 1374 0
 7009 4ac0 BF000000 		movl	$.LC156, %edi
 7009      00
 7010 4ac5 B8000000 		movl	$0, %eax
 7010      00
 7011 4aca E8000000 		call	printf
 7011      00
1375:main.c        ****  
1376:main.c        ****     	sleep(1); 
 7012              		.loc 1 1376 0
 7013 4acf BF010000 		movl	$1, %edi
 7013      00
 7014 4ad4 E8000000 		call	sleep
 7014      00
 7015              	.L380:
 7016              	.LBB63:
1377:main.c        ****         
1378:main.c        ****         int x_coordinate[65],y_coordinate[65]; 
1379:main.c        ****     
1380:main.c        ****     	host_label_2:
1381:main.c        **** 
1382:main.c        ****     	for(int i=0;i<65;i++) { x_coordinate[i]=-1; y_coordinate[i]=-1; }
 7017              		.loc 1 1382 0
 7018 4ad9 C78574C9 		movl	$0, -13964(%rbp)
 7018      FFFF0000 
 7018      0000
 7019 4ae3 EB2D     		jmp	.L381
 7020              	.L382:
 7021              		.loc 1 1382 0 is_stmt 0 discriminator 3
 7022 4ae5 8B8574C9 		movl	-13964(%rbp), %eax
 7022      FFFF
 7023 4aeb 4898     		cltq
 7024 4aed C78485B0 		movl	$-1, -13392(%rbp,%rax,4)
 7024      CBFFFFFF 
 7024      FFFFFF
 7025 4af8 8B8574C9 		movl	-13964(%rbp), %eax
 7025      FFFF
 7026 4afe 4898     		cltq
 7027 4b00 C78485C0 		movl	$-1, -13120(%rbp,%rax,4)
 7027      CCFFFFFF 
 7027      FFFFFF
 7028 4b0b 838574C9 		addl	$1, -13964(%rbp)
 7028      FFFF01
 7029              	.L381:
 7030              		.loc 1 1382 0 discriminator 1
 7031 4b12 83BD74C9 		cmpl	$64, -13964(%rbp)
 7031      FFFF40
 7032 4b19 7ECA     		jle	.L382
 7033              	.LBE63:
1383:main.c        ****     	
1384:main.c        ****         int start_i=0, end_i=64; 
 7034              		.loc 1 1384 0 is_stmt 1
 7035 4b1b C785A0C9 		movl	$0, -13920(%rbp)
 7035      FFFF0000 
 7035      0000
 7036 4b25 C785A4C9 		movl	$64, -13916(%rbp)
 7036      FFFF4000 
 7036      0000
1385:main.c        ****         
1386:main.c        ****         printf(CB "\nStarting Polling Process\n");  	
 7037              		.loc 1 1386 0
 7038 4b2f BF000000 		movl	$.LC157, %edi
 7038      00
 7039 4b34 E8000000 		call	puts
 7039      00
 7040              	.LBB64:
1387:main.c        **** 
1388:main.c        ****         for(int i=start_i;i<end_i;i++){
 7041              		.loc 1 1388 0
 7042 4b39 8B85A0C9 		movl	-13920(%rbp), %eax
 7042      FFFF
 7043 4b3f 898578C9 		movl	%eax, -13960(%rbp)
 7043      FFFF
 7044 4b45 E9740200 		jmp	.L383
 7044      00
 7045              	.L393:
1389:main.c        ****     			if(isCommCapable){
 7046              		.loc 1 1389 0
 7047 4b4a 80BD5AC9 		cmpb	$0, -13990(%rbp)
 7047      FFFF00
 7048 4b51 0F846002 		je	.L384
 7048      0000
 7049              	.LBB65:
1390:main.c        ****     					uint8 isRunning; 
1391:main.c        ****     					fStatus=flIsFPGARunning(handle,&isRunning,&error);
 7050              		.loc 1 1391 0
 7051 4b57 488B85C8 		movq	-13880(%rbp), %rax
 7051      C9FFFF
 7052 4b5e 488D95D0 		leaq	-13872(%rbp), %rdx
 7052      C9FFFF
 7053 4b65 488D8DE0 		leaq	-13856(%rbp), %rcx
 7053      C9FFFF
 7054 4b6c 4889CE   		movq	%rcx, %rsi
 7055 4b6f 4889C7   		movq	%rax, %rdi
 7056 4b72 E8000000 		call	flIsFPGARunning
 7056      00
 7057 4b77 898568C9 		movl	%eax, -13976(%rbp)
 7057      FFFF
1392:main.c        ****     					CHECK_STATUS(fStatus,FLP_LIBERR,cleanup); 
 7058              		.loc 1 1392 0
 7059 4b7d 83BD68C9 		cmpl	$0, -13976(%rbp)
 7059      FFFF00
 7060 4b84 740F     		je	.L385
 7061              		.loc 1 1392 0 is_stmt 0 discriminator 1
 7062 4b86 C78564C9 		movl	$1, -13980(%rbp)
 7062      FFFF0100 
 7062      0000
 7063 4b90 E9F70900 		jmp	.L324
 7063      00
 7064              	.L385:
1393:main.c        ****     					if(isRunning){
 7065              		.loc 1 1393 0 is_stmt 1
 7066 4b95 0FB685E0 		movzbl	-13856(%rbp), %eax
 7066      C9FFFF
 7067 4b9c 84C0     		testb	%al, %al
 7068 4b9e 0F841302 		je	.L384
 7068      0000
 7069              	.LBB66:
1394:main.c        ****     							printf("\n>> Attempting to read Co-ordinates from Channel " CM "%d\n" RST,2*i);
 7070              		.loc 1 1394 0
 7071 4ba4 8B8578C9 		movl	-13960(%rbp), %eax
 7071      FFFF
 7072 4baa 01C0     		addl	%eax, %eax
 7073 4bac 89C6     		movl	%eax, %esi
 7074 4bae BF000000 		movl	$.LC158, %edi
 7074      00
 7075 4bb3 B8000000 		movl	$0, %eax
 7075      00
 7076 4bb8 E8000000 		call	printf
 7076      00
1395:main.c        **** 
1396:main.c        ****     							char* red_data=read_4byte_from_fpga(2*i,handle,error,32); 
 7077              		.loc 1 1396 0
 7078 4bbd 488B95D0 		movq	-13872(%rbp), %rdx
 7078      C9FFFF
 7079 4bc4 488B85C8 		movq	-13880(%rbp), %rax
 7079      C9FFFF
 7080 4bcb 8B8D78C9 		movl	-13960(%rbp), %ecx
 7080      FFFF
 7081 4bd1 8D3C09   		leal	(%rcx,%rcx), %edi
 7082 4bd4 B9200000 		movl	$32, %ecx
 7082      00
 7083 4bd9 4889C6   		movq	%rax, %rsi
 7084 4bdc E8000000 		call	read_4byte_from_fpga
 7084      00
 7085 4be1 488985D0 		movq	%rax, -13616(%rbp)
 7085      CAFFFF
1397:main.c        **** 
1398:main.c        ****     							if(red_data[0]=='f') { printf(CR ">>>> Failed to Read co-ordinates from channel\n" RST);
 7086              		.loc 1 1398 0
 7087 4be8 488B85D0 		movq	-13616(%rbp), %rax
 7087      CAFFFF
 7088 4bef 0FB600   		movzbl	(%rax), %eax
 7089 4bf2 3C66     		cmpb	$102, %al
 7090 4bf4 7514     		jne	.L387
 7091              		.loc 1 1398 0 is_stmt 0 discriminator 1
 7092 4bf6 BF000000 		movl	$.LC159, %edi
 7092      00
 7093 4bfb B8000000 		movl	$0, %eax
 7093      00
 7094 4c00 E8000000 		call	printf
 7094      00
 7095 4c05 E9AD0100 		jmp	.L384
 7095      00
 7096              	.L387:
1399:main.c        **** 
1400:main.c        ****                                 printf(CG ">>>> Successfully Read co-ordinates from channel "  " %d
 7097              		.loc 1 1400 0 is_stmt 1
 7098 4c0a 8B8578C9 		movl	-13960(%rbp), %eax
 7098      FFFF
 7099 4c10 01C0     		addl	%eax, %eax
 7100 4c12 89C6     		movl	%eax, %esi
 7101 4c14 BF000000 		movl	$.LC160, %edi
 7101      00
 7102 4c19 B8000000 		movl	$0, %eax
 7102      00
 7103 4c1e E8000000 		call	printf
 7103      00
1401:main.c        **** 
1402:main.c        ****                                 printf(">>>>>>>> Read data is " CB " %s\n" RST,red_data); 
 7104              		.loc 1 1402 0
 7105 4c23 488B85D0 		movq	-13616(%rbp), %rax
 7105      CAFFFF
 7106 4c2a 4889C6   		movq	%rax, %rsi
 7107 4c2d BF000000 		movl	$.LC161, %edi
 7107      00
 7108 4c32 B8000000 		movl	$0, %eax
 7108      00
 7109 4c37 E8000000 		call	printf
 7109      00
1403:main.c        **** 
1404:main.c        ****                                 printf(">> Attempting to Write coordinates at channel " CM "%d\n" R
 7110              		.loc 1 1404 0
 7111 4c3c 8B8578C9 		movl	-13960(%rbp), %eax
 7111      FFFF
 7112 4c42 01C0     		addl	%eax, %eax
 7113 4c44 83C001   		addl	$1, %eax
 7114 4c47 89C6     		movl	%eax, %esi
 7115 4c49 BF000000 		movl	$.LC162, %edi
 7115      00
 7116 4c4e B8000000 		movl	$0, %eax
 7116      00
 7117 4c53 E8000000 		call	printf
 7117      00
1405:main.c        **** 
1406:main.c        ****     							char write_status=write_4byte_to_board(2*i+1,red_data,handle,error,32); 
 7118              		.loc 1 1406 0
 7119 4c58 488B8DD0 		movq	-13872(%rbp), %rcx
 7119      C9FFFF
 7120 4c5f 488B95C8 		movq	-13880(%rbp), %rdx
 7120      C9FFFF
 7121 4c66 8B8578C9 		movl	-13960(%rbp), %eax
 7121      FFFF
 7122 4c6c 01C0     		addl	%eax, %eax
 7123 4c6e 8D7801   		leal	1(%rax), %edi
 7124 4c71 488B85D0 		movq	-13616(%rbp), %rax
 7124      CAFFFF
 7125 4c78 41B82000 		movl	$32, %r8d
 7125      0000
 7126 4c7e 4889C6   		movq	%rax, %rsi
 7127 4c81 E8000000 		call	write_4byte_to_board
 7127      00
 7128 4c86 88855BC9 		movb	%al, -13989(%rbp)
 7128      FFFF
1407:main.c        **** 
1408:main.c        ****     							if(write_status=='f') { printf(CR "Write failed, Moving on to the next channel\n" RST); 
 7129              		.loc 1 1408 0
 7130 4c8c 80BD5BC9 		cmpb	$102, -13989(%rbp)
 7130      FFFF66
 7131 4c93 7514     		jne	.L389
 7132              		.loc 1 1408 0 is_stmt 0 discriminator 1
 7133 4c95 BF000000 		movl	$.LC163, %edi
 7133      00
 7134 4c9a B8000000 		movl	$0, %eax
 7134      00
 7135 4c9f E8000000 		call	printf
 7135      00
 7136 4ca4 E90E0100 		jmp	.L384
 7136      00
 7137              	.L389:
1409:main.c        ****                                 
1410:main.c        ****                                 printf(CG ">>>> Successfully Written Co-ordinates to the channel\n"
 7138              		.loc 1 1410 0 is_stmt 1
 7139 4ca9 BF000000 		movl	$.LC164, %edi
 7139      00
 7140 4cae B8000000 		movl	$0, %eax
 7140      00
 7141 4cb3 E8000000 		call	printf
 7141      00
1411:main.c        ****         
1412:main.c        ****                                 printf(">> Attempting to receive ACK1\n"); 
 7142              		.loc 1 1412 0
 7143 4cb8 BF000000 		movl	$.LC165, %edi
 7143      00
 7144 4cbd E8000000 		call	puts
 7144      00
1413:main.c        **** 
1414:main.c        ****     							char* ack_status=receive_ack(2*i,handle,error,1); 
 7145              		.loc 1 1414 0
 7146 4cc2 488B95D0 		movq	-13872(%rbp), %rdx
 7146      C9FFFF
 7147 4cc9 488B85C8 		movq	-13880(%rbp), %rax
 7147      C9FFFF
 7148 4cd0 8B8D78C9 		movl	-13960(%rbp), %ecx
 7148      FFFF
 7149 4cd6 8D3C09   		leal	(%rcx,%rcx), %edi
 7150 4cd9 B9010000 		movl	$1, %ecx
 7150      00
 7151 4cde 4889C6   		movq	%rax, %rsi
 7152 4ce1 E8000000 		call	receive_ack
 7152      00
 7153 4ce6 488985D8 		movq	%rax, -13608(%rbp)
 7153      CAFFFF
1415:main.c        **** 
1416:main.c        ****     							if(ack_status[0]=='f'){
 7154              		.loc 1 1416 0
 7155 4ced 488B85D8 		movq	-13608(%rbp), %rax
 7155      CAFFFF
 7156 4cf4 0FB600   		movzbl	(%rax), %eax
 7157 4cf7 3C66     		cmpb	$102, %al
 7158 4cf9 756A     		jne	.L390
1417:main.c        **** 
1418:main.c        ****                                         printf(CR ">>>> First ack was incorrect, re-attempt after 5
 7159              		.loc 1 1418 0
 7160 4cfb BF000000 		movl	$.LC166, %edi
 7160      00
 7161 4d00 B8000000 		movl	$0, %eax
 7161      00
 7162 4d05 E8000000 		call	printf
 7162      00
1419:main.c        ****     									sleep(5); 
 7163              		.loc 1 1419 0
 7164 4d0a BF050000 		movl	$5, %edi
 7164      00
 7165 4d0f E8000000 		call	sleep
 7165      00
1420:main.c        ****                                         printf(">> Attempting to receive ACK1 for the second time\n
 7166              		.loc 1 1420 0
 7167 4d14 BF000000 		movl	$.LC167, %edi
 7167      00
 7168 4d19 E8000000 		call	puts
 7168      00
1421:main.c        ****     									ack_status=receive_ack(2*i,handle,error,1); 
 7169              		.loc 1 1421 0
 7170 4d1e 488B95D0 		movq	-13872(%rbp), %rdx
 7170      C9FFFF
 7171 4d25 488B85C8 		movq	-13880(%rbp), %rax
 7171      C9FFFF
 7172 4d2c 8B8D78C9 		movl	-13960(%rbp), %ecx
 7172      FFFF
 7173 4d32 8D3C09   		leal	(%rcx,%rcx), %edi
 7174 4d35 B9010000 		movl	$1, %ecx
 7174      00
 7175 4d3a 4889C6   		movq	%rax, %rsi
 7176 4d3d E8000000 		call	receive_ack
 7176      00
 7177 4d42 488985D8 		movq	%rax, -13608(%rbp)
 7177      CAFFFF
1422:main.c        ****     									if(ack_status[0]='f'){
 7178              		.loc 1 1422 0
 7179 4d49 488B85D8 		movq	-13608(%rbp), %rax
 7179      CAFFFF
 7180 4d50 C60066   		movb	$102, (%rax)
1423:main.c        ****                                                 printf(CR ">>>> Second ACK was also incorrect, Movi
 7181              		.loc 1 1423 0
 7182 4d53 BF000000 		movl	$.LC168, %edi
 7182      00
 7183 4d58 B8000000 		movl	$0, %eax
 7183      00
 7184 4d5d E8000000 		call	printf
 7184      00
1424:main.c        ****     											/*start_i=(i+1)%64; 
1425:main.c        ****     											end_i=i+1; 
1426:main.c        ****     											i=start_i-1; 
1427:main.c        ****     											*/
1428:main.c        ****     											continue; 
 7185              		.loc 1 1428 0
 7186 4d62 90       		nop
 7187 4d63 EB52     		jmp	.L384
 7188              	.L390:
1429:main.c        ****     									}
1430:main.c        ****     							}
1431:main.c        ****                                 
1432:main.c        ****                                 printf(CG ">>>> Successfully received ACK1 and co-ordinates\n" RST)
 7189              		.loc 1 1432 0
 7190 4d65 BF000000 		movl	$.LC169, %edi
 7190      00
 7191 4d6a B8000000 		movl	$0, %eax
 7191      00
 7192 4d6f E8000000 		call	printf
 7192      00
1433:main.c        ****     							get_coordinate(red_data,&x_coordinate[i],&y_coordinate[i]); 
 7193              		.loc 1 1433 0
 7194 4d74 488D85C0 		leaq	-13120(%rbp), %rax
 7194      CCFFFF
 7195 4d7b 8B9578C9 		movl	-13960(%rbp), %edx
 7195      FFFF
 7196 4d81 4863D2   		movslq	%edx, %rdx
 7197 4d84 48C1E202 		salq	$2, %rdx
 7198 4d88 4801C2   		addq	%rax, %rdx
 7199 4d8b 488D85B0 		leaq	-13392(%rbp), %rax
 7199      CBFFFF
 7200 4d92 8B8D78C9 		movl	-13960(%rbp), %ecx
 7200      FFFF
 7201 4d98 4863C9   		movslq	%ecx, %rcx
 7202 4d9b 48C1E102 		salq	$2, %rcx
 7203 4d9f 4801C1   		addq	%rax, %rcx
 7204 4da2 488B85D0 		movq	-13616(%rbp), %rax
 7204      CAFFFF
 7205 4da9 4889CE   		movq	%rcx, %rsi
 7206 4dac 4889C7   		movq	%rax, %rdi
 7207 4daf E8000000 		call	get_coordinate
 7207      00
1434:main.c        ****                                 break; 
 7208              		.loc 1 1434 0
 7209 4db4 90       		nop
 7210 4db5 EB19     		jmp	.L392
 7211              	.L384:
 7212              	.LBE66:
 7213              	.LBE65:
1388:main.c        ****     			if(isCommCapable){
 7214              		.loc 1 1388 0 discriminator 2
 7215 4db7 838578C9 		addl	$1, -13960(%rbp)
 7215      FFFF01
 7216              	.L383:
1388:main.c        ****     			if(isCommCapable){
 7217              		.loc 1 1388 0 is_stmt 0 discriminator 1
 7218 4dbe 8B8578C9 		movl	-13960(%rbp), %eax
 7218      FFFF
 7219 4dc4 3B85A4C9 		cmpl	-13916(%rbp), %eax
 7219      FFFF
 7220 4dca 0F8C7AFD 		jl	.L393
 7220      FFFF
 7221              	.L392:
 7222              	.LBE64:
 7223              	.LBB67:
1435:main.c        ****     					}
1436:main.c        ****     			}
1437:main.c        ****     	}
1438:main.c        **** 
1439:main.c        ****     	int read_chan, write_chan; for(int i=0;i<64;i++) { if(x_coordinate[i]!=-1) { read_chan=2*i;wri
 7224              		.loc 1 1439 0 is_stmt 1
 7225 4dd0 C78584C9 		movl	$0, -13948(%rbp)
 7225      FFFF0000 
 7225      0000
 7226 4dda EB3A     		jmp	.L394
 7227              	.L397:
 7228              		.loc 1 1439 0 is_stmt 0 discriminator 5
 7229 4ddc 8B8584C9 		movl	-13948(%rbp), %eax
 7229      FFFF
 7230 4de2 4898     		cltq
 7231 4de4 8B8485B0 		movl	-13392(%rbp,%rax,4), %eax
 7231      CBFFFF
 7232 4deb 83F8FF   		cmpl	$-1, %eax
 7233 4dee 741F     		je	.L395
 7234              		.loc 1 1439 0 discriminator 2
 7235 4df0 8B8584C9 		movl	-13948(%rbp), %eax
 7235      FFFF
 7236 4df6 01C0     		addl	%eax, %eax
 7237 4df8 89857CC9 		movl	%eax, -13956(%rbp)
 7237      FFFF
 7238 4dfe 8B857CC9 		movl	-13956(%rbp), %eax
 7238      FFFF
 7239 4e04 83C001   		addl	$1, %eax
 7240 4e07 898580C9 		movl	%eax, -13952(%rbp)
 7240      FFFF
 7241 4e0d EB10     		jmp	.L396
 7242              	.L395:
 7243              		.loc 1 1439 0 discriminator 3
 7244 4e0f 838584C9 		addl	$1, -13948(%rbp)
 7244      FFFF01
 7245              	.L394:
 7246              		.loc 1 1439 0 discriminator 4
 7247 4e16 83BD84C9 		cmpl	$63, -13948(%rbp)
 7247      FFFF3F
 7248 4e1d 7EBD     		jle	.L397
 7249              	.L396:
 7250              	.LBE67:
1440:main.c        **** 
1441:main.c        ****         printf(">> Co-ordinates are " CB "(%d,%d)\n" RST,x_coordinate[read_chan>>1],y_coordinate[re
 7251              		.loc 1 1441 0 is_stmt 1
 7252 4e1f 8B857CC9 		movl	-13956(%rbp), %eax
 7252      FFFF
 7253 4e25 D1F8     		sarl	%eax
 7254 4e27 4898     		cltq
 7255 4e29 8B9485C0 		movl	-13120(%rbp,%rax,4), %edx
 7255      CCFFFF
 7256 4e30 8B857CC9 		movl	-13956(%rbp), %eax
 7256      FFFF
 7257 4e36 D1F8     		sarl	%eax
 7258 4e38 4898     		cltq
 7259 4e3a 8B8485B0 		movl	-13392(%rbp,%rax,4), %eax
 7259      CBFFFF
 7260 4e41 89C6     		movl	%eax, %esi
 7261 4e43 BF000000 		movl	$.LC170, %edi
 7261      00
 7262 4e48 B8000000 		movl	$0, %eax
 7262      00
 7263 4e4d E8000000 		call	printf
 7263      00
1442:main.c        ****         
1443:main.c        ****         printf(">> Sending ACK2 to the board\n");
 7264              		.loc 1 1443 0
 7265 4e52 BF000000 		movl	$.LC171, %edi
 7265      00
 7266 4e57 E8000000 		call	puts
 7266      00
1444:main.c        ****     	send_ack(write_chan,handle, error,32); 
 7267              		.loc 1 1444 0
 7268 4e5c 488B95D0 		movq	-13872(%rbp), %rdx
 7268      C9FFFF
 7269 4e63 488BB5C8 		movq	-13880(%rbp), %rsi
 7269      C9FFFF
 7270 4e6a 8B8580C9 		movl	-13952(%rbp), %eax
 7270      FFFF
 7271 4e70 B9200000 		movl	$32, %ecx
 7271      00
 7272 4e75 89C7     		movl	%eax, %edi
 7273 4e77 E8000000 		call	send_ack
 7273      00
1445:main.c        **** 
1446:main.c        ****     	char* track_data=func(x_coordinate[read_chan>>1],y_coordinate[read_chan>>1],table,rows); 
 7274              		.loc 1 1446 0
 7275 4e7c 8B857CC9 		movl	-13956(%rbp), %eax
 7275      FFFF
 7276 4e82 D1F8     		sarl	%eax
 7277 4e84 4898     		cltq
 7278 4e86 8BB485C0 		movl	-13120(%rbp,%rax,4), %esi
 7278      CCFFFF
 7279 4e8d 8B857CC9 		movl	-13956(%rbp), %eax
 7279      FFFF
 7280 4e93 D1F8     		sarl	%eax
 7281 4e95 4898     		cltq
 7282 4e97 8B8485B0 		movl	-13392(%rbp,%rax,4), %eax
 7282      CBFFFF
 7283 4e9e 8B8D9CC9 		movl	-13924(%rbp), %ecx
 7283      FFFF
 7284 4ea4 488D95D0 		leaq	-12848(%rbp), %rdx
 7284      CDFFFF
 7285 4eab 89C7     		movl	%eax, %edi
 7286 4ead E8000000 		call	func
 7286      00
 7287 4eb2 488985B0 		movq	%rax, -13648(%rbp)
 7287      CAFFFF
1447:main.c        ****     
1448:main.c        ****         printf(">> Writing 64 bits to board\n"); 
 7288              		.loc 1 1448 0
 7289 4eb9 BF000000 		movl	$.LC172, %edi
 7289      00
 7290 4ebe E8000000 		call	puts
 7290      00
1449:main.c        ****         printf(">>>> Data to write to the board is " CM "%s\n" RST, track_data);
 7291              		.loc 1 1449 0
 7292 4ec3 488B85B0 		movq	-13648(%rbp), %rax
 7292      CAFFFF
 7293 4eca 4889C6   		movq	%rax, %rsi
 7294 4ecd BF000000 		movl	$.LC173, %edi
 7294      00
 7295 4ed2 B8000000 		movl	$0, %eax
 7295      00
 7296 4ed7 E8000000 		call	printf
 7296      00
1450:main.c        ****        
1451:main.c        ****     	write_4byte_to_board(write_chan,track_data,handle, error,32); 
 7297              		.loc 1 1451 0
 7298 4edc 488B8DD0 		movq	-13872(%rbp), %rcx
 7298      C9FFFF
 7299 4ee3 488B95C8 		movq	-13880(%rbp), %rdx
 7299      C9FFFF
 7300 4eea 488BB5B0 		movq	-13648(%rbp), %rsi
 7300      CAFFFF
 7301 4ef1 8B8580C9 		movl	-13952(%rbp), %eax
 7301      FFFF
 7302 4ef7 41B82000 		movl	$32, %r8d
 7302      0000
 7303 4efd 89C7     		movl	%eax, %edi
 7304 4eff E8000000 		call	write_4byte_to_board
 7304      00
1452:main.c        ****         printf(CG ">>>> Written first four bytes to board\n" RST);
 7305              		.loc 1 1452 0
 7306 4f04 BF000000 		movl	$.LC174, %edi
 7306      00
 7307 4f09 B8000000 		movl	$0, %eax
 7307      00
 7308 4f0e E8000000 		call	printf
 7308      00
1453:main.c        ****         printf(">>>> Waiting to receive ACK\n");
 7309              		.loc 1 1453 0
 7310 4f13 BF000000 		movl	$.LC175, %edi
 7310      00
 7311 4f18 E8000000 		call	puts
 7311      00
1454:main.c        ****     	char* ack_status=receive_ack(read_chan,handle, error, 256); 
 7312              		.loc 1 1454 0
 7313 4f1d 488B95D0 		movq	-13872(%rbp), %rdx
 7313      C9FFFF
 7314 4f24 488BB5C8 		movq	-13880(%rbp), %rsi
 7314      C9FFFF
 7315 4f2b 8B857CC9 		movl	-13956(%rbp), %eax
 7315      FFFF
 7316 4f31 B9000100 		movl	$256, %ecx
 7316      00
 7317 4f36 89C7     		movl	%eax, %edi
 7318 4f38 E8000000 		call	receive_ack
 7318      00
 7319 4f3d 488985B8 		movq	%rax, -13640(%rbp)
 7319      CAFFFF
1455:main.c        ****     	if(ack_status[0]=='f') { 
 7320              		.loc 1 1455 0
 7321 4f44 488B85B8 		movq	-13640(%rbp), %rax
 7321      CAFFFF
 7322 4f4b 0FB600   		movzbl	(%rax), %eax
 7323 4f4e 3C66     		cmpb	$102, %al
 7324 4f50 750F     		jne	.L398
1456:main.c        ****                 // TODO host label 2
1457:main.c        ****                 printf(CR ">>>> Receiving Ack failed, going to host_label_2\n");
 7325              		.loc 1 1457 0
 7326 4f52 BF000000 		movl	$.LC176, %edi
 7326      00
 7327 4f57 E8000000 		call	puts
 7327      00
1458:main.c        ****                 goto host_label_2; }
 7328              		.loc 1 1458 0
 7329 4f5c E978FBFF 		jmp	.L380
 7329      FF
 7330              	.L398:
1459:main.c        ****     	else {
1460:main.c        ****                 
1461:main.c        ****     			write_4byte_to_board(write_chan,track_data+32,handle,error,32); 
 7331              		.loc 1 1461 0
 7332 4f61 488B8DD0 		movq	-13872(%rbp), %rcx
 7332      C9FFFF
 7333 4f68 488B95C8 		movq	-13880(%rbp), %rdx
 7333      C9FFFF
 7334 4f6f 488B85B0 		movq	-13648(%rbp), %rax
 7334      CAFFFF
 7335 4f76 488D7020 		leaq	32(%rax), %rsi
 7336 4f7a 8B8580C9 		movl	-13952(%rbp), %eax
 7336      FFFF
 7337 4f80 41B82000 		movl	$32, %r8d
 7337      0000
 7338 4f86 89C7     		movl	%eax, %edi
 7339 4f88 E8000000 		call	write_4byte_to_board
 7339      00
1462:main.c        ****                 printf(CG ">>>> Written next four bytes to board\n" RST);
 7340              		.loc 1 1462 0
 7341 4f8d BF000000 		movl	$.LC177, %edi
 7341      00
 7342 4f92 B8000000 		movl	$0, %eax
 7342      00
 7343 4f97 E8000000 		call	printf
 7343      00
1463:main.c        ****                 printf(">>>> Waiting to receive ACK\n");
 7344              		.loc 1 1463 0
 7345 4f9c BF000000 		movl	$.LC175, %edi
 7345      00
 7346 4fa1 E8000000 		call	puts
 7346      00
1464:main.c        ****     			ack_status=receive_ack(read_chan,handle, error, 256); 
 7347              		.loc 1 1464 0
 7348 4fa6 488B95D0 		movq	-13872(%rbp), %rdx
 7348      C9FFFF
 7349 4fad 488BB5C8 		movq	-13880(%rbp), %rsi
 7349      C9FFFF
 7350 4fb4 8B857CC9 		movl	-13956(%rbp), %eax
 7350      FFFF
 7351 4fba B9000100 		movl	$256, %ecx
 7351      00
 7352 4fbf 89C7     		movl	%eax, %edi
 7353 4fc1 E8000000 		call	receive_ack
 7353      00
 7354 4fc6 488985B8 		movq	%rax, -13640(%rbp)
 7354      CAFFFF
1465:main.c        ****     			if(ack_status[0]=='f') { 
 7355              		.loc 1 1465 0
 7356 4fcd 488B85B8 		movq	-13640(%rbp), %rax
 7356      CAFFFF
 7357 4fd4 0FB600   		movzbl	(%rax), %eax
 7358 4fd7 3C66     		cmpb	$102, %al
 7359 4fd9 750F     		jne	.L399
1466:main.c        ****                             printf(CR ">>>> Receiving Ack failed, going to host_label_2\n");
 7360              		.loc 1 1466 0
 7361 4fdb BF000000 		movl	$.LC176, %edi
 7361      00
 7362 4fe0 E8000000 		call	puts
 7362      00
1467:main.c        ****                             goto host_label_2; 
 7363              		.loc 1 1467 0
 7364 4fe5 E9EFFAFF 		jmp	.L380
 7364      FF
 7365              	.L399:
 7366              	.LBB68:
1468:main.c        ****                     }
1469:main.c        ****     			else {
1470:main.c        ****                         
1471:main.c        ****     				send_ack(write_chan,handle,error,32); 
 7367              		.loc 1 1471 0
 7368 4fea 488B95D0 		movq	-13872(%rbp), %rdx
 7368      C9FFFF
 7369 4ff1 488BB5C8 		movq	-13880(%rbp), %rsi
 7369      C9FFFF
 7370 4ff8 8B8580C9 		movl	-13952(%rbp), %eax
 7370      FFFF
 7371 4ffe B9200000 		movl	$32, %ecx
 7371      00
 7372 5003 89C7     		movl	%eax, %edi
 7373 5005 E8000000 		call	send_ack
 7373      00
1472:main.c        ****     				printf(CG ">>>> Sent ACK\n" RST);
 7374              		.loc 1 1472 0
 7375 500a BF000000 		movl	$.LC178, %edi
 7375      00
 7376 500f B8000000 		movl	$0, %eax
 7376      00
 7377 5014 E8000000 		call	printf
 7377      00
1473:main.c        ****                     // goto entire_process; 
1474:main.c        ****     				// Read four bytes
1475:main.c        ****     				// Wait until timeout
1476:main.c        **** 
1477:main.c        ****                     printf("Sleeping until the display of the board is over\n");
 7378              		.loc 1 1477 0
 7379 5019 BF000000 		movl	$.LC179, %edi
 7379      00
 7380 501e E8000000 		call	puts
 7380      00
1478:main.c        ****                     sleep(22);
 7381              		.loc 1 1478 0
 7382 5023 BF160000 		movl	$22, %edi
 7382      00
 7383 5028 E8000000 		call	sleep
 7383      00
1479:main.c        ****         
1480:main.c        ****                     clock_t start, stop;
1481:main.c        ****                     start = clock();
 7384              		.loc 1 1481 0
 7385 502d E8000000 		call	clock
 7385      00
 7386 5032 488985C0 		movq	%rax, -13632(%rbp)
 7386      CAFFFF
1482:main.c        **** 
1483:main.c        ****                    	int flag1 = 0 , flag2 = 0;
 7387              		.loc 1 1483 0
 7388 5039 C78588C9 		movl	$0, -13944(%rbp)
 7388      FFFF0000 
 7388      0000
 7389 5043 C785A8C9 		movl	$0, -13912(%rbp)
 7389      FFFF0000 
 7389      0000
1484:main.c        ****                     
1485:main.c        ****                     int timeout_s = 20;
 7390              		.loc 1 1485 0
 7391 504d C785ACC9 		movl	$20, -13908(%rbp)
 7391      FFFF1400 
 7391      0000
1486:main.c        ****                     
1487:main.c        ****                     printf("Waiting to receive data from the board via FPGA and/or UART\n");    
 7392              		.loc 1 1487 0
 7393 5057 BF000000 		movl	$.LC180, %edi
 7393      00
 7394 505c E8000000 		call	puts
 7394      00
1488:main.c        **** 
1489:main.c        ****                     while (100*((double)(clock())-start)/CLOCKS_PER_SEC < timeout_s) {
 7395              		.loc 1 1489 0
 7396 5061 E9C60200 		jmp	.L400
 7396      00
 7397              	.L407:
1490:main.c        ****                         //printf("%.9f sec\n",100*((double)(clock())-start)/CLOCKS_PER_SEC);  
1491:main.c        ****                         //printf("%.8f sec\n", clock()-start);
1492:main.c        ****                         if (!(flag1)){
 7398              		.loc 1 1492 0
 7399 5066 83BD88C9 		cmpl	$0, -13944(%rbp)
 7399      FFFF00
 7400 506d 0F85B002 		jne	.L401
 7400      0000
 7401              	.LBB69:
1493:main.c        ****                               // 32 tries
1494:main.c        ****                               char* red_data=read_1byte_from_fpgalink(read_chan,handle,error,32);  
 7402              		.loc 1 1494 0
 7403 5073 488B95D0 		movq	-13872(%rbp), %rdx
 7403      C9FFFF
 7404 507a 488BB5C8 		movq	-13880(%rbp), %rsi
 7404      C9FFFF
 7405 5081 8B857CC9 		movl	-13956(%rbp), %eax
 7405      FFFF
 7406 5087 B9200000 		movl	$32, %ecx
 7406      00
 7407 508c 89C7     		movl	%eax, %edi
 7408 508e E8000000 		call	read_1byte_from_fpgalink
 7408      00
 7409 5093 488985C8 		movq	%rax, -13624(%rbp)
 7409      CAFFFF
1495:main.c        ****                               if(red_data[0]=='f') {// printf("data for track update was not availa
 7410              		.loc 1 1495 0
 7411 509a 488B85C8 		movq	-13624(%rbp), %rax
 7411      CAFFFF
 7412 50a1 0FB600   		movzbl	(%rax), %eax
 7413 50a4 3C66     		cmpb	$102, %al
 7414 50a6 0F847702 		je	.L401
 7414      0000
 7415              	.LBB70:
1496:main.c        ****                                                 }
1497:main.c        ****                               else {
1498:main.c        ****                                   printf(CG ">> Read track data from FPGA\n" RST); 
 7416              		.loc 1 1498 0
 7417 50ac BF000000 		movl	$.LC181, %edi
 7417      00
 7418 50b1 B8000000 		movl	$0, %eax
 7418      00
 7419 50b6 E8000000 		call	printf
 7419      00
1499:main.c        ****                                   printf(">>>> Read data is " CM "%s\n" RST,red_data);
 7420              		.loc 1 1499 0
 7421 50bb 488B85C8 		movq	-13624(%rbp), %rax
 7421      CAFFFF
 7422 50c2 4889C6   		movq	%rax, %rsi
 7423 50c5 BF000000 		movl	$.LC182, %edi
 7423      00
 7424 50ca B8000000 		movl	$0, %eax
 7424      00
 7425 50cf E8000000 		call	printf
 7425      00
1500:main.c        ****                                   flag1 = 1 ;
 7426              		.loc 1 1500 0
 7427 50d4 C78588C9 		movl	$1, -13944(%rbp)
 7427      FFFF0100 
 7427      0000
1501:main.c        ****         	          			// change the entry corresponding to these bytes in the table
1502:main.c        ****     
1503:main.c        ****         	          			int x_c = x_coordinate[read_chan>>1];
 7428              		.loc 1 1503 0
 7429 50de 8B857CC9 		movl	-13956(%rbp), %eax
 7429      FFFF
 7430 50e4 D1F8     		sarl	%eax
 7431 50e6 4898     		cltq
 7432 50e8 8B8485B0 		movl	-13392(%rbp,%rax,4), %eax
 7432      CBFFFF
 7433 50ef 8985B0C9 		movl	%eax, -13904(%rbp)
 7433      FFFF
1504:main.c        ****         	          			int y_c = y_coordinate[read_chan>>1];
 7434              		.loc 1 1504 0
 7435 50f5 8B857CC9 		movl	-13956(%rbp), %eax
 7435      FFFF
 7436 50fb D1F8     		sarl	%eax
 7437 50fd 4898     		cltq
 7438 50ff 8B8485C0 		movl	-13120(%rbp,%rax,4), %eax
 7438      CCFFFF
 7439 5106 8985B4C9 		movl	%eax, -13900(%rbp)
 7439      FFFF
1505:main.c        ****     
1506:main.c        ****         	          			int x,y,z ;
1507:main.c        ****         	          			x = (red_data[7] == '1') ? 1 : 0  ;
 7440              		.loc 1 1507 0
 7441 510c 488B85C8 		movq	-13624(%rbp), %rax
 7441      CAFFFF
 7442 5113 4883C007 		addq	$7, %rax
 7443 5117 0FB600   		movzbl	(%rax), %eax
 7444 511a 3C31     		cmpb	$49, %al
 7445 511c 0F94C0   		sete	%al
 7446 511f 0FB6C0   		movzbl	%al, %eax
 7447 5122 8985B8C9 		movl	%eax, -13896(%rbp)
 7447      FFFF
1508:main.c        ****         	          			y = (red_data[6] == '1') ? 1 : 0  ;
 7448              		.loc 1 1508 0
 7449 5128 488B85C8 		movq	-13624(%rbp), %rax
 7449      CAFFFF
 7450 512f 4883C006 		addq	$6, %rax
 7451 5133 0FB600   		movzbl	(%rax), %eax
 7452 5136 3C31     		cmpb	$49, %al
 7453 5138 0F94C0   		sete	%al
 7454 513b 0FB6C0   		movzbl	%al, %eax
 7455 513e 8985BCC9 		movl	%eax, -13892(%rbp)
 7455      FFFF
1509:main.c        ****         	          			z = (red_data[5] == '1') ? 1 : 0  ;
 7456              		.loc 1 1509 0
 7457 5144 488B85C8 		movq	-13624(%rbp), %rax
 7457      CAFFFF
 7458 514b 4883C005 		addq	$5, %rax
 7459 514f 0FB600   		movzbl	(%rax), %eax
 7460 5152 3C31     		cmpb	$49, %al
 7461 5154 0F94C0   		sete	%al
 7462 5157 0FB6C0   		movzbl	%al, %eax
 7463 515a 8985C0C9 		movl	%eax, -13888(%rbp)
 7463      FFFF
1510:main.c        ****     
1511:main.c        ****         	          			int dir = x*4 + y*2 + z;
 7464              		.loc 1 1511 0
 7465 5160 8B85B8C9 		movl	-13896(%rbp), %eax
 7465      FFFF
 7466 5166 8D1400   		leal	(%rax,%rax), %edx
 7467 5169 8B85BCC9 		movl	-13892(%rbp), %eax
 7467      FFFF
 7468 516f 01D0     		addl	%edx, %eax
 7469 5171 8D1400   		leal	(%rax,%rax), %edx
 7470 5174 8B85C0C9 		movl	-13888(%rbp), %eax
 7470      FFFF
 7471 517a 01D0     		addl	%edx, %eax
 7472 517c 8985C4C9 		movl	%eax, -13884(%rbp)
 7472      FFFF
 7473              	.LBB71:
1512:main.c        ****     
1513:main.c        ****         	          			for (int count =0 ; count < rows ; count++){
 7474              		.loc 1 1513 0
 7475 5182 C7858CC9 		movl	$0, -13940(%rbp)
 7475      FFFF0000 
 7475      0000
 7476 518c E96C0100 		jmp	.L402
 7476      00
 7477              	.L405:
1514:main.c        ****     
1515:main.c        ****         	          				if (table[count][0] == x_c && table[count][1]==y_c && table[count][2]==dir) 
 7478              		.loc 1 1515 0
 7479 5191 8B858CC9 		movl	-13940(%rbp), %eax
 7479      FFFF
 7480 5197 4863D0   		movslq	%eax, %rdx
 7481 519a 4889D0   		movq	%rdx, %rax
 7482 519d 48C1E002 		salq	$2, %rax
 7483 51a1 4801D0   		addq	%rdx, %rax
 7484 51a4 48C1E002 		salq	$2, %rax
 7485 51a8 488D5DF0 		leaq	-16(%rbp), %rbx
 7486 51ac 4801D8   		addq	%rbx, %rax
 7487 51af 482D2032 		subq	$12832, %rax
 7487      0000
 7488 51b5 8B00     		movl	(%rax), %eax
 7489 51b7 3B85B0C9 		cmpl	-13904(%rbp), %eax
 7489      FFFF
 7490 51bd 0F853301 		jne	.L403
 7490      0000
 7491              		.loc 1 1515 0 is_stmt 0 discriminator 1
 7492 51c3 8B858CC9 		movl	-13940(%rbp), %eax
 7492      FFFF
 7493 51c9 4863D0   		movslq	%eax, %rdx
 7494 51cc 4889D0   		movq	%rdx, %rax
 7495 51cf 48C1E002 		salq	$2, %rax
 7496 51d3 4801D0   		addq	%rdx, %rax
 7497 51d6 48C1E002 		salq	$2, %rax
 7498 51da 488D5DF0 		leaq	-16(%rbp), %rbx
 7499 51de 4801D8   		addq	%rbx, %rax
 7500 51e1 482D1C32 		subq	$12828, %rax
 7500      0000
 7501 51e7 8B00     		movl	(%rax), %eax
 7502 51e9 3B85B4C9 		cmpl	-13900(%rbp), %eax
 7502      FFFF
 7503 51ef 0F850101 		jne	.L403
 7503      0000
 7504              		.loc 1 1515 0 discriminator 2
 7505 51f5 8B858CC9 		movl	-13940(%rbp), %eax
 7505      FFFF
 7506 51fb 4863D0   		movslq	%eax, %rdx
 7507 51fe 4889D0   		movq	%rdx, %rax
 7508 5201 48C1E002 		salq	$2, %rax
 7509 5205 4801D0   		addq	%rdx, %rax
 7510 5208 48C1E002 		salq	$2, %rax
 7511 520c 488D5DF0 		leaq	-16(%rbp), %rbx
 7512 5210 4801D8   		addq	%rbx, %rax
 7513 5213 482D1832 		subq	$12824, %rax
 7513      0000
 7514 5219 8B00     		movl	(%rax), %eax
 7515 521b 3B85C4C9 		cmpl	-13884(%rbp), %eax
 7515      FFFF
 7516 5221 0F85CF00 		jne	.L403
 7516      0000
1516:main.c        ****         	          					table[count][3] = red_data[3]-48;
 7517              		.loc 1 1516 0 is_stmt 1
 7518 5227 488B85C8 		movq	-13624(%rbp), %rax
 7518      CAFFFF
 7519 522e 4883C003 		addq	$3, %rax
 7520 5232 0FB600   		movzbl	(%rax), %eax
 7521 5235 0FBEC0   		movsbl	%al, %eax
 7522 5238 8D48D0   		leal	-48(%rax), %ecx
 7523 523b 8B858CC9 		movl	-13940(%rbp), %eax
 7523      FFFF
 7524 5241 4863D0   		movslq	%eax, %rdx
 7525 5244 4889D0   		movq	%rdx, %rax
 7526 5247 48C1E002 		salq	$2, %rax
 7527 524b 4801D0   		addq	%rdx, %rax
 7528 524e 48C1E002 		salq	$2, %rax
 7529 5252 488D5DF0 		leaq	-16(%rbp), %rbx
 7530 5256 4801D8   		addq	%rbx, %rax
 7531 5259 482D1432 		subq	$12820, %rax
 7531      0000
 7532 525f 8908     		movl	%ecx, (%rax)
1517:main.c        ****     
1518:main.c        ****        		          					x = (red_data[2] == '1') ? 1 : 0  ;
 7533              		.loc 1 1518 0
 7534 5261 488B85C8 		movq	-13624(%rbp), %rax
 7534      CAFFFF
 7535 5268 4883C002 		addq	$2, %rax
 7536 526c 0FB600   		movzbl	(%rax), %eax
 7537 526f 3C31     		cmpb	$49, %al
 7538 5271 0F94C0   		sete	%al
 7539 5274 0FB6C0   		movzbl	%al, %eax
 7540 5277 8985B8C9 		movl	%eax, -13896(%rbp)
 7540      FFFF
1519:main.c        ****        		          					y = (red_data[1] == '1') ? 1 : 0  ;
 7541              		.loc 1 1519 0
 7542 527d 488B85C8 		movq	-13624(%rbp), %rax
 7542      CAFFFF
 7543 5284 4883C001 		addq	$1, %rax
 7544 5288 0FB600   		movzbl	(%rax), %eax
 7545 528b 3C31     		cmpb	$49, %al
 7546 528d 0F94C0   		sete	%al
 7547 5290 0FB6C0   		movzbl	%al, %eax
 7548 5293 8985BCC9 		movl	%eax, -13892(%rbp)
 7548      FFFF
1520:main.c        ****        		          					z = (red_data[0] == '1') ? 1 : 0  ;
 7549              		.loc 1 1520 0
 7550 5299 488B85C8 		movq	-13624(%rbp), %rax
 7550      CAFFFF
 7551 52a0 0FB600   		movzbl	(%rax), %eax
 7552 52a3 3C31     		cmpb	$49, %al
 7553 52a5 0F94C0   		sete	%al
 7554 52a8 0FB6C0   		movzbl	%al, %eax
 7555 52ab 8985C0C9 		movl	%eax, -13888(%rbp)
 7555      FFFF
1521:main.c        ****     
1522:main.c        ****         	          					table[count][4] = x*4 + y*2 + z;
 7556              		.loc 1 1522 0
 7557 52b1 8B85B8C9 		movl	-13896(%rbp), %eax
 7557      FFFF
 7558 52b7 8D1400   		leal	(%rax,%rax), %edx
 7559 52ba 8B85BCC9 		movl	-13892(%rbp), %eax
 7559      FFFF
 7560 52c0 01D0     		addl	%edx, %eax
 7561 52c2 8D1400   		leal	(%rax,%rax), %edx
 7562 52c5 8B85C0C9 		movl	-13888(%rbp), %eax
 7562      FFFF
 7563 52cb 8D0C02   		leal	(%rdx,%rax), %ecx
 7564 52ce 8B858CC9 		movl	-13940(%rbp), %eax
 7564      FFFF
 7565 52d4 4863D0   		movslq	%eax, %rdx
 7566 52d7 4889D0   		movq	%rdx, %rax
 7567 52da 48C1E002 		salq	$2, %rax
 7568 52de 4801D0   		addq	%rdx, %rax
 7569 52e1 48C1E002 		salq	$2, %rax
 7570 52e5 488D5DF0 		leaq	-16(%rbp), %rbx
 7571 52e9 4801D8   		addq	%rbx, %rax
 7572 52ec 482D1032 		subq	$12816, %rax
 7572      0000
 7573 52f2 8908     		movl	%ecx, (%rax)
1523:main.c        ****         	          					break;
 7574              		.loc 1 1523 0
 7575 52f4 EB19     		jmp	.L404
 7576              	.L403:
1513:main.c        ****     
 7577              		.loc 1 1513 0 discriminator 2
 7578 52f6 83858CC9 		addl	$1, -13940(%rbp)
 7578      FFFF01
 7579              	.L402:
1513:main.c        ****     
 7580              		.loc 1 1513 0 is_stmt 0 discriminator 1
 7581 52fd 8B858CC9 		movl	-13940(%rbp), %eax
 7581      FFFF
 7582 5303 3B859CC9 		cmpl	-13924(%rbp), %eax
 7582      FFFF
 7583 5309 0F8C82FE 		jl	.L405
 7583      FFFF
 7584              	.L404:
 7585              	.LBE71:
1524:main.c        ****         	          				}
1525:main.c        ****         	          			}
1526:main.c        ****                                   printf(">>>> Changed the entry to the table\n");
 7586              		.loc 1 1526 0 is_stmt 1
 7587 530f BF000000 		movl	$.LC183, %edi
 7587      00
 7588 5314 E8000000 		call	puts
 7588      00
1527:main.c        ****         	          			// Save table
1528:main.c        ****         //	          			save_to_file(table,rows);
1529:main.c        ****     
1530:main.c        ****                                   printf(">>>> Saved the table to the file\n");
 7589              		.loc 1 1530 0
 7590 5319 BF000000 		movl	$.LC184, %edi
 7590      00
 7591 531e E8000000 		call	puts
 7591      00
 7592              	.L401:
 7593              	.LBE70:
 7594              	.LBE69:
1531:main.c        ****                               }
1532:main.c        ****                         }
1533:main.c        ****         				// Read data from UART port
1534:main.c        ****         			//	if (!(flag2)) {
1535:main.c        ****             		//		char* red_uart=read_one_byte_from_uart(0.05);
1536:main.c        ****                     //       // }                                                                 
1537:main.c        ****                     //        if(red_uart[0] == 'f' && !(flag2)) { 
1538:main.c        ****                     //          //  printf("Data for track update is not available at uart port \n"
1539:main.c        ****                     //        }
1540:main.c        ****                     //        else {
1541:main.c        ****                     //            printf(CG ">> Read data Successfully via UART\n" RST);
1542:main.c        ****                     //           	printf(">>>> Data Received is" CB "%s\n" RST, red_uart);
1543:main.c        ****                     //            flag2 = 1 ;
1544:main.c        ****                     //        }
1545:main.c        ****                     //    }
1546:main.c        ****                     if(flag1 == 1 ) break;// && flag2 == 1) break;
 7595              		.loc 1 1546 0
 7596 5323 83BD88C9 		cmpl	$1, -13944(%rbp)
 7596      FFFF01
 7597 532a 7453     		je	.L422
 7598              	.L400:
1489:main.c        ****                         //printf("%.9f sec\n",100*((double)(clock())-start)/CLOCKS_PER_SEC);  
 7599              		.loc 1 1489 0
 7600 532c E8000000 		call	clock
 7600      00
 7601 5331 660FEFC0 		pxor	%xmm0, %xmm0
 7602 5335 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 7602      C0
 7603 533a 660FEFC9 		pxor	%xmm1, %xmm1
 7604 533e F2480F2A 		cvtsi2sdq	-13632(%rbp), %xmm1
 7604      8DC0CAFF 
 7604      FF
 7605 5347 F20F5CC1 		subsd	%xmm1, %xmm0
 7606 534b F20F100D 		movsd	.LC185(%rip), %xmm1
 7606      00000000 
 7607 5353 F20F59C1 		mulsd	%xmm1, %xmm0
 7608 5357 F20F100D 		movsd	.LC4(%rip), %xmm1
 7608      00000000 
 7609 535f F20F5EC1 		divsd	%xmm1, %xmm0
 7610 5363 660F28C8 		movapd	%xmm0, %xmm1
 7611 5367 660FEFC0 		pxor	%xmm0, %xmm0
 7612 536b F20F2A85 		cvtsi2sd	-13908(%rbp), %xmm0
 7612      ACC9FFFF 
 7613 5373 660F2EC1 		ucomisd	%xmm1, %xmm0
 7614 5377 0F87E9FC 		ja	.L407
 7614      FFFF
 7615 537d EB01     		jmp	.L406
 7616              	.L422:
 7617              		.loc 1 1546 0
 7618 537f 90       		nop
 7619              	.L406:
1547:main.c        ****                     }
1548:main.c        **** 
1549:main.c        ****                     if(!(flag1)) printf (">> No data received from controller via FPGA\n"); 
 7620              		.loc 1 1549 0
 7621 5380 83BD88C9 		cmpl	$0, -13944(%rbp)
 7621      FFFF00
 7622 5387 750A     		jne	.L408
 7623              		.loc 1 1549 0 is_stmt 0 discriminator 1
 7624 5389 BF000000 		movl	$.LC186, %edi
 7624      00
 7625 538e E8000000 		call	puts
 7625      00
 7626              	.L408:
1550:main.c        ****                    // if(!(flag2)) printf (">> No data received from controller via UART\n"); 
1551:main.c        ****                     flag1 = 0 ;
 7627              		.loc 1 1551 0 is_stmt 1
 7628 5393 C78588C9 		movl	$0, -13944(%rbp)
 7628      FFFF0000 
 7628      0000
1552:main.c        ****                 	flag2 = 0 ;
 7629              		.loc 1 1552 0
 7630 539d C785A8C9 		movl	$0, -13912(%rbp)
 7630      FFFF0000 
 7630      0000
1553:main.c        ****                    	// TODO To write before this step
1554:main.c        ****                    	// Make the controller to wait?
1555:main.c        **** /*
1556:main.c        ****                     printf("Writing Data to UART\n");
1557:main.c        ****     	    		if (write_one_byte_to_uart() == 0){
1558:main.c        ****     	    			printf(CR ">> Writing to UART failed\n" RST);
1559:main.c        **** 					printf(CB "Starting the Entire Process\n" RST);
1560:main.c        ****     	    			goto host_label_2;
1561:main.c        ****     	    		}
1562:main.c        ****     	    		printf(CG ">> Write to UART Successful\n" RST);
1563:main.c        **** 
1564:main.c        ****     	    		printf(CB "Starting the Entire Process\n" RST);*/
1565:main.c        ****                     sleep(30);
 7631              		.loc 1 1565 0
 7632 53a7 BF1E0000 		movl	$30, %edi
 7632      00
 7633 53ac E8000000 		call	sleep
 7633      00
1566:main.c        ****                     goto host_label_2; 
 7634              		.loc 1 1566 0
 7635 53b1 E923F7FF 		jmp	.L380
 7635      FF
 7636              	.L378:
 7637              	.LBE68:
 7638              	.LBE62:
1567:main.c        ****     			}
1568:main.c        **** 
1569:main.c        **** 	}
1570:main.c        **** 
1571:main.c        **** //
1572:main.c        **** //    while(true){
1573:main.c        **** //		if ( isCommCapable ) {
1574:main.c        **** //		   uint8 isRunning;
1575:main.c        **** //			fStatus = flSelectConduit(handle, conduit, &error);
1576:main.c        **** //			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
1577:main.c        **** //			fStatus = flIsFPGARunning(handle, &isRunning, &error);
1578:main.c        **** //			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
1579:main.c        **** //            //printf("is commCapable\n"); 
1580:main.c        **** //            if ( isRunning ) {
1581:main.c        **** //               printf("is Running \n"); 
1582:main.c        **** //			   char* red_data=read_4byte_from_fpga(handle, error);
1583:main.c        **** //               printf("Red coordinates  %s\n", red_data); 
1584:main.c        **** //			   write_4byte_to_board(red_data, handle, error); 
1585:main.c        **** //               printf("wrote coordinates %s\n", red_data); 
1586:main.c        **** //			   //red_data=read_4byte_from_fpga(handle, error); 
1587:main.c        **** //               receive_ack(handle,error); 
1588:main.c        **** //               printf("received ack1 for corordinates\n"); 
1589:main.c        **** //			   send_ack(handle, error); 
1590:main.c        **** //               printf("sent ack2 from host to board \n"); 
1591:main.c        **** //    	       char* writeData = func(red_data, table, rows);
1592:main.c        **** //               printf("Data to be sent to board %s\n",writeData); 
1593:main.c        **** //			   write_4byte_to_board(writeData, handle, error); 
1594:main.c        **** //               printf("wrote first 32 bit of track data \n"); 
1595:main.c        **** //			   //read_4byte_from_fpga(handle, error); 
1596:main.c        **** //               receive_ack(handle,error); 
1597:main.c        **** //               printf("received ack1 \n"); 
1598:main.c        **** //			   write_4byte_to_board(&writeData[32], handle, error); 
1599:main.c        **** //               printf("wrote last 32 bit of track data\n"); 
1600:main.c        **** //			   //read_4byte_from_fpga(handle, error); 
1601:main.c        **** //               receive_ack(handle,error); 
1602:main.c        **** //               printf("received ack1\n"); 
1603:main.c        **** //			   send_ack(handle, error); 
1604:main.c        **** //               printf("sent ack2\n"); 
1605:main.c        **** //               printf(" completed one sequence of communication \n\n\n\n");
1606:main.c        **** //            }
1607:main.c        **** //        	}
1608:main.c        **** //    	}
1609:main.c        **** 	}
1610:main.c        **** 	if ( shellOpt->count ) {
 7639              		.loc 1 1610 0
 7640 53b6 488B8538 		movq	-13768(%rbp), %rax
 7640      CAFFFF
 7641 53bd 8B4060   		movl	96(%rax), %eax
 7642 53c0 85C0     		testl	%eax, %eax
 7643 53c2 0F84C401 		je	.L324
 7643      0000
1611:main.c        **** 		printf("\nEntering CommFPGA command-line mode:\n");
 7644              		.loc 1 1611 0
 7645 53c8 BF000000 		movl	$.LC187, %edi
 7645      00
 7646 53cd E8000000 		call	puts
 7646      00
1612:main.c        **** 		if ( isCommCapable ) {
 7647              		.loc 1 1612 0
 7648 53d2 80BD5AC9 		cmpb	$0, -13990(%rbp)
 7648      FFFF00
 7649 53d9 0F848201 		je	.L409
 7649      0000
 7650              	.LBB72:
1613:main.c        **** 		   uint8 isRunning;
1614:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 7651              		.loc 1 1614 0
 7652 53df 0FB68D58 		movzbl	-13992(%rbp), %ecx
 7652      C9FFFF
 7653 53e6 488B85C8 		movq	-13880(%rbp), %rax
 7653      C9FFFF
 7654 53ed 488D95D0 		leaq	-13872(%rbp), %rdx
 7654      C9FFFF
 7655 53f4 89CE     		movl	%ecx, %esi
 7656 53f6 4889C7   		movq	%rax, %rdi
 7657 53f9 E8000000 		call	flSelectConduit
 7657      00
 7658 53fe 898568C9 		movl	%eax, -13976(%rbp)
 7658      FFFF
1615:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7659              		.loc 1 1615 0
 7660 5404 83BD68C9 		cmpl	$0, -13976(%rbp)
 7660      FFFF00
 7661 540b 740F     		je	.L410
 7662              		.loc 1 1615 0 is_stmt 0 discriminator 1
 7663 540d C78564C9 		movl	$1, -13980(%rbp)
 7663      FFFF0100 
 7663      0000
 7664 5417 E9700100 		jmp	.L324
 7664      00
 7665              	.L410:
1616:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 7666              		.loc 1 1616 0 is_stmt 1
 7667 541c 488B85C8 		movq	-13880(%rbp), %rax
 7667      C9FFFF
 7668 5423 488D95D0 		leaq	-13872(%rbp), %rdx
 7668      C9FFFF
 7669 542a 488D8DE0 		leaq	-13856(%rbp), %rcx
 7669      C9FFFF
 7670 5431 4889CE   		movq	%rcx, %rsi
 7671 5434 4889C7   		movq	%rax, %rdi
 7672 5437 E8000000 		call	flIsFPGARunning
 7672      00
 7673 543c 898568C9 		movl	%eax, -13976(%rbp)
 7673      FFFF
1617:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7674              		.loc 1 1617 0
 7675 5442 83BD68C9 		cmpl	$0, -13976(%rbp)
 7675      FFFF00
 7676 5449 740F     		je	.L412
 7677              		.loc 1 1617 0 is_stmt 0 discriminator 1
 7678 544b C78564C9 		movl	$1, -13980(%rbp)
 7678      FFFF0100 
 7678      0000
 7679 5455 E9320100 		jmp	.L324
 7679      00
 7680              	.L412:
1618:main.c        **** 			if ( isRunning ) {
 7681              		.loc 1 1618 0 is_stmt 1
 7682 545a 0FB685E0 		movzbl	-13856(%rbp), %eax
 7682      C9FFFF
 7683 5461 84C0     		testb	%al, %al
 7684 5463 0F84CB00 		je	.L413
 7684      0000
 7685              	.L415:
1619:main.c        **** 				do {
1620:main.c        **** 					do {
1621:main.c        **** 						line = readline("> ");
 7686              		.loc 1 1621 0 discriminator 2
 7687 5469 BF000000 		movl	$.LC188, %edi
 7687      00
 7688 546e E8000000 		call	readline
 7688      00
 7689 5473 488985E8 		movq	%rax, -13848(%rbp)
 7689      C9FFFF
1622:main.c        **** 					} while ( line && !line[0] );
 7690              		.loc 1 1622 0 discriminator 2
 7691 547a 4883BDE8 		cmpq	$0, -13848(%rbp)
 7691      C9FFFF00 
 7692 5482 740E     		je	.L414
 7693              		.loc 1 1622 0 is_stmt 0 discriminator 1
 7694 5484 488B85E8 		movq	-13848(%rbp), %rax
 7694      C9FFFF
 7695 548b 0FB600   		movzbl	(%rax), %eax
 7696 548e 84C0     		testb	%al, %al
 7697 5490 74D7     		je	.L415
 7698              	.L414:
1623:main.c        **** 					if ( line && line[0] && line[0] != 'q' ) {
 7699              		.loc 1 1623 0 is_stmt 1
 7700 5492 4883BDE8 		cmpq	$0, -13848(%rbp)
 7700      C9FFFF00 
 7701 549a 747A     		je	.L416
 7702              		.loc 1 1623 0 is_stmt 0 discriminator 1
 7703 549c 488B85E8 		movq	-13848(%rbp), %rax
 7703      C9FFFF
 7704 54a3 0FB600   		movzbl	(%rax), %eax
 7705 54a6 84C0     		testb	%al, %al
 7706 54a8 746C     		je	.L416
 7707              		.loc 1 1623 0 discriminator 2
 7708 54aa 488B85E8 		movq	-13848(%rbp), %rax
 7708      C9FFFF
 7709 54b1 0FB600   		movzbl	(%rax), %eax
 7710 54b4 3C71     		cmpb	$113, %al
 7711 54b6 745E     		je	.L416
1624:main.c        **** 						add_history(line);
 7712              		.loc 1 1624 0 is_stmt 1
 7713 54b8 488B85E8 		movq	-13848(%rbp), %rax
 7713      C9FFFF
 7714 54bf 4889C7   		movq	%rax, %rdi
 7715 54c2 E8000000 		call	add_history
 7715      00
1625:main.c        **** 						pStatus = parseLine(handle, line, &error);
 7716              		.loc 1 1625 0
 7717 54c7 488B85C8 		movq	-13880(%rbp), %rax
 7717      C9FFFF
 7718 54ce 488D95D0 		leaq	-13872(%rbp), %rdx
 7718      C9FFFF
 7719 54d5 488B8DE8 		movq	-13848(%rbp), %rcx
 7719      C9FFFF
 7720 54dc 4889CE   		movq	%rcx, %rsi
 7721 54df 4889C7   		movq	%rax, %rdi
 7722 54e2 E859B6FF 		call	parseLine
 7722      FF
 7723 54e7 898598C9 		movl	%eax, -13928(%rbp)
 7723      FFFF
1626:main.c        **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 7724              		.loc 1 1626 0
 7725 54ed 83BD98C9 		cmpl	$0, -13928(%rbp)
 7725      FFFF00
 7726 54f4 7411     		je	.L417
 7727              		.loc 1 1626 0 is_stmt 0 discriminator 1
 7728 54f6 8B8598C9 		movl	-13928(%rbp), %eax
 7728      FFFF
 7729 54fc 898564C9 		movl	%eax, -13980(%rbp)
 7729      FFFF
 7730 5502 E9850000 		jmp	.L324
 7730      00
 7731              	.L417:
1627:main.c        **** 						free((void*)line);
 7732              		.loc 1 1627 0 is_stmt 1
 7733 5507 488B85E8 		movq	-13848(%rbp), %rax
 7733      C9FFFF
 7734 550e 4889C7   		movq	%rax, %rdi
 7735 5511 E8000000 		call	free
 7735      00
 7736              	.L416:
1628:main.c        **** 					}
1629:main.c        **** 				} while ( line && line[0] != 'q' );
 7737              		.loc 1 1629 0
 7738 5516 4883BDE8 		cmpq	$0, -13848(%rbp)
 7738      C9FFFF00 
 7739 551e 746C     		je	.L324
 7740              		.loc 1 1629 0 is_stmt 0 discriminator 1
 7741 5520 488B85E8 		movq	-13848(%rbp), %rax
 7741      C9FFFF
 7742 5527 0FB600   		movzbl	(%rax), %eax
 7743 552a 3C71     		cmpb	$113, %al
 7744 552c 0F8537FF 		jne	.L415
 7744      FFFF
 7745 5532 EB58     		jmp	.L324
 7746              	.L413:
1630:main.c        **** 			} else {
1631:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 7747              		.loc 1 1631 0 is_stmt 1
 7748 5534 488B0500 		movq	stderr(%rip), %rax
 7748      000000
 7749 553b 488B9588 		movq	-13688(%rbp), %rdx
 7749      CAFFFF
 7750 5542 BE000000 		movl	$.LC189, %esi
 7750      00
 7751 5547 4889C7   		movq	%rax, %rdi
 7752 554a B8000000 		movl	$0, %eax
 7752      00
 7753 554f E8000000 		call	fprintf
 7753      00
1632:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 7754              		.loc 1 1632 0
 7755 5554 C78564C9 		movl	$12, -13980(%rbp)
 7755      FFFF0C00 
 7755      0000
 7756 555e 90       		nop
 7757 555f EB2B     		jmp	.L324
 7758              	.L409:
 7759              	.LBE72:
1633:main.c        **** 			}
1634:main.c        **** 		} else {
1635:main.c        **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 7760              		.loc 1 1635 0
 7761 5561 488B0500 		movq	stderr(%rip), %rax
 7761      000000
 7762 5568 488B9588 		movq	-13688(%rbp), %rdx
 7762      CAFFFF
 7763 556f BE000000 		movl	$.LC190, %esi
 7763      00
 7764 5574 4889C7   		movq	%rax, %rdi
 7765 5577 B8000000 		movl	$0, %eax
 7765      00
 7766 557c E8000000 		call	fprintf
 7766      00
1636:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 7767              		.loc 1 1636 0
 7768 5581 C78564C9 		movl	$12, -13980(%rbp)
 7768      FFFF0C00 
 7768      0000
 7769 558b 90       		nop
 7770              	.L324:
1637:main.c        **** 		}
1638:main.c        **** 	}
1639:main.c        **** 
1640:main.c        **** cleanup:
1641:main.c        **** 	free((void*)line);
 7771              		.loc 1 1641 0
 7772 558c 488B85E8 		movq	-13848(%rbp), %rax
 7772      C9FFFF
 7773 5593 4889C7   		movq	%rax, %rdi
 7774 5596 E8000000 		call	free
 7774      00
1642:main.c        **** 	flClose(handle);
 7775              		.loc 1 1642 0
 7776 559b 488B85C8 		movq	-13880(%rbp), %rax
 7776      C9FFFF
 7777 55a2 4889C7   		movq	%rax, %rdi
 7778 55a5 E8000000 		call	flClose
 7778      00
1643:main.c        **** 	if ( error ) {
 7779              		.loc 1 1643 0
 7780 55aa 488B85D0 		movq	-13872(%rbp), %rax
 7780      C9FFFF
 7781 55b1 4885C0   		testq	%rax, %rax
 7782 55b4 742F     		je	.L419
1644:main.c        **** 		fprintf(stderr, "%s\n", error);
 7783              		.loc 1 1644 0
 7784 55b6 488B95D0 		movq	-13872(%rbp), %rdx
 7784      C9FFFF
 7785 55bd 488B0500 		movq	stderr(%rip), %rax
 7785      000000
 7786 55c4 BE000000 		movl	$.LC191, %esi
 7786      00
 7787 55c9 4889C7   		movq	%rax, %rdi
 7788 55cc B8000000 		movl	$0, %eax
 7788      00
 7789 55d1 E8000000 		call	fprintf
 7789      00
1645:main.c        **** 		flFreeError(error);
 7790              		.loc 1 1645 0
 7791 55d6 488B85D0 		movq	-13872(%rbp), %rax
 7791      C9FFFF
 7792 55dd 4889C7   		movq	%rax, %rdi
 7793 55e0 E8000000 		call	flFreeError
 7793      00
 7794              	.L419:
1646:main.c        **** 	}
1647:main.c        **** 	return retVal;
 7795              		.loc 1 1647 0
 7796 55e5 8B8564C9 		movl	-13980(%rbp), %eax
 7796      FFFF
1648:main.c        **** }
 7797              		.loc 1 1648 0
 7798 55eb 488B5DE8 		movq	-24(%rbp), %rbx
 7799 55ef 6448331C 		xorq	%fs:40, %rbx
 7799      25280000 
 7799      00
 7800 55f8 7405     		je	.L421
 7801 55fa E8000000 		call	__stack_chk_fail
 7801      00
 7802              	.L421:
 7803 55ff 4881C4B8 		addq	$14008, %rsp
 7803      360000
 7804 5606 5B       		popq	%rbx
 7805 5607 5D       		popq	%rbp
 7806              		.cfi_def_cfa 7, 8
 7807 5608 C3       		ret
 7808              		.cfi_endproc
 7809              	.LFE32:
 7811              		.section	.rodata
 7812              		.align 8
 7813              	.LC4:
 7814 15f8 00000000 		.long	0
 7815 15fc 80842E41 		.long	1093567616
 7816              		.align 8
 7817              	.LC5:
 7818 1600 00000000 		.long	0
 7819 1604 00408F40 		.long	1083129856
 7820              		.align 8
 7821              	.LC32:
 7822 1608 00000000 		.long	0
 7823 160c 00003041 		.long	1093664768
 7824              		.align 8
 7825              	.LC185:
 7826 1610 00000000 		.long	0
 7827 1614 00005940 		.long	1079574528
 7828              		.text
 7829              	.Letext0:
 7830              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 7831              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 7832              		.file 4 "/usr/include/stdio.h"
 7833              		.file 5 "/usr/include/libio.h"
 7834              		.file 6 "/home/rsudarsanan/The-X-Men/makestuff/common/makestuff.h"
 7835              		.file 7 "/home/rsudarsanan/The-X-Men/makestuff/libs/libfpgalink/libfpgalink.h"
 7836              		.file 8 "/home/rsudarsanan/The-X-Men/makestuff/libs/libbuffer/libbuffer.h"
 7837              		.file 9 "/usr/include/time.h"
 7838              		.file 10 "/home/rsudarsanan/The-X-Men/makestuff/libs/libargtable2/argtable2.h"
 7839              		.file 11 "/usr/include/x86_64-linux-gnu/bits/termios.h"
 7840              		.file 12 "/usr/include/x86_64-linux-gnu/bits/time.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccE7kzli.s:13     .data:0000000000000000 key
                            *COM*:0000000000000064 line1
     /tmp/ccE7kzli.s:25     .data:0000000000000008 ack1
     /tmp/ccE7kzli.s:36     .data:0000000000000010 ack2
     /tmp/ccE7kzli.s:46     .data:0000000000000018 portname
                            *COM*:0000000000000004 fd
     /tmp/ccE7kzli.s:50     .bss:0000000000000000 ptr
     /tmp/ccE7kzli.s:50     .bss:0000000000000008 enableBenchmarking
     /tmp/ccE7kzli.s:56     .text:0000000000000000 timediff
     /tmp/ccE7kzli.s:101    .text:000000000000004b save_to_file
     /tmp/ccE7kzli.s:193    .text:000000000000011b set_interface_attribs
     /tmp/ccE7kzli.s:328    .text:0000000000000254 set_blocking
     /tmp/ccE7kzli.s:407    .text:0000000000000309 read_one_byte_from_uart
     /tmp/ccE7kzli.s:560    .text:000000000000047e write_one_byte_to_uart
     /tmp/ccE7kzli.s:616    .text:00000000000004fe isHexDigit
     /tmp/ccE7kzli.s:665    .text:000000000000053c calcChecksum
     /tmp/ccE7kzli.s:705    .text:000000000000057d getHexNibble
     /tmp/ccE7kzli.s:777    .text:00000000000005f1 getHexByte
     /tmp/ccE7kzli.s:877    .rodata:0000000000000220 errMessages
     /tmp/ccE7kzli.s:895    .text:00000000000006a4 doRead
     /tmp/ccE7kzli.s:1143   .text:000000000000094c doWrite
                            *COM*:0000000000000001 out
     /tmp/ccE7kzli.s:1293   .text:0000000000000b40 parseLine
     /tmp/ccE7kzli.s:2536   .data:0000000000000020 nibbles
     /tmp/ccE7kzli.s:2568   .text:0000000000001bfc read_table
     /tmp/ccE7kzli.s:2673   .data:00000000000000d8 mm
     /tmp/ccE7kzli.s:2678   .text:0000000000001cdf boolToHex
     /tmp/ccE7kzli.s:2839   .text:0000000000001e3e get_coordinate
     /tmp/ccE7kzli.s:2941   .text:0000000000001f0f func
     /tmp/ccE7kzli.s:3415   .text:000000000000235b xor
     /tmp/ccE7kzli.s:3448   .text:0000000000002380 and
     /tmp/ccE7kzli.s:3483   .text:00000000000023a8 decrypt
     /tmp/ccE7kzli.s:4191   .text:0000000000002b73 encrypt
     /tmp/ccE7kzli.s:4718   .text:0000000000003132 read_byte
     /tmp/ccE7kzli.s:4785   .text:00000000000031a7 write_4byte_to_board
     /tmp/ccE7kzli.s:4954   .text:0000000000003324 read_4byte_from_fpga
     /tmp/ccE7kzli.s:5092   .text:0000000000003472 read_1byte_from_fpgalink
     /tmp/ccE7kzli.s:5261   .text:00000000000035ee receive_ack
     /tmp/ccE7kzli.s:5341   .text:0000000000003690 send_ack
     /tmp/ccE7kzli.s:5425   .text:0000000000003740 wtt
     /tmp/ccE7kzli.s:5778   .text:0000000000003756 main

UNDEFINED SYMBOLS
fopen
fprintf
fclose
memset
tcgetattr
__errno_location
printf
cfsetospeed
cfsetispeed
tcsetattr
__stack_chk_fail
strerror
malloc
read
__isoc99_scanf
write
flReadChannelAsyncSubmit
errPrefix
flReadChannelAsyncAwait
fwrite
fread
flWriteChannelAsync
flAwaitAsyncWrites
bufInitialise
strtoul
strncpy
free
gettimeofday
bufAppendConst
flReadChannel
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
fputc
_IO_getc
strcmp
sleep
usleep
open
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
arg_parse
stdout
arg_print_syntax
puts
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flLoadStandardFirmware
flSleep
putchar
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
flFlashStandardFirmware
flFlashCustomFirmware
flSaveFirmware
flResetToggle
flIsNeroCapable
flIsCommCapable
flMultiBitPortAccess
sprintf
jtagScanChain
flProgram
flIsFPGARunning
sigRegisterHandler
sigIsRaised
clock
readline
add_history
flClose
flFreeError
